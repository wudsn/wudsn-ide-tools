STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

	org $80

	.print 'ZPFREE: $0000..',*-1

fxptr	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

TMP	.ds 2

STACKORIGIN	.ds STACKWIDTH*4

	.print 'ZPFREE: ',*,'..',$ff

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

; -----------------------------------------------------------

	org CODEORIGIN

	STATICDATA

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

	ift DATAORIGIN+VARINITSIZE > $BFFF
	ert 'Invalid memory address range ',DATAORIGIN+VARINITSIZE
	els
	@fill #DATAORIGIN+VARINITSIZE #VARDATASIZE-VARINITSIZE #0
	eif

	ldx #$0f
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	mvx #$00 bp					; lo BP = 0, X = 0 !!!

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	ift l_00F2-*>3
	jmp l_00F2
	eif

; -----------------------------------------------------------

.local	SYSTEM						; UNIT

.local	HEXSTR						; FUNCTION | ASSEMBLER | REGISTER

; -----------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x DIGITS
	dex						; sub bx, 1

; -----------------------------------------------------------

; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
; as Pointer
	mva :STACKORIGIN,x VALUE
	mva :STACKORIGIN+STACKWIDTH,x VALUE+1
	mva :STACKORIGIN+STACKWIDTH*2,x VALUE+2
	mva :STACKORIGIN+STACKWIDTH*3,x VALUE+3
	dex						; sub bx, 1


; ---------------------  ASM Block 003  ---------------------

	txa:pha

	jsr @hexStr

	@move #@buf Result #33

	pla:tax


@exit

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif

; -----------------------------------------------------------

VALUE	= edx
DIGITS	= ecx
adr.RESULT	= DATAORIGIN+$000B
.var RESULT	= adr.RESULT .word

@VarData	= RESULT
@VarDataSize	= 33

	rts						; ret
.endl

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex						; sub bx, 1


; ---------------------  ASM Block 004  ---------------------

	ldy #0
	mva (edx),y Result


@exit

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif

; -----------------------------------------------------------

A	= edx
RESULT	= DATAORIGIN+$002C

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	DPEEK						; FUNCTION | ASSEMBLER | REGISTER

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex						; sub bx, 1


; ---------------------  ASM Block 005  ---------------------

	ldy #0
	mva (edx),y Result
	iny
	mva (edx),y Result+1


@exit

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif

; -----------------------------------------------------------

A	= edx
RESULT	= DATAORIGIN+$002D

@VarData	= RESULT
@VarDataSize	= 2

	rts						; ret
.endl

; -----------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $0004
MGTIA	= $0000
MVBXE	= $0080
WINDOW	= $0010
NARROW	= $0020
VBXE_XDLADR	= $0000
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $0000
IVBL	= $0001
CH_DELCHR	= $00FE
CH_ENTER	= $009B
CH_ESC	= $001B
CH_CURS_UP	= $001C
CH_CURS_DOWN	= $001D
CH_CURS_LEFT	= $001E
CH_CURS_RIGHT	= $001F
CH_TAB	= $007F
CH_EOL	= $009B
CH_CLR	= $007D
CH_BELL	= $00FD
CH_DEL	= $007E
CH_DELLINE	= $009C
CH_INSLINE	= $009D
COLOR_BLACK	= $0000
COLOR_WHITE	= $000E
COLOR_RED	= $0032
COLOR_CYAN	= $0096
COLOR_VIOLET	= $0068
COLOR_GREEN	= $00C4
COLOR_BLUE	= $0074
COLOR_YELLOW	= $00EE
COLOR_ORANGE	= $004A
COLOR_BROWN	= $00E4
COLOR_LIGHTRED	= $003C
COLOR_GRAY1	= $0004
COLOR_GRAY2	= $0006
COLOR_GRAY3	= $000A
COLOR_LIGHTGREEN	= $00CC
COLOR_LIGHTBLUE	= $007C
FMOPENREAD	= $0004
FMOPENWRITE	= $0008
FMOPENAPPEND	= $0009
FMOPENREADWRITE	= $000C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
FILEMODE	= DATAORIGIN+$0005
SCREENMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; -----------------------------------------------------------

.local	XBIOS						; UNIT

.local	XBIOSCHECK					; FUNCTION

	ift l_0131-*>3
	jmp l_0131
	eif

; IfThenEpilog
l_0131

; optimize OK (XBIOS), line = 413

	lda $0800
	sta CS
	lda $0800+1
	sta CS+1

; optimize OK (XBIOS), line = 414

	ldy #1
	lda CS
	cmp #$78
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda CS+1
	cmp #$42
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	.ifdef IFTMP_25
	sta IFTMP_25
	eif
	bne *+5
	jmp l_0152

; optimize OK (XBIOS), line = 415

	lda $0802
	sta RESULT

; IfThenEpilog
l_0152

; Restore conditional expression
	lda IFTMP_25

; else condition
	beq *+5						; je
	jmp l_0161

; optimize OK (XBIOS), line = 416

	mva #$00 RESULT

; IfThenEpilog
l_0161

@exit

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif

; -----------------------------------------------------------

RESULT	= DATAORIGIN+$0035
CS	= DATAORIGIN+$0036
IFTMP_25	= DATAORIGIN+$0038

@VarData	= RESULT
@VarDataSize	= 4

	rts						; ret
.endl

.local	XBIOSLOADFILE					; PROCEDURE | ASSEMBLER

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x FILENAME
	mva :STACKORIGIN+STACKWIDTH,x FILENAME+1
	dex						; sub bx, 1


; ---------------------  ASM Block 047  ---------------------


    txa:pha
    mva #0 xBiosIOresult
    sta xBiosIOerror
    ldy filename
    ldx filename+1
    iny
    sne
    inx
    jsr xBIOS_LOAD_FILE
    bcc @+
    stx xBiosIOerror
    mva #1 xBiosIOresult 
@   pla:tax


; -----------------------------------------------------------

FILENAME	= DATAORIGIN+$0039

@VarData	= FILENAME
@VarDataSize	= 2


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	XBIOSOPENFILE					; PROCEDURE | ASSEMBLER

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x FILENAME
	mva :STACKORIGIN+STACKWIDTH,x FILENAME+1
	dex						; sub bx, 1


; ---------------------  ASM Block 048  ---------------------


    txa:pha
    mva #0 xBiosIOresult
    sta xBiosIOerror
    ldy filename
    ldx filename+1
    iny
    sne
    inx
    jsr xBIOS_OPEN_FILE
    bcc @+
    stx xBiosIOerror
    mva #1 xBiosIOresult 
@   pla:tax


; -----------------------------------------------------------

FILENAME	= DATAORIGIN+$003B

@VarData	= FILENAME
@VarDataSize	= 2


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	XBIOSLOADDATA					; PROCEDURE | ASSEMBLER

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x DEST
	mva :STACKORIGIN+STACKWIDTH,x DEST+1
	dex						; sub bx, 1


; ---------------------  ASM Block 049  ---------------------


    txa:pha
    mva #0 xBiosIOresult
    sta xBiosIOerror
    ldy dest
    ldx dest+1
    jsr xBIOS_LOAD_DATA
    bcc @+
    stx xBiosIOerror
    mva #1 xBiosIOresult 
@   pla:tax


; -----------------------------------------------------------

DEST	= DATAORIGIN+$003D

@VarData	= DEST
@VarDataSize	= 2


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	XBIOSOPENDIR					; PROCEDURE | ASSEMBLER

; -----------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x FILENAME
	mva :STACKORIGIN+STACKWIDTH,x FILENAME+1
	dex						; sub bx, 1


; ---------------------  ASM Block 060  ---------------------


    txa:pha
    mva #0 xBiosIOresult
    sta xBiosIOerror
    ldy filename
    ldx filename+1
    iny
    sne
    inx
    jsr xBIOS_OPEN_DIR 
    bcc @+
    stx xBiosIOerror
    mva #1 xBiosIOresult 
@   pla:tax


; -----------------------------------------------------------

FILENAME	= DATAORIGIN+$003F

@VarData	= FILENAME
@VarDataSize	= 2


@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

; -----------------------------------------------------------

XBIOSIORESULT	= DATAORIGIN+$002F
XBIOSIOERROR	= DATAORIGIN+$0030
XBIOSDIRENTRYINDEX	= DATAORIGIN+$0031
XBIOSDIRENTRYSTATUS	= DATAORIGIN+$0032
XBIOSDIRENTRYSECTOR	= DATAORIGIN+$0033
XBIOS_ADDRESS	= $0800
XBIOS_VERSION	= $0802
XBIOS_RENAME_ENTRY	= $0803
XBIOS_LOAD_FILE	= $0806
XBIOS_OPEN_FILE	= $0809
XBIOS_LOAD_DATA	= $080C
XBIOS_WRITE_DATA	= $080F
XBIOS_OPEN_CURRENT_DIR	= $0812
XBIOS_GET_BYTE	= $0815
XBIOS_PUT_BYTE	= $0818
XBIOS_FLUSH_BUFFER	= $081B
XBIOS_SET_LENGTH	= $081E
XBIOS_SET_INIAD	= $0821
XBIOS_SET_FILE_OFFSET	= $0824
XBIOS_SET_RUNAD	= $0827
XBIOS_SET_DEFAULT_DEVICE	= $082A
XBIOS_OPEN_DIR	= $082D
XBIOS_LOAD_BINARY_FILE	= $0830
XBIOS_OPEN_DEFAULT_DIR	= $0833
XBIOS_SET_DEVICE	= $0836
XBIOS_RELOCATE_BUFFER	= $0839
XBIOS_GET_ENTRY	= $083C
XBIOS_OPEN_DEFAULT_FILE	= $083F
XBIOS_READ_SECTOR	= $0842
XBIOS_FIND_ENTRY	= $0845
XBIOS_SET_BUFFER_SIZE	= $0848
XDIRSIZE	= $0BE5
XSPEED	= $0BE6
XHSPEED	= $0BE7
XIRQEN	= $0BE8
XAUDCTL	= $0BE9
XFILE	= $0BEA
XDIR	= $0BEC
XIOV	= $0BEE
XBUFFERH	= $0BF0
XBUFSIZE	= $0BF1
XDAUX3	= $0BF2
XSEGMENT	= $0BF3
XNOTE	= $0BF5
XNOTEH	= $0BF7
XDEVICE	= $0BFC
XDCMD	= $0BFD
XDAUX1	= $0BFE
XDAUX2	= $0BFF

.endl							; UNIT XBIOS

; -----------------------------------------------------------

.local	ATARI						; UNIT

; -----------------------------------------------------------

RTCLOK	= $0012
ATRACT	= $004D
LMARGIN	= $0052
RMARGIN	= $0053
ROWCRS	= $0054
COLCRS	= $0055
DINDEX	= $0057
SAVMSC	= $0058
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; -----------------------------------------------------------

.local	CRT						; UNIT

.local	CLRSCR						; PROCEDURE

	ift l_0181-*>3
	jmp l_0181
	eif

; IfThenEpilog
l_0181

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Value $0000007D (125)

	inx						; add bx, 1
	mva #$7D :STACKORIGIN,x

	@printCHAR
	dex						; sub bx, 1

@exit
	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif
	rts						; ret
.endl

.local	READKEY						; FUNCTION | ASSEMBLER


; ---------------------  ASM Block 070  ---------------------

	txa:pha

	@GetKey

	sta Result

	pla:tax


@exit

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif

; -----------------------------------------------------------

RESULT	= DATAORIGIN+$0042

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	KEYPRESSED					; FUNCTION | ASSEMBLER


; ---------------------  ASM Block 074  ---------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	beq skp
	iny		; true

;	sty kbcodes

skp	sty Result


@exit

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	@FreeMem #@VarData #@VarDataSize
	eif

; -----------------------------------------------------------

RESULT	= DATAORIGIN+$0043

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; -----------------------------------------------------------

TEXTATTR	= DATAORIGIN+$0041
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $0000
CN_SELECT_OPTION	= $0001
CN_START_OPTION	= $0002
CN_OPTION	= $0003
CN_START_SELECT	= $0004
CN_SELECT	= $0005
CN_START	= $0006
CN_NONE	= $0007
BW40	= $0000
CO40	= $0001
BW80	= $0002
CO80	= $0003
MONO	= $0007
C40	= $0001
C80	= $0003
BLACK	= $0000
BLUE	= $0001
GREEN	= $0002
CYAN	= $0003
RED	= $0004
MAGENTA	= $0005
BROWN	= $0006
LIGHTGRAY	= $0007
DARKGRAY	= $0008
LIGHTBLUE	= $0009
LIGHTGREEN	= $000A
LIGHTCYAN	= $000B
LIGHTRED	= $000C
LIGHTMAGENTA	= $000D
YELLOW	= $000E
WHITE	= $000F
BLINK	= $0080

.endl							; UNIT CRT

; IfThenEpilog
l_00F2

; optimize FAIL ('CRT.KEYPRESSED', subdir.pas), line = 9
	jsr CRT.KEYPRESSED
	.ifdef IFTMP_29
	lda :STACKORIGIN,x
	sta IFTMP_29
	eif
	dex
	lda :STACKORIGIN+1,x
	bne *+5
	jmp l_019A

	jsr CRT.READKEY					; call Entry

	dex						; sub bx, 1

; IfThenEpilog
l_019A

; optimize FAIL ('XBIOS.XBIOSCHECK', subdir.pas), line = 11
	jsr XBIOS.XBIOSCHECK
	inx
	mva #$00 :STACKORIGIN,x
	ldy #1
	lda :STACKORIGIN-1,x
	cmp :STACKORIGIN,x
	beq @+
	dey
@
	sty :STACKORIGIN-1,x
	dex
	.ifdef IFTMP_30
	lda :STACKORIGIN,x
	sta IFTMP_30
	eif
	dex
	lda :STACKORIGIN+1,x
	bne *+5
	jmp l_01AE

	@printSTRING #CODEORIGIN+$0000

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Value $00000800 (2048)

	inx						; add bx, 1
	mva #$00 :STACKORIGIN,x
	mva #$08 :STACKORIGIN+STACKWIDTH,x
	jsr @expandToCARD.WORD

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Value $00000004 (4)

	inx						; add bx, 1
	mva #$04 :STACKORIGIN,x

	jsr SYSTEM.HEXSTR				; call Entry


	lda :STACKORIGIN,x
	ldy :STACKORIGIN+STACKWIDTH,x
	jsr @printSTRING
	dex						; sub bx, 1
	@printEOL

	jsr CRT.READKEY					; call Entry

	dex						; sub bx, 1

	jmp @exit					; exit

; IfThenEpilog
l_01AE

	@printSTRING #CODEORIGIN+$001F
	@printEOL
	@move #CODEORIGIN+$0042 #adr.FILENAME #12

; optimize FAIL ('XBIOS.XBIOSOPENDIR', subdir.pas), line = 19
	inx
	mva FILENAME :STACKORIGIN,x
	mva FILENAME+1 :STACKORIGIN+STACKWIDTH,x
	jsr XBIOS.XBIOSOPENDIR

; optimize OK (subdir.pas), line = 20

	ldy #1
	lda XBIOS.XBIOSIORESULT
	bne @+
	dey
@
	.ifdef IFTMP_31
	sty IFTMP_31
	eif
	tya
	bne *+5
	jmp l_01D4

	@printSTRING #CODEORIGIN+$004F

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva XBIOS.XBIOSIOERROR :STACKORIGIN,x

	jsr @printBYTE
	dex						; sub bx, 1
	@printEOL

; IfThenEpilog
l_01D4
	@move #CODEORIGIN+$005A #adr.FILENAME #12

	@printSTRING #CODEORIGIN+$0067
	@printEOL

; optimize FAIL ('XBIOS.XBIOSOPENFILE', subdir.pas), line = 24
	inx
	mva FILENAME :STACKORIGIN,x
	mva FILENAME+1 :STACKORIGIN+STACKWIDTH,x
	jsr XBIOS.XBIOSOPENFILE

; optimize OK (subdir.pas), line = 25

	ldy #1
	lda XBIOS.XBIOSIORESULT
	bne @+
	dey
@
	.ifdef IFTMP_32
	sty IFTMP_32
	eif
	tya
	bne *+5
	jmp l_01FA

	@printSTRING #CODEORIGIN+$004F

; -----------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva XBIOS.XBIOSIOERROR :STACKORIGIN,x

	jsr @printBYTE
	dex						; sub bx, 1
	@printEOL

; IfThenEpilog
l_01FA

	@printSTRING #CODEORIGIN+$0085
	@printEOL

; optimize FAIL ('XBIOS.XBIOSLOADDATA', subdir.pas), line = 27
	inx
	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda TEXT
	add :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda TEXT+1
	adc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	jsr XBIOS.XBIOSLOADDATA

; optimize OK (subdir.pas), line = 28

	ldy #$00
	mva XBIOS.XNOTE adr.TEXT,y

	@printSTRING #CODEORIGIN+$0093
	@printEOL

; -----------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx						; add bx, 1
	mva TEXT :STACKORIGIN,x
	mva TEXT+1 :STACKORIGIN+STACKWIDTH,x

	lda :STACKORIGIN,x
	ldy :STACKORIGIN+STACKWIDTH,x
	jsr @printSTRING
	dex						; sub bx, 1
	@printEOL
	@printEOL

	@printSTRING #CODEORIGIN+$00A3
	@printEOL

	@printSTRING #CODEORIGIN+$00BD
	@printEOL

	jsr CRT.READKEY					; call Entry

	dex						; sub bx, 1

; optimize FAIL ('CRT.CLRSCR', subdir.pas), line = 35
	jsr CRT.CLRSCR
	@move #CODEORIGIN+$00DE #adr.FILENAME #12

; optimize FAIL ('XBIOS.XBIOSLOADFILE', subdir.pas), line = 37
	inx
	mva FILENAME :STACKORIGIN,x
	mva FILENAME+1 :STACKORIGIN+STACKWIDTH,x
	jsr XBIOS.XBIOSLOADFILE

; -----------------------------------------------------------

adr.TEXT	= DATAORIGIN+$0044
.var TEXT	= adr.TEXT .word
adr.FILENAME	= DATAORIGIN+$0144
.var FILENAME	= adr.FILENAME .word

@exit

@halt	ldx #0
	txs

	rts

IOCB@COPY	:16 brk

.local	@DEFINES
ATARI
.endl

.endl

; -----------------------------------------------------------

	icl 'cpu6502.asm'

; -----------------------------------------------------------

.macro UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.XBIOS.@UnitInit
	jsr MAIN.XBIOS.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif
.endm

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.XBIOS) > 0
	.print 'XBIOS: ',MAIN.XBIOS,'..',MAIN.XBIOS+.SIZEOF(MAIN.XBIOS)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

DATAORIGIN

.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 357

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; -----------------------------------------------------------

.macro	STATICDATA
.by  $1D $78 $42 $69 $6F $73 $20 $6E  $6F $74 $20 $66 $6F $75 $6E $64  $20 $61 $74 $20 $61 $64 $64 $72
.by  $65 $73 $73 $3A $20 $24 $00 $21  $54 $72 $79 $69 $6E $67 $20 $74  $6F $20 $65 $6E $74 $65 $72 $20
.by  $64 $69 $72 $65 $63 $74 $6F $72  $79 $20 $5F $53 $55 $42 $44 $49  $52 $00 $0B $5F $53 $55 $42 $44
.by  $49 $52 $20 $20 $20 $20 $00 $09  $49 $4F $65 $72 $72 $6F $72 $3A  $20 $00 $0B $54 $45 $53 $54 $20
.by  $20 $20 $20 $54 $58 $54 $00 $1C  $54 $72 $79 $69 $6E $67 $20 $74  $6F $20 $6F $70 $65 $6E $20 $54
.by  $45 $53 $54 $2E $54 $58 $54 $20  $66 $69 $6C $65 $00 $0C $52 $65  $61 $64 $69 $6E $67 $20 $64 $61
.by  $74 $61 $00 $0E $46 $69 $6C $65  $20 $63 $6F $6E $74 $65 $6E $74  $73 $3A $00 $18 $50 $72 $65 $73
.by  $73 $20 $61 $6E $79 $20 $6B $65  $79 $20 $74 $6F $20 $6C $61 $75  $6E $63 $68 $20 $00 $1F $70 $72
.by  $6F $67 $72 $61 $6D $20 $6C $6F  $63 $61 $74 $65 $64 $20 $69 $6E  $20 $73 $75 $62 $64 $69 $72 $65
.by  $63 $74 $6F $72 $79 $00 $0B $53  $55 $42 $46 $49 $4C $45 $20 $58  $45 $58 $00
.endm

	end
