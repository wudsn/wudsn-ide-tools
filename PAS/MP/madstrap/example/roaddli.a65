; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.4 [2020/04/23] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $3000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

ztmp
ztmp8	.ds 1
ztmp9	.ds 1
TMP
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1

FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCASM 'dlist.asm' DISPLAY_LIST_ADDRESS 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502.asm'

.print 'ZPAGE: ',fxptr,'..',zpend

.print 'RTLIB: ',RTLIB,'..',*

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #0
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #0
	eif

	mwa #PROGRAMSTACK psptr

	ldx #$0f					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0007

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x VALUE
	mva :STACKORIGIN+STACKWIDTH,x VALUE+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex						; sub bx, 1

; ---------------------  ASM Block 022  ---------------------

	ldy #0
	mva value (edx),y
	iny
	mva value+1 (edx),y


; ------------------------------------------------------------

A	= edx
VALUE	= ecx
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	PAUSE_005A					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 039  ---------------------

	lda:cmp:req :rtclok+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	READKEY						; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 049  ---------------------

	txa:pha

	@GetKey

	sta Result

	pla:tax

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000C

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	FASTGRAPH					; UNIT

.local	SETCOLOR					; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x COLOR
	dex						; sub bx, 1

; ---------------------  ASM Block 062  ---------------------

	sta GetColor

	jmp gr8
mode	equ *-2

gr15	lda color
	and #3
	tay

	jmp toend

gr9	txa:pha

	lda color
	and #$0f
	sta c9+1
	:4 asl @
	sta c9

	ldy #0
lp	tya
	and #1
	tax
	lda c9_,x
	sta adr.color_bits,y
	lda c9,x
	sta adr.color_bits+$100,y
	iny
	bne lp

	pla:tax

	ldy color
	beq toend

	ldy #1
	jmp toend

c9	dta 0,0
c9_	dta $0f, $f0

colorHi	dta h(adr.color_bits, adr.color_bits+$100, adr.color_bits+$200, adr.color_bits+$300)

gr8	lda color
	and #1
	tay

toend
	.ifdef fLine
	lda colorHi,y
	sta fLine.urr_color+2
	sta fLine.uur_color+2
	sta fLine.drr_color+2
	sta fLine.ddr_color+2

	lda #$1d		; ora *,x
	cpy #0
	sne
	lda #$3d		; and *,x

	sta fLine.urr_color
	sta fLine.uur_color
	sta fLine.drr_color
	sta fLine.ddr_color
	.endif

	.ifdef PutPixel
	mva colorHi,y PutPixel.acol+2

	lda #$1d		; ora *,x
	cpy #0
	sne
	lda #$3d		; and *,x

	sta PutPixel.acol
	.endif


; ------------------------------------------------------------

COLOR	= DATAORIGIN+$0729

@VarData	= COLOR
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	FLINE						; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x Y1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x X1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x Y0
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x X0
	dex						; sub bx, 1

; ---------------------  ASM Block 066  ---------------------


dx	= ztmp
dy	= ztmp+1
tmp	= ztmp+2
todo	= ztmp+3

PIXEL	.MACRO
	ldy adr.div4,x
	lda (:bp2),y
	.def :1 = *
	ora adr.color_bits,x
	sta (:bp2),y
	.ENDM

PREPARE	.MACRO
	sta todo
	inc todo
	lsr @
	sta tmp
	.ENDM

; ==========================================================================
drawto
	txa:pha

; check if going right (x1 <= x0)
	ldx x1
	cpx x0
	bcs right
; going left, swap points
	lda x0
	stx x0
	sta x1
	tax
	ldy y0
	lda y1
	sty y1
	sta y0
right
; compute X delta
	txa
	sec
	sbc x0
	sta dx
; set initial line address
	ldy y0
	lda adr.lineLo,y
	add #0
lfb	equ *-1
	sta :bp2
	lda adr.lineHi,y
	adc #0
hfb	equ *-1
	sta :bp2+1

; remember x0 in X
	ldx x0
; check if going up or down
	cpy y1
	jcc down

; ----------------------------- UP ----------------------------------
up
; compute Y delta
	lda y0
	sec
	sbc y1
	sta dy
; check if UP UP RIGHT or UP RIGHT RIGHT
	cmp dx
	bcs up_up_right
up_right_right
	lda dx
	PREPARE urr_color
urr_loop
	PIXEL urr_color
	inx			; go 1 pixel right
	lda tmp
	sec
	sbc dy
	sta tmp
	bcs urr_skip
	adc dx
	sta tmp
	lda :bp2		; go 1 line up
	sec
	sbc #0
w0	equ *-1
	sta :bp2
	bcs *+4
	dec :bp2+1
urr_skip
	dec todo
	bne urr_loop

stop_	jmp stop

up_up_right
	lda dy
	PREPARE uur_color
uur_loop
	PIXEL uur_color
	lda :bp2		; go 1 line up
	sec
	sbc #0
w1	equ *-1
	sta :bp2
	bcs *+4
	dec :bp2+1
	lda tmp
	sec
	sbc dx
	bcs uur_skip
	adc dy
	inx			; go 1 pixel right
uur_skip
	sta tmp
	dec todo
	bne uur_loop

	jmp stop

; ----------------------------- DOWN ----------------------------------
down
; compute Y delta
	lda y1
	sec
	sbc y0
	sta dy
; check if DOWN DOWN RIGHT or DOWN RIGHT RIGHT
	cmp dx
	bcs down_down_right
down_right_right
	lda dx
	PREPARE drr_color
drr_loop
	PIXEL drr_color
	inx			; go 1 pixel right
	lda tmp
	sec
	sbc dy
	sta tmp
	bcs drr_skip
	adc dx
	sta tmp
	lda :bp2		; go 1 line down
	clc
	adc #0
w2	equ *-1
	sta :bp2
	bcc *+4
	inc :bp2+1
drr_skip
	dec todo
	bne drr_loop

	jmp stop

down_down_right
	lda dy
	PREPARE ddr_color
ddr_loop
	PIXEL ddr_color
	lda :bp2		; go 1 line down
	clc
	adc #0
w3	equ *-1
	sta :bp2
	bcc *+4
	inc :bp2+1
	lda tmp
	sec
	sbc dx
	bcs ddr_skip
	adc dy
	inx			; go 1 pixel right
ddr_skip
	sta tmp
	dec todo
	bne ddr_loop

stop	pla:tax


; ------------------------------------------------------------

X0	= DATAORIGIN+$072A
Y0	= DATAORIGIN+$072B
X1	= DATAORIGIN+$072C
Y1	= DATAORIGIN+$072D

@VarData	= X0
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	FRAMEBUFFER_0093				; PROCEDURE | ASSEMBLER | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x A
	mva :STACKORIGIN+STACKWIDTH,x A+1
	dex						; sub bx, 1

; ---------------------  ASM Block 069  ---------------------

	lda a
	ldy a+1
	
	sta VideoRam
	sty VideoRam+1

	.ifdef PutPixel
	sta PutPixel.lfb
	sty PutPixel.hfb
	eif

	.ifdef GetPixel
	sta GetPixel.lfb
	sty GetPixel.hfb
	eif

	.ifdef HLine
	sta HLine.lfb
	sty HLine.hfb
	eif

	.ifdef fLine
	sta fLine.lfb
	sty fLine.hfb
	eif


; ------------------------------------------------------------

A	= DATAORIGIN+$072E

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

.local	INITGRAPH_0097					; PROCEDURE | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x MODE
	dex						; sub bx, 1

; optimize OK (FASTGRAPH), line = 967

	mva MODE SYSTEM.GRAPHMODE

; optimize OK (FASTGRAPH), line = 969

	lda MODE
	and #$0F
	sta WIDTH

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva WIDTH :STACKORIGIN,x

; GenerateCaseProlog
	dex						; sub bx, 1

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #6
	beq @+

; GenerateCaseEqualityCheck
	lda :STACKORIGIN+1,x
	cmp #8
	jne l_00BB
@

; ---------------------  ASM Block 070  ---------------------

	.ifdef SetColor
	mwa #SetColor.gr8 SetColor.mode
	.endif

	.ifdef PutPixel
	mwa #PutPixel.gr8 PutPixel.mode
	.endif
	
	.ifdef GetPixel
	mwa #GetPixel.gr8 GetPixel.mode
	.endif


; GenerateCaseStatementEpilog
	jmp a_0002
l_00BB

	lda :STACKORIGIN+1,x
	clc						; clear carry for add
	adc #$FF-11					; make m = $FF
	adc #11-9+1					; carry set if in range n to m
	jcc l_00C4
@

; ---------------------  ASM Block 071  ---------------------

	.ifdef SetColor
	mwa #SetColor.gr9 SetColor.mode
	.endif

	.ifdef PutPixel
	mwa #PutPixel.gr9 PutPixel.mode
	.endif
	
	.ifdef GetPixel
	mwa #GetPixel.gr9 GetPixel.mode
	.endif

	.ifdef fLine
	mva #$ea _nop
	.endif


; GenerateCaseStatementEpilog
	jmp a_0002
l_00C4

; ---------------------  ASM Block 072  ---------------------

	.ifdef SetColor
	mwa #SetColor.gr15 SetColor.mode
	.endif

	.ifdef PutPixel
	mwa #PutPixel.gr15 PutPixel.mode
	.endif
	
	.ifdef GetPixel
	mwa #GetPixel.gr15 GetPixel.mode
	.endif		


; GenerateCaseEpilog
a_0002

; ---------------------  ASM Block 073  ---------------------

	txa:pha

	lda mode
	and #$0f
	tay

	ldx #$60	; 6*16
	lda mode	; %00010000 with text window
	and #$10
	eor #$10
	ora #2		; read

	.nowarn @graphics


; Fox/TQA

dindex	equ $57
tmccn	equ $ee7d
tmrcn	equ $ee8d

	ldx dindex
	lda tmccn,x
	ldy tmrcn,x
	ldx #0
	cmp #<320
	sne:inx

; X:A = horizontal resolution
; Y = vertical resolution

	sta MAIN.SYSTEM.ScreenWidth
	stx MAIN.SYSTEM.ScreenWidth+1
	
	sub #1
	sta WIN_RIGHT
	txa
	sbc #0
	sta WIN_RIGHT+1
	
	sty MAIN.SYSTEM.ScreenHeight
	lda #0
	sta MAIN.SYSTEM.ScreenHeight+1
	
	sta WIN_LEFT
	sta WIN_LEFT+1
	sta WIN_TOP
	sta WIN_TOP+1

	sta WIN_BOTTOM+1	
	dey
	sty WIN_BOTTOM


tlshc	equ $ee6d

	ldx dindex
	ldy tlshc,x
	lda #5
shift	asl @
	dey
	bne shift

	sta width

	.ifdef fLine
;	lda width
	sta fLine.w0
	sta fLine.w1
	sta fLine.w2
	sta fLine.w3
	.endif


; ---	init_tabs

	ldy #0
	sty :bp2
	sty :bp2+1
it1
	lda :bp2+1
	sta adr.lineHi,y
	lda :bp2
	sta adr.lineLo,y
	clc
	adc width
	sta :bp2
	scc
	inc :bp2+1

	iny
	bne it1

	mva #$55 _col+1

	ldx #3
	stx _and+1
	txa
l0	sta __oras,x
	asl @
	asl @
	dex
	bpl l0

	lda mode
	and #$0f
	cmp #8
	beq x8
	cmp #6
	beq x8
	
	jmp it2
x8
	mva #$ff _col+1

	ldx #7
	stx _and+1
	lda #1
l1	sta __oras,x
	asl @
	dex
	bpl l1

it2	tya
_and	and #3
	tax
	lda __oras,x
	eor #$ff
	sta adr.color_bits+$000,y ; color0
	lda __oras,x
_col	and #$55
	sta adr.color_bits+$100,y ; color1
	lda __oras,x
	and #$aa
	sta adr.color_bits+$200,y ; color2
	lda __oras,x
	and #$ff
	sta adr.color_bits+$300,y ; color3
	tya
	lsr @
_nop	lsr @
	sta adr.div4,y
	iny
	bne it2

	jmp stop

__oras	dta $c0,$30,$0c,$03
	dta 0,0,0,0

stop	pla:tax


; optimize FAIL ('FRAMEBUFFER_0093', FASTGRAPH), line = 1178
	inx
	mva ATARI.SAVMSC :STACKORIGIN,x
	mva ATARI.SAVMSC+1 :STACKORIGIN+STACKWIDTH,x
	jsr FRAMEBUFFER_0093

; ------------------------------------------------------------

MODE	= DATAORIGIN+$0730
WIDTH	= DATAORIGIN+$0731

@VarData	= MODE
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
WIN_LEFT	= DATAORIGIN+$000D
WIN_RIGHT	= DATAORIGIN+$000F
WIN_TOP	= DATAORIGIN+$0011
WIN_BOTTOM	= DATAORIGIN+$0013
GRAPHRESULT	= DATAORIGIN+$0015
GETCOLOR	= DATAORIGIN+$0016
adr.LASTARCCOORDS	= DATAORIGIN+$0017
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0017
LASTARCCOORDS.Y	= DATAORIGIN+$0019
LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
LASTARCCOORDS.XEND	= DATAORIGIN+$001F
LASTARCCOORDS.YEND	= DATAORIGIN+$0021
adr.COLOR_BITS	= DATAORIGIN+$0023
.var COLOR_BITS	= adr.COLOR_BITS .word
adr.LINELO	= DATAORIGIN+$0423
.var LINELO	= adr.LINELO .word
adr.LINEHI	= DATAORIGIN+$0523
.var LINEHI	= adr.LINEHI .word
adr.DIV4	= DATAORIGIN+$0623
.var DIV4	= adr.DIV4 .word
CURRENTX	= DATAORIGIN+$0723
CURRENTY	= DATAORIGIN+$0725
VIDEORAM	= DATAORIGIN+$0727

.endl							; UNIT FASTGRAPH

.local	DLI						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 081  ---------------------


    phr ; store registers

    
    mwa #0 $fe
    lda borderlinePos
    and #15
    asl:asl:asl:asl
    asl
    rol $ff
    asl
    rol $ff
    sta $fe
    adw $fe #adr.borderlines

    lda #14 ; wait this number of lines
@   cmp vcount
    bpl @-
   
    ldy #63
    sty wsync
@
    lda ($fe),y
    tax
    and #2
    ora #$c4
    sta wsync
    stx atari.colpf1
    sta atari.colbk
    dey
    bpl @-
    lda #0
    sta wsync
    sta atari.colbk
    
    plr ; restore registers

	rti						; ret
.endl

.local	VBL						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 082  ---------------------


    phr ; store registers
    
;   *** example test routine    
;    mva 20 atari.colbk // blink background
    
;   *** RMT play routine
;    lda MSX
;    ldy MSX+1
;    jsr RMT.TRMT.PLAY

    plr ; restore registers
    jmp $E462 ; jump to system VBL handler

	rti						; ret
.endl

.local	SETDLIOFFSET					; PROCEDURE

; optimize OK (roaddli.pas), line = 27

	mva #$00 V
	mva #$60 V+1

; optimize OK (roaddli.pas), line = 28

	mva #$04 DL
	mva #$70 DL+1
; --- For

; optimize OK (roaddli.pas), line = 29

	mva #$00 B

; optimize OK (roaddli.pas), line = 29

l_012B
; --- ForToDoCondition

; optimize OK (roaddli.pas), line = 29

	lda B
	cmp #$40
	jcs l_0139

; optimize OK (roaddli.pas), line = 30

	ldy B
	lda V
	add adr.ROADOFFSETS,y
	sta V
	scc
	inc V+1

; optimize OK (roaddli.pas), line = 31

	mwy DL :bp2
	ldy #$00
	sta (:bp2),y
	iny
	lda V+1
	sta (:bp2),y

; optimize OK (roaddli.pas), line = 32

	lda DL
	add #$03
	sta DL
	scc
	inc DL+1

; optimize OK (roaddli.pas), line = 33

	lda V
	add #$28
	sta V
	scc
	inc V+1

; --- ForToDoEpilog
	inc B						; inc ptr byte [CounterAddress]
	jne l_012B
l_0139

; ------------------------------------------------------------

V	= DATAORIGIN+$0B9B
DL	= DATAORIGIN+$0B9D
@FORTMP_0128	= $3F

@VarData	= V
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl
l_0007

; optimize FAIL ('FASTGRAPH.INITGRAPH_0097', roaddli.pas), line = 41
	inx
	mva #$0F :STACKORIGIN,x
	jsr FASTGRAPH.INITGRAPH_0097

; optimize FAIL ('SYSTEM.PAUSE_005A', roaddli.pas), line = 44
	jsr SYSTEM.PAUSE_005A

; optimize OK (roaddli.pas), line = 45

	mva #$00 ATARI.SDLSTL
	mva #$70 ATARI.SDLSTL+1

; optimize FAIL ('FASTGRAPH.FRAMEBUFFER_0093', roaddli.pas), line = 47
	inx
	mva #$00 :STACKORIGIN,x
	mva #$60 :STACKORIGIN+STACKWIDTH,x
	jsr FASTGRAPH.FRAMEBUFFER_0093

; optimize OK (roaddli.pas), line = 56

	mva <DLI VDSLST
	mva >DLI VDSLST+1

; optimize OK (roaddli.pas), line = 57

	mva #$C0 ATARI.NMIEN

; optimize OK (roaddli.pas), line = 61

	mva #$0F ATARI.COLOR1

; optimize OK (roaddli.pas), line = 62

	mva #$00 ATARI.COLOR2

; optimize OK (roaddli.pas), line = 63

	mva #$74 ATARI.COLOR4
; --- For

; optimize OK (roaddli.pas), line = 67

	mva #$00 B

; optimize OK (roaddli.pas), line = 67

l_0176
; --- ForToDoCondition

; optimize OK (roaddli.pas), line = 67

	lda B
	cmp #$40
	jcs l_0184

; optimize FAIL ('FASTGRAPH.SETCOLOR', roaddli.pas), line = 69
	inx
	mva #$02 :STACKORIGIN,x
	jsr FASTGRAPH.SETCOLOR

; optimize OK (roaddli.pas), line = 70

	lda B
	lsr @
	lsr @
	lsr @
	lsr @
	add #$01
	sta O

; optimize FAIL ('FASTGRAPH.FLINE', roaddli.pas), line = 71
	inx
	lda #$50
	sub B
	sta :STACKORIGIN,x
	inx
	mva O :STACKORIGIN,x
	jsr subAL_CL
	mva B :STACKORIGIN,x
	inx
	lda #$50
	add B
	sta :STACKORIGIN,x
	inx
	mva O :STACKORIGIN,x
	jsr addAL_CL
	mva B :STACKORIGIN,x
	jsr FASTGRAPH.FLINE

; optimize FAIL ('FASTGRAPH.SETCOLOR', roaddli.pas), line = 73
	inx
	mva #$01 :STACKORIGIN,x
	jsr FASTGRAPH.SETCOLOR

; optimize FAIL ('FASTGRAPH.FLINE', roaddli.pas), line = 74
	inx
	lda #$50
	sub B
	sta :STACKORIGIN,x
	inx
	mva B :STACKORIGIN,x
	inx
	lda #$50
	add B
	sta :STACKORIGIN,x
	inx
	mva B :STACKORIGIN,x
	jsr FASTGRAPH.FLINE

; optimize OK (roaddli.pas), line = 76

	ldy B
	mva #$00 adr.ROADOFFSETS,y

; --- ForToDoEpilog
	inc B						; inc ptr byte [CounterAddress]
	jne l_0176
l_0184

; optimize OK (roaddli.pas), line = 82

	mva #$00 W
	sta W+1

; optimize OK (roaddli.pas), line = 83

	mva #$08 O

; optimize OK (roaddli.pas), line = 84

	mva #$00 OC

; --- RepeatUntilProlog
l_01E5

; optimize OK (roaddli.pas), line = 86

	mva O C

; optimize OK (roaddli.pas), line = 87

	lda OC
	and #$01
	sta BCOLOR
; --- For

; optimize OK (roaddli.pas), line = 88

	mva #$00 B

; optimize OK (roaddli.pas), line = 88

l_01FE
; --- ForToDoCondition

; optimize OK (roaddli.pas), line = 88

	lda B
	cmp #$40
	jcs l_020C

; optimize OK (roaddli.pas), line = 89

	lda C
	jne l_021E

; optimize FAIL (0, roaddli.pas), line = 90
	inc BCOLOR

; optimize OK (roaddli.pas), line = 91

	lda #$00
	sta :eax+1
	lda B
	asl @
	rol :eax+1
	asl @
	rol :eax+1
	add B
	sta :eax
	lda :eax+1
	adc #$00
	sta :eax+1
	asl :eax
	rol :eax+1
	lda :eax
	sta :ax
	lda :eax+1
	sta :ax+1
	lda #$46
	sta :cx
	jsr idivAX_CL
	lda #$08
	sub :eax
	sta C

; optimize OK (roaddli.pas), line = 92

	jpl l_0249

; optimize OK (roaddli.pas), line = 92

	mva #$00 C
l_0249
	jmp l_0259
l_021E

; optimize FAIL (0, roaddli.pas), line = 93
	dec C
l_0259

; optimize OK (roaddli.pas), line = 95

	lda BCOLOR
	and #$01
	jeq l_0273

; optimize OK (roaddli.pas), line = 95

	lda BORDERLINES
	add W
	tay
	lda BORDERLINES+1
	adc W+1
	sta :bp+1
	lda #$0F
	sta (:bp),y
	jmp l_0283
l_0273

; optimize OK (roaddli.pas), line = 96

	lda BORDERLINES
	add W
	tay
	lda BORDERLINES+1
	adc W+1
	sta :bp+1
	lda #$24
	sta (:bp),y
l_0283

; optimize FAIL (0, roaddli.pas), line = 97
	inc W
	sne
	inc W+1

; optimize OK (roaddli.pas), line = 99

	lda W
	sta :ax
	lda W+1
	sta :ax+1
	lda #$00
	sta :cx
	lda #$04
	sta :cx+1
	jsr idivAX_CX.MOD
	lda :ztmp8
	sta W
	lda :ztmp9
	sta W+1

; --- ForToDoEpilog
	inc B						; inc ptr byte [CounterAddress]
	jne l_01FE
l_020C

; optimize OK (roaddli.pas), line = 101

	lda O
	jeq l_02B2

; optimize FAIL (0, roaddli.pas), line = 101
	dec O
	jmp l_02C0
l_02B2

; optimize OK (roaddli.pas), line = 103

	mva #$08 O

; optimize FAIL (0, roaddli.pas), line = 104
	inc OC
l_02C0

; optimize OK (roaddli.pas), line = 107

	lda OC
	cmp #$02
	jne l_01E5

; optimize FAIL ('SETDLIOFFSET', roaddli.pas), line = 109
	jsr SETDLIOFFSET

; optimize OK (roaddli.pas), line = 111

	mva #$00 BORDERLINEPOS

; --- RepeatUntilProlog
l_02DB

; optimize FAIL ('SYSTEM.PAUSE_005A', roaddli.pas), line = 113
	jsr SYSTEM.PAUSE_005A

; optimize FAIL (0, roaddli.pas), line = 114
	inc BORDERLINEPOS

; optimize OK (roaddli.pas), line = 115

	jmp l_02DB

	jsr CRT.READKEY					; call Entry

	dex						; sub bx, 1

; ------------------------------------------------------------

FREE_BOTTOM	= $6000
VIDEO_RAM_ADDRESS	= $6000
DISPLAY_LIST_ADDRESS	= $7000
NONE	= $FF
B	= DATAORIGIN+$0732
O	= DATAORIGIN+$0733
OC	= DATAORIGIN+$0734
C	= DATAORIGIN+$0735
BORDERLINEPOS	= DATAORIGIN+$0736
BCOLOR	= DATAORIGIN+$0737
W	= DATAORIGIN+$0738
adr.S	= DATAORIGIN+$073A
.var S	= adr.S .word
adr.BORDERLINES	= DATAORIGIN+$075B
.var BORDERLINES	= adr.BORDERLINES .word
adr.ROADOFFSETS	= DATAORIGIN+$0B5B
.var ROADOFFSETS	= adr.ROADOFFSETS .word
@FORTMP_0173	= $3F
@FORTMP_01FB	= $3F
@exit

@halt	ldx #0
	txs

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	eif

	.ifdef MAIN.FASTGRAPH.@UnitInit
	jsr MAIN.FASTGRAPH.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.FASTGRAPH) > 0
	.print 'FASTGRAPH: ',MAIN.FASTGRAPH,'..',MAIN.FASTGRAPH+.SIZEOF(MAIN.FASTGRAPH)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 2975

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.endm

	end
