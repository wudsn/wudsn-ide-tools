; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/08/20] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCASM 'arrays.asm' EFFECT 0 0 0 0 0 0 0 0
	RCDATA 'volume.tab' VOLUME 0 0 0 0 0 0 0 0
	RCDATA 'draco_6bit.dat' VOL6BIT 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_00C5

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	HEXSTR						; FUNCTION | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000001  -------------------

	jsr @hexStr

;	@move #@buf Result #33
	ldy #256-33
	mva:rne @buf+33-256,y adr.Result+33-256,y+

@exit

; ------------------------------------------------------------

VALUE	= :EDX
DIGITS	= :ECX
adr.RESULT	= [DATAORIGIN+$000B] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= RESULT
@VarDataSize	= 33

	rts						; ret
.endl

.local	PARAMCOUNT					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000043  -------------------

	@cmdline #255
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$002C
	rts						; ret
.endl

.local	PARAMSTR					; FUNCTION | ASSEMBLER
	sta I

; -------------------  ASM Block 00000044  -------------------

	@cmdline i

;	@move #@buf Result #33
	ldy #256-33
	mva:rne @buf+33-256,y adr.Result+33-256,y+

@exit

; ------------------------------------------------------------

I	= DATAORIGIN+$002D
adr.RESULT	= [DATAORIGIN+$002E] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= I
@VarDataSize	= 34

	rts						; ret
.endl

.local	SWAP_012F					; FUNCTION | OVERLOAD

; optimize OK (SYSTEM), line = 2229

	lda A+1
	sta RESULT
	lda A
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$004F
RESULT	= DATAORIGIN+$0051

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	GOTOXY						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000056  -------------------

	ldy x
	beq @+

	dey

@	sty colcrs
	mvy #$00 colcrs+1

	ldy y
	beq @+

	dey

@	sty rowcrs

; ------------------------------------------------------------

X	= DATAORIGIN+$0054
Y	= DATAORIGIN+$0055

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WHEREX						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000057  -------------------

	ldy colcrs
	iny
	sty Result


@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0056
	rts						; ret
.endl

.local	WHEREY						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000058  -------------------

	ldy rowcrs
	iny
	sty Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0057
	rts						; ret
.endl

.local	TEXTMODE					; PROCEDURE | ASSEMBLER
	sta MODE

; -------------------  ASM Block 00000059  -------------------

	txa:pha

	@clrscr

	pla:tax

; ------------------------------------------------------------

MODE	= DATAORIGIN+$0058

@VarData	= MODE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$0053
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	MISC						; UNIT

.local	DETECTMEM					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000069  -------------------

	txa:pha

bsav	= @buf

ext_b	= $4000		;cokolwiek z zakresu $4000-$7FFF

	ldy #0
mov	mva copy,y detect,y
	iny
	cpy #.sizeof(detect)
	bne mov

	jsr detect

	jmp stop

copy

.local	detect,$0600

	lda portb
	pha

	lda:rne vcount

;	lda #$ff
;	sta portb

	lda ext_b
	pha

	ldx #$0f	;zapamiętanie bajtów ext (z 16 bloków po 64k)
_p0	jsr setpb
	lda ext_b
	sta bsav,x
	dex
	bpl _p0

	ldx #$0f	;wyzerowanie ich (w oddzielnej pętli, bo nie wiadomo
_p1	jsr setpb	;które kombinacje bitów PORTB wybierają te same banki)
	lda #$00
	sta ext_b
	dex
	bpl _p1

	stx portb	;eliminacja pamięci podstawowej
	stx ext_b
	stx $00		;niezbędne dla niektórych rozszerzeń do 256k

	ldy #$00	;pętla zliczająca bloki 64k
	ldx #$0f
_p2	jsr setpb
	lda ext_b	;jeśli ext_b jest różne od zera, blok 64k już zliczony
	bne _n2

	dec ext_b	;w przeciwnym wypadku zaznacz jako zliczony

	lda ext_b	;sprawdz, czy sie zaznaczyl; jesli nie -> cos nie tak ze sprzetem
	bpl _n2

	lda portb	;wpisz wartość PORTB do tablicy dla banku 0

	and #$fe

	sta adr.banks,y
	eor #%00000100	;uzupełnij wartości dla banków 1, 2, 3
	sta adr.banks+1,y
	eor #%00001100
	sta adr.banks+2,y
	eor #%00000100
	sta adr.banks+3,y
	iny
	iny
	iny
	iny

_n2	dex
	bpl _p2

	ldx #$0f	;przywrócenie zawartości ext
_p3	jsr setpb
	lda bsav,x
	sta ext_b
	dex
	bpl _p3

	stx portb	;X=$FF

	pla
	sta ext_b

	pla
	sta portb

	sty Result

	rts

; podprogramy
setpb	txa		;zmiana kolejności bitów: %0000dcba -> %cba000d0
	lsr
	ror
	ror
	ror
	adc #$01	;ustawienie bitu nr 1 w zaleznosci od stanu C
	ora #$01	;ustawienie bitu sterującego OS ROM na wartosc domyslna
	sta portb
	rts

.endl

stop	pla:tax


@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0059
	rts						; ret
.endl

; ------------------------------------------------------------

adr.BANKS	= $0101
.var BANKS	= adr.BANKS .word
DETECTOS	= $FFF7

.endl							; UNIT MISC

; ------------------------------------------------------------

.local	OBJECTS						; UNIT

.local	TMEMORYSTREAM.CREATE				; PROCEDURE
	sta TMEMORYSTREAM
	sty TMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (OBJECTS), line = 72

	lda BANK
	sta :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror @
	sta :STACKORIGIN+STACKWIDTH+9
	mwy SIZE :bp2
	ldy #$00
	tya
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (OBJECTS), line = 73

	mwy POSITION :bp2
	ldy #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; ------------------------------------------------------------

TMEMORYSTREAM	= DATAORIGIN+$005B
POSITION	= DATAORIGIN+$005D
SIZE	= DATAORIGIN+$005F

@VarData	= TMEMORYSTREAM
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TMEMORYSTREAM.WRITEBUFFER			; PROCEDURE | ASSEMBLER | REGISTER
	sta TMEMORYSTREAM
	sty TMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; -------------------  ASM Block 00000073  -------------------

	lda Count
	ora Count+1
	beq skp

	mwa position :ecx+2
	jsr @xmsWriteBuf
skp

; ------------------------------------------------------------

TMEMORYSTREAM	= DATAORIGIN+$0065
BUFFER	= :EDX
COUNT	= :ECX
POSITION	= DATAORIGIN+$0067
SIZE	= DATAORIGIN+$0069

@VarData	= POSITION
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize FAIL ('MISC.DETECTMEM', OBJECTS), line = 178

	jsr MISC.DETECTMEM
	lda MISC.DETECTMEM.RESULT
	sta BANK

	rts

; ------------------------------------------------------------

BANK	= DATAORIGIN+$005A

.endl							; UNIT OBJECTS

.local	PLAY						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000080  -------------------



.zpvar = $d8

.zpvar nr0, nr1, nr2, nr3, patno, patend, cnts, pause, track_pos .byte
.zpvar pat0, pat1, pat2 .word

	stx _rx

	jsr wait

	sei

	lda #$00
	sta nmien
	sta irqen

	mva #$fe portb

	lda #0

	ldx #8
lp	sta AUDF1,x
	sta AUDF1+$10,x
	dex
	bpl lp

	tax
	mva:rne 0,x ZPAGE,x+

	ldx #0
mv0	lda .adr(playloop),x
	sta playloop,x
	inx
	cpx #.sizeof(playloop)
	bne mv0

	ldx #0
mv1	lda .adr(mainloop),x
	sta mainloop,x
	lda .adr(mainloop)+$100,x
	sta mainloop+$100,x
	inx
	bne mv1

	lda SONG_LENGTH
	sta mainloop.patmax+1

;	lda SONG_RESTART
;	sta mainloop.patres+1

	lda >volume		; silence
	sta playloop.ivol0+2
	sta playloop.ivol1+2
	sta playloop.ivol2+2
	sta playloop.ivol3+2

	.ifdef MAIN.@DEFINES.COVOX

	lda >COVOX		; covox
	sta playloop.ch0+2
	sta playloop.ch1+2
	sta playloop.ch2+2
	sta playloop.ch3+2

	ldy #0
	sty playloop.ch0+1
	iny
	sty playloop.ch1+1
	iny
	sty playloop.ch2+1
	iny
	sty playloop.ch3+1

	.else

	lda >VOLUME		; pokey
	sta av0+1
	sta av1+1

	ldx #32			; POKEY volume table
	ldy #0
mvol	lda VOLUME,y
av0	equ *-2
;	:4 lsr @
;	ora #$10
	:2 lsr @
	sta VOLUME,y
av1	equ *-2
	iny
	bne mvol

	inc av0+1
	inc av1+1
	dex
	bpl mvol

	.endif

start	lda #0

	sta dmactl

	sta patno
	sta track_pos

	sta pat0
	sta pat1
	sta pat2

	lda #6
	sta pause
	sta cnts

	ldy adr.ORDER
	sty pat0+1
	iny
	sty pat1+1
	iny
	sty pat2+1

	mwa	#mainloop nmivec	; custom NMI handler
	mwa	#playloop irqvec	; custom IRQ handler

;	mva	#$01	AUDCTL		; 0=POKEY 64KHz, 1=15KHz

	;set IRQ position in scanline for consistency and disable keyboard scan
	sta	wsync
	lda	#0
	sta	skctl
	sta	skctl+$10

	sta	AUDCTL+$10

	mva #%01000000	AUDCTL

	mva #218	AUDF1		; 8 kHz

	mva	#$01	IRQEN

	lda	#1
	sta	skctl
	sta	stimer

	mva	#$40	nmien

	cli

	jmp stop


.local	playloop,0

	sta regA
	stx regX

	inc IRQEN

	lda v0: #0
	ldx v1: #0
	sta audc1
	lda v2: #0
	stx audc2
	sta audc3

	.ifdef MAIN.@DEFINES.STATUS
	lda #$0f
	sta colbak
	.endif

; ---
; ---	AUDC 1
; ---

ist_0	lda #0
iad0_m	adc #0
	sta ist_0+1
	lda p_0c+1
iad0_s	adc #0
	bcc ext_0

	inc p_0c+2
	bpl ext_0

ire0_s	lda #0
	sta p_0c+2
ire0_m	lda #0

ext_0	sta p_0c+1

; ---
; ---	AUDC 2
; ---

ist_1	lda #0
iad1_m	adc #0
	sta ist_1+1
	lda p_1c+1
iad1_s	adc #0
	bcc ext_1

	inc p_1c+2
	bpl ext_1

ire1_s	lda #0
	sta p_1c+2
ire1_m	lda #0

ext_1	sta p_1c+1

; ---
; ---	AUDC 3
; ---

ist_2	lda #0
iad2_m	adc #0
	sta ist_2+1
	lda p_2c+1
iad2_s	adc #0
	bcc ext_2

	inc p_2c+2
	bpl ext_2

ire2_s	lda #0
	sta p_2c+2
ire2_m	lda #0

ext_2	sta p_2c+1

; ---
; ---	AUDC 4
; ---

ist_3	lda #0
iad3_m	adc #0
	sta ist_3+1
	lda p_3c+1
iad3_s	adc #0
	bcc ext_3

	inc p_3c+2
	bpl ext_3

ire3_s	lda #0
	sta p_3c+2
ire3_m	lda #0

ext_3	sta p_3c+1



bank0	ldx #$fe		; ch #0
	stx portb

p_0c	ldx $ffff
ivol0	lda volume,x
	clc

bank1	ldx #$fe		; ch #1
	stx portb

p_1c	ldx $ffff
ivol1	adc volume,x

bank2	ldx #$fe		; ch #2
	stx portb

p_2c	ldx $ffff
ivol2	adc volume,x

bank3	ldx #$fe		; ch #3
	stx portb

p_3c	ldx $ffff
ivol3	adc volume,x

	tax

	lda vol6bit,x
	sta v0

	lda vol6bit+$100,x
	sta v1

	lda vol6bit+$200,x
	sta v2


	.ifdef MAIN.@DEFINES.STATUS
	lda #$00
	sta colbak
	.endif


	lda regA: #0
	ldx regX: #0

	rti

.endl


.local	mainloop,$0400

	bit nmist
	bpl vbl

exit	rti

vbl	dec cnts
	bne exit

	sta regA
	stx regX
	sty regY

	lda #0
	sta patend

	lda #$fe
	sta portb

	ldy track_pos

*---------------------------
* track  0

i_0	;ldy #1
	lda (pat1),y
	sta i_0c+1
	and #$1f
	beq i_0c
	tax
	sta nr0
	lda adr.tivol-1,x
	sta playloop.ivol0+2

i_0c	ldx EFFECT
	beq i_0f
	cpx #$40
	bne @+
	;ldy #2
	lda (pat2),y
	sta playloop.ivol0+2
@	cpx #$c0
	bne @+
	;ldy #2
	lda (pat2),y
	sta pause
@	cpx #$80
	bne i_0f
	stx patend

i_0f	;ldy #0
	lda (pat0),y
	beq i_1
	tax
	lda tadcl-1,x
	sta playloop.iad0_m+1
	lda tadch-1,x
	sta playloop.iad0_s+1

;	lda #0
;	sta playloop.ist_0+1

	ldx nr0
	lda main.misc.adr.banks-1,x
	sta playloop.bank0+1

	lda adr.tstrl-1,x
	sta playloop.p_0c+1
	lda adr.tstrh-1,x
	sta playloop.p_0c+2

	lda adr.trepl-1,x
	sta playloop.ire0_m+1
	lda adr.treph-1,x
	sta playloop.ire0_s+1

* track 1

i_1	iny

	;ldy #4
	lda (pat1),y
	sta i_1c+1
	and #$1f
	beq i_1c
	tax
	sta nr1
	lda adr.tivol-1,x
	sta playloop.ivol1+2

i_1c	ldx EFFECT
	beq i_1f
	cpx #$40
	bne @+
	;ldy #5
	lda (pat2),y
	sta playloop.ivol1+2
@	cpx #$c0
	bne @+
	;ldy #5
	lda (pat2),y
	sta pause
@	cpx #$80
	bne i_1f
	stx patend

i_1f	;ldy #3
	lda (pat0),y
	beq i_2
	tax
	lda tadcl-1,x
	sta playloop.iad1_m+1
	lda tadch-1,x
	sta playloop.iad1_s+1

;	lda #0
;	sta playloop.ist_1+1

	ldx nr1
	lda main.misc.adr.banks-1,x
	sta playloop.bank1+1

	lda adr.tstrl-1,x
	sta playloop.p_1c+1
	lda adr.tstrh-1,x
	sta playloop.p_1c+2

	lda adr.trepl-1,x
	sta playloop.ire1_m+1
	lda adr.treph-1,x
	sta playloop.ire1_s+1

* track 2

i_2	iny

	;ldy #7
	lda (pat1),y
	sta i_2c+1
	and #$1f
	beq i_2c
	tax
	sta nr2
	lda adr.tivol-1,x
	sta playloop.ivol2+2

i_2c	ldx EFFECT
	beq i_2f
	cpx #$40
	bne @+
	;ldy #8
	lda (pat2),y
	sta playloop.ivol2+2
@	cpx #$c0
	bne @+
	;ldy #8
	lda (pat2),y
	sta pause
@	cpx #$80
	bne i_2f
	stx patend

i_2f	;ldy #6
	lda (pat0),y
	beq i_3
	tax
	lda tadcl-1,x
	sta playloop.iad2_m+1
	lda tadch-1,x
	sta playloop.iad2_s+1

;	lda #0
;	sta playloop.ist_2+1

	ldx nr2
	lda main.misc.adr.banks-1,x
	sta playloop.bank2+1

	lda adr.tstrl-1,x
	sta playloop.p_2c+1
	lda adr.tstrh-1,x
	sta playloop.p_2c+2

	lda adr.trepl-1,x
	sta playloop.ire2_m+1
	lda adr.treph-1,x
	sta playloop.ire2_s+1

* track 3

i_3	iny

	;ldy #10
	lda (pat1),y
	sta i_3c+1
	and #$1f
	beq i_3c
	tax
	sta nr3
	lda adr.tivol-1,x
	sta playloop.ivol3+2

i_3c	ldx EFFECT
	beq i_3f
	cpx #$40
	bne @+
	;ldy #11
	lda (pat2),y
	sta playloop.ivol3+2
@	cpx #$c0
	bne @+
	;ldy #11
	lda (pat2),y
	sta pause
@	cpx #$80
	bne i_3f
	stx patend

i_3f	;ldy #9
	lda (pat0),y
	beq i_e
	tax
	lda tadcl-1,x
	sta playloop.iad3_m+1
	lda tadch-1,x
	sta playloop.iad3_s+1

;	lda #0
;	sta playloop.ist_3+1

	ldx nr3
	lda main.misc.adr.banks-1,x
	sta playloop.bank3+1

	lda adr.tstrl-1,x
	sta playloop.p_3c+1
	lda adr.tstrh-1,x
	sta playloop.p_3c+2

	lda adr.trepl-1,x
	sta playloop.ire3_m+1
	lda adr.treph-1,x
	sta playloop.ire3_s+1

i_e
	lda patend
	bne i_en

	iny
	sty track_pos
	bne i_end

i_en	inc patno
	ldx patno
patmax	cpx #0
	bcc i_ens

	lda #6
	sta pause
patres	ldx #0
	stx patno

i_ens	ldy adr.ORDER,x
	sty pat0+1
	iny
	sty pat1+1
	iny
	sty pat2+1

	lda #0
	sta track_pos

i_end
	lda pause
	sta cnts

	lda consol
	cmp #$06
	bne skp

	lda #$2c	; bit *
	sta stop

skp
	lda #0
regA	equ *-1
	ldx #0
regX	equ *-1
	ldy #0
regY	equ *-1

	rti

.endl


wait	lda skstat		; wait on keypress
	and #4
	beq wait

	lda #$70
	cmp:rne vcount
	rts


stop	jmp *

	jsr wait

	sei
	lda #0
	sta AUDCTL
	sta AUDCTL+$10
	sta NMIEN
	sta IRQEN

	tax
	mva:rne ZPAGE,x 0,x+

	lda #$ff
	sta portb

	mva sdmctl dmactl

	lda irqens
	sta IRQEN

	lda	#3
	sta	skctl

	mva #$40 nmien
	cli

	ldx #0
_rx	equ *-1


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CNVPATTERN					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000081  -------------------


	lda #0
	sta Result
	sta Result+1
	sta Result+2
	sta Result+3

	lda adr.BUF
	and #$f
	ora adr.BUF+1
	beq _sil

	ldy #0
_tst	lda adr.KOD,y
	cmp adr.BUF+1
	bne pls
	lda adr.BUF		;kod dzwieku
	and #$f
	cmp adr.KOD+1,y
	bne pls
	iny
	iny
	tya
	lsr @
; ldy #0
	sta Result		;czestotliwosc

	lda adr.BUF+2		;oblicz nr instr
	lsr @
	lsr @
	lsr @
	lsr @
	sta or_+1
	lda adr.BUF
	and #$f0
or_	ora #0
	and #$1f
; ldy #1
_con	sta Result+1		;numer instrumentu

; ldy #2
	lda #0
	sta Result+2
; dey
	lda adr.BUF+2
	and #$f
	cmp #$c
	beq _vol		; Effect Cxy (Set Volume)
	cmp #$f
	beq _tmp		; Effect Fxy (Set Speed)
	cmp #$d
	beq _break		; Effect Dxy (Pattern Break)
	jmp stop

_sil	sta Result
	beq _con

_break	lda #$80
	ora Result+1
	sta Result+1
	bne stop

_vol	lda #$40
	ora Result+1
	sta Result+1

	lda adr.BUF+3		;parametr komendy

	lsr @
	clc
	adc >VOLUME
	sta Result+2
	bne stop

_tmp	lda adr.BUF+3
	cmp #$20
	bcs _tq
	lda #$c0
	ora Result+1
	sta Result+1
; ldy #2
	lda adr.BUF+3		;parametr komendy
	and #$1f
	sta Result+2
_tq
	jmp stop

pls	iny
	iny
	cpy #96

	jne _tst

stop

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$047E
	rts						; ret
.endl

.local	LOADMOD						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$20
	mva:rpl (:bp2),y adr.FNAM,y-
	mwa #adr.FNAM FNAM
	dex
@main

	jmp l_0174

.local	NORMALIZEBUF					; PROCEDURE

; optimize OK (loadmod_portb.inc), line = 16

	lda #$00
	tay

l_0180
; --- ForToDoCondition
	lda adr.BUF,y
	add #$80
	sta adr.BUF,y

; --- ForToDoEpilog
	iny
	jne l_0180
l_018E
	sty J

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0174
	ldy #256-3
	mva:rne CODEORIGIN+$0000+3-256,y adr.NAME+3-256,y+

; optimize OK (loadmod_portb.inc), line = 25

	lda adr.FNAM
	add #$02
	sta adr.NAME+$00

; optimize OK (loadmod_portb.inc), line = 27

	lda #$01
	sta I
	mva adr.FNAM @FORTMP_01B1_0

l_01B4
; --- ForToDoCondition
	lda @FORTMP_01B1_0:#$00
	cmp I
	jcc l_01C2

; optimize OK (loadmod_portb.inc), line = 28

	ldy I
	lda adr.FNAM,y
	sta adr.NAME+$02,y

; --- ForToDoEpilog
	inc I
	jne l_01B4
l_01C2
; AssignFile

; optimize OK (loadmod_portb.inc), line = 31

	mwy F :bp2
	ldy #s@file.pfname
	lda NAME
	sta (:bp2),y
	iny
	lda NAME+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Reset
	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@openfile F, MAIN.SYSTEM.FileMode
	pla:tax

; BlockRead

; optimize OK (loadmod_portb.inc), line = 33

	mwy F :bp2
	ldy #s@file.buffer
	lda MODNAME
	sta (:bp2),y
	iny
	lda MODNAME+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$14
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (loadmod_portb.inc), line = 35

	lda #$00
	sta NUMBER_OF_SAMPLES

; optimize OK (loadmod_portb.inc), line = 37

	sta I

l_01FA
; --- ForToDoCondition
	lda I
	cmp #$1F
	jcs l_0208

; optimize OK (loadmod_portb.inc), line = 39

	asl @
	tay
	lda adr.SAMPLE,y
	sta SMP
	lda adr.SAMPLE+1,y
	sta SMP+1
; BlockRead

; optimize OK (loadmod_portb.inc), line = 41

	mwy F :bp2
	ldy #s@file.buffer
	lda #SMP.NAME-DATAORIGIN
	add SMP
	sta (:bp2),y
	iny
	lda #$00
	adc SMP+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$1E
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (loadmod_portb.inc), line = 43

	mwy SMP :bp2
	ldy #SMP.LEN-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.SWAP_012F.A
	iny
	lda (:bp2),y
	sta SYSTEM.SWAP_012F.A+1
	jsr SYSTEM.SWAP_012F
	inx
	mva SYSTEM.SWAP_012F.RESULT :STACKORIGIN,x
	mva SYSTEM.SWAP_012F.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr shlEAX_CL.WORD
	dex
	mwy SMP :bp2
	ldy #SMP.LEN-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex

; optimize OK (loadmod_portb.inc), line = 44

	mwy SMP :bp2
	ldy #SMP.LOOP_START-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.SWAP_012F.A
	iny
	lda (:bp2),y
	sta SYSTEM.SWAP_012F.A+1
	jsr SYSTEM.SWAP_012F
	inx
	mva SYSTEM.SWAP_012F.RESULT :STACKORIGIN,x
	mva SYSTEM.SWAP_012F.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr shlEAX_CL.WORD
	dex
	mwy SMP :bp2
	ldy #SMP.LOOP_START-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex

; optimize OK (loadmod_portb.inc), line = 45

	mwy SMP :bp2
	ldy #SMP.LOOP_LEN-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.SWAP_012F.A
	iny
	lda (:bp2),y
	sta SYSTEM.SWAP_012F.A+1
	jsr SYSTEM.SWAP_012F
	inx
	mva SYSTEM.SWAP_012F.RESULT :STACKORIGIN,x
	mva SYSTEM.SWAP_012F.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr shlEAX_CL.WORD
	dex
	mwy SMP :bp2
	ldy #SMP.LOOP_LEN-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex

; optimize OK (loadmod_portb.inc), line = 47

	mwy SMP :bp2
	ldy #SMP.FINE_TUNE-DATAORIGIN
	lda (:bp2),y
	cmp #$08
	jcc l_0248
	sub #$10
	sta (:bp2),y
l_0248

; optimize OK (loadmod_portb.inc), line = 49

	mwy SMP :bp2
	ldy #SMP.LEN-DATAORIGIN
	lda (:bp2),y
	iny
	ora (:bp2),y
	jeq l_025D

; optimize FAIL (0, loadmod_portb.inc), line = 50

	inc NUMBER_OF_SAMPLES

; optimize OK (loadmod_portb.inc), line = 51

	ldy I
	iny
	sty NUMBER_OF_BANKS
l_025D

; optimize OK (loadmod_portb.inc), line = 54

	mwy SMP :bp2
	ldy #SMP.LEN-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$40
	bne @+
	dey
	lda (:bp2),y
	cmp #$00
@
	jcc l_027F
	jeq l_027F

; optimize FAIL ('@print', loadmod_portb.inc), line = 55

	@printSTRING #CODEORIGIN+$0004
	lda #$00
	ldy #$40
	jsr @printWORD._ay
	@printSTRING #CODEORIGIN+$000B
	@printEOL
	lda #$00
	jmp @halt
l_027F

; --- ForToDoEpilog
	inc I
	jne l_01FA
l_0208
; BlockRead

; optimize OK (loadmod_portb.inc), line = 62

	mwy F :bp2
	ldy #s@file.buffer
	lda <SONG_LENGTH
	sta (:bp2),y
	iny
	lda >SONG_LENGTH
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; BlockRead

; optimize OK (loadmod_portb.inc), line = 63

	mwy F :bp2
	ldy #s@file.buffer
	lda <SONG_RESTART
	sta (:bp2),y
	iny
	lda >SONG_RESTART
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (loadmod_portb.inc), line = 66

	lda #$00
	sta NUMBER_OF_PATTERNS

; optimize OK (loadmod_portb.inc), line = 68

	sta I

l_02B2
; --- ForToDoCondition
	lda I
	jmi l_02C0
; BlockRead

; optimize OK (loadmod_portb.inc), line = 69

	mwy F :bp2
	ldy #s@file.buffer
	lda <A
	sta (:bp2),y
	iny
	lda >A
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (loadmod_portb.inc), line = 71

	lda A
	asl @
	add #$40
	add A
	ldy I
	sta adr.ORDER,y

; optimize OK (loadmod_portb.inc), line = 73

	lda NUMBER_OF_PATTERNS
	cmp A
	jcs l_02F3
	lda A
	sta NUMBER_OF_PATTERNS
l_02F3

; --- ForToDoEpilog
	inc I
	jne l_02B2
l_02C0

; optimize FAIL (0, loadmod_portb.inc), line = 76

	inc NUMBER_OF_PATTERNS
; BlockRead

; optimize OK (loadmod_portb.inc), line = 79

	mwy F :bp2
	ldy #s@file.buffer
	lda <adr.HEADER
	add #$01
	sta (:bp2),y
	iny
	lda >adr.HEADER
	adc #$00
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize OK (loadmod_portb.inc), line = 80

	lda #$04
	sta adr.HEADER+$00

; optimize FAIL ('cmpSTRING', loadmod_portb.inc), line = 82

	inx
	mva HEADER :STACKORIGIN,x
	mva HEADER+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$21 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	ldy #1
	jsr cmpSTRING
	bne @+
	dey
@
	dex
	dex
	tya
	jeq l_0323

; optimize FAIL ('@print', loadmod_portb.inc), line = 83

	@printSTRING #CODEORIGIN+$0027
	@printEOL
	lda #$00
	jmp @halt
l_0323

; optimize FAIL ('@print', loadmod_portb.inc), line = 89

	@printSTRING #CODEORIGIN+$003C
	inx
	lda MODNAME
	ldy MODNAME+1
	jsr @printPCHAR
	dex
	@printEOL

; optimize OK (loadmod_portb.inc), line = 91

	lda #$00
	sta I

l_033D
; --- ForToDoCondition
	lda I
	cmp #$1F
	jcs l_034B

; optimize OK (loadmod_portb.inc), line = 93

	asl @
	tay
	lda adr.SAMPLE,y
	sta SMP
	sta :bp2
	lda adr.SAMPLE+1,y
	sta SMP+1
	sta :bp2+1
; optimize OK (loadmod_portb.inc), line = 95
	ldy #SMP.LEN-DATAORIGIN
	lda (:bp2),y
	iny
	ora (:bp2),y
	jeq l_0364

; optimize OK (loadmod_portb.inc), line = 96

	lda I
	add #$01
	sta SYSTEM.HEXSTR.VALUE
	lda #$00
	adc #$00
	sta SYSTEM.HEXSTR.VALUE+1
	lda #$00
	adc #$00
	sta SYSTEM.HEXSTR.VALUE+2
	lda #$00
	adc #$00
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$02
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	@printSTRING SYSTEM.HEXSTR.RESULT
	@print #$20
	inx
	lda #SMP.NAME-DATAORIGIN
	add SMP
	sta :STACKORIGIN,x
	lda #$00
	adc SMP+1
	sta :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	ldy :STACKORIGIN+STACKWIDTH,x
	jsr @printPCHAR
	dex
	@print #$20
	mwy SMP :bp2
	ldy #SMP.LEN-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.HEXSTR.VALUE
	iny
	lda (:bp2),y
	sta SYSTEM.HEXSTR.VALUE+1
	lda #$00
	sta SYSTEM.HEXSTR.VALUE+2
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$04
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	@printSTRING SYSTEM.HEXSTR.RESULT
	@print #$20
	mwy SMP :bp2
	ldy #SMP.FINE_TUNE-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.HEXSTR.VALUE
	lda #$00
	sta SYSTEM.HEXSTR.VALUE+1
	sta SYSTEM.HEXSTR.VALUE+2
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$02
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	@printSTRING SYSTEM.HEXSTR.RESULT
	@print #$20
	mwy SMP :bp2
	ldy #SMP.VOLUME-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.HEXSTR.VALUE
	lda #$00
	sta SYSTEM.HEXSTR.VALUE+1
	sta SYSTEM.HEXSTR.VALUE+2
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$02
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	@printSTRING SYSTEM.HEXSTR.RESULT
	@print #$20
	mwy SMP :bp2
	ldy #SMP.LOOP_START-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.HEXSTR.VALUE
	iny
	lda (:bp2),y
	sta SYSTEM.HEXSTR.VALUE+1
	lda #$00
	sta SYSTEM.HEXSTR.VALUE+2
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$04
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	@printSTRING SYSTEM.HEXSTR.RESULT
	@print #$20
	mwy SMP :bp2
	ldy #SMP.LOOP_LEN-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.HEXSTR.VALUE
	iny
	lda (:bp2),y
	sta SYSTEM.HEXSTR.VALUE+1
	lda #$00
	sta SYSTEM.HEXSTR.VALUE+2
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$04
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	@printSTRING SYSTEM.HEXSTR.RESULT
	@printEOL
l_0364

; --- ForToDoEpilog
	inc I
	jne l_033D
l_034B

; optimize OK (loadmod_portb.inc), line = 101

	lda NUMBER_OF_PATTERNS
	cmp #$26
	jcc l_03BA

; optimize FAIL ('@print', loadmod_portb.inc), line = 102

	@printEOL

; optimize FAIL ('@print', loadmod_portb.inc), line = 103

	@printSTRING #CODEORIGIN+$0044
	lda NUMBER_OF_PATTERNS
	jsr @printBYTE._a
	@printEOL

; optimize FAIL ('@print', loadmod_portb.inc), line = 104

	@printSTRING #CODEORIGIN+$0004
	lda #$25
	jsr @printBYTE._a
	@printSTRING #CODEORIGIN+$004F
	@printEOL
	lda #$00
	jmp @halt
l_03BA

; optimize OK (loadmod_portb.inc), line = 109

	lda NUMBER_OF_SAMPLES
	cmp #$20
	jcc l_03E8

; optimize FAIL ('@print', loadmod_portb.inc), line = 110

	@printEOL

; optimize FAIL ('@print', loadmod_portb.inc), line = 111

	@printSTRING #CODEORIGIN+$0044
	lda NUMBER_OF_SAMPLES
	jsr @printBYTE._a
	@printEOL

; optimize FAIL ('@print', loadmod_portb.inc), line = 112

	@printSTRING #CODEORIGIN+$0004
	lda #$1F
	jsr @printBYTE._a
	@printSTRING #CODEORIGIN+$004F
	@printEOL
	lda #$00
	jmp @halt
l_03E8

; optimize FAIL ('OBJECTS.TMEMORYSTREAM.CREATE', loadmod_portb.inc), line = 117

	lda XMS
	ldy XMS+1
	jsr OBJECTS.TMEMORYSTREAM.CREATE

; optimize OK (loadmod_portb.inc), line = 119

	lda #$00
	sta :ecx
	lda #$40
	sta :ecx+1
	lda NUMBER_OF_BANKS
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda XMS.SIZE+3
	cmp :eax+3
	bne @+
	lda XMS.SIZE+2
	cmp :eax+2
	bne @+
	lda XMS.SIZE+1
	cmp :eax+1
	bne @+
	lda XMS.SIZE
	cmp :eax
@
	jcs l_041B

; optimize FAIL ('@print', loadmod_portb.inc), line = 120

	@printEOL

; optimize FAIL ('@print', loadmod_portb.inc), line = 121

	@printSTRING #CODEORIGIN+$0061
	lda NUMBER_OF_BANKS
	jsr @printBYTE._a
	@printSTRING #CODEORIGIN+$0070
	@printEOL
	lda #$00
	jmp @halt
l_041B

; optimize OK (loadmod_portb.inc), line = 126

	lda #$00
	sta TEMP
	lda #$40
	sta TEMP+1

; optimize FAIL ('@print', loadmod_portb.inc), line = 128

	@printEOL

; optimize FAIL ('@print', loadmod_portb.inc), line = 129

	@printSTRING #CODEORIGIN+$0088

; optimize FAIL ('CRT.WHEREX', loadmod_portb.inc), line = 130

	jsr CRT.WHEREX
	lda CRT.WHEREX.RESULT
	sta X

; optimize FAIL ('CRT.WHEREY', loadmod_portb.inc), line = 131

	jsr CRT.WHEREY
	lda CRT.WHEREY.RESULT
	sta Y

; optimize OK (loadmod_portb.inc), line = 133

	lda #$01
	sta I

l_0448
; --- ForToDoCondition
	lda I
	cmp NUMBER_OF_PATTERNS
	scc
	jne l_0456

; optimize OK (loadmod_portb.inc), line = 135

	lda TEMP
	sta P0
	lda TEMP+1
	sta P0+1

; optimize OK (loadmod_portb.inc), line = 136

	lda TEMP
	sta P1
	lda TEMP+1
	add #$01
	sta P1+1

; optimize OK (loadmod_portb.inc), line = 137

	lda TEMP
	sta P2
	lda TEMP+1
	add #$02
	sta P2+1

; optimize OK (loadmod_portb.inc), line = 139

	lda X
	sta CRT.GOTOXY.X
	lda Y
	sta CRT.GOTOXY.Y
	jsr CRT.GOTOXY

; optimize FAIL ('@print', loadmod_portb.inc), line = 140

	lda I
	jsr @printBYTE._a
	@print #$2F
	lda NUMBER_OF_PATTERNS
	jsr @printBYTE._a

; optimize OK (loadmod_portb.inc), line = 142

	lda #$00
	sta J

l_048D
; --- ForToDoCondition
; BlockRead

; optimize OK (loadmod_portb.inc), line = 143

	mwy F :bp2
	ldy #s@file.buffer
	lda BUF
	sta (:bp2),y
	iny
	lda BUF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize FAIL ('CNVPATTERN', loadmod_portb.inc), line = 145

	jsr CNVPATTERN
	lda CNVPATTERN.RESULT
	sta TMP
	lda CNVPATTERN.RESULT+1
	sta TMP+1
	lda CNVPATTERN.RESULT+2
	sta TMP+2
	lda CNVPATTERN.RESULT+3
	sta TMP+3

; optimize OK (loadmod_portb.inc), line = 147

	mwy P0 :bp2
	ldy #$00
	lda TMP
	sta (:bp2),y
	inc P0
	sne
	inc P0+1

; optimize OK (loadmod_portb.inc), line = 148

	lda TMP+1
	mvy P1+1 :bp+1
	ldy P1
	sta (:bp),y
	inc P1
	sne
	inc P1+1

; optimize OK (loadmod_portb.inc), line = 149

	lda TMP+2
	mvy P2+1 :bp+1
	ldy P2
	sta (:bp),y
	inc P2
	sne
	inc P2+1

; --- ForToDoEpilog
	inc J
	jne l_048D
l_049B

; optimize OK (loadmod_portb.inc), line = 152

	lda TEMP+1
	add #$03
	sta TEMP+1

; --- ForToDoEpilog
	inc I
	jne l_0448
l_0456

; optimize FAIL ('@print', loadmod_portb.inc), line = 157

	@printEOL

; optimize FAIL ('@print', loadmod_portb.inc), line = 158

	@printSTRING #CODEORIGIN+$0098

; optimize FAIL ('CRT.WHEREX', loadmod_portb.inc), line = 159

	jsr CRT.WHEREX
	lda CRT.WHEREX.RESULT
	sta X

; optimize FAIL ('CRT.WHEREY', loadmod_portb.inc), line = 160

	jsr CRT.WHEREY
	lda CRT.WHEREY.RESULT
	sta Y

; optimize OK (loadmod_portb.inc), line = 162

	lda #$00
	sta OFFSET
	sta OFFSET+1
	sta OFFSET+2
	sta OFFSET+3

; optimize OK (loadmod_portb.inc), line = 163

	lda #$01
	sta NUM

; optimize OK (loadmod_portb.inc), line = 165

	lda #$00
	sta I

l_04EF
; --- ForToDoCondition
	ldy I
	cpy #$1F
	jcs l_04FD

; optimize OK (loadmod_portb.inc), line = 167

	lda #$00
	sta adr.TSTRL,y

; optimize OK (loadmod_portb.inc), line = 168

	lda #$DE
	sta adr.TSTRH,y

; optimize OK (loadmod_portb.inc), line = 169

	lda #$00
	sta adr.TREPL,y

; optimize OK (loadmod_portb.inc), line = 170

	lda #$DE
	sta adr.TREPH,y

; optimize OK (loadmod_portb.inc), line = 172

	sta adr.TIVOL,y

; optimize OK (loadmod_portb.inc), line = 174

	lda I
	asl @
	tay
	lda adr.SAMPLE,y
	sta SMP
	sta :bp2
	lda adr.SAMPLE+1,y
	sta SMP+1
	sta :bp2+1
; optimize OK (loadmod_portb.inc), line = 176
	ldy #SMP.LEN-DATAORIGIN
	lda (:bp2),y
	sta LEN
	iny
	lda (:bp2),y
	sta LEN+1

; optimize OK (loadmod_portb.inc), line = 178

	ora LEN
	jeq l_053E

; optimize OK (loadmod_portb.inc), line = 180

	lda X
	sta CRT.GOTOXY.X
	lda Y
	sta CRT.GOTOXY.Y
	jsr CRT.GOTOXY

; optimize FAIL ('@print', loadmod_portb.inc), line = 181

	lda NUM
	jsr @printBYTE._a
	@print #$2F
	lda NUMBER_OF_SAMPLES
	jsr @printBYTE._a

; optimize OK (loadmod_portb.inc), line = 183

	lda #$00
	sub LEN
	sta TEMP
	lda #$40
	sbc LEN+1
	sta TEMP+1

; optimize OK (loadmod_portb.inc), line = 185

	lda TEMP
	add OFFSET
	sta XMS.POSITION
	lda TEMP+1
	adc OFFSET+1
	sta XMS.POSITION+1
	lda #$00
	adc OFFSET+2
	sta XMS.POSITION+2
	lda #$00
	adc OFFSET+3
	sta XMS.POSITION+3

; optimize OK (loadmod_portb.inc), line = 187

	lda TEMP+1
	add #$40
	sta TEMP+1

; optimize OK (loadmod_portb.inc), line = 189

	ldy I
	lda TEMP
	sta adr.TSTRL,y

; optimize OK (loadmod_portb.inc), line = 190

	lda TEMP+1
	sta adr.TSTRH,y

; optimize OK (loadmod_portb.inc), line = 192

	mwy SMP :bp2
	ldy #SMP.LOOP_LEN-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$00
	bne @+
	dey
	lda (:bp2),y
	cmp #$08
@
	jcs l_058A

; optimize OK (loadmod_portb.inc), line = 193

	lda #$00
	sta TEMP
	lda #$DE
	sta TEMP+1
	jmp l_0598
l_058A

; optimize OK (loadmod_portb.inc), line = 195

	mwy SMP :bp2
	ldy #SMP.LOOP_START-DATAORIGIN
	lda TEMP
	add (:bp2),y
	iny
	sta TEMP
	lda TEMP+1
	adc (:bp2),y
	sta TEMP+1
l_0598

; optimize OK (loadmod_portb.inc), line = 197

	ldy I
	lda TEMP
	sta adr.TREPL,y

; optimize OK (loadmod_portb.inc), line = 198

	lda TEMP+1
	sta adr.TREPH,y

; optimize OK (loadmod_portb.inc), line = 200

	lda #$DE
	sta :STACKORIGIN+10
	mwy SMP :bp2
	ldy #SMP.VOLUME-DATAORIGIN
	lda (:bp2),y
	lsr @
	add :STACKORIGIN+10
	ldy I
	sta adr.TIVOL,y

; --- WhileProlog
	jmp l_05BD
l_05BE

; optimize OK (loadmod_portb.inc), line = 204

	lda LEN+1
	cmp #$01
	jcc l_05CF
	bne @+
	lda LEN
	jcc l_05CF
@

; optimize OK (loadmod_portb.inc), line = 205

	lda #$00
	sta TEMP
	lda #$01
	sta TEMP+1
	jmp l_05DD
l_05CF

; optimize OK (loadmod_portb.inc), line = 207

	lda LEN
	sta TEMP
	lda LEN+1
	sta TEMP+1
l_05DD
; BlockRead

; optimize OK (loadmod_portb.inc), line = 209

	mwy F :bp2
	ldy #s@file.buffer
	lda BUF
	sta (:bp2),y
	iny
	lda BUF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda TEMP
	sta (:bp2),y
	iny
	lda TEMP+1
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #7
	pla:tax

; optimize FAIL ('NORMALIZEBUF', loadmod_portb.inc), line = 210

	jsr NORMALIZEBUF

; optimize OK (loadmod_portb.inc), line = 211

	lda BUF
	sta OBJECTS.TMEMORYSTREAM.WRITEBUFFER.BUFFER
	lda BUF+1
	sta OBJECTS.TMEMORYSTREAM.WRITEBUFFER.BUFFER+1
	lda TEMP
	sta OBJECTS.TMEMORYSTREAM.WRITEBUFFER.COUNT
	lda TEMP+1
	sta OBJECTS.TMEMORYSTREAM.WRITEBUFFER.COUNT+1
	lda XMS
	ldy XMS+1
	jsr OBJECTS.TMEMORYSTREAM.WRITEBUFFER

; optimize OK (loadmod_portb.inc), line = 213

	lda LEN
	sub TEMP
	sta LEN
	lda LEN+1
	sbc TEMP+1
	sta LEN+1
l_05BD

; optimize OK (loadmod_portb.inc), line = 202

	lda LEN+1
	ora LEN
	jne l_05BE

; optimize FAIL (0, loadmod_portb.inc), line = 217

	inc NUM
l_053E

; optimize OK (loadmod_portb.inc), line = 221

	lda OFFSET+1
	add #$40
	sta OFFSET+1
	lda OFFSET+2
	adc #$00
	sta OFFSET+2
	lda OFFSET+3
	adc #$00
	sta OFFSET+3

; --- ForToDoEpilog
	inc I
	jne l_04EF
l_04FD

; optimize FAIL ('@print', loadmod_portb.inc), line = 225

	@printEOL
; CloseFile

	txa:pha
	sec
	@closefile F
	pla:tax

; ------------------------------------------------------------

adr.FNAM	= [DATAORIGIN+$0482] .array [33]
.var FNAM	= adr.FNAM .word
.var F	= DATAORIGIN+$04A3 .word
adr.NAME	= [DATAORIGIN+$04AF] .array [33]
.var NAME	= adr.NAME .word
I	= DATAORIGIN+$04D0
J	= DATAORIGIN+$04D1
A	= DATAORIGIN+$04D2
X	= DATAORIGIN+$04D3
Y	= DATAORIGIN+$04D4
NUM	= DATAORIGIN+$04D5
OFFSET	= DATAORIGIN+$04D6
TMP	= DATAORIGIN+$04DA
TEMP	= DATAORIGIN+$04DE
LEN	= DATAORIGIN+$04E0
SMP	= DATAORIGIN+$04E2
SMP.NAME	= DATAORIGIN+$0000
SMP.LEN	= DATAORIGIN+$0016
SMP.FINE_TUNE	= DATAORIGIN+$0018
SMP.VOLUME	= DATAORIGIN+$0019
SMP.LOOP_START	= DATAORIGIN+$001A
SMP.LOOP_LEN	= DATAORIGIN+$001C
P0	= DATAORIGIN+$04E4
P1	= DATAORIGIN+$04E6
P2	= DATAORIGIN+$04E8
adr.HEADER	= [DATAORIGIN+$04EA] .array [5]
.var HEADER	= adr.HEADER .word
adr.XMS	= DATAORIGIN+$04EF	; [8] OBJECT
.var XMS	= adr.XMS .word
XMS.POSITION	= DATAORIGIN+$04EF
XMS.SIZE	= DATAORIGIN+$04F3

@VarData	= FNAM
@VarDataSize	= 119

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_00C5

; optimize OK (modplay2.pas), line = 766

	lda #$00
	jsr CRT.TEXTMODE

; optimize FAIL ('@print', modplay2.pas), line = 768

	@printSTRING #CODEORIGIN+$00A7
	@printEOL

; optimize FAIL ('@print', modplay2.pas), line = 769

	@printEOL

; optimize OK (modplay2.pas), line = 771

	lda ATARI.SDMCTL
	sta ATARI.DMACTL

; optimize FAIL ('SYSTEM.PARAMCOUNT', modplay2.pas), line = 773

	jsr SYSTEM.PARAMCOUNT
	lda #$00
	cmp SYSTEM.PARAMCOUNT.RESULT
	jcs l_0627
@

; optimize OK (modplay2.pas), line = 775

	lda #$01
	jsr SYSTEM.PARAMSTR
	inx
	mva SYSTEM.PARAMSTR.RESULT :STACKORIGIN,x
	mva SYSTEM.PARAMSTR.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr LOADMOD

; optimize FAIL ('PLAY', modplay2.pas), line = 784

	jsr PLAY
l_0627

; ------------------------------------------------------------

COVOX	= $D700
PATTERN_LIMIT	= $25
SAMPLE_LIMIT	= $1F
VOL6BIT	= $D800
ZPAGE	= $DB00
EFFECT	= $DC00
TADCL	= $DD00
TADCH	= $DD30
VOLUME	= $DE00
PATTERN_START	= $4000
SAMPLE_START	= $4000
SAMPLE_LEN	= $4000
adr.KOD	= CODEORIGIN+$00BE
.var KOD	= adr.KOD .word
adr.BUF	= $0500
.var BUF	= adr.BUF .word
adr.TIVOL	= $0150
.var TIVOL	= adr.TIVOL .word
adr.ORDER	= $0600
.var ORDER	= adr.ORDER .word
adr.TSTRL	= $0680
.var TSTRL	= adr.TSTRL .word
adr.TSTRH	= $06A0
.var TSTRH	= adr.TSTRH .word
adr.TREPL	= $06C0
.var TREPL	= adr.TREPL .word
adr.TREPH	= $06E0
.var TREPH	= adr.TREPH .word
adr.MODNAME	= [DATAORIGIN+$0083] .array [21]
.var MODNAME	= adr.MODNAME .word
adr.SAMPL_0	= DATAORIGIN+$0098	; [30] RECORD
.var SAMPL_0	= adr.SAMPL_0 .word
adr.SAMPL_0.NAME	= [DATAORIGIN+$0098] .array [22]
.var SAMPL_0.NAME	= adr.SAMPL_0.NAME .word
SAMPL_0.LEN	= DATAORIGIN+$00AE
SAMPL_0.FINE_TUNE	= DATAORIGIN+$00B0
SAMPL_0.VOLUME	= DATAORIGIN+$00B1
SAMPL_0.LOOP_START	= DATAORIGIN+$00B2
SAMPL_0.LOOP_LEN	= DATAORIGIN+$00B4
adr.SAMPL_1	= DATAORIGIN+$00B6	; [30] RECORD
.var SAMPL_1	= adr.SAMPL_1 .word
adr.SAMPL_1.NAME	= [DATAORIGIN+$00B6] .array [22]
.var SAMPL_1.NAME	= adr.SAMPL_1.NAME .word
SAMPL_1.LEN	= DATAORIGIN+$00CC
SAMPL_1.FINE_TUNE	= DATAORIGIN+$00CE
SAMPL_1.VOLUME	= DATAORIGIN+$00CF
SAMPL_1.LOOP_START	= DATAORIGIN+$00D0
SAMPL_1.LOOP_LEN	= DATAORIGIN+$00D2
adr.SAMPL_2	= DATAORIGIN+$00D4	; [30] RECORD
.var SAMPL_2	= adr.SAMPL_2 .word
adr.SAMPL_2.NAME	= [DATAORIGIN+$00D4] .array [22]
.var SAMPL_2.NAME	= adr.SAMPL_2.NAME .word
SAMPL_2.LEN	= DATAORIGIN+$00EA
SAMPL_2.FINE_TUNE	= DATAORIGIN+$00EC
SAMPL_2.VOLUME	= DATAORIGIN+$00ED
SAMPL_2.LOOP_START	= DATAORIGIN+$00EE
SAMPL_2.LOOP_LEN	= DATAORIGIN+$00F0
adr.SAMPL_3	= DATAORIGIN+$00F2	; [30] RECORD
.var SAMPL_3	= adr.SAMPL_3 .word
adr.SAMPL_3.NAME	= [DATAORIGIN+$00F2] .array [22]
.var SAMPL_3.NAME	= adr.SAMPL_3.NAME .word
SAMPL_3.LEN	= DATAORIGIN+$0108
SAMPL_3.FINE_TUNE	= DATAORIGIN+$010A
SAMPL_3.VOLUME	= DATAORIGIN+$010B
SAMPL_3.LOOP_START	= DATAORIGIN+$010C
SAMPL_3.LOOP_LEN	= DATAORIGIN+$010E
adr.SAMPL_4	= DATAORIGIN+$0110	; [30] RECORD
.var SAMPL_4	= adr.SAMPL_4 .word
adr.SAMPL_4.NAME	= [DATAORIGIN+$0110] .array [22]
.var SAMPL_4.NAME	= adr.SAMPL_4.NAME .word
SAMPL_4.LEN	= DATAORIGIN+$0126
SAMPL_4.FINE_TUNE	= DATAORIGIN+$0128
SAMPL_4.VOLUME	= DATAORIGIN+$0129
SAMPL_4.LOOP_START	= DATAORIGIN+$012A
SAMPL_4.LOOP_LEN	= DATAORIGIN+$012C
adr.SAMPL_5	= DATAORIGIN+$012E	; [30] RECORD
.var SAMPL_5	= adr.SAMPL_5 .word
adr.SAMPL_5.NAME	= [DATAORIGIN+$012E] .array [22]
.var SAMPL_5.NAME	= adr.SAMPL_5.NAME .word
SAMPL_5.LEN	= DATAORIGIN+$0144
SAMPL_5.FINE_TUNE	= DATAORIGIN+$0146
SAMPL_5.VOLUME	= DATAORIGIN+$0147
SAMPL_5.LOOP_START	= DATAORIGIN+$0148
SAMPL_5.LOOP_LEN	= DATAORIGIN+$014A
adr.SAMPL_6	= DATAORIGIN+$014C	; [30] RECORD
.var SAMPL_6	= adr.SAMPL_6 .word
adr.SAMPL_6.NAME	= [DATAORIGIN+$014C] .array [22]
.var SAMPL_6.NAME	= adr.SAMPL_6.NAME .word
SAMPL_6.LEN	= DATAORIGIN+$0162
SAMPL_6.FINE_TUNE	= DATAORIGIN+$0164
SAMPL_6.VOLUME	= DATAORIGIN+$0165
SAMPL_6.LOOP_START	= DATAORIGIN+$0166
SAMPL_6.LOOP_LEN	= DATAORIGIN+$0168
adr.SAMPL_7	= DATAORIGIN+$016A	; [30] RECORD
.var SAMPL_7	= adr.SAMPL_7 .word
adr.SAMPL_7.NAME	= [DATAORIGIN+$016A] .array [22]
.var SAMPL_7.NAME	= adr.SAMPL_7.NAME .word
SAMPL_7.LEN	= DATAORIGIN+$0180
SAMPL_7.FINE_TUNE	= DATAORIGIN+$0182
SAMPL_7.VOLUME	= DATAORIGIN+$0183
SAMPL_7.LOOP_START	= DATAORIGIN+$0184
SAMPL_7.LOOP_LEN	= DATAORIGIN+$0186
adr.SAMPL_8	= DATAORIGIN+$0188	; [30] RECORD
.var SAMPL_8	= adr.SAMPL_8 .word
adr.SAMPL_8.NAME	= [DATAORIGIN+$0188] .array [22]
.var SAMPL_8.NAME	= adr.SAMPL_8.NAME .word
SAMPL_8.LEN	= DATAORIGIN+$019E
SAMPL_8.FINE_TUNE	= DATAORIGIN+$01A0
SAMPL_8.VOLUME	= DATAORIGIN+$01A1
SAMPL_8.LOOP_START	= DATAORIGIN+$01A2
SAMPL_8.LOOP_LEN	= DATAORIGIN+$01A4
adr.SAMPL_9	= DATAORIGIN+$01A6	; [30] RECORD
.var SAMPL_9	= adr.SAMPL_9 .word
adr.SAMPL_9.NAME	= [DATAORIGIN+$01A6] .array [22]
.var SAMPL_9.NAME	= adr.SAMPL_9.NAME .word
SAMPL_9.LEN	= DATAORIGIN+$01BC
SAMPL_9.FINE_TUNE	= DATAORIGIN+$01BE
SAMPL_9.VOLUME	= DATAORIGIN+$01BF
SAMPL_9.LOOP_START	= DATAORIGIN+$01C0
SAMPL_9.LOOP_LEN	= DATAORIGIN+$01C2
adr.SAMPL_10	= DATAORIGIN+$01C4	; [30] RECORD
.var SAMPL_10	= adr.SAMPL_10 .word
adr.SAMPL_10.NAME	= [DATAORIGIN+$01C4] .array [22]
.var SAMPL_10.NAME	= adr.SAMPL_10.NAME .word
SAMPL_10.LEN	= DATAORIGIN+$01DA
SAMPL_10.FINE_TUNE	= DATAORIGIN+$01DC
SAMPL_10.VOLUME	= DATAORIGIN+$01DD
SAMPL_10.LOOP_START	= DATAORIGIN+$01DE
SAMPL_10.LOOP_LEN	= DATAORIGIN+$01E0
adr.SAMPL_11	= DATAORIGIN+$01E2	; [30] RECORD
.var SAMPL_11	= adr.SAMPL_11 .word
adr.SAMPL_11.NAME	= [DATAORIGIN+$01E2] .array [22]
.var SAMPL_11.NAME	= adr.SAMPL_11.NAME .word
SAMPL_11.LEN	= DATAORIGIN+$01F8
SAMPL_11.FINE_TUNE	= DATAORIGIN+$01FA
SAMPL_11.VOLUME	= DATAORIGIN+$01FB
SAMPL_11.LOOP_START	= DATAORIGIN+$01FC
SAMPL_11.LOOP_LEN	= DATAORIGIN+$01FE
adr.SAMPL_12	= DATAORIGIN+$0200	; [30] RECORD
.var SAMPL_12	= adr.SAMPL_12 .word
adr.SAMPL_12.NAME	= [DATAORIGIN+$0200] .array [22]
.var SAMPL_12.NAME	= adr.SAMPL_12.NAME .word
SAMPL_12.LEN	= DATAORIGIN+$0216
SAMPL_12.FINE_TUNE	= DATAORIGIN+$0218
SAMPL_12.VOLUME	= DATAORIGIN+$0219
SAMPL_12.LOOP_START	= DATAORIGIN+$021A
SAMPL_12.LOOP_LEN	= DATAORIGIN+$021C
adr.SAMPL_13	= DATAORIGIN+$021E	; [30] RECORD
.var SAMPL_13	= adr.SAMPL_13 .word
adr.SAMPL_13.NAME	= [DATAORIGIN+$021E] .array [22]
.var SAMPL_13.NAME	= adr.SAMPL_13.NAME .word
SAMPL_13.LEN	= DATAORIGIN+$0234
SAMPL_13.FINE_TUNE	= DATAORIGIN+$0236
SAMPL_13.VOLUME	= DATAORIGIN+$0237
SAMPL_13.LOOP_START	= DATAORIGIN+$0238
SAMPL_13.LOOP_LEN	= DATAORIGIN+$023A
adr.SAMPL_14	= DATAORIGIN+$023C	; [30] RECORD
.var SAMPL_14	= adr.SAMPL_14 .word
adr.SAMPL_14.NAME	= [DATAORIGIN+$023C] .array [22]
.var SAMPL_14.NAME	= adr.SAMPL_14.NAME .word
SAMPL_14.LEN	= DATAORIGIN+$0252
SAMPL_14.FINE_TUNE	= DATAORIGIN+$0254
SAMPL_14.VOLUME	= DATAORIGIN+$0255
SAMPL_14.LOOP_START	= DATAORIGIN+$0256
SAMPL_14.LOOP_LEN	= DATAORIGIN+$0258
adr.SAMPL_15	= DATAORIGIN+$025A	; [30] RECORD
.var SAMPL_15	= adr.SAMPL_15 .word
adr.SAMPL_15.NAME	= [DATAORIGIN+$025A] .array [22]
.var SAMPL_15.NAME	= adr.SAMPL_15.NAME .word
SAMPL_15.LEN	= DATAORIGIN+$0270
SAMPL_15.FINE_TUNE	= DATAORIGIN+$0272
SAMPL_15.VOLUME	= DATAORIGIN+$0273
SAMPL_15.LOOP_START	= DATAORIGIN+$0274
SAMPL_15.LOOP_LEN	= DATAORIGIN+$0276
adr.SAMPL_16	= DATAORIGIN+$0278	; [30] RECORD
.var SAMPL_16	= adr.SAMPL_16 .word
adr.SAMPL_16.NAME	= [DATAORIGIN+$0278] .array [22]
.var SAMPL_16.NAME	= adr.SAMPL_16.NAME .word
SAMPL_16.LEN	= DATAORIGIN+$028E
SAMPL_16.FINE_TUNE	= DATAORIGIN+$0290
SAMPL_16.VOLUME	= DATAORIGIN+$0291
SAMPL_16.LOOP_START	= DATAORIGIN+$0292
SAMPL_16.LOOP_LEN	= DATAORIGIN+$0294
adr.SAMPL_17	= DATAORIGIN+$0296	; [30] RECORD
.var SAMPL_17	= adr.SAMPL_17 .word
adr.SAMPL_17.NAME	= [DATAORIGIN+$0296] .array [22]
.var SAMPL_17.NAME	= adr.SAMPL_17.NAME .word
SAMPL_17.LEN	= DATAORIGIN+$02AC
SAMPL_17.FINE_TUNE	= DATAORIGIN+$02AE
SAMPL_17.VOLUME	= DATAORIGIN+$02AF
SAMPL_17.LOOP_START	= DATAORIGIN+$02B0
SAMPL_17.LOOP_LEN	= DATAORIGIN+$02B2
adr.SAMPL_18	= DATAORIGIN+$02B4	; [30] RECORD
.var SAMPL_18	= adr.SAMPL_18 .word
adr.SAMPL_18.NAME	= [DATAORIGIN+$02B4] .array [22]
.var SAMPL_18.NAME	= adr.SAMPL_18.NAME .word
SAMPL_18.LEN	= DATAORIGIN+$02CA
SAMPL_18.FINE_TUNE	= DATAORIGIN+$02CC
SAMPL_18.VOLUME	= DATAORIGIN+$02CD
SAMPL_18.LOOP_START	= DATAORIGIN+$02CE
SAMPL_18.LOOP_LEN	= DATAORIGIN+$02D0
adr.SAMPL_19	= DATAORIGIN+$02D2	; [30] RECORD
.var SAMPL_19	= adr.SAMPL_19 .word
adr.SAMPL_19.NAME	= [DATAORIGIN+$02D2] .array [22]
.var SAMPL_19.NAME	= adr.SAMPL_19.NAME .word
SAMPL_19.LEN	= DATAORIGIN+$02E8
SAMPL_19.FINE_TUNE	= DATAORIGIN+$02EA
SAMPL_19.VOLUME	= DATAORIGIN+$02EB
SAMPL_19.LOOP_START	= DATAORIGIN+$02EC
SAMPL_19.LOOP_LEN	= DATAORIGIN+$02EE
adr.SAMPL_20	= DATAORIGIN+$02F0	; [30] RECORD
.var SAMPL_20	= adr.SAMPL_20 .word
adr.SAMPL_20.NAME	= [DATAORIGIN+$02F0] .array [22]
.var SAMPL_20.NAME	= adr.SAMPL_20.NAME .word
SAMPL_20.LEN	= DATAORIGIN+$0306
SAMPL_20.FINE_TUNE	= DATAORIGIN+$0308
SAMPL_20.VOLUME	= DATAORIGIN+$0309
SAMPL_20.LOOP_START	= DATAORIGIN+$030A
SAMPL_20.LOOP_LEN	= DATAORIGIN+$030C
adr.SAMPL_21	= DATAORIGIN+$030E	; [30] RECORD
.var SAMPL_21	= adr.SAMPL_21 .word
adr.SAMPL_21.NAME	= [DATAORIGIN+$030E] .array [22]
.var SAMPL_21.NAME	= adr.SAMPL_21.NAME .word
SAMPL_21.LEN	= DATAORIGIN+$0324
SAMPL_21.FINE_TUNE	= DATAORIGIN+$0326
SAMPL_21.VOLUME	= DATAORIGIN+$0327
SAMPL_21.LOOP_START	= DATAORIGIN+$0328
SAMPL_21.LOOP_LEN	= DATAORIGIN+$032A
adr.SAMPL_22	= DATAORIGIN+$032C	; [30] RECORD
.var SAMPL_22	= adr.SAMPL_22 .word
adr.SAMPL_22.NAME	= [DATAORIGIN+$032C] .array [22]
.var SAMPL_22.NAME	= adr.SAMPL_22.NAME .word
SAMPL_22.LEN	= DATAORIGIN+$0342
SAMPL_22.FINE_TUNE	= DATAORIGIN+$0344
SAMPL_22.VOLUME	= DATAORIGIN+$0345
SAMPL_22.LOOP_START	= DATAORIGIN+$0346
SAMPL_22.LOOP_LEN	= DATAORIGIN+$0348
adr.SAMPL_23	= DATAORIGIN+$034A	; [30] RECORD
.var SAMPL_23	= adr.SAMPL_23 .word
adr.SAMPL_23.NAME	= [DATAORIGIN+$034A] .array [22]
.var SAMPL_23.NAME	= adr.SAMPL_23.NAME .word
SAMPL_23.LEN	= DATAORIGIN+$0360
SAMPL_23.FINE_TUNE	= DATAORIGIN+$0362
SAMPL_23.VOLUME	= DATAORIGIN+$0363
SAMPL_23.LOOP_START	= DATAORIGIN+$0364
SAMPL_23.LOOP_LEN	= DATAORIGIN+$0366
adr.SAMPL_24	= DATAORIGIN+$0368	; [30] RECORD
.var SAMPL_24	= adr.SAMPL_24 .word
adr.SAMPL_24.NAME	= [DATAORIGIN+$0368] .array [22]
.var SAMPL_24.NAME	= adr.SAMPL_24.NAME .word
SAMPL_24.LEN	= DATAORIGIN+$037E
SAMPL_24.FINE_TUNE	= DATAORIGIN+$0380
SAMPL_24.VOLUME	= DATAORIGIN+$0381
SAMPL_24.LOOP_START	= DATAORIGIN+$0382
SAMPL_24.LOOP_LEN	= DATAORIGIN+$0384
adr.SAMPL_25	= DATAORIGIN+$0386	; [30] RECORD
.var SAMPL_25	= adr.SAMPL_25 .word
adr.SAMPL_25.NAME	= [DATAORIGIN+$0386] .array [22]
.var SAMPL_25.NAME	= adr.SAMPL_25.NAME .word
SAMPL_25.LEN	= DATAORIGIN+$039C
SAMPL_25.FINE_TUNE	= DATAORIGIN+$039E
SAMPL_25.VOLUME	= DATAORIGIN+$039F
SAMPL_25.LOOP_START	= DATAORIGIN+$03A0
SAMPL_25.LOOP_LEN	= DATAORIGIN+$03A2
adr.SAMPL_26	= DATAORIGIN+$03A4	; [30] RECORD
.var SAMPL_26	= adr.SAMPL_26 .word
adr.SAMPL_26.NAME	= [DATAORIGIN+$03A4] .array [22]
.var SAMPL_26.NAME	= adr.SAMPL_26.NAME .word
SAMPL_26.LEN	= DATAORIGIN+$03BA
SAMPL_26.FINE_TUNE	= DATAORIGIN+$03BC
SAMPL_26.VOLUME	= DATAORIGIN+$03BD
SAMPL_26.LOOP_START	= DATAORIGIN+$03BE
SAMPL_26.LOOP_LEN	= DATAORIGIN+$03C0
adr.SAMPL_27	= DATAORIGIN+$03C2	; [30] RECORD
.var SAMPL_27	= adr.SAMPL_27 .word
adr.SAMPL_27.NAME	= [DATAORIGIN+$03C2] .array [22]
.var SAMPL_27.NAME	= adr.SAMPL_27.NAME .word
SAMPL_27.LEN	= DATAORIGIN+$03D8
SAMPL_27.FINE_TUNE	= DATAORIGIN+$03DA
SAMPL_27.VOLUME	= DATAORIGIN+$03DB
SAMPL_27.LOOP_START	= DATAORIGIN+$03DC
SAMPL_27.LOOP_LEN	= DATAORIGIN+$03DE
adr.SAMPL_28	= DATAORIGIN+$03E0	; [30] RECORD
.var SAMPL_28	= adr.SAMPL_28 .word
adr.SAMPL_28.NAME	= [DATAORIGIN+$03E0] .array [22]
.var SAMPL_28.NAME	= adr.SAMPL_28.NAME .word
SAMPL_28.LEN	= DATAORIGIN+$03F6
SAMPL_28.FINE_TUNE	= DATAORIGIN+$03F8
SAMPL_28.VOLUME	= DATAORIGIN+$03F9
SAMPL_28.LOOP_START	= DATAORIGIN+$03FA
SAMPL_28.LOOP_LEN	= DATAORIGIN+$03FC
adr.SAMPL_29	= DATAORIGIN+$03FE	; [30] RECORD
.var SAMPL_29	= adr.SAMPL_29 .word
adr.SAMPL_29.NAME	= [DATAORIGIN+$03FE] .array [22]
.var SAMPL_29.NAME	= adr.SAMPL_29.NAME .word
SAMPL_29.LEN	= DATAORIGIN+$0414
SAMPL_29.FINE_TUNE	= DATAORIGIN+$0416
SAMPL_29.VOLUME	= DATAORIGIN+$0417
SAMPL_29.LOOP_START	= DATAORIGIN+$0418
SAMPL_29.LOOP_LEN	= DATAORIGIN+$041A
adr.SAMPL_30	= DATAORIGIN+$041C	; [30] RECORD
.var SAMPL_30	= adr.SAMPL_30 .word
adr.SAMPL_30.NAME	= [DATAORIGIN+$041C] .array [22]
.var SAMPL_30.NAME	= adr.SAMPL_30.NAME .word
SAMPL_30.LEN	= DATAORIGIN+$0432
SAMPL_30.FINE_TUNE	= DATAORIGIN+$0434
SAMPL_30.VOLUME	= DATAORIGIN+$0435
SAMPL_30.LOOP_START	= DATAORIGIN+$0436
SAMPL_30.LOOP_LEN	= DATAORIGIN+$0438
adr.SAMPLE	= [DATAORIGIN+$043A] .array [31] .word
.var SAMPLE	= adr.SAMPLE .word
GCHAR	= DATAORIGIN+$0478
SONG_LENGTH	= DATAORIGIN+$0479
SONG_RESTART	= DATAORIGIN+$047A
NUMBER_OF_PATTERNS	= DATAORIGIN+$047B
NUMBER_OF_BANKS	= DATAORIGIN+$047C
NUMBER_OF_SAMPLES	= DATAORIGIN+$047D
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.MISC.@UnitInit
	jsr MAIN.MISC.@UnitInit
	.fi

	.ifdef MAIN.OBJECTS.@UnitInit
	jsr MAIN.OBJECTS.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.MISC) > 0
	.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
	eif

	ift .SIZEOF(MAIN.OBJECTS) > 0
	.print 'OBJECTS: ',MAIN.OBJECTS,'..',MAIN.OBJECTS+.SIZEOF(MAIN.OBJECTS)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 <[DATAORIGIN+$0098] >[DATAORIGIN+$0098] <[DATAORIGIN+$00B6] >[DATAORIGIN+$00B6] <[DATAORIGIN+$00D4] >[DATAORIGIN+$00D4]  <[DATAORIGIN+$00F2] >[DATAORIGIN+$00F2] <[DATAORIGIN+$0110] >[DATAORIGIN+$0110] <[DATAORIGIN+$012E] >[DATAORIGIN+$012E] <[DATAORIGIN+$014C] >[DATAORIGIN+$014C]  <[DATAORIGIN+$016A] >[DATAORIGIN+$016A] <[DATAORIGIN+$0188] >[DATAORIGIN+$0188] <[DATAORIGIN+$01A6] >[DATAORIGIN+$01A6] <[DATAORIGIN+$01C4] >[DATAORIGIN+$01C4]
.by  <[DATAORIGIN+$01E2] >[DATAORIGIN+$01E2] <[DATAORIGIN+$0200] >[DATAORIGIN+$0200] <[DATAORIGIN+$021E] >[DATAORIGIN+$021E] <[DATAORIGIN+$023C] >[DATAORIGIN+$023C]  <[DATAORIGIN+$025A] >[DATAORIGIN+$025A] <[DATAORIGIN+$0278] >[DATAORIGIN+$0278] <[DATAORIGIN+$0296] >[DATAORIGIN+$0296] <[DATAORIGIN+$02B4] >[DATAORIGIN+$02B4]  <[DATAORIGIN+$02D2] >[DATAORIGIN+$02D2] <[DATAORIGIN+$02F0] >[DATAORIGIN+$02F0] <[DATAORIGIN+$030E] >[DATAORIGIN+$030E] <[DATAORIGIN+$032C] >[DATAORIGIN+$032C]
.by  <[DATAORIGIN+$034A] >[DATAORIGIN+$034A] <[DATAORIGIN+$0368] >[DATAORIGIN+$0368] <[DATAORIGIN+$0386] >[DATAORIGIN+$0386] <[DATAORIGIN+$03A4] >[DATAORIGIN+$03A4]  <[DATAORIGIN+$03C2] >[DATAORIGIN+$03C2] <[DATAORIGIN+$03E0] >[DATAORIGIN+$03E0] <[DATAORIGIN+$03FE] >[DATAORIGIN+$03FE] <[DATAORIGIN+$041C] >[DATAORIGIN+$041C]

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 1272

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $02 $44 $3A $00 $05 $4F $6E $6C  $79 $20 $00 $14 $20 $62 $79 $74  $65 $73 $20 $6C $65 $6E $67 $74
.by  $68 $20 $73 $61 $6D $70 $6C $65  $00 $04 $4D $2E $4B $2E $00 $13  $55 $6E $73 $75 $70 $6F $72 $74
.by  $65 $64 $20 $4D $4F $44 $20 $66  $69 $6C $65 $00 $06 $4E $61 $6D  $65 $3A $20 $00 $09 $53 $61 $6D
.by  $70 $6C $65 $73 $3A $20 $00 $10  $20 $73 $61 $6D $70 $6C $65 $73  $20 $61 $6C $6C $6F $77 $65 $64
.by  $00 $0D $4E $65 $65 $64 $20 $6D  $69 $6E $69 $6D $75 $6D $20 $00  $16 $20 $62 $61 $6E $6B $73 $20
.by  $65 $78 $70 $61 $6E $64 $65 $64  $20 $6D $65 $6D $6F $72 $79 $00  $0E $4C $6F $61 $64 $20 $50 $61
.by  $74 $74 $65 $72 $6E $3A $20 $00  $0D $4C $6F $61 $64 $20 $53 $61  $6D $70 $6C $65 $3A $20 $00 $15
.by  $4D $4F $44 $20 $50 $6C $61 $79  $65 $72 $20 $32 $2E $33 $20 $28  $36 $35 $30 $32 $29 $00 $B0 $06
.by  $50 $06 $F4 $05 $A0 $05 $4C $05  $00 $05 $B8 $04 $74 $04 $34 $04  $F8 $03 $C0 $03 $80 $03 $58 $03
.by  $28 $03 $FA $02 $D0 $02 $A6 $02  $80 $02 $5C $02 $3A $02 $1A $02  $FC $01 $E0 $01 $C5 $01 $AC $01
.by  $94 $01 $7D $01 $68 $01 $53 $01  $40 $01 $2E $01 $1D $01 $0D $01  $FE $00 $F0 $00 $E2 $00 $D6 $00
.by  $CA $00 $BE $00 $B4 $00 $AA $00  $A0 $00 $97 $00 $8F $00 $87 $00  $7F $00 $78 $00 $71 $00
.endm

	end
