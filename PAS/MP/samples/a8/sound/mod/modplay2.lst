mads 2.1.6
Source: modplay2.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/08/20] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1148 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 2075				RCASM 'arrays.asm' EFFECT 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 0160			len = .sizeof(_EFFECT)
     6 				mcpy	ift main.EFFECT+len >= $bc20
     7 2075 A9 00 8D 2F 02		mva #0 sdmctl
     8 207A 8D 00 D4			sta dmactl
    11 207D 20 41 20			jsr sys.off
    13 2080 A9 9E 85 88 A9 20 +  MWA #DATA EDX
    13 2088 A9 00 85 8C A9 DC +  MWA #MAIN.EFFECT ECX
    13 2090 A9 60 85 84 A9 01 +  MWA #LEN EAX
    13 2098 20 00 20		 JSR RESOURCE.MEMCPY
    15 209B 4C 65 20			jmp sys.on
    16 209E			data
Source: arrays.asm
     1 DC00			effect
     3 DC00 00 00 00 00 00 00 + 	:256 dta [#&$e0]	;>>2
    56 DD00 38 3C 3F 43 47 4B + TIDL	DTA L(56,60,63,67,71,75,80,85,90,95,101,107,113,120,127,135,143,151,160,170,180,190,202,214,226,240,254,269,285,302,320,339,360,381,404,428,453,480,508,538,570,604,640,678,720,762,808,856)
    58 				tidh	dta h(\
    59 				56,\
    60 				60,\
    61 				63,\
    62 				67,\
    63 				71,\
    64 				75,\
    65 				80,\
    66 				85,\
    67 				90,\
    68 				95,\
    69 				101,\
    70 				107,\
    71 				113,\
    72 				120,\
    73 				127,\
    74 				135,\
    75 				143,\
    76 				151,\
    77 				160,\
    78 				170,\
    79 				180,\
    80 				190,\
    81 				202,\
    82 				214,\
    83 				226,\
    84 				240,\
    85 				254,\
    86 				269,\
    87 				285,\
    88 				302,\
    89 				320,\
    90 				339,\
    91 				360,\
    92 				381,\
    93 				404,\
    94 				428,\
    95 				453,\
    96 				480,\
    97 				508,\
    98 				538,\
    99 				570,\
   100 				604,\
   101 				640,\
   102 				678,\
   103 				720,\
   104 				762,\
   105 				808,\
   106 				856)
   106 DD30 00 00 00 00 00 00 + TIDH	DTA H(56,60,63,67,71,75,80,85,90,95,101,107,113,120,127,135,143,151,160,170,180,190,202,214,226,240,254,269,285,302,320,339,360,381,404,428,453,480,508,538,570,604,640,678,720,762,808,856)
    23 					.print '$R RCASM   ',main.EFFECT,'..',main.EFFECT+len-1," 'arrays.asm'"
    23 				$R RCASM   $DC00..$DD5F 'arrays.asm'
    25 02E2-02E3> 75 20			ini mcpy
   110 21FE				RCDATA 'volume.tab' VOLUME 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 2100			len = .filesize('volume.tab')-0
    10 21FE				org RESORIGIN
    12 2075-4195> 20 41 20	mcpy	jsr sys.off
    14 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    14 2080 A9 00 85 8C A9 DE +  MWA #MAIN.VOLUME ECX
    14 2088 A9 00 85 84 A9 21 +  MWA #LEN EAX
    14 2090 20 00 20		 JSR RESOURCE.MEMCPY
    16 2093 4C 65 20			jmp sys.on
    18 2096 00 00 00 00 00 00 + data	ins 'volume.tab',0
    20 					.print '$R RCDATA  ',main.VOLUME,'..',main.VOLUME+len-1," 'volume.tab'"
    20 				$R RCDATA  $DE00..$FEFF 'volume.tab'
    22 02E2-02E3> 75 20			ini mcpy
Source: modplay2.a65
   111 4196				RCDATA 'draco_6bit.dat' VOL6BIT 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0300			len = .filesize('draco_6bit.dat')-0
    10 4196				org RESORIGIN
    12 2075-2395> 20 41 20	mcpy	jsr sys.off
    14 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    14 2080 A9 00 85 8C A9 D8 +  MWA #MAIN.VOL6BIT ECX
    14 2088 A9 00 85 84 A9 03 +  MWA #LEN EAX
    14 2090 20 00 20		 JSR RESOURCE.MEMCPY
    16 2093 4C 65 20			jmp sys.on
    18 2096 10 10 10 10 10 10 + data	ins 'draco_6bit.dat',0
    20 					.print '$R RCDATA  ',main.VOL6BIT,'..',main.VOL6BIT+len-1," 'draco_6bit.dat'"
    20 				$R RCDATA  $D800..$DAFF 'draco_6bit.dat'
    22 02E2-02E3> 75 20			ini mcpy
Source: modplay2.a65
   112 				.endl
   113
   114 				; ------------------------------------------------------------
   115
   116 2396				org CODEORIGIN
   117
   118 2000				STATICDATA
Macro: STATICDATA [Source: modplay2.a65]
     1 2000-3799> 02 44 3A 00 + .by  $02 $44 $3A $00 $05 $4F $6E $6C  $79 $20 $00 $14 $20 $62 $79 $74  $65 $73 $20 $6C $65 $6E $67 $74
     2 2018 68 20 73 61 6D 70 + .by  $68 $20 $73 $61 $6D $70 $6C $65  $00 $04 $4D $2E $4B $2E $00 $13  $55 $6E $73 $75 $70 $6F $72 $74
     3 2030 65 64 20 4D 4F 44 + .by  $65 $64 $20 $4D $4F $44 $20 $66  $69 $6C $65 $00 $06 $4E $61 $6D  $65 $3A $20 $00 $09 $53 $61 $6D
     4 2048 70 6C 65 73 3A 20 + .by  $70 $6C $65 $73 $3A $20 $00 $10  $20 $73 $61 $6D $70 $6C $65 $73  $20 $61 $6C $6C $6F $77 $65 $64
     5 2060 00 0D 4E 65 65 64 + .by  $00 $0D $4E $65 $65 $64 $20 $6D  $69 $6E $69 $6D $75 $6D $20 $00  $16 $20 $62 $61 $6E $6B $73 $20
     6 2078 65 78 70 61 6E 64 + .by  $65 $78 $70 $61 $6E $64 $65 $64  $20 $6D $65 $6D $6F $72 $79 $00  $0E $4C $6F $61 $64 $20 $50 $61
     7 2090 74 74 65 72 6E 3A + .by  $74 $74 $65 $72 $6E $3A $20 $00  $0D $4C $6F $61 $64 $20 $53 $61  $6D $70 $6C $65 $3A $20 $00 $15
     8 20A8 4D 4F 44 20 50 6C + .by  $4D $4F $44 $20 $50 $6C $61 $79  $65 $72 $20 $32 $2E $33 $20 $28  $36 $35 $30 $32 $29 $00 $B0 $06
     9 20C0 50 06 F4 05 A0 05 + .by  $50 $06 $F4 $05 $A0 $05 $4C $05  $00 $05 $B8 $04 $74 $04 $34 $04  $F8 $03 $C0 $03 $80 $03 $58 $03
    10 20D8 28 03 FA 02 D0 02 + .by  $28 $03 $FA $02 $D0 $02 $A6 $02  $80 $02 $5C $02 $3A $02 $1A $02  $FC $01 $E0 $01 $C5 $01 $AC $01
    11 20F0 94 01 7D 01 68 01 + .by  $94 $01 $7D $01 $68 $01 $53 $01  $40 $01 $2E $01 $1D $01 $0D $01  $FE $00 $F0 $00 $E2 $00 $D6 $00
    12 2108 CA 00 BE 00 B4 00 + .by  $CA $00 $BE $00 $B4 $00 $AA $00  $A0 $00 $97 $00 $8F $00 $87 $00  $7F $00 $78 $00 $71 $00
Source: modplay2.a65
   119
   120 				; ------------------------------------------------------------
   121
   122 211E			RTLIB
   123 211E				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   124
   125 				.print 'ZPAGE: ',zpage,'..',zpend-1
   125 				ZPAGE: $0080..$00D3
   126
   127 				.print 'RTLIB: ',RTLIB,'..',*-1
   127 				RTLIB: $211E..$2769
   128
   129 				; ------------------------------------------------------------
   130
   131 276A			START
   132 276A BA				tsx
   133 276B 8E F5 36			stx MAIN.@halt+1
   134
   135 = 0080			VLEN	= VARDATASIZE-VARINITSIZE
   136 = 3C14			VADR	= DATAORIGIN+VARINITSIZE
   137
   138 					ift VADR > $BFFF
   139 					ert 'Invalid memory address range ',VADR
   140 					eli (VLEN>0) && (VLEN<=256)
   141 276E A2 80			ldx #256-VLEN
   142 2770 A9 00			lda #$00
   143 2772 9D 94 3B E8 D0 FA		sta:rne VADR+VLEN-256,x+
   144 					eli VLEN>256
   145 					@fill #VADR #VLEN #$00
   146 					eif
   147
   148 				.ifdef :psptr
   149 					mwa #PROGRAMSTACK :psptr
   150 				.fi
   151
   152 					.ifdef MAIN.@DEFINES.ROMOFF
   153 					icl 'atari\romoff.asm'
   154 					.fi
   155
   156 2778 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   157 277A BD 40 03 9D FA 36 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   158
   159 2783 E8				inx						; X = 0
   160 2784 86 80			stx bp						; BP = 0
   161
   162 2786 8E 08 D2			stx audctl					; reset POKEY
   163 2789 8E 18 D2			stx audctl+$10
   164 278C A9 03			lda #3
   165 278E 8D 0F D2			sta skctl
   166 2791 8D 1F D2			sta skctl+$10
   167
   168 2794 CA				dex						; X = 255
   169
   170 2795				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: modplay2.a65]
    19 2795 20 38 29			jsr MAIN.OBJECTS.@UnitInit
   171
   172 2798			.local	MAIN						; PROCEDURE
   173
   174 2798 4C BC 36			jmp l_00C5
   175
   176 				; ------------------------------------------------------------
   177
   178 279B			.local	SYSTEM						; UNIT
   179
   180 279B			.local	HEXSTR						; FUNCTION | ASSEMBLER | REGISTER
   181
   182 				; -------------------  ASM Block 00000001  -------------------
   183
   184 279B 20 13 26			jsr @hexStr
   185
   186 				;	@move #@buf Result #33
   187 279E A0 DF			ldy #256-33
   188 27A0 B9 21 03 99 C8 36 + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   189
   190 27A9			@exit
   191
   192 				; ------------------------------------------------------------
   193
   194 = 0088			VALUE	= :EDX
   195 = 008C			DIGITS	= :ECX
   196 = 37A7			adr.RESULT	= [DATAORIGIN+$000B] .array [33]
   197 27A9			.var RESULT	= adr.RESULT .word
   198
   199 = 27AA			@VarData	= RESULT
   200 = 0021			@VarDataSize	= 33
   201
   202 27A9 60				rts						; ret
   203 = 27AA A7 37		RESULT
   203 				.endl
   204
   205 27AC			.local	PARAMCOUNT					; FUNCTION | ASSEMBLER
   206
   207 				; -------------------  ASM Block 00000043  -------------------
   208
   209 					@cmdline #255
   209 				 LDA# 255\ JSR @CMDLINE
   209 27AC A9 FF		 LDA# 255
   209 27AE 20 A3 22		 JSR @CMDLINE
   210 27B1 8D C8 37			sta Result
   211
   212 27B4			@exit
   213
   214 				; ------------------------------------------------------------
   215
   216 = 37C8			RESULT	= DATAORIGIN+$002C
   217 27B4 60				rts						; ret
   218 				.endl
   219
   220 27B5			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   221 27B5 8D C9 37			sta I
   222
   223 				; -------------------  ASM Block 00000044  -------------------
   224
   225 					@cmdline i
   225 				 LDA I\ JSR @CMDLINE
   225 27B8 AD C9 37		 LDA I
   225 27BB 20 A3 22		 JSR @CMDLINE
   226
   227 				;	@move #@buf Result #33
   228 27BE A0 DF			ldy #256-33
   229 27C0 B9 21 03 99 EB 36 + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   230
   231 27C9			@exit
   232
   233 				; ------------------------------------------------------------
   234
   235 = 37C9			I	= DATAORIGIN+$002D
   236 = 37CA			adr.RESULT	= [DATAORIGIN+$002E] .array [33]
   237 27C9			.var RESULT	= adr.RESULT .word
   238
   239 = 37C9			@VarData	= I
   240 = 0022			@VarDataSize	= 34
   241
   242 27C9 60				rts						; ret
   243 = 27CA CA 37		RESULT
   243 				.endl
   244
   245 27CC			.local	SWAP_012F					; FUNCTION | OVERLOAD
   246
   247 				; optimize OK (SYSTEM), line = 2229
   248
   249 27CC AD EC 37			lda A+1
   250 27CF 8D ED 37			sta RESULT
   251 27D2 AD EB 37			lda A
   252 27D5 8D EE 37			sta RESULT+1
   253 27D8			@exit
   254
   255 				; ------------------------------------------------------------
   256
   257 = 37EB			A	= DATAORIGIN+$004F
   258 = 37ED			RESULT	= DATAORIGIN+$0051
   259
   260 = 37EB			@VarData	= A
   261 = 0002			@VarDataSize	= 2
   262
   263 27D8 60				rts						; ret
   264 				.endl
   265
   266 				; ------------------------------------------------------------
   267
   268 = 0101			__PORTB_BANKS	= $0101
   269 = 0648			M_PI_2	= $0648
   270 = 0192			D_PI_2	= $0192
   271 = 0004			D_PI_180	= $04
   272 = 0000			MGTIA	= $00
   273 = 0080			MVBXE	= $80
   274 = 0000			VBXE_XDLADR	= $00
   275 = 00E0			VBXE_BCBTMP	= $E0
   276 = 0100			VBXE_BCBADR	= $0100
   277 = 1000			VBXE_MAPADR	= $1000
   278 = 1000			VBXE_CHBASE	= $1000
   279 = 5000			VBXE_OVRADR	= $5000
   280 = B000			VBXE_WINDOW	= $B000
   281 = 0000			IDLI	= $00
   282 = 0001			IVBL	= $01
   283 = 0002			ITIM1	= $02
   284 = 0003			ITIM2	= $03
   285 = 0004			ITIM4	= $04
   286 = 00FE			CH_DELCHR	= $FE
   287 = 009B			CH_ENTER	= $9B
   288 = 001B			CH_ESC	= $1B
   289 = 001C			CH_CURS_UP	= $1C
   290 = 001D			CH_CURS_DOWN	= $1D
   291 = 001E			CH_CURS_LEFT	= $1E
   292 = 001F			CH_CURS_RIGHT	= $1F
   293 = 007F			CH_TAB	= $7F
   294 = 009B			CH_EOL	= $9B
   295 = 007D			CH_CLR	= $7D
   296 = 00FD			CH_BELL	= $FD
   297 = 007E			CH_DEL	= $7E
   298 = 009C			CH_DELLINE	= $9C
   299 = 009D			CH_INSLINE	= $9D
   300 = 0000			PAL_PMCOLOR0	= $00
   301 = 0001			PAL_PMCOLOR1	= $01
   302 = 0002			PAL_PMCOLOR2	= $02
   303 = 0003			PAL_PMCOLOR3	= $03
   304 = 0004			PAL_COLOR0	= $04
   305 = 0005			PAL_COLOR1	= $05
   306 = 0006			PAL_COLOR2	= $06
   307 = 0007			PAL_COLOR3	= $07
   308 = 0008			PAL_COLBAK	= $08
   309 = 0000			COLOR_BLACK	= $00
   310 = 000E			COLOR_WHITE	= $0E
   311 = 0032			COLOR_RED	= $32
   312 = 0096			COLOR_CYAN	= $96
   313 = 0068			COLOR_VIOLET	= $68
   314 = 00C4			COLOR_GREEN	= $C4
   315 = 0074			COLOR_BLUE	= $74
   316 = 00EE			COLOR_YELLOW	= $EE
   317 = 0028			COLOR_ORANGE	= $28
   318 = 00E4			COLOR_BROWN	= $E4
   319 = 003C			COLOR_LIGHTRED	= $3C
   320 = 0004			COLOR_GRAY1	= $04
   321 = 0006			COLOR_GRAY2	= $06
   322 = 000A			COLOR_GRAY3	= $0A
   323 = 00CC			COLOR_LIGHTGREEN	= $CC
   324 = 007C			COLOR_LIGHTBLUE	= $7C
   325 = 0004			FMOPENREAD	= $04
   326 = 0008			FMOPENWRITE	= $08
   327 = 0009			FMOPENAPPEND	= $09
   328 = 000C			FMOPENREADWRITE	= $0C
   329 = 379C			SCREENWIDTH	= DATAORIGIN+$0000
   330 = 379E			SCREENHEIGHT	= DATAORIGIN+$0002
   331 = 37A0			DATESEPARATOR	= DATAORIGIN+$0004
   332 = D20A			RND	= $D20A
   333 = 02C0			adr.PALETTE	= $02C0
   334 27D9			.var PALETTE	= adr.PALETTE .word
   335 = D012			adr.HPALETTE	= $D012
   336 27D9			.var HPALETTE	= adr.HPALETTE .word
   337 = 37A1			FILEMODE	= DATAORIGIN+$0005
   338 = 37A2			GRAPHMODE	= DATAORIGIN+$0006
   339 = 37A3			IORESULT	= DATAORIGIN+$0007
   340 = 37A4			EOLN	= DATAORIGIN+$0008
   341 = 37A5			RNDSEED	= DATAORIGIN+$0009
   342
   343 = 27D9 C0 02		PALETTE
   343 = 27DB 12 D0		HPALETTE
   343 				.endl							; UNIT SYSTEM
   344
   345 				; ------------------------------------------------------------
   346
   347 27DD			.local	ATARI						; UNIT
   348
   349 				; ------------------------------------------------------------
   350
   351 = 0010			IRQENS	= $10
   352 = 0012			RTCLOK	= $12
   353 = 0012			RTCLOK1	= $12
   354 = 0013			RTCLOK2	= $13
   355 = 0014			RTCLOK3	= $14
   356 = 004D			ATRACT	= $4D
   357 = 0052			LMARGIN	= $52
   358 = 0053			RMARGIN	= $53
   359 = 0054			ROWCRS	= $54
   360 = 0055			COLCRS	= $55
   361 = 0057			DINDEX	= $57
   362 = 0058			SAVMSC	= $58
   363 = 0062			PALNTS	= $62
   364 = 006A			RAMTOP	= $6A
   365 = 0200			VDSLST	= $0200
   366 = 0230			SDLSTL	= $0230
   367 = 0290			TXTROW	= $0290
   368 = 0291			TXTCOL	= $0291
   369 = 0293			TINDEX	= $0293
   370 = 0294			TXTMSC	= $0294
   371 = 022F			SDMCTL	= $022F
   372 = 026F			GPRIOR	= $026F
   373 = 02F0			CRSINH	= $02F0
   374 = 02F3			CHACT	= $02F3
   375 = 02F4			CHBAS	= $02F4
   376 = 02FC			CH	= $02FC
   377 = 02C0			PCOLR0	= $02C0
   378 = 02C1			PCOLR1	= $02C1
   379 = 02C2			PCOLR2	= $02C2
   380 = 02C3			PCOLR3	= $02C3
   381 = 02C4			COLOR0	= $02C4
   382 = 02C5			COLOR1	= $02C5
   383 = 02C6			COLOR2	= $02C6
   384 = 02C7			COLOR3	= $02C7
   385 = 02C8			COLOR4	= $02C8
   386 = 02C8			COLBAKS	= $02C8
   387 = D000			HPOSP0	= $D000
   388 = D001			HPOSP1	= $D001
   389 = D002			HPOSP2	= $D002
   390 = D003			HPOSP3	= $D003
   391 = D004			HPOSM0	= $D004
   392 = D005			HPOSM1	= $D005
   393 = D006			HPOSM2	= $D006
   394 = D007			HPOSM3	= $D007
   395 = D008			SIZEP0	= $D008
   396 = D009			SIZEP1	= $D009
   397 = D00A			SIZEP2	= $D00A
   398 = D00B			SIZEP3	= $D00B
   399 = D00C			SIZEM	= $D00C
   400 = D00D			GRAFP0	= $D00D
   401 = D00E			GRAFP1	= $D00E
   402 = D00F			GRAFP2	= $D00F
   403 = D010			GRAFP3	= $D010
   404 = D011			GRAFM	= $D011
   405 = D004			P0PF	= $D004
   406 = D014			PAL	= $D014
   407 = D012			COLPM0	= $D012
   408 = D013			COLPM1	= $D013
   409 = D014			COLPM2	= $D014
   410 = D015			COLPM3	= $D015
   411 = D016			COLPF0	= $D016
   412 = D017			COLPF1	= $D017
   413 = D018			COLPF2	= $D018
   414 = D019			COLPF3	= $D019
   415 = D01A			COLBK	= $D01A
   416 = D01B			PRIOR	= $D01B
   417 = D01D			GRACTL	= $D01D
   418 = D01E			HITCLR	= $D01E
   419 = D01F			CONSOL	= $D01F
   420 = D200			AUDF1	= $D200
   421 = D201			AUDC1	= $D201
   422 = D202			AUDF2	= $D202
   423 = D203			AUDC2	= $D203
   424 = D204			AUDF3	= $D204
   425 = D205			AUDC3	= $D205
   426 = D206			AUDF4	= $D206
   427 = D207			AUDC4	= $D207
   428 = D208			AUDCTL	= $D208
   429 = D209			KBCODE	= $D209
   430 = D20E			IRQEN	= $D20E
   431 = D20F			SKSTAT	= $D20F
   432 = D300			PORTA	= $D300
   433 = D301			PORTB	= $D301
   434 = D400			DMACTL	= $D400
   435 = D401			CHACTL	= $D401
   436 = D402			DLISTL	= $D402
   437 = D404			HSCROL	= $D404
   438 = D405			VSCROL	= $D405
   439 = D407			PMBASE	= $D407
   440 = D409			CHBASE	= $D409
   441 = D40A			WSYNC	= $D40A
   442 = D40B			VCOUNT	= $D40B
   443 = D40C			PENH	= $D40C
   444 = D40D			PENV	= $D40D
   445 = D40E			NMIEN	= $D40E
   446 = FFFA			NMIVEC	= $FFFA
   447 = FFFC			RESETVEC	= $FFFC
   448 = FFFE			IRQVEC	= $FFFE
   449
   450 				.endl							; UNIT ATARI
   451
   452 				; ------------------------------------------------------------
   453
   454 27DD			.local	CRT						; UNIT
   455
   456 27DD			.local	GOTOXY						; PROCEDURE | ASSEMBLER
   457
   458 				; -------------------  ASM Block 00000056  -------------------
   459
   460 27DD AC F0 37			ldy x
   461 27E0 F0 01			beq @+
   462
   463 27E2 88				dey
   464
   465 27E3 84 55		@	sty colcrs
   466 27E5 A0 00 84 56			mvy #$00 colcrs+1
   467
   468 27E9 AC F1 37			ldy y
   469 27EC F0 01			beq @+
   470
   471 27EE 88				dey
   472
   473 27EF 84 54		@	sty rowcrs
   474
   475 				; ------------------------------------------------------------
   476
   477 = 37F0			X	= DATAORIGIN+$0054
   478 = 37F1			Y	= DATAORIGIN+$0055
   479
   480 = 37F0			@VarData	= X
   481 = 0002			@VarDataSize	= 2
   482
   483 27F1			@exit
   484 					.ifdef @new
   485 					lda <@VarData
   486 					sta :ztmp
   487 					lda >@VarData
   488 					ldy #@VarDataSize-1
   489 					jmp @FreeMem
   490 					els
   491 27F1 60				rts						; ret
   492 					eif
   493 				.endl
   494
   495 27F2			.local	WHEREX						; FUNCTION | ASSEMBLER
   496
   497 				; -------------------  ASM Block 00000057  -------------------
   498
   499 27F2 A4 55			ldy colcrs
   500 27F4 C8				iny
   501 27F5 8C F2 37			sty Result
   502
   503
   504 27F8			@exit
   505
   506 				; ------------------------------------------------------------
   507
   508 = 37F2			RESULT	= DATAORIGIN+$0056
   509 27F8 60				rts						; ret
   510 				.endl
   511
   512 27F9			.local	WHEREY						; FUNCTION | ASSEMBLER
   513
   514 				; -------------------  ASM Block 00000058  -------------------
   515
   516 27F9 A4 54			ldy rowcrs
   517 27FB C8				iny
   518 27FC 8C F3 37			sty Result
   519
   520 27FF			@exit
   521
   522 				; ------------------------------------------------------------
   523
   524 = 37F3			RESULT	= DATAORIGIN+$0057
   525 27FF 60				rts						; ret
   526 				.endl
   527
   528 2800			.local	TEXTMODE					; PROCEDURE | ASSEMBLER
   529 2800 8D F4 37			sta MODE
   530
   531 				; -------------------  ASM Block 00000059  -------------------
   532
   533 2803 8A 48			txa:pha
   534
   535 2805 20 A4 23			@clrscr
   536
   537 2808 68 AA			pla:tax
   538
   539 				; ------------------------------------------------------------
   540
   541 = 37F4			MODE	= DATAORIGIN+$0058
   542
   543 = 37F4			@VarData	= MODE
   544 = 0001			@VarDataSize	= 1
   545
   546 280A			@exit
   547 					.ifdef @new
   548 					lda <@VarData
   549 					sta :ztmp
   550 					lda >@VarData
   551 					ldy #@VarDataSize-1
   552 					jmp @FreeMem
   553 					els
   554 280A 60				rts						; ret
   555 					eif
   556 				.endl
   557
   558 				; ------------------------------------------------------------
   559
   560 = 37EF			TEXTATTR	= DATAORIGIN+$0053
   561 = D01F			CONSOL	= $D01F
   562 = 0000			CN_START_SELECT_OPTION	= $00
   563 = 0001			CN_SELECT_OPTION	= $01
   564 = 0002			CN_START_OPTION	= $02
   565 = 0003			CN_OPTION	= $03
   566 = 0004			CN_START_SELECT	= $04
   567 = 0005			CN_SELECT	= $05
   568 = 0006			CN_START	= $06
   569 = 0007			CN_NONE	= $07
   570 = 0000			BW40	= $00
   571 = 0001			CO40	= $01
   572 = 0002			BW80	= $02
   573 = 0003			CO80	= $03
   574 = 0007			MONO	= $07
   575 = 0001			C40	= $01
   576 = 0003			C80	= $03
   577 = 0000			BLACK	= $00
   578 = 000F			WHITE	= $0F
   579 = 0026			RED	= $26
   580 = 00AC			CYAN	= $AC
   581 = 0048			PURPLE	= $48
   582 = 00B6			GREEN	= $B6
   583 = 0086			BLUE	= $86
   584 = 00DC			YELLOW	= $DC
   585 = 0018			ORANGE	= $18
   586 = 00F4			BROWN	= $F4
   587 = 002A			LIGHT_RED	= $2A
   588 = 0004			DARK_GREY	= $04
   589 = 0008			GREY	= $08
   590 = 00BC			LIGHT_GREEN	= $BC
   591 = 009A			LIGHT_BLUE	= $9A
   592 = 000C			LIGHT_GREY	= $0C
   593 = 0080			BLINK	= $80
   594
   595 				.endl							; UNIT CRT
   596
   597 				; ------------------------------------------------------------
   598
   599 280B			.local	MISC						; UNIT
   600
   601 280B			.local	DETECTMEM					; FUNCTION | ASSEMBLER
   602
   603 				; -------------------  ASM Block 00000069  -------------------
   604
   605 280B 8A 48			txa:pha
   606
   607 = 0400			bsav	= @buf
   608
   609 = 4000			ext_b	= $4000		;cokolwiek z zakresu $4000-$7FFF
   610
   611 280D A0 00			ldy #0
   612 280F B9 20 28 99 00 06	mov	mva copy,y detect,y
   613 2815 C8				iny
   614 2816 C0 8C			cpy #.sizeof(detect)
   615 2818 D0 F5			bne mov
   616
   617 281A 20 00 06			jsr detect
   618
   619 281D 4C AC 28			jmp stop
   620
   621 2820			copy
   622
   623 0600			.local	detect,$0600
   624
   625 0600 AD 01 D3			lda portb
   626 0603 48				pha
   627
   628 0604 AD 0B D4 D0 FB		lda:rne vcount
   629
   630 				;	lda #$ff
   631 				;	sta portb
   632
   633 0609 AD 00 40			lda ext_b
   634 060C 48				pha
   635
   636 060D A2 0F			ldx #$0f	;zapamiętanie bajtów ext (z 16 bloków po 64k)
   637 060F 20 7F 06		_p0	jsr setpb
   638 0612 AD 00 40			lda ext_b
   639 0615 9D 00 04			sta bsav,x
   640 0618 CA				dex
   641 0619 10 F4			bpl _p0
   642
   643 061B A2 0F			ldx #$0f	;wyzerowanie ich (w oddzielnej pętli, bo nie wiadomo
   644 061D 20 7F 06		_p1	jsr setpb	;które kombinacje bitów PORTB wybierają te same banki)
   645 0620 A9 00			lda #$00
   646 0622 8D 00 40			sta ext_b
   647 0625 CA				dex
   648 0626 10 F5			bpl _p1
   649
   650 0628 8E 01 D3			stx portb	;eliminacja pamięci podstawowej
   651 062B 8E 00 40			stx ext_b
   652 062E 86 00			stx $00		;niezbędne dla niektórych rozszerzeń do 256k
   653
   654 0630 A0 00			ldy #$00	;pętla zliczająca bloki 64k
   655 0632 A2 0F			ldx #$0f
   656 0634 20 7F 06		_p2	jsr setpb
   657 0637 AD 00 40			lda ext_b	;jeśli ext_b jest różne od zera, blok 64k już zliczony
   658 063A D0 23			bne _n2
   659
   660 063C CE 00 40			dec ext_b	;w przeciwnym wypadku zaznacz jako zliczony
   661
   662 063F AD 00 40			lda ext_b	;sprawdz, czy sie zaznaczyl; jesli nie -> cos nie tak ze sprzetem
   663 0642 10 1B			bpl _n2
   664
   665 0644 AD 01 D3			lda portb	;wpisz wartość PORTB do tablicy dla banku 0
   666
   667 0647 29 FE			and #$fe
   668
   669 0649 99 01 01			sta adr.banks,y
   670 064C 49 04			eor #%00000100	;uzupełnij wartości dla banków 1, 2, 3
   671 064E 99 02 01			sta adr.banks+1,y
   672 0651 49 0C			eor #%00001100
   673 0653 99 03 01			sta adr.banks+2,y
   674 0656 49 04			eor #%00000100
   675 0658 99 04 01			sta adr.banks+3,y
   676 065B C8				iny
   677 065C C8				iny
   678 065D C8				iny
   679 065E C8				iny
   680
   681 065F CA			_n2	dex
   682 0660 10 D2			bpl _p2
   683
   684 0662 A2 0F			ldx #$0f	;przywrócenie zawartości ext
   685 0664 20 7F 06		_p3	jsr setpb
   686 0667 BD 00 04			lda bsav,x
   687 066A 8D 00 40			sta ext_b
   688 066D CA				dex
   689 066E 10 F4			bpl _p3
   690
   691 0670 8E 01 D3			stx portb	;X=$FF
   692
   693 0673 68				pla
   694 0674 8D 00 40			sta ext_b
   695
   696 0677 68				pla
   697 0678 8D 01 D3			sta portb
   698
   699 067B 8C F5 37			sty Result
   700
   701 067E 60				rts
   702
   703 				; podprogramy
   704 067F 8A			setpb	txa		;zmiana kolejności bitów: %0000dcba -> %cba000d0
   705 0680 4A				lsr
   706 0681 6A				ror
   707 0682 6A				ror
   708 0683 6A				ror
   709 0684 69 01			adc #$01	;ustawienie bitu nr 1 w zaleznosci od stanu C
   710 0686 09 01			ora #$01	;ustawienie bitu sterującego OS ROM na wartosc domyslna
   711 0688 8D 01 D3			sta portb
   712 068B 60				rts
   713
   714 				.endl
   715
   716 28AC 68 AA		stop	pla:tax
   717
   718
   719 28AE			@exit
   720
   721 				; ------------------------------------------------------------
   722
   723 = 37F5			RESULT	= DATAORIGIN+$0059
   724 28AE 60				rts						; ret
   725 				.endl
   726
   727 				; ------------------------------------------------------------
   728
   729 = 0101			adr.BANKS	= $0101
   730 28AF			.var BANKS	= adr.BANKS .word
   731 = FFF7			DETECTOS	= $FFF7
   732
   733 = 28AF 01 01		BANKS
   733 				.endl							; UNIT MISC
   734
   735 				; ------------------------------------------------------------
   736
   737 28B1			.local	OBJECTS						; UNIT
   738
   739 28B1			.local	TMEMORYSTREAM.CREATE				; PROCEDURE
   740 28B1 8D F7 37			sta TMEMORYSTREAM
   741 28B4 8C F8 37			sty TMEMORYSTREAM+1
   742 28B7 8D F9 37			sta POSITION
   743 28BA 8C FA 37			sty POSITION+1
   744 28BD 18 69 04			add #4
   745 28C0 90 01			scc
   746 28C2 C8				iny
   747 28C3 8D FB 37			sta SIZE
   748 28C6 8C FC 37			sty SIZE+1
   749
   750 				; optimize OK (OBJECTS), line = 72
   751
   752 28C9 AD F6 37			lda BANK
   753 28CC 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
   754 28CE 46 BD			lsr :STACKORIGIN+STACKWIDTH*2+9
   755 28D0 6A				ror @
   756 28D1 46 BD			lsr :STACKORIGIN+STACKWIDTH*2+9
   757 28D3 6A				ror @
   758 28D4 85 AD			sta :STACKORIGIN+STACKWIDTH+9
   759 28D6 AC FB 37 84 82 AC + 	mwy SIZE :bp2
   760 28E0 A0 00			ldy #$00
   761 28E2 98				tya
   762 28E3 91 82			sta (:bp2),y
   763 28E5 C8				iny
   764 28E6 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
   765 28E8 91 82			sta (:bp2),y
   766 28EA C8				iny
   767 28EB A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
   768 28ED 91 82			sta (:bp2),y
   769 28EF C8				iny
   770 28F0 A9 00			lda #$00
   771 28F2 91 82			sta (:bp2),y
   772
   773 				; optimize OK (OBJECTS), line = 73
   774
   775 28F4 AC F9 37 84 82 AC + 	mwy POSITION :bp2
   776 28FE A0 00			ldy #$00
   777 2900 91 82			sta (:bp2),y
   778 2902 C8				iny
   779 2903 91 82			sta (:bp2),y
   780 2905 C8				iny
   781 2906 91 82			sta (:bp2),y
   782 2908 C8				iny
   783 2909 91 82			sta (:bp2),y
   784
   785 				; ------------------------------------------------------------
   786
   787 = 37F7			TMEMORYSTREAM	= DATAORIGIN+$005B
   788 = 37F9			POSITION	= DATAORIGIN+$005D
   789 = 37FB			SIZE	= DATAORIGIN+$005F
   790
   791 = 37F7			@VarData	= TMEMORYSTREAM
   792 = 0006			@VarDataSize	= 6
   793
   794 290B			@exit
   795 					.ifdef @new
   796 					lda <@VarData
   797 					sta :ztmp
   798 					lda >@VarData
   799 					ldy #@VarDataSize-1
   800 					jmp @FreeMem
   801 					els
   802 290B 60				rts						; ret
   803 					eif
   804 				.endl
   805
   806 290C			.local	TMEMORYSTREAM.WRITEBUFFER			; PROCEDURE | ASSEMBLER | REGISTER
   807 290C 8D 01 38			sta TMEMORYSTREAM
   808 290F 8C 02 38			sty TMEMORYSTREAM+1
   809 2912 8D 03 38			sta POSITION
   810 2915 8C 04 38			sty POSITION+1
   811 2918 18 69 04			add #4
   812 291B 90 01			scc
   813 291D C8				iny
   814 291E 8D 05 38			sta SIZE
   815 2921 8C 06 38			sty SIZE+1
   816
   817 				; -------------------  ASM Block 00000073  -------------------
   818
   819 2924 A5 8C			lda Count
   820 2926 05 8D			ora Count+1
   821 2928 F0 0D			beq skp
   822
   823 292A AD 03 38 85 8E AD + 	mwa position :ecx+2
   824 2934 20 58 24			jsr @xmsWriteBuf
   825 2937			skp
   826
   827 				; ------------------------------------------------------------
   828
   829 = 3801			TMEMORYSTREAM	= DATAORIGIN+$0065
   830 = 0088			BUFFER	= :EDX
   831 = 008C			COUNT	= :ECX
   832 = 3803			POSITION	= DATAORIGIN+$0067
   833 = 3805			SIZE	= DATAORIGIN+$0069
   834
   835 = 3803			@VarData	= POSITION
   836 = 0004			@VarDataSize	= 4
   837
   838 2937			@exit
   839 					.ifdef @new
   840 					lda <@VarData
   841 					sta :ztmp
   842 					lda >@VarData
   843 					ldy #@VarDataSize-1
   844 					jmp @FreeMem
   845 					els
   846 2937 60				rts						; ret
   847 					eif
   848 				.endl
   849
   850 				; ------------------------------------------------------------
   851 				; ------------------------------------------------------------
   852 2938			@UnitInit
   853
   854 				; optimize FAIL ('MISC.DETECTMEM', OBJECTS), line = 178
   855
   856 2938 20 0B 28			jsr MISC.DETECTMEM
   857 293B AD F5 37			lda MISC.DETECTMEM.RESULT
   858 293E 8D F6 37			sta BANK
   859
   860 2941 60				rts
   861
   862 				; ------------------------------------------------------------
   863
   864 = 37F6			BANK	= DATAORIGIN+$005A
   865
   866 				.endl							; UNIT OBJECTS
   867
   868 2942			.local	PLAY						; PROCEDURE | ASSEMBLER
   869
   870 				; -------------------  ASM Block 00000080  -------------------
   871
   872
   873
   874 2942			.zpvar = $d8
   875
   876 2942			.zpvar nr0, nr1, nr2, nr3, patno, patend, cnts, pause, track_pos .byte
   877 2942			.zpvar pat0, pat1, pat2 .word
   878
   879 2942 8E D4 2C			stx _rx
   880
   881 2945 20 8B 2C			jsr wait
   882
   883 2948 78				sei
   884
   885 2949 A9 00			lda #$00
   886 294B 8D 0E D4			sta nmien
   887 294E 8D 0E D2			sta irqen
   888
   889 2951 A9 FE 8D 01 D3		mva #$fe portb
   890
   891 2956 A9 00			lda #0
   892
   893 2958 A2 08			ldx #8
   894 295A 9D 00 D2		lp	sta AUDF1,x
   895 295D 9D 10 D2			sta AUDF1+$10,x
   896 2960 CA				dex
   897 2961 10 F7			bpl lp
   898
   899 2963 AA				tax
   900 2964 B5 00 9D 00 DB E8 + 	mva:rne 0,x ZPAGE,x+
   901
   902 296C A2 00			ldx #0
   903 296E BD 1B 2A		mv0	lda .adr(playloop),x
   904 2971 95 00			sta playloop,x
   905 2973 E8				inx
   906 2974 E0 B8			cpx #.sizeof(playloop)
   907 2976 D0 F6			bne mv0
   908
   909 2978 A2 00			ldx #0
   910 297A BD D3 2A		mv1	lda .adr(mainloop),x
   911 297D 9D 00 04			sta mainloop,x
   912 2980 BD D3 2B			lda .adr(mainloop)+$100,x
   913 2983 9D 00 05			sta mainloop+$100,x
   914 2986 E8				inx
   915 2987 D0 F1			bne mv1
   916
   917 2989 AD 15 3C			lda SONG_LENGTH
   918 298C 8D 87 05			sta mainloop.patmax+1
   919
   920 				;	lda SONG_RESTART
   921 				;	sta mainloop.patres+1
   922
   923 298F A9 DE			lda >volume		; silence
   924 2991 85 80			sta playloop.ivol0+2
   925 2993 85 8C			sta playloop.ivol1+2
   926 2995 85 97			sta playloop.ivol2+2
   927 2997 85 A2			sta playloop.ivol3+2
   928
   929 					.ifdef MAIN.@DEFINES.COVOX
   930
   931 					lda >COVOX		; covox
   932 					sta playloop.ch0+2
   933 					sta playloop.ch1+2
   934 					sta playloop.ch2+2
   935 					sta playloop.ch3+2
   936
   937 					ldy #0
   938 					sty playloop.ch0+1
   939 					iny
   940 					sty playloop.ch1+1
   941 					iny
   942 					sty playloop.ch2+1
   943 					iny
   944 					sty playloop.ch3+1
   945
   946 					.else
   947
   948 2999 A9 DE			lda >VOLUME		; pokey
   949 299B 8D A7 29			sta av0+1
   950 299E 8D AC 29			sta av1+1
   951
   952 29A1 A2 20			ldx #32			; POKEY volume table
   953 29A3 A0 00			ldy #0
   954 29A5 B9 00 DE		mvol	lda VOLUME,y
   955 = 29A6			av0	equ *-2
   956 				;	:4 lsr @
   957 				;	ora #$10
   958 29A8 4A 4A			:2 lsr @
   959 29AA 99 00 DE			sta VOLUME,y
   960 = 29AB			av1	equ *-2
   961 29AD C8				iny
   962 29AE D0 F5			bne mvol
   963
   964 29B0 EE A7 29			inc av0+1
   965 29B3 EE AC 29			inc av1+1
   966 29B6 CA				dex
   967 29B7 10 EC			bpl mvol
   968
   969 					.endif
   970
   971 29B9 A9 00		start	lda #0
   972
   973 29BB 8D 00 D4			sta dmactl
   974
   975 29BE 85 DC			sta patno
   976 29C0 85 E0			sta track_pos
   977
   978 29C2 85 E1			sta pat0
   979 29C4 85 E3			sta pat1
   980 29C6 85 E5			sta pat2
   981
   982 29C8 A9 06			lda #6
   983 29CA 85 DF			sta pause
   984 29CC 85 DE			sta cnts
   985
   986 29CE AC 00 06			ldy adr.ORDER
   987 29D1 84 E2			sty pat0+1
   988 29D3 C8				iny
   989 29D4 84 E4			sty pat1+1
   990 29D6 C8				iny
   991 29D7 84 E6			sty pat2+1
   992
   993 29D9 A9 00 8D FA FF A9 + 	mwa	#mainloop nmivec	; custom NMI handler
   994 29E3 A9 00 8D FE FF A9 + 	mwa	#playloop irqvec	; custom IRQ handler
   995
   996 				;	mva	#$01	AUDCTL		; 0=POKEY 64KHz, 1=15KHz
   997
   998 					;set IRQ position in scanline for consistency and disable keyboard scan
   999 29ED 8D 0A D4			sta	wsync
  1000 29F0 A9 00			lda	#0
  1001 29F2 8D 0F D2			sta	skctl
  1002 29F5 8D 1F D2			sta	skctl+$10
  1003
  1004 29F8 8D 18 D2			sta	AUDCTL+$10
  1005
  1006 29FB A9 40 8D 08 D2		mva #%01000000	AUDCTL
  1007
  1008 2A00 A9 DA 8D 00 D2		mva #218	AUDF1		; 8 kHz
  1009
  1010 2A05 A9 01 8D 0E D2		mva	#$01	IRQEN
  1011
  1012 2A0A A9 01			lda	#1
  1013 2A0C 8D 0F D2			sta	skctl
  1014 2A0F 8D 09 D2			sta	stimer
  1015
  1016 2A12 A9 40 8D 0E D4		mva	#$40	nmien
  1017
  1018 2A17 58				cli
  1019
  1020 2A18 4C 9A 2C			jmp stop
  1021
  1022
  1023 0000			.local	playloop,0
  1024
  1025 0000 85 B4			sta regA
  1026 0002 86 B6			stx regX
  1027
  1028 0004 EE 0E D2			inc IRQEN
  1029
  1030 0007 A9 00			lda v0: #0
  1031 0009 A2 00			ldx v1: #0
  1032 000B 8D 01 D2			sta audc1
  1033 000E A9 00			lda v2: #0
  1034 0010 8E 03 D2			stx audc2
  1035 0013 8D 05 D2			sta audc3
  1036
  1037 					.ifdef MAIN.@DEFINES.STATUS
  1038 					lda #$0f
  1039 					sta colbak
  1040 					.endif
  1041
  1042 				; ---
  1043 				; ---	AUDC 1
  1044 				; ---
  1045
  1046 0016 A9 00		ist_0	lda #0
  1047 0018 69 00		iad0_m	adc #0
  1048 001A 85 17			sta ist_0+1
  1049 001C A5 7C			lda p_0c+1
  1050 001E 69 00		iad0_s	adc #0
  1051 0020 90 0A			bcc ext_0
  1052
  1053 0022 E6 7D			inc p_0c+2
  1054 0024 10 06			bpl ext_0
  1055
  1056 0026 A9 00		ire0_s	lda #0
  1057 0028 85 7D			sta p_0c+2
  1058 002A A9 00		ire0_m	lda #0
  1059
  1060 002C 85 7C		ext_0	sta p_0c+1
  1061
  1062 				; ---
  1063 				; ---	AUDC 2
  1064 				; ---
  1065
  1066 002E A9 00		ist_1	lda #0
  1067 0030 69 00		iad1_m	adc #0
  1068 0032 85 2F			sta ist_1+1
  1069 0034 A5 88			lda p_1c+1
  1070 0036 69 00		iad1_s	adc #0
  1071 0038 90 0A			bcc ext_1
  1072
  1073 003A E6 89			inc p_1c+2
  1074 003C 10 06			bpl ext_1
  1075
  1076 003E A9 00		ire1_s	lda #0
  1077 0040 85 89			sta p_1c+2
  1078 0042 A9 00		ire1_m	lda #0
  1079
  1080 0044 85 88		ext_1	sta p_1c+1
  1081
  1082 				; ---
  1083 				; ---	AUDC 3
  1084 				; ---
  1085
  1086 0046 A9 00		ist_2	lda #0
  1087 0048 69 00		iad2_m	adc #0
  1088 004A 85 47			sta ist_2+1
  1089 004C A5 93			lda p_2c+1
  1090 004E 69 00		iad2_s	adc #0
  1091 0050 90 0A			bcc ext_2
  1092
  1093 0052 E6 94			inc p_2c+2
  1094 0054 10 06			bpl ext_2
  1095
  1096 0056 A9 00		ire2_s	lda #0
  1097 0058 85 94			sta p_2c+2
  1098 005A A9 00		ire2_m	lda #0
  1099
  1100 005C 85 93		ext_2	sta p_2c+1
  1101
  1102 				; ---
  1103 				; ---	AUDC 4
  1104 				; ---
  1105
  1106 005E A9 00		ist_3	lda #0
  1107 0060 69 00		iad3_m	adc #0
  1108 0062 85 5F			sta ist_3+1
  1109 0064 A5 9E			lda p_3c+1
  1110 0066 69 00		iad3_s	adc #0
  1111 0068 90 0A			bcc ext_3
  1112
  1113 006A E6 9F			inc p_3c+2
  1114 006C 10 06			bpl ext_3
  1115
  1116 006E A9 00		ire3_s	lda #0
  1117 0070 85 9F			sta p_3c+2
  1118 0072 A9 00		ire3_m	lda #0
  1119
  1120 0074 85 9E		ext_3	sta p_3c+1
  1121
  1122
  1123
  1124 0076 A2 FE		bank0	ldx #$fe		; ch #0
  1125 0078 8E 01 D3			stx portb
  1126
  1127 007B AE FF FF		p_0c	ldx $ffff
  1128 007E BD 00 DE		ivol0	lda volume,x
  1129 0081 18				clc
  1130
  1131 0082 A2 FE		bank1	ldx #$fe		; ch #1
  1132 0084 8E 01 D3			stx portb
  1133
  1134 0087 AE FF FF		p_1c	ldx $ffff
  1135 008A 7D 00 DE		ivol1	adc volume,x
  1136
  1137 008D A2 FE		bank2	ldx #$fe		; ch #2
  1138 008F 8E 01 D3			stx portb
  1139
  1140 0092 AE FF FF		p_2c	ldx $ffff
  1141 0095 7D 00 DE		ivol2	adc volume,x
  1142
  1143 0098 A2 FE		bank3	ldx #$fe		; ch #3
  1144 009A 8E 01 D3			stx portb
  1145
  1146 009D AE FF FF		p_3c	ldx $ffff
  1147 00A0 7D 00 DE		ivol3	adc volume,x
  1148
  1149 00A3 AA				tax
  1150
  1151 00A4 BD 00 D8			lda vol6bit,x
  1152 00A7 85 08			sta v0
  1153
  1154 00A9 BD 00 D9			lda vol6bit+$100,x
  1155 00AC 85 0A			sta v1
  1156
  1157 00AE BD 00 DA			lda vol6bit+$200,x
  1158 00B1 85 0F			sta v2
  1159
  1160
  1161 					.ifdef MAIN.@DEFINES.STATUS
  1162 					lda #$00
  1163 					sta colbak
  1164 					.endif
  1165
  1166
  1167 00B3 A9 00			lda regA: #0
  1168 00B5 A2 00			ldx regX: #0
  1169
  1170 00B7 40				rti
  1171
  1172 				.endl
  1173
  1174
  1175 0400			.local	mainloop,$0400
  1176
  1177 0400 2C 0F D4			bit nmist
  1178 0403 10 01			bpl vbl
  1179
  1180 0405 40			exit	rti
  1181
  1182 0406 C6 DE		vbl	dec cnts
  1183 0408 D0 FB			bne exit
  1184
  1185 040A 8D B2 05			sta regA
  1186 040D 8E B4 05			stx regX
  1187 0410 8C B6 05			sty regY
  1188
  1189 0413 A9 00			lda #0
  1190 0415 85 DD			sta patend
  1191
  1192 0417 A9 FE			lda #$fe
  1193 0419 8D 01 D3			sta portb
  1194
  1195 041C A4 E0			ldy track_pos
  1196
  1197 				*---------------------------
  1198 				* track  0
  1199
  1200 041E			i_0	;ldy #1
  1201 041E B1 E3			lda (pat1),y
  1202 0420 8D 30 04			sta i_0c+1
  1203 0423 29 1F			and #$1f
  1204 0425 F0 08			beq i_0c
  1205 0427 AA				tax
  1206 0428 85 D8			sta nr0
  1207 042A BD 4F 01			lda adr.tivol-1,x
  1208 042D 85 80			sta playloop.ivol0+2
  1209
  1210 042F AE 00 DC		i_0c	ldx EFFECT
  1211 0432 F0 16			beq i_0f
  1212 0434 E0 40			cpx #$40
  1213 0436 D0 04			bne @+
  1214 					;ldy #2
  1215 0438 B1 E5			lda (pat2),y
  1216 043A 85 80			sta playloop.ivol0+2
  1217 043C E0 C0		@	cpx #$c0
  1218 043E D0 04			bne @+
  1219 					;ldy #2
  1220 0440 B1 E5			lda (pat2),y
  1221 0442 85 DF			sta pause
  1222 0444 E0 80		@	cpx #$80
  1223 0446 D0 02			bne i_0f
  1224 0448 86 DD			stx patend
  1225
  1226 044A			i_0f	;ldy #0
  1227 044A B1 E1			lda (pat0),y
  1228 044C F0 26			beq i_1
  1229 044E AA				tax
  1230 044F BD FF DC			lda tadcl-1,x
  1231 0452 85 19			sta playloop.iad0_m+1
  1232 0454 BD 2F DD			lda tadch-1,x
  1233 0457 85 1F			sta playloop.iad0_s+1
  1234
  1235 				;	lda #0
  1236 				;	sta playloop.ist_0+1
  1237
  1238 0459 A6 D8			ldx nr0
  1239 045B BD 00 01			lda main.misc.adr.banks-1,x
  1240 045E 85 77			sta playloop.bank0+1
  1241
  1242 0460 BD 7F 06			lda adr.tstrl-1,x
  1243 0463 85 7C			sta playloop.p_0c+1
  1244 0465 BD 9F 06			lda adr.tstrh-1,x
  1245 0468 85 7D			sta playloop.p_0c+2
  1246
  1247 046A BD BF 06			lda adr.trepl-1,x
  1248 046D 85 2B			sta playloop.ire0_m+1
  1249 046F BD DF 06			lda adr.treph-1,x
  1250 0472 85 27			sta playloop.ire0_s+1
  1251
  1252 				* track 1
  1253
  1254 0474 C8			i_1	iny
  1255
  1256 					;ldy #4
  1257 0475 B1 E3			lda (pat1),y
  1258 0477 8D 87 04			sta i_1c+1
  1259 047A 29 1F			and #$1f
  1260 047C F0 08			beq i_1c
  1261 047E AA				tax
  1262 047F 85 D9			sta nr1
  1263 0481 BD 4F 01			lda adr.tivol-1,x
  1264 0484 85 8C			sta playloop.ivol1+2
  1265
  1266 0486 AE 00 DC		i_1c	ldx EFFECT
  1267 0489 F0 16			beq i_1f
  1268 048B E0 40			cpx #$40
  1269 048D D0 04			bne @+
  1270 					;ldy #5
  1271 048F B1 E5			lda (pat2),y
  1272 0491 85 8C			sta playloop.ivol1+2
  1273 0493 E0 C0		@	cpx #$c0
  1274 0495 D0 04			bne @+
  1275 					;ldy #5
  1276 0497 B1 E5			lda (pat2),y
  1277 0499 85 DF			sta pause
  1278 049B E0 80		@	cpx #$80
  1279 049D D0 02			bne i_1f
  1280 049F 86 DD			stx patend
  1281
  1282 04A1			i_1f	;ldy #3
  1283 04A1 B1 E1			lda (pat0),y
  1284 04A3 F0 26			beq i_2
  1285 04A5 AA				tax
  1286 04A6 BD FF DC			lda tadcl-1,x
  1287 04A9 85 31			sta playloop.iad1_m+1
  1288 04AB BD 2F DD			lda tadch-1,x
  1289 04AE 85 37			sta playloop.iad1_s+1
  1290
  1291 				;	lda #0
  1292 				;	sta playloop.ist_1+1
  1293
  1294 04B0 A6 D9			ldx nr1
  1295 04B2 BD 00 01			lda main.misc.adr.banks-1,x
  1296 04B5 85 83			sta playloop.bank1+1
  1297
  1298 04B7 BD 7F 06			lda adr.tstrl-1,x
  1299 04BA 85 88			sta playloop.p_1c+1
  1300 04BC BD 9F 06			lda adr.tstrh-1,x
  1301 04BF 85 89			sta playloop.p_1c+2
  1302
  1303 04C1 BD BF 06			lda adr.trepl-1,x
  1304 04C4 85 43			sta playloop.ire1_m+1
  1305 04C6 BD DF 06			lda adr.treph-1,x
  1306 04C9 85 3F			sta playloop.ire1_s+1
  1307
  1308 				* track 2
  1309
  1310 04CB C8			i_2	iny
  1311
  1312 					;ldy #7
  1313 04CC B1 E3			lda (pat1),y
  1314 04CE 8D DE 04			sta i_2c+1
  1315 04D1 29 1F			and #$1f
  1316 04D3 F0 08			beq i_2c
  1317 04D5 AA				tax
  1318 04D6 85 DA			sta nr2
  1319 04D8 BD 4F 01			lda adr.tivol-1,x
  1320 04DB 85 97			sta playloop.ivol2+2
  1321
  1322 04DD AE 00 DC		i_2c	ldx EFFECT
  1323 04E0 F0 16			beq i_2f
  1324 04E2 E0 40			cpx #$40
  1325 04E4 D0 04			bne @+
  1326 					;ldy #8
  1327 04E6 B1 E5			lda (pat2),y
  1328 04E8 85 97			sta playloop.ivol2+2
  1329 04EA E0 C0		@	cpx #$c0
  1330 04EC D0 04			bne @+
  1331 					;ldy #8
  1332 04EE B1 E5			lda (pat2),y
  1333 04F0 85 DF			sta pause
  1334 04F2 E0 80		@	cpx #$80
  1335 04F4 D0 02			bne i_2f
  1336 04F6 86 DD			stx patend
  1337
  1338 04F8			i_2f	;ldy #6
  1339 04F8 B1 E1			lda (pat0),y
  1340 04FA F0 26			beq i_3
  1341 04FC AA				tax
  1342 04FD BD FF DC			lda tadcl-1,x
  1343 0500 85 49			sta playloop.iad2_m+1
  1344 0502 BD 2F DD			lda tadch-1,x
  1345 0505 85 4F			sta playloop.iad2_s+1
  1346
  1347 				;	lda #0
  1348 				;	sta playloop.ist_2+1
  1349
  1350 0507 A6 DA			ldx nr2
  1351 0509 BD 00 01			lda main.misc.adr.banks-1,x
  1352 050C 85 8E			sta playloop.bank2+1
  1353
  1354 050E BD 7F 06			lda adr.tstrl-1,x
  1355 0511 85 93			sta playloop.p_2c+1
  1356 0513 BD 9F 06			lda adr.tstrh-1,x
  1357 0516 85 94			sta playloop.p_2c+2
  1358
  1359 0518 BD BF 06			lda adr.trepl-1,x
  1360 051B 85 5B			sta playloop.ire2_m+1
  1361 051D BD DF 06			lda adr.treph-1,x
  1362 0520 85 57			sta playloop.ire2_s+1
  1363
  1364 				* track 3
  1365
  1366 0522 C8			i_3	iny
  1367
  1368 					;ldy #10
  1369 0523 B1 E3			lda (pat1),y
  1370 0525 8D 35 05			sta i_3c+1
  1371 0528 29 1F			and #$1f
  1372 052A F0 08			beq i_3c
  1373 052C AA				tax
  1374 052D 85 DB			sta nr3
  1375 052F BD 4F 01			lda adr.tivol-1,x
  1376 0532 85 A2			sta playloop.ivol3+2
  1377
  1378 0534 AE 00 DC		i_3c	ldx EFFECT
  1379 0537 F0 16			beq i_3f
  1380 0539 E0 40			cpx #$40
  1381 053B D0 04			bne @+
  1382 					;ldy #11
  1383 053D B1 E5			lda (pat2),y
  1384 053F 85 A2			sta playloop.ivol3+2
  1385 0541 E0 C0		@	cpx #$c0
  1386 0543 D0 04			bne @+
  1387 					;ldy #11
  1388 0545 B1 E5			lda (pat2),y
  1389 0547 85 DF			sta pause
  1390 0549 E0 80		@	cpx #$80
  1391 054B D0 02			bne i_3f
  1392 054D 86 DD			stx patend
  1393
  1394 054F			i_3f	;ldy #9
  1395 054F B1 E1			lda (pat0),y
  1396 0551 F0 26			beq i_e
  1397 0553 AA				tax
  1398 0554 BD FF DC			lda tadcl-1,x
  1399 0557 85 61			sta playloop.iad3_m+1
  1400 0559 BD 2F DD			lda tadch-1,x
  1401 055C 85 67			sta playloop.iad3_s+1
  1402
  1403 				;	lda #0
  1404 				;	sta playloop.ist_3+1
  1405
  1406 055E A6 DB			ldx nr3
  1407 0560 BD 00 01			lda main.misc.adr.banks-1,x
  1408 0563 85 99			sta playloop.bank3+1
  1409
  1410 0565 BD 7F 06			lda adr.tstrl-1,x
  1411 0568 85 9E			sta playloop.p_3c+1
  1412 056A BD 9F 06			lda adr.tstrh-1,x
  1413 056D 85 9F			sta playloop.p_3c+2
  1414
  1415 056F BD BF 06			lda adr.trepl-1,x
  1416 0572 85 73			sta playloop.ire3_m+1
  1417 0574 BD DF 06			lda adr.treph-1,x
  1418 0577 85 6F			sta playloop.ire3_s+1
  1419
  1420 0579			i_e
  1421 0579 A5 DD			lda patend
  1422 057B D0 05			bne i_en
  1423
  1424 057D C8				iny
  1425 057E 84 E0			sty track_pos
  1426 0580 D0 1F			bne i_end
  1427
  1428 0582 E6 DC		i_en	inc patno
  1429 0584 A6 DC			ldx patno
  1430 0586 E0 00		patmax	cpx #0
  1431 0588 90 08			bcc i_ens
  1432
  1433 058A A9 06			lda #6
  1434 058C 85 DF			sta pause
  1435 058E A2 00		patres	ldx #0
  1436 0590 86 DC			stx patno
  1437
  1438 0592 BC 00 06		i_ens	ldy adr.ORDER,x
  1439 0595 84 E2			sty pat0+1
  1440 0597 C8				iny
  1441 0598 84 E4			sty pat1+1
  1442 059A C8				iny
  1443 059B 84 E6			sty pat2+1
  1444
  1445 059D A9 00			lda #0
  1446 059F 85 E0			sta track_pos
  1447
  1448 05A1			i_end
  1449 05A1 A5 DF			lda pause
  1450 05A3 85 DE			sta cnts
  1451
  1452 05A5 AD 1F D0			lda consol
  1453 05A8 C9 06			cmp #$06
  1454 05AA D0 05			bne skp
  1455
  1456 05AC A9 2C			lda #$2c	; bit *
  1457 05AE 8D 9A 2C			sta stop
  1458
  1459 05B1			skp
  1460 05B1 A9 00			lda #0
  1461 = 05B2			regA	equ *-1
  1462 05B3 A2 00			ldx #0
  1463 = 05B4			regX	equ *-1
  1464 05B5 A0 00			ldy #0
  1465 = 05B6			regY	equ *-1
  1466
  1467 05B7 40				rti
  1468
  1469 				.endl
  1470
  1471
  1472 2C8B AD 0F D2		wait	lda skstat		; wait on keypress
  1473 2C8E 29 04			and #4
  1474 2C90 F0 F9			beq wait
  1475
  1476 2C92 A9 70			lda #$70
  1477 2C94 CD 0B D4 D0 FB		cmp:rne vcount
  1478 2C99 60				rts
  1479
  1480
  1481 2C9A 4C 9A 2C		stop	jmp *
  1482
  1483 2C9D 20 8B 2C			jsr wait
  1484
  1485 2CA0 78				sei
  1486 2CA1 A9 00			lda #0
  1487 2CA3 8D 08 D2			sta AUDCTL
  1488 2CA6 8D 18 D2			sta AUDCTL+$10
  1489 2CA9 8D 0E D4			sta NMIEN
  1490 2CAC 8D 0E D2			sta IRQEN
  1491
  1492 2CAF AA				tax
  1493 2CB0 BD 00 DB 95 00 E8 + 	mva:rne ZPAGE,x 0,x+
  1494
  1495 2CB8 A9 FF			lda #$ff
  1496 2CBA 8D 01 D3			sta portb
  1497
  1498 2CBD AD 2F 02 8D 00 D4		mva sdmctl dmactl
  1499
  1500 2CC3 A5 10			lda irqens
  1501 2CC5 8D 0E D2			sta IRQEN
  1502
  1503 2CC8 A9 03			lda	#3
  1504 2CCA 8D 0F D2			sta	skctl
  1505
  1506 2CCD A9 40 8D 0E D4		mva #$40 nmien
  1507 2CD2 58				cli
  1508
  1509 2CD3 A2 00			ldx #0
  1510 = 2CD4			_rx	equ *-1
  1511
  1512
  1513 2CD5			@exit
  1514 					.ifdef @new
  1515 					lda <@VarData
  1516 					sta :ztmp
  1517 					lda >@VarData
  1518 					ldy #@VarDataSize-1
  1519 					jmp @FreeMem
  1520 					els
  1521 2CD5 60				rts						; ret
  1522 					eif
  1523 = 00D8			NR0
  1523 = 00D9			NR1
  1523 = 00DA			NR2
  1523 = 00DB			NR3
  1523 = 00DC			PATNO
  1523 = 00DD			PATEND
  1523 = 00DE			CNTS
  1523 = 00DF			PAUSE
  1523 = 00E0			TRACK_POS
  1523 = 00E1			PAT0
  1523 = 00E3			PAT1
  1523 = 00E5			PAT2
  1523 				.endl
  1524
  1525 2CD6			.local	CNVPATTERN					; FUNCTION | ASSEMBLER
  1526
  1527 				; -------------------  ASM Block 00000081  -------------------
  1528
  1529
  1530 2CD6 A9 00			lda #0
  1531 2CD8 8D 1A 3C			sta Result
  1532 2CDB 8D 1B 3C			sta Result+1
  1533 2CDE 8D 1C 3C			sta Result+2
  1534 2CE1 8D 1D 3C			sta Result+3
  1535
  1536 2CE4 AD 00 05			lda adr.BUF
  1537 2CE7 29 0F			and #$f
  1538 2CE9 0D 01 05			ora adr.BUF+1
  1539 2CEC F0 4A			beq _sil
  1540
  1541 2CEE A0 00			ldy #0
  1542 2CF0 B9 BE 20		_tst	lda adr.KOD,y
  1543 2CF3 CD 01 05			cmp adr.BUF+1
  1544 2CF6 D0 7D			bne pls
  1545 2CF8 AD 00 05			lda adr.BUF		;kod dzwieku
  1546 2CFB 29 0F			and #$f
  1547 2CFD D9 BF 20			cmp adr.KOD+1,y
  1548 2D00 D0 73			bne pls
  1549 2D02 C8				iny
  1550 2D03 C8				iny
  1551 2D04 98				tya
  1552 2D05 4A				lsr @
  1553 				; ldy #0
  1554 2D06 8D 1A 3C			sta Result		;czestotliwosc
  1555
  1556 2D09 AD 02 05			lda adr.BUF+2		;oblicz nr instr
  1557 2D0C 4A				lsr @
  1558 2D0D 4A				lsr @
  1559 2D0E 4A				lsr @
  1560 2D0F 4A				lsr @
  1561 2D10 8D 19 2D			sta or_+1
  1562 2D13 AD 00 05			lda adr.BUF
  1563 2D16 29 F0			and #$f0
  1564 2D18 09 00		or_	ora #0
  1565 2D1A 29 1F			and #$1f
  1566 				; ldy #1
  1567 2D1C 8D 1B 3C		_con	sta Result+1		;numer instrumentu
  1568
  1569 				; ldy #2
  1570 2D1F A9 00			lda #0
  1571 2D21 8D 1C 3C			sta Result+2
  1572 				; dey
  1573 2D24 AD 02 05			lda adr.BUF+2
  1574 2D27 29 0F			and #$f
  1575 2D29 C9 0C			cmp #$c
  1576 2D2B F0 1A			beq _vol		; Effect Cxy (Set Volume)
  1577 2D2D C9 0F			cmp #$f
  1578 2D2F F0 2A			beq _tmp		; Effect Fxy (Set Speed)
  1579 2D31 C9 0D			cmp #$d
  1580 2D33 F0 08			beq _break		; Effect Dxy (Pattern Break)
  1581 2D35 4C 7E 2D			jmp stop
  1582
  1583 2D38 8D 1A 3C		_sil	sta Result
  1584 2D3B F0 DF			beq _con
  1585
  1586 2D3D A9 80		_break	lda #$80
  1587 2D3F 0D 1B 3C			ora Result+1
  1588 2D42 8D 1B 3C			sta Result+1
  1589 2D45 D0 37			bne stop
  1590
  1591 2D47 A9 40		_vol	lda #$40
  1592 2D49 0D 1B 3C			ora Result+1
  1593 2D4C 8D 1B 3C			sta Result+1
  1594
  1595 2D4F AD 03 05			lda adr.BUF+3		;parametr komendy
  1596
  1597 2D52 4A				lsr @
  1598 2D53 18				clc
  1599 2D54 69 DE			adc >VOLUME
  1600 2D56 8D 1C 3C			sta Result+2
  1601 2D59 D0 23			bne stop
  1602
  1603 2D5B AD 03 05		_tmp	lda adr.BUF+3
  1604 2D5E C9 20			cmp #$20
  1605 2D60 B0 10			bcs _tq
  1606 2D62 A9 C0			lda #$c0
  1607 2D64 0D 1B 3C			ora Result+1
  1608 2D67 8D 1B 3C			sta Result+1
  1609 				; ldy #2
  1610 2D6A AD 03 05			lda adr.BUF+3		;parametr komendy
  1611 2D6D 29 1F			and #$1f
  1612 2D6F 8D 1C 3C			sta Result+2
  1613 2D72			_tq
  1614 2D72 4C 7E 2D			jmp stop
  1615
  1616 2D75 C8			pls	iny
  1617 2D76 C8				iny
  1618 2D77 C0 60			cpy #96
  1619
  1620 2D79 F0 03 4C F0 2C		jne _tst
  1621
  1622 2D7E			stop
  1623
  1624 2D7E			@exit
  1625
  1626 				; ------------------------------------------------------------
  1627
  1628 = 3C1A			RESULT	= DATAORIGIN+$047E
  1629 2D7E 60				rts						; ret
  1630 				.endl
  1631
  1632 2D7F			.local	LOADMOD						; PROCEDURE
  1633
  1634 				; ------------------------------------------------------------
  1635
  1636 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1637 				; as Pointer
  1638 2D7F B5 94			lda :STACKORIGIN,x
  1639 2D81 85 82			sta :bp2
  1640 2D83 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1641 2D85 85 83			sta :bp2+1
  1642 2D87 A0 20			ldy #$20
  1643 2D89 B1 82 99 1E 3C 88 + 	mva:rpl (:bp2),y adr.FNAM,y-
  1644 2D91 A9 1E 8D B2 36 A9 + 	mwa #adr.FNAM FNAM
  1645 2D9B CA				dex
  1646 2D9C			@main
  1647
  1648 2D9C 4C B2 2D			jmp l_0174
  1649
  1650 2D9F			.local	NORMALIZEBUF					; PROCEDURE
  1651
  1652 				; optimize OK (loadmod_portb.inc), line = 16
  1653
  1654 2D9F A9 00			lda #$00
  1655 2DA1 A8				tay
  1656
  1657 2DA2			l_0180
  1658 				; --- ForToDoCondition
  1659 2DA2 B9 00 05			lda adr.BUF,y
  1660 2DA5 18 69 80			add #$80
  1661 2DA8 99 00 05			sta adr.BUF,y
  1662
  1663 				; --- ForToDoEpilog
  1664 2DAB C8				iny
  1665 2DAC D0 F4			jne l_0180
  1666 2DAE			l_018E
  1667 2DAE 8C 6D 3C			sty J
  1668
  1669 				; ------------------------------------------------------------
  1670
  1671 2DB1			@exit
  1672 					.ifdef @new
  1673 					lda <@VarData
  1674 					sta :ztmp
  1675 					lda >@VarData
  1676 					ldy #@VarDataSize-1
  1677 					jmp @FreeMem
  1678 					els
  1679 2DB1 60				rts						; ret
  1680 					eif
  1681 				.endl
  1682 2DB2			l_0174
  1683 2DB2 A0 FD			ldy #256-3
  1684 2DB4 B9 03 1F 99 4E 3B + 	mva:rne CODEORIGIN+$0000+3-256,y adr.NAME+3-256,y+
  1685
  1686 				; optimize OK (loadmod_portb.inc), line = 25
  1687
  1688 2DBD AD 1E 3C			lda adr.FNAM
  1689 2DC0 18 69 02			add #$02
  1690 2DC3 8D 4B 3C			sta adr.NAME+$00
  1691
  1692 				; optimize OK (loadmod_portb.inc), line = 27
  1693
  1694 2DC6 A9 01			lda #$01
  1695 2DC8 8D 6C 3C			sta I
  1696 2DCB AD 1E 3C 8D D2 2D		mva adr.FNAM @FORTMP_01B1_0
  1697
  1698 2DD1			l_01B4
  1699 				; --- ForToDoCondition
  1700 2DD1 A9 00			lda @FORTMP_01B1_0:#$00
  1701 2DD3 CD 6C 3C			cmp I
  1702 2DD6 90 0E			jcc l_01C2
  1703
  1704 				; optimize OK (loadmod_portb.inc), line = 28
  1705
  1706 2DD8 AC 6C 3C			ldy I
  1707 2DDB B9 1E 3C			lda adr.FNAM,y
  1708 2DDE 99 4D 3C			sta adr.NAME+$02,y
  1709
  1710 				; --- ForToDoEpilog
  1711 2DE1 EE 6C 3C			inc I
  1712 2DE4 D0 EB			jne l_01B4
  1713 2DE6			l_01C2
  1714 				; AssignFile
  1715
  1716 				; optimize OK (loadmod_portb.inc), line = 31
  1717
  1718 2DE6 AC B4 36 84 82 AC + 	mwy F :bp2
  1719 2DF0 A0 00			ldy #s@file.pfname
  1720 2DF2 AD B6 36			lda NAME
  1721 2DF5 91 82			sta (:bp2),y
  1722 2DF7 C8				iny
  1723 2DF8 AD B7 36			lda NAME+1
  1724 2DFB 91 82			sta (:bp2),y
  1725 2DFD A0 05			ldy #s@file.status
  1726 2DFF A9 00			lda #$00
  1727 2E01 91 82			sta (:bp2),y
  1728 				; Reset
  1729 2E03 A0 02			ldy #s@file.record
  1730 2E05 A9 01			lda #$01
  1731 2E07 91 82			sta (:bp2),y
  1732 2E09 C8				iny
  1733 2E0A A9 00			lda #$00
  1734 2E0C 91 82			sta (:bp2),y
  1735
  1736 2E0E 8A 48			txa:pha
  1737 2E10 38				sec
  1738 					@openfile F, MAIN.SYSTEM.FileMode
  1738 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  1738 2E11 AC B5 36		 LDY F+1
  1738 2E14 AD B4 36		 LDA F
  1738 2E17 AE A1 37		 LDX MAIN.SYSTEM.FILEMODE
  1738 2E1A 20 1E 21		 JSR @OPENFILE
  1739 2E1D 68 AA			pla:tax
  1740
  1741 				; BlockRead
  1742
  1743 				; optimize OK (loadmod_portb.inc), line = 33
  1744
  1745 2E1F AC B4 36 84 82 AC + 	mwy F :bp2
  1746 2E29 A0 06			ldy #s@file.buffer
  1747 2E2B AD 1A 37			lda MODNAME
  1748 2E2E 91 82			sta (:bp2),y
  1749 2E30 C8				iny
  1750 2E31 AD 1B 37			lda MODNAME+1
  1751 2E34 91 82			sta (:bp2),y
  1752 2E36 A0 08			ldy #s@file.nrecord
  1753 2E38 A9 14			lda #$14
  1754 2E3A 91 82			sta (:bp2),y
  1755 2E3C C8				iny
  1756 2E3D A9 00			lda #$00
  1757 2E3F 91 82			sta (:bp2),y
  1758
  1759 2E41 8A 48			txa:pha
  1760 2E43 38				sec
  1761 					@readfile F, #7
  1761 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1761 2E44 AC B5 36		 LDY F+1
  1761 2E47 AD B4 36		 LDA F
  1761 2E4A A2 07		 LDX# 7
  1761 2E4C 20 E1 21		 JSR @READFILE
  1762 2E4F 68 AA			pla:tax
  1763
  1764 				; optimize OK (loadmod_portb.inc), line = 35
  1765
  1766 2E51 A9 00			lda #$00
  1767 2E53 8D 19 3C			sta NUMBER_OF_SAMPLES
  1768
  1769 				; optimize OK (loadmod_portb.inc), line = 37
  1770
  1771 2E56 8D 6C 3C			sta I
  1772
  1773 2E59			l_01FA
  1774 				; --- ForToDoCondition
  1775 2E59 AD 6C 3C			lda I
  1776 2E5C C9 1F			cmp #$1F
  1777 2E5E 90 03 4C E8 2F		jcs l_0208
  1778
  1779 				; optimize OK (loadmod_portb.inc), line = 39
  1780
  1781 2E63 0A				asl @
  1782 2E64 A8				tay
  1783 2E65 B9 D6 3B			lda adr.SAMPLE,y
  1784 2E68 8D 7E 3C			sta SMP
  1785 2E6B B9 D7 3B			lda adr.SAMPLE+1,y
  1786 2E6E 8D 7F 3C			sta SMP+1
  1787 				; BlockRead
  1788
  1789 				; optimize OK (loadmod_portb.inc), line = 41
  1790
  1791 2E71 AC B4 36 84 82 AC + 	mwy F :bp2
  1792 2E7B A0 06			ldy #s@file.buffer
  1793 2E7D A9 00			lda #SMP.NAME-DATAORIGIN
  1794 2E7F 18 6D 7E 3C			add SMP
  1795 2E83 91 82			sta (:bp2),y
  1796 2E85 C8				iny
  1797 2E86 A9 00			lda #$00
  1798 2E88 6D 7F 3C			adc SMP+1
  1799 2E8B 91 82			sta (:bp2),y
  1800 2E8D A0 08			ldy #s@file.nrecord
  1801 2E8F A9 1E			lda #$1E
  1802 2E91 91 82			sta (:bp2),y
  1803 2E93 C8				iny
  1804 2E94 A9 00			lda #$00
  1805 2E96 91 82			sta (:bp2),y
  1806
  1807 2E98 8A 48			txa:pha
  1808 2E9A 38				sec
  1809 					@readfile F, #7
  1809 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1809 2E9B AC B5 36		 LDY F+1
  1809 2E9E AD B4 36		 LDA F
  1809 2EA1 A2 07		 LDX# 7
  1809 2EA3 20 E1 21		 JSR @READFILE
  1810 2EA6 68 AA			pla:tax
  1811
  1812 				; optimize OK (loadmod_portb.inc), line = 43
  1813
  1814 2EA8 AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  1815 2EB2 A0 16			ldy #SMP.LEN-DATAORIGIN
  1816 2EB4 B1 82			lda (:bp2),y
  1817 2EB6 8D EB 37			sta SYSTEM.SWAP_012F.A
  1818 2EB9 C8				iny
  1819 2EBA B1 82			lda (:bp2),y
  1820 2EBC 8D EC 37			sta SYSTEM.SWAP_012F.A+1
  1821 2EBF 20 CC 27			jsr SYSTEM.SWAP_012F
  1822 2EC2 E8				inx
  1823 2EC3 AD ED 37 95 94		mva SYSTEM.SWAP_012F.RESULT :STACKORIGIN,x
  1824 2EC8 AD EE 37 95 A4		mva SYSTEM.SWAP_012F.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  1825 2ECD E8				inx
  1826 2ECE A9 01 95 94			mva #$01 :STACKORIGIN,x
  1827 2ED2 20 35 25			jsr shlEAX_CL.WORD
  1828 2ED5 CA				dex
  1829 2ED6 AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  1830 2EE0 A0 16			ldy #SMP.LEN-DATAORIGIN
  1831 2EE2 B5 94			lda :STACKORIGIN,x
  1832 2EE4 91 82			sta (:bp2),y
  1833 2EE6 C8				iny
  1834 2EE7 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1835 2EE9 91 82			sta (:bp2),y
  1836 2EEB CA				dex
  1837
  1838 				; optimize OK (loadmod_portb.inc), line = 44
  1839
  1840 2EEC AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  1841 2EF6 A0 1A			ldy #SMP.LOOP_START-DATAORIGIN
  1842 2EF8 B1 82			lda (:bp2),y
  1843 2EFA 8D EB 37			sta SYSTEM.SWAP_012F.A
  1844 2EFD C8				iny
  1845 2EFE B1 82			lda (:bp2),y
  1846 2F00 8D EC 37			sta SYSTEM.SWAP_012F.A+1
  1847 2F03 20 CC 27			jsr SYSTEM.SWAP_012F
  1848 2F06 E8				inx
  1849 2F07 AD ED 37 95 94		mva SYSTEM.SWAP_012F.RESULT :STACKORIGIN,x
  1850 2F0C AD EE 37 95 A4		mva SYSTEM.SWAP_012F.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  1851 2F11 E8				inx
  1852 2F12 A9 01 95 94			mva #$01 :STACKORIGIN,x
  1853 2F16 20 35 25			jsr shlEAX_CL.WORD
  1854 2F19 CA				dex
  1855 2F1A AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  1856 2F24 A0 1A			ldy #SMP.LOOP_START-DATAORIGIN
  1857 2F26 B5 94			lda :STACKORIGIN,x
  1858 2F28 91 82			sta (:bp2),y
  1859 2F2A C8				iny
  1860 2F2B B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1861 2F2D 91 82			sta (:bp2),y
  1862 2F2F CA				dex
  1863
  1864 				; optimize OK (loadmod_portb.inc), line = 45
  1865
  1866 2F30 AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  1867 2F3A A0 1C			ldy #SMP.LOOP_LEN-DATAORIGIN
  1868 2F3C B1 82			lda (:bp2),y
  1869 2F3E 8D EB 37			sta SYSTEM.SWAP_012F.A
  1870 2F41 C8				iny
  1871 2F42 B1 82			lda (:bp2),y
  1872 2F44 8D EC 37			sta SYSTEM.SWAP_012F.A+1
  1873 2F47 20 CC 27			jsr SYSTEM.SWAP_012F
  1874 2F4A E8				inx
  1875 2F4B AD ED 37 95 94		mva SYSTEM.SWAP_012F.RESULT :STACKORIGIN,x
  1876 2F50 AD EE 37 95 A4		mva SYSTEM.SWAP_012F.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  1877 2F55 E8				inx
  1878 2F56 A9 01 95 94			mva #$01 :STACKORIGIN,x
  1879 2F5A 20 35 25			jsr shlEAX_CL.WORD
  1880 2F5D CA				dex
  1881 2F5E AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  1882 2F68 A0 1C			ldy #SMP.LOOP_LEN-DATAORIGIN
  1883 2F6A B5 94			lda :STACKORIGIN,x
  1884 2F6C 91 82			sta (:bp2),y
  1885 2F6E C8				iny
  1886 2F6F B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1887 2F71 91 82			sta (:bp2),y
  1888 2F73 CA				dex
  1889
  1890 				; optimize OK (loadmod_portb.inc), line = 47
  1891
  1892 2F74 AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  1893 2F7E A0 18			ldy #SMP.FINE_TUNE-DATAORIGIN
  1894 2F80 B1 82			lda (:bp2),y
  1895 2F82 C9 08			cmp #$08
  1896 2F84 90 05			jcc l_0248
  1897 2F86 38 E9 10			sub #$10
  1898 2F89 91 82			sta (:bp2),y
  1899 2F8B			l_0248
  1900
  1901 				; optimize OK (loadmod_portb.inc), line = 49
  1902
  1903 2F8B AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  1904 2F95 A0 16			ldy #SMP.LEN-DATAORIGIN
  1905 2F97 B1 82			lda (:bp2),y
  1906 2F99 C8				iny
  1907 2F9A 11 82			ora (:bp2),y
  1908 2F9C F0 0A			jeq l_025D
  1909
  1910 				; optimize FAIL (0, loadmod_portb.inc), line = 50
  1911
  1912 2F9E EE 19 3C			inc NUMBER_OF_SAMPLES
  1913
  1914 				; optimize OK (loadmod_portb.inc), line = 51
  1915
  1916 2FA1 AC 6C 3C			ldy I
  1917 2FA4 C8				iny
  1918 2FA5 8C 18 3C			sty NUMBER_OF_BANKS
  1919 2FA8			l_025D
  1920
  1921 				; optimize OK (loadmod_portb.inc), line = 54
  1922
  1923 2FA8 AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  1924 2FB2 A0 17			ldy #SMP.LEN-DATAORIGIN+$01
  1925 2FB4 B1 82			lda (:bp2),y
  1926 2FB6 C9 40			cmp #$40
  1927 2FB8 D0 05			bne @+
  1928 2FBA 88				dey
  1929 2FBB B1 82			lda (:bp2),y
  1930 2FBD C9 00			cmp #$00
  1931 				@
  1932 2FBF 90 1F			jcc l_027F
  1933 2FC1 F0 1D			jeq l_027F
  1934
  1935 				; optimize FAIL ('@print', loadmod_portb.inc), line = 55
  1936
  1937 					@printSTRING #CODEORIGIN+$0004
  1937 				 LDY> CODEORIGIN+$0004\ LDA< CODEORIGIN+$0004\ JSR @PRINTSTRING
  1937 2FC3 A0 20		 LDY> CODEORIGIN+$0004
  1937 2FC5 A9 04		 LDA< CODEORIGIN+$0004
  1937 2FC7 20 9D 26		 JSR @PRINTSTRING
  1938 2FCA A9 00			lda #$00
  1939 2FCC A0 40			ldy #$40
  1940 2FCE 20 DF 26			jsr @printWORD._ay
  1941 					@printSTRING #CODEORIGIN+$000B
  1941 				 LDY> CODEORIGIN+$000B\ LDA< CODEORIGIN+$000B\ JSR @PRINTSTRING
  1941 2FD1 A0 20		 LDY> CODEORIGIN+$000B
  1941 2FD3 A9 0B		 LDA< CODEORIGIN+$000B
  1941 2FD5 20 9D 26		 JSR @PRINTSTRING
  1942 2FD8 20 69 26			@printEOL
  1943 2FDB A9 00			lda #$00
  1944 2FDD 4C F4 36			jmp @halt
  1945 2FE0			l_027F
  1946
  1947 				; --- ForToDoEpilog
  1948 2FE0 EE 6C 3C			inc I
  1949 2FE3 F0 03 4C 59 2E		jne l_01FA
  1950 2FE8			l_0208
  1951 				; BlockRead
  1952
  1953 				; optimize OK (loadmod_portb.inc), line = 62
  1954
  1955 2FE8 AC B4 36 84 82 AC + 	mwy F :bp2
  1956 2FF2 A0 06			ldy #s@file.buffer
  1957 2FF4 A9 15			lda <SONG_LENGTH
  1958 2FF6 91 82			sta (:bp2),y
  1959 2FF8 C8				iny
  1960 2FF9 A9 3C			lda >SONG_LENGTH
  1961 2FFB 91 82			sta (:bp2),y
  1962 2FFD A0 08			ldy #s@file.nrecord
  1963 2FFF A9 01			lda #$01
  1964 3001 91 82			sta (:bp2),y
  1965 3003 C8				iny
  1966 3004 A9 00			lda #$00
  1967 3006 91 82			sta (:bp2),y
  1968
  1969 3008 8A 48			txa:pha
  1970 300A 38				sec
  1971 					@readfile F, #7
  1971 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1971 300B AC B5 36		 LDY F+1
  1971 300E AD B4 36		 LDA F
  1971 3011 A2 07		 LDX# 7
  1971 3013 20 E1 21		 JSR @READFILE
  1972 3016 68 AA			pla:tax
  1973
  1974 				; BlockRead
  1975
  1976 				; optimize OK (loadmod_portb.inc), line = 63
  1977
  1978 3018 AC B4 36 84 82 AC + 	mwy F :bp2
  1979 3022 A0 06			ldy #s@file.buffer
  1980 3024 A9 16			lda <SONG_RESTART
  1981 3026 91 82			sta (:bp2),y
  1982 3028 C8				iny
  1983 3029 A9 3C			lda >SONG_RESTART
  1984 302B 91 82			sta (:bp2),y
  1985 302D A0 08			ldy #s@file.nrecord
  1986 302F A9 01			lda #$01
  1987 3031 91 82			sta (:bp2),y
  1988 3033 C8				iny
  1989 3034 A9 00			lda #$00
  1990 3036 91 82			sta (:bp2),y
  1991
  1992 3038 8A 48			txa:pha
  1993 303A 38				sec
  1994 					@readfile F, #7
  1994 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1994 303B AC B5 36		 LDY F+1
  1994 303E AD B4 36		 LDA F
  1994 3041 A2 07		 LDX# 7
  1994 3043 20 E1 21		 JSR @READFILE
  1995 3046 68 AA			pla:tax
  1996
  1997 				; optimize OK (loadmod_portb.inc), line = 66
  1998
  1999 3048 A9 00			lda #$00
  2000 304A 8D 17 3C			sta NUMBER_OF_PATTERNS
  2001
  2002 				; optimize OK (loadmod_portb.inc), line = 68
  2003
  2004 304D 8D 6C 3C			sta I
  2005
  2006 3050			l_02B2
  2007 				; --- ForToDoCondition
  2008 3050 AD 6C 3C			lda I
  2009 3053 30 54			jmi l_02C0
  2010 				; BlockRead
  2011
  2012 				; optimize OK (loadmod_portb.inc), line = 69
  2013
  2014 3055 AC B4 36 84 82 AC + 	mwy F :bp2
  2015 305F A0 06			ldy #s@file.buffer
  2016 3061 A9 6E			lda <A
  2017 3063 91 82			sta (:bp2),y
  2018 3065 C8				iny
  2019 3066 A9 3C			lda >A
  2020 3068 91 82			sta (:bp2),y
  2021 306A A0 08			ldy #s@file.nrecord
  2022 306C A9 01			lda #$01
  2023 306E 91 82			sta (:bp2),y
  2024 3070 C8				iny
  2025 3071 A9 00			lda #$00
  2026 3073 91 82			sta (:bp2),y
  2027
  2028 3075 8A 48			txa:pha
  2029 3077 38				sec
  2030 					@readfile F, #7
  2030 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  2030 3078 AC B5 36		 LDY F+1
  2030 307B AD B4 36		 LDA F
  2030 307E A2 07		 LDX# 7
  2030 3080 20 E1 21		 JSR @READFILE
  2031 3083 68 AA			pla:tax
  2032
  2033 				; optimize OK (loadmod_portb.inc), line = 71
  2034
  2035 3085 AD 6E 3C			lda A
  2036 3088 0A				asl @
  2037 3089 18 69 40			add #$40
  2038 308C 18 6D 6E 3C			add A
  2039 3090 AC 6C 3C			ldy I
  2040 3093 99 00 06			sta adr.ORDER,y
  2041
  2042 				; optimize OK (loadmod_portb.inc), line = 73
  2043
  2044 3096 AD 17 3C			lda NUMBER_OF_PATTERNS
  2045 3099 CD 6E 3C			cmp A
  2046 309C B0 06			jcs l_02F3
  2047 309E AD 6E 3C			lda A
  2048 30A1 8D 17 3C			sta NUMBER_OF_PATTERNS
  2049 30A4			l_02F3
  2050
  2051 				; --- ForToDoEpilog
  2052 30A4 EE 6C 3C			inc I
  2053 30A7 D0 A7			jne l_02B2
  2054 30A9			l_02C0
  2055
  2056 				; optimize FAIL (0, loadmod_portb.inc), line = 76
  2057
  2058 30A9 EE 17 3C			inc NUMBER_OF_PATTERNS
  2059 				; BlockRead
  2060
  2061 				; optimize OK (loadmod_portb.inc), line = 79
  2062
  2063 30AC AC B4 36 84 82 AC + 	mwy F :bp2
  2064 30B6 A0 06			ldy #s@file.buffer
  2065 30B8 A9 86			lda <adr.HEADER
  2066 30BA 18 69 01			add #$01
  2067 30BD 91 82			sta (:bp2),y
  2068 30BF C8				iny
  2069 30C0 A9 3C			lda >adr.HEADER
  2070 30C2 69 00			adc #$00
  2071 30C4 91 82			sta (:bp2),y
  2072 30C6 A0 08			ldy #s@file.nrecord
  2073 30C8 A9 04			lda #$04
  2074 30CA 91 82			sta (:bp2),y
  2075 30CC C8				iny
  2076 30CD A9 00			lda #$00
  2077 30CF 91 82			sta (:bp2),y
  2078
  2079 30D1 8A 48			txa:pha
  2080 30D3 38				sec
  2081 					@readfile F, #7
  2081 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  2081 30D4 AC B5 36		 LDY F+1
  2081 30D7 AD B4 36		 LDA F
  2081 30DA A2 07		 LDX# 7
  2081 30DC 20 E1 21		 JSR @READFILE
  2082 30DF 68 AA			pla:tax
  2083
  2084 				; optimize OK (loadmod_portb.inc), line = 80
  2085
  2086 30E1 A9 04			lda #$04
  2087 30E3 8D 86 3C			sta adr.HEADER+$00
  2088
  2089 				; optimize FAIL ('cmpSTRING', loadmod_portb.inc), line = 82
  2090
  2091 30E6 E8				inx
  2092 30E7 AD B8 36 95 94		mva HEADER :STACKORIGIN,x
  2093 30EC AD B9 36 95 A4		mva HEADER+1 :STACKORIGIN+STACKWIDTH,x
  2094 30F1 E8				inx
  2095 30F2 A9 21 95 94			mva #$21 :STACKORIGIN,x
  2096 30F6 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  2097 30FA A0 01			ldy #1
  2098 30FC 20 4E 25			jsr cmpSTRING
  2099 30FF D0 01			bne @+
  2100 3101 88				dey
  2101 				@
  2102 3102 CA				dex
  2103 3103 CA				dex
  2104 3104 98				tya
  2105 3105 F0 0F			jeq l_0323
  2106
  2107 				; optimize FAIL ('@print', loadmod_portb.inc), line = 83
  2108
  2109 					@printSTRING #CODEORIGIN+$0027
  2109 				 LDY> CODEORIGIN+$0027\ LDA< CODEORIGIN+$0027\ JSR @PRINTSTRING
  2109 3107 A0 20		 LDY> CODEORIGIN+$0027
  2109 3109 A9 27		 LDA< CODEORIGIN+$0027
  2109 310B 20 9D 26		 JSR @PRINTSTRING
  2110 310E 20 69 26			@printEOL
  2111 3111 A9 00			lda #$00
  2112 3113 4C F4 36			jmp @halt
  2113 3116			l_0323
  2114
  2115 				; optimize FAIL ('@print', loadmod_portb.inc), line = 89
  2116
  2117 					@printSTRING #CODEORIGIN+$003C
  2117 				 LDY> CODEORIGIN+$003C\ LDA< CODEORIGIN+$003C\ JSR @PRINTSTRING
  2117 3116 A0 20		 LDY> CODEORIGIN+$003C
  2117 3118 A9 3C		 LDA< CODEORIGIN+$003C
  2117 311A 20 9D 26		 JSR @PRINTSTRING
  2118 311D E8				inx
  2119 311E AD 1A 37			lda MODNAME
  2120 3121 AC 1B 37			ldy MODNAME+1
  2121 3124 20 77 26			jsr @printPCHAR
  2122 3127 CA				dex
  2123 3128 20 69 26			@printEOL
  2124
  2125 				; optimize OK (loadmod_portb.inc), line = 91
  2126
  2127 312B A9 00			lda #$00
  2128 312D 8D 6C 3C			sta I
  2129
  2130 3130			l_033D
  2131 				; --- ForToDoCondition
  2132 3130 AD 6C 3C			lda I
  2133 3133 C9 1F			cmp #$1F
  2134 3135 90 03 4C 94 32		jcs l_034B
  2135
  2136 				; optimize OK (loadmod_portb.inc), line = 93
  2137
  2138 313A 0A				asl @
  2139 313B A8				tay
  2140 313C B9 D6 3B			lda adr.SAMPLE,y
  2141 313F 8D 7E 3C			sta SMP
  2142 3142 85 82			sta :bp2
  2143 3144 B9 D7 3B			lda adr.SAMPLE+1,y
  2144 3147 8D 7F 3C			sta SMP+1
  2145 314A 85 83			sta :bp2+1
  2146 				; optimize OK (loadmod_portb.inc), line = 95
  2147 314C A0 16			ldy #SMP.LEN-DATAORIGIN
  2148 314E B1 82			lda (:bp2),y
  2149 3150 C8				iny
  2150 3151 11 82			ora (:bp2),y
  2151 3153 D0 03 4C 8C 32		jeq l_0364
  2152
  2153 				; optimize OK (loadmod_portb.inc), line = 96
  2154
  2155 3158 AD 6C 3C			lda I
  2156 315B 18 69 01			add #$01
  2157 315E 85 88			sta SYSTEM.HEXSTR.VALUE
  2158 3160 A9 00			lda #$00
  2159 3162 69 00			adc #$00
  2160 3164 85 89			sta SYSTEM.HEXSTR.VALUE+1
  2161 3166 A9 00			lda #$00
  2162 3168 69 00			adc #$00
  2163 316A 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  2164 316C A9 00			lda #$00
  2165 316E 69 00			adc #$00
  2166 3170 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  2167 3172 A9 02			lda #$02
  2168 3174 85 8C			sta SYSTEM.HEXSTR.DIGITS
  2169 3176 20 9B 27			jsr SYSTEM.HEXSTR
  2170 					@printSTRING SYSTEM.HEXSTR.RESULT
  2170 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  2170 3179 AC AB 27		 LDY SYSTEM.HEXSTR.RESULT+1
  2170 317C AD AA 27		 LDA SYSTEM.HEXSTR.RESULT
  2170 317F 20 9D 26		 JSR @PRINTSTRING
  2171 					@print #$20
  2171 				 LDY# $20\ JSR @PRINT
  2171 3182 A0 20		 LDY# $20
  2171 3184 20 6E 26		 JSR @PRINT
  2172 3187 E8				inx
  2173 3188 A9 00			lda #SMP.NAME-DATAORIGIN
  2174 318A 18 6D 7E 3C			add SMP
  2175 318E 95 94			sta :STACKORIGIN,x
  2176 3190 A9 00			lda #$00
  2177 3192 6D 7F 3C			adc SMP+1
  2178 3195 95 A4			sta :STACKORIGIN+STACKWIDTH,x
  2179 3197 B5 94			lda :STACKORIGIN,x
  2180 3199 B4 A4			ldy :STACKORIGIN+STACKWIDTH,x
  2181 319B 20 77 26			jsr @printPCHAR
  2182 319E CA				dex
  2183 					@print #$20
  2183 				 LDY# $20\ JSR @PRINT
  2183 319F A0 20		 LDY# $20
  2183 31A1 20 6E 26		 JSR @PRINT
  2184 31A4 AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  2185 31AE A0 16			ldy #SMP.LEN-DATAORIGIN
  2186 31B0 B1 82			lda (:bp2),y
  2187 31B2 85 88			sta SYSTEM.HEXSTR.VALUE
  2188 31B4 C8				iny
  2189 31B5 B1 82			lda (:bp2),y
  2190 31B7 85 89			sta SYSTEM.HEXSTR.VALUE+1
  2191 31B9 A9 00			lda #$00
  2192 31BB 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  2193 31BD 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  2194 31BF A9 04			lda #$04
  2195 31C1 85 8C			sta SYSTEM.HEXSTR.DIGITS
  2196 31C3 20 9B 27			jsr SYSTEM.HEXSTR
  2197 					@printSTRING SYSTEM.HEXSTR.RESULT
  2197 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  2197 31C6 AC AB 27		 LDY SYSTEM.HEXSTR.RESULT+1
  2197 31C9 AD AA 27		 LDA SYSTEM.HEXSTR.RESULT
  2197 31CC 20 9D 26		 JSR @PRINTSTRING
  2198 					@print #$20
  2198 				 LDY# $20\ JSR @PRINT
  2198 31CF A0 20		 LDY# $20
  2198 31D1 20 6E 26		 JSR @PRINT
  2199 31D4 AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  2200 31DE A0 18			ldy #SMP.FINE_TUNE-DATAORIGIN
  2201 31E0 B1 82			lda (:bp2),y
  2202 31E2 85 88			sta SYSTEM.HEXSTR.VALUE
  2203 31E4 A9 00			lda #$00
  2204 31E6 85 89			sta SYSTEM.HEXSTR.VALUE+1
  2205 31E8 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  2206 31EA 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  2207 31EC A9 02			lda #$02
  2208 31EE 85 8C			sta SYSTEM.HEXSTR.DIGITS
  2209 31F0 20 9B 27			jsr SYSTEM.HEXSTR
  2210 					@printSTRING SYSTEM.HEXSTR.RESULT
  2210 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  2210 31F3 AC AB 27		 LDY SYSTEM.HEXSTR.RESULT+1
  2210 31F6 AD AA 27		 LDA SYSTEM.HEXSTR.RESULT
  2210 31F9 20 9D 26		 JSR @PRINTSTRING
  2211 					@print #$20
  2211 				 LDY# $20\ JSR @PRINT
  2211 31FC A0 20		 LDY# $20
  2211 31FE 20 6E 26		 JSR @PRINT
  2212 3201 AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  2213 320B A0 19			ldy #SMP.VOLUME-DATAORIGIN
  2214 320D B1 82			lda (:bp2),y
  2215 320F 85 88			sta SYSTEM.HEXSTR.VALUE
  2216 3211 A9 00			lda #$00
  2217 3213 85 89			sta SYSTEM.HEXSTR.VALUE+1
  2218 3215 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  2219 3217 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  2220 3219 A9 02			lda #$02
  2221 321B 85 8C			sta SYSTEM.HEXSTR.DIGITS
  2222 321D 20 9B 27			jsr SYSTEM.HEXSTR
  2223 					@printSTRING SYSTEM.HEXSTR.RESULT
  2223 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  2223 3220 AC AB 27		 LDY SYSTEM.HEXSTR.RESULT+1
  2223 3223 AD AA 27		 LDA SYSTEM.HEXSTR.RESULT
  2223 3226 20 9D 26		 JSR @PRINTSTRING
  2224 					@print #$20
  2224 				 LDY# $20\ JSR @PRINT
  2224 3229 A0 20		 LDY# $20
  2224 322B 20 6E 26		 JSR @PRINT
  2225 322E AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  2226 3238 A0 1A			ldy #SMP.LOOP_START-DATAORIGIN
  2227 323A B1 82			lda (:bp2),y
  2228 323C 85 88			sta SYSTEM.HEXSTR.VALUE
  2229 323E C8				iny
  2230 323F B1 82			lda (:bp2),y
  2231 3241 85 89			sta SYSTEM.HEXSTR.VALUE+1
  2232 3243 A9 00			lda #$00
  2233 3245 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  2234 3247 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  2235 3249 A9 04			lda #$04
  2236 324B 85 8C			sta SYSTEM.HEXSTR.DIGITS
  2237 324D 20 9B 27			jsr SYSTEM.HEXSTR
  2238 					@printSTRING SYSTEM.HEXSTR.RESULT
  2238 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  2238 3250 AC AB 27		 LDY SYSTEM.HEXSTR.RESULT+1
  2238 3253 AD AA 27		 LDA SYSTEM.HEXSTR.RESULT
  2238 3256 20 9D 26		 JSR @PRINTSTRING
  2239 					@print #$20
  2239 				 LDY# $20\ JSR @PRINT
  2239 3259 A0 20		 LDY# $20
  2239 325B 20 6E 26		 JSR @PRINT
  2240 325E AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  2241 3268 A0 1C			ldy #SMP.LOOP_LEN-DATAORIGIN
  2242 326A B1 82			lda (:bp2),y
  2243 326C 85 88			sta SYSTEM.HEXSTR.VALUE
  2244 326E C8				iny
  2245 326F B1 82			lda (:bp2),y
  2246 3271 85 89			sta SYSTEM.HEXSTR.VALUE+1
  2247 3273 A9 00			lda #$00
  2248 3275 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  2249 3277 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  2250 3279 A9 04			lda #$04
  2251 327B 85 8C			sta SYSTEM.HEXSTR.DIGITS
  2252 327D 20 9B 27			jsr SYSTEM.HEXSTR
  2253 					@printSTRING SYSTEM.HEXSTR.RESULT
  2253 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  2253 3280 AC AB 27		 LDY SYSTEM.HEXSTR.RESULT+1
  2253 3283 AD AA 27		 LDA SYSTEM.HEXSTR.RESULT
  2253 3286 20 9D 26		 JSR @PRINTSTRING
  2254 3289 20 69 26			@printEOL
  2255 328C			l_0364
  2256
  2257 				; --- ForToDoEpilog
  2258 328C EE 6C 3C			inc I
  2259 328F F0 03 4C 30 31		jne l_033D
  2260 3294			l_034B
  2261
  2262 				; optimize OK (loadmod_portb.inc), line = 101
  2263
  2264 3294 AD 17 3C			lda NUMBER_OF_PATTERNS
  2265 3297 C9 26			cmp #$26
  2266 3299 90 2E			jcc l_03BA
  2267
  2268 				; optimize FAIL ('@print', loadmod_portb.inc), line = 102
  2269
  2270 329B 20 69 26			@printEOL
  2271
  2272 				; optimize FAIL ('@print', loadmod_portb.inc), line = 103
  2273
  2274 					@printSTRING #CODEORIGIN+$0044
  2274 				 LDY> CODEORIGIN+$0044\ LDA< CODEORIGIN+$0044\ JSR @PRINTSTRING
  2274 329E A0 20		 LDY> CODEORIGIN+$0044
  2274 32A0 A9 44		 LDA< CODEORIGIN+$0044
  2274 32A2 20 9D 26		 JSR @PRINTSTRING
  2275 32A5 AD 17 3C			lda NUMBER_OF_PATTERNS
  2276 32A8 20 CE 26			jsr @printBYTE._a
  2277 32AB 20 69 26			@printEOL
  2278
  2279 				; optimize FAIL ('@print', loadmod_portb.inc), line = 104
  2280
  2281 					@printSTRING #CODEORIGIN+$0004
  2281 				 LDY> CODEORIGIN+$0004\ LDA< CODEORIGIN+$0004\ JSR @PRINTSTRING
  2281 32AE A0 20		 LDY> CODEORIGIN+$0004
  2281 32B0 A9 04		 LDA< CODEORIGIN+$0004
  2281 32B2 20 9D 26		 JSR @PRINTSTRING
  2282 32B5 A9 25			lda #$25
  2283 32B7 20 CE 26			jsr @printBYTE._a
  2284 					@printSTRING #CODEORIGIN+$004F
  2284 				 LDY> CODEORIGIN+$004F\ LDA< CODEORIGIN+$004F\ JSR @PRINTSTRING
  2284 32BA A0 20		 LDY> CODEORIGIN+$004F
  2284 32BC A9 4F		 LDA< CODEORIGIN+$004F
  2284 32BE 20 9D 26		 JSR @PRINTSTRING
  2285 32C1 20 69 26			@printEOL
  2286 32C4 A9 00			lda #$00
  2287 32C6 4C F4 36			jmp @halt
  2288 32C9			l_03BA
  2289
  2290 				; optimize OK (loadmod_portb.inc), line = 109
  2291
  2292 32C9 AD 19 3C			lda NUMBER_OF_SAMPLES
  2293 32CC C9 20			cmp #$20
  2294 32CE 90 2E			jcc l_03E8
  2295
  2296 				; optimize FAIL ('@print', loadmod_portb.inc), line = 110
  2297
  2298 32D0 20 69 26			@printEOL
  2299
  2300 				; optimize FAIL ('@print', loadmod_portb.inc), line = 111
  2301
  2302 					@printSTRING #CODEORIGIN+$0044
  2302 				 LDY> CODEORIGIN+$0044\ LDA< CODEORIGIN+$0044\ JSR @PRINTSTRING
  2302 32D3 A0 20		 LDY> CODEORIGIN+$0044
  2302 32D5 A9 44		 LDA< CODEORIGIN+$0044
  2302 32D7 20 9D 26		 JSR @PRINTSTRING
  2303 32DA AD 19 3C			lda NUMBER_OF_SAMPLES
  2304 32DD 20 CE 26			jsr @printBYTE._a
  2305 32E0 20 69 26			@printEOL
  2306
  2307 				; optimize FAIL ('@print', loadmod_portb.inc), line = 112
  2308
  2309 					@printSTRING #CODEORIGIN+$0004
  2309 				 LDY> CODEORIGIN+$0004\ LDA< CODEORIGIN+$0004\ JSR @PRINTSTRING
  2309 32E3 A0 20		 LDY> CODEORIGIN+$0004
  2309 32E5 A9 04		 LDA< CODEORIGIN+$0004
  2309 32E7 20 9D 26		 JSR @PRINTSTRING
  2310 32EA A9 1F			lda #$1F
  2311 32EC 20 CE 26			jsr @printBYTE._a
  2312 					@printSTRING #CODEORIGIN+$004F
  2312 				 LDY> CODEORIGIN+$004F\ LDA< CODEORIGIN+$004F\ JSR @PRINTSTRING
  2312 32EF A0 20		 LDY> CODEORIGIN+$004F
  2312 32F1 A9 4F		 LDA< CODEORIGIN+$004F
  2312 32F3 20 9D 26		 JSR @PRINTSTRING
  2313 32F6 20 69 26			@printEOL
  2314 32F9 A9 00			lda #$00
  2315 32FB 4C F4 36			jmp @halt
  2316 32FE			l_03E8
  2317
  2318 				; optimize FAIL ('OBJECTS.TMEMORYSTREAM.CREATE', loadmod_portb.inc), line = 117
  2319
  2320 32FE AD BA 36			lda XMS
  2321 3301 AC BB 36			ldy XMS+1
  2322 3304 20 B1 28			jsr OBJECTS.TMEMORYSTREAM.CREATE
  2323
  2324 				; optimize OK (loadmod_portb.inc), line = 119
  2325
  2326 3307 A9 00			lda #$00
  2327 3309 85 8C			sta :ecx
  2328 330B A9 40			lda #$40
  2329 330D 85 8D			sta :ecx+1
  2330 330F AD 18 3C			lda NUMBER_OF_BANKS
  2331 3312 85 84			sta :eax
  2332 3314 A9 00			lda #$00
  2333 3316 85 85			sta :eax+1
  2334 					.ifdef fmulinit
  2335 					fmulu_16
  2336 					els
  2337 3318 20 B8 25			imulCX
  2338 					eif
  2339 331B AD 92 3C			lda XMS.SIZE+3
  2340 331E C5 87			cmp :eax+3
  2341 3320 D0 13			bne @+
  2342 3322 AD 91 3C			lda XMS.SIZE+2
  2343 3325 C5 86			cmp :eax+2
  2344 3327 D0 0C			bne @+
  2345 3329 AD 90 3C			lda XMS.SIZE+1
  2346 332C C5 85			cmp :eax+1
  2347 332E D0 05			bne @+
  2348 3330 AD 8F 3C			lda XMS.SIZE
  2349 3333 C5 84			cmp :eax
  2350 				@
  2351 3335 B0 1F			jcs l_041B
  2352
  2353 				; optimize FAIL ('@print', loadmod_portb.inc), line = 120
  2354
  2355 3337 20 69 26			@printEOL
  2356
  2357 				; optimize FAIL ('@print', loadmod_portb.inc), line = 121
  2358
  2359 					@printSTRING #CODEORIGIN+$0061
  2359 				 LDY> CODEORIGIN+$0061\ LDA< CODEORIGIN+$0061\ JSR @PRINTSTRING
  2359 333A A0 20		 LDY> CODEORIGIN+$0061
  2359 333C A9 61		 LDA< CODEORIGIN+$0061
  2359 333E 20 9D 26		 JSR @PRINTSTRING
  2360 3341 AD 18 3C			lda NUMBER_OF_BANKS
  2361 3344 20 CE 26			jsr @printBYTE._a
  2362 					@printSTRING #CODEORIGIN+$0070
  2362 				 LDY> CODEORIGIN+$0070\ LDA< CODEORIGIN+$0070\ JSR @PRINTSTRING
  2362 3347 A0 20		 LDY> CODEORIGIN+$0070
  2362 3349 A9 70		 LDA< CODEORIGIN+$0070
  2362 334B 20 9D 26		 JSR @PRINTSTRING
  2363 334E 20 69 26			@printEOL
  2364 3351 A9 00			lda #$00
  2365 3353 4C F4 36			jmp @halt
  2366 3356			l_041B
  2367
  2368 				; optimize OK (loadmod_portb.inc), line = 126
  2369
  2370 3356 A9 00			lda #$00
  2371 3358 8D 7A 3C			sta TEMP
  2372 335B A9 40			lda #$40
  2373 335D 8D 7B 3C			sta TEMP+1
  2374
  2375 				; optimize FAIL ('@print', loadmod_portb.inc), line = 128
  2376
  2377 3360 20 69 26			@printEOL
  2378
  2379 				; optimize FAIL ('@print', loadmod_portb.inc), line = 129
  2380
  2381 					@printSTRING #CODEORIGIN+$0088
  2381 				 LDY> CODEORIGIN+$0088\ LDA< CODEORIGIN+$0088\ JSR @PRINTSTRING
  2381 3363 A0 20		 LDY> CODEORIGIN+$0088
  2381 3365 A9 88		 LDA< CODEORIGIN+$0088
  2381 3367 20 9D 26		 JSR @PRINTSTRING
  2382
  2383 				; optimize FAIL ('CRT.WHEREX', loadmod_portb.inc), line = 130
  2384
  2385 336A 20 F2 27			jsr CRT.WHEREX
  2386 336D AD F2 37			lda CRT.WHEREX.RESULT
  2387 3370 8D 6F 3C			sta X
  2388
  2389 				; optimize FAIL ('CRT.WHEREY', loadmod_portb.inc), line = 131
  2390
  2391 3373 20 F9 27			jsr CRT.WHEREY
  2392 3376 AD F3 37			lda CRT.WHEREY.RESULT
  2393 3379 8D 70 3C			sta Y
  2394
  2395 				; optimize OK (loadmod_portb.inc), line = 133
  2396
  2397 337C A9 01			lda #$01
  2398 337E 8D 6C 3C			sta I
  2399
  2400 3381			l_0448
  2401 				; --- ForToDoCondition
  2402 3381 AD 6C 3C			lda I
  2403 3384 CD 17 3C			cmp NUMBER_OF_PATTERNS
  2404 3387 90 05			scc
  2405 3389 F0 03 4C 86 34		jne l_0456
  2406
  2407 				; optimize OK (loadmod_portb.inc), line = 135
  2408
  2409 338E AD 7A 3C			lda TEMP
  2410 3391 8D 80 3C			sta P0
  2411 3394 AD 7B 3C			lda TEMP+1
  2412 3397 8D 81 3C			sta P0+1
  2413
  2414 				; optimize OK (loadmod_portb.inc), line = 136
  2415
  2416 339A AD 7A 3C			lda TEMP
  2417 339D 8D 82 3C			sta P1
  2418 33A0 AD 7B 3C			lda TEMP+1
  2419 33A3 18 69 01			add #$01
  2420 33A6 8D 83 3C			sta P1+1
  2421
  2422 				; optimize OK (loadmod_portb.inc), line = 137
  2423
  2424 33A9 AD 7A 3C			lda TEMP
  2425 33AC 8D 84 3C			sta P2
  2426 33AF AD 7B 3C			lda TEMP+1
  2427 33B2 18 69 02			add #$02
  2428 33B5 8D 85 3C			sta P2+1
  2429
  2430 				; optimize OK (loadmod_portb.inc), line = 139
  2431
  2432 33B8 AD 6F 3C			lda X
  2433 33BB 8D F0 37			sta CRT.GOTOXY.X
  2434 33BE AD 70 3C			lda Y
  2435 33C1 8D F1 37			sta CRT.GOTOXY.Y
  2436 33C4 20 DD 27			jsr CRT.GOTOXY
  2437
  2438 				; optimize FAIL ('@print', loadmod_portb.inc), line = 140
  2439
  2440 33C7 AD 6C 3C			lda I
  2441 33CA 20 CE 26			jsr @printBYTE._a
  2442 					@print #$2F
  2442 				 LDY# $2F\ JSR @PRINT
  2442 33CD A0 2F		 LDY# $2F
  2442 33CF 20 6E 26		 JSR @PRINT
  2443 33D2 AD 17 3C			lda NUMBER_OF_PATTERNS
  2444 33D5 20 CE 26			jsr @printBYTE._a
  2445
  2446 				; optimize OK (loadmod_portb.inc), line = 142
  2447
  2448 33D8 A9 00			lda #$00
  2449 33DA 8D 6D 3C			sta J
  2450
  2451 33DD			l_048D
  2452 				; --- ForToDoCondition
  2453 				; BlockRead
  2454
  2455 				; optimize OK (loadmod_portb.inc), line = 143
  2456
  2457 33DD AC B4 36 84 82 AC + 	mwy F :bp2
  2458 33E7 A0 06			ldy #s@file.buffer
  2459 33E9 AD 0C 37			lda BUF
  2460 33EC 91 82			sta (:bp2),y
  2461 33EE C8				iny
  2462 33EF AD 0D 37			lda BUF+1
  2463 33F2 91 82			sta (:bp2),y
  2464 33F4 A0 08			ldy #s@file.nrecord
  2465 33F6 A9 04			lda #$04
  2466 33F8 91 82			sta (:bp2),y
  2467 33FA C8				iny
  2468 33FB A9 00			lda #$00
  2469 33FD 91 82			sta (:bp2),y
  2470
  2471 33FF 8A 48			txa:pha
  2472 3401 38				sec
  2473 					@readfile F, #7
  2473 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  2473 3402 AC B5 36		 LDY F+1
  2473 3405 AD B4 36		 LDA F
  2473 3408 A2 07		 LDX# 7
  2473 340A 20 E1 21		 JSR @READFILE
  2474 340D 68 AA			pla:tax
  2475
  2476 				; optimize FAIL ('CNVPATTERN', loadmod_portb.inc), line = 145
  2477
  2478 340F 20 D6 2C			jsr CNVPATTERN
  2479 3412 AD 1A 3C			lda CNVPATTERN.RESULT
  2480 3415 8D 76 3C			sta TMP
  2481 3418 AD 1B 3C			lda CNVPATTERN.RESULT+1
  2482 341B 8D 77 3C			sta TMP+1
  2483 341E AD 1C 3C			lda CNVPATTERN.RESULT+2
  2484 3421 8D 78 3C			sta TMP+2
  2485 3424 AD 1D 3C			lda CNVPATTERN.RESULT+3
  2486 3427 8D 79 3C			sta TMP+3
  2487
  2488 				; optimize OK (loadmod_portb.inc), line = 147
  2489
  2490 342A AC 80 3C 84 82 AC + 	mwy P0 :bp2
  2491 3434 A0 00			ldy #$00
  2492 3436 AD 76 3C			lda TMP
  2493 3439 91 82			sta (:bp2),y
  2494 343B EE 80 3C			inc P0
  2495 343E D0 03			sne
  2496 3440 EE 81 3C			inc P0+1
  2497
  2498 				; optimize OK (loadmod_portb.inc), line = 148
  2499
  2500 3443 AD 77 3C			lda TMP+1
  2501 3446 AC 83 3C 84 81		mvy P1+1 :bp+1
  2502 344B AC 82 3C			ldy P1
  2503 344E 91 80			sta (:bp),y
  2504 3450 EE 82 3C			inc P1
  2505 3453 D0 03			sne
  2506 3455 EE 83 3C			inc P1+1
  2507
  2508 				; optimize OK (loadmod_portb.inc), line = 149
  2509
  2510 3458 AD 78 3C			lda TMP+2
  2511 345B AC 85 3C 84 81		mvy P2+1 :bp+1
  2512 3460 AC 84 3C			ldy P2
  2513 3463 91 80			sta (:bp),y
  2514 3465 EE 84 3C			inc P2
  2515 3468 D0 03			sne
  2516 346A EE 85 3C			inc P2+1
  2517
  2518 				; --- ForToDoEpilog
  2519 346D EE 6D 3C			inc J
  2520 3470 F0 03 4C DD 33		jne l_048D
  2521 3475			l_049B
  2522
  2523 				; optimize OK (loadmod_portb.inc), line = 152
  2524
  2525 3475 AD 7B 3C			lda TEMP+1
  2526 3478 18 69 03			add #$03
  2527 347B 8D 7B 3C			sta TEMP+1
  2528
  2529 				; --- ForToDoEpilog
  2530 347E EE 6C 3C			inc I
  2531 3481 F0 03 4C 81 33		jne l_0448
  2532 3486			l_0456
  2533
  2534 				; optimize FAIL ('@print', loadmod_portb.inc), line = 157
  2535
  2536 3486 20 69 26			@printEOL
  2537
  2538 				; optimize FAIL ('@print', loadmod_portb.inc), line = 158
  2539
  2540 					@printSTRING #CODEORIGIN+$0098
  2540 				 LDY> CODEORIGIN+$0098\ LDA< CODEORIGIN+$0098\ JSR @PRINTSTRING
  2540 3489 A0 20		 LDY> CODEORIGIN+$0098
  2540 348B A9 98		 LDA< CODEORIGIN+$0098
  2540 348D 20 9D 26		 JSR @PRINTSTRING
  2541
  2542 				; optimize FAIL ('CRT.WHEREX', loadmod_portb.inc), line = 159
  2543
  2544 3490 20 F2 27			jsr CRT.WHEREX
  2545 3493 AD F2 37			lda CRT.WHEREX.RESULT
  2546 3496 8D 6F 3C			sta X
  2547
  2548 				; optimize FAIL ('CRT.WHEREY', loadmod_portb.inc), line = 160
  2549
  2550 3499 20 F9 27			jsr CRT.WHEREY
  2551 349C AD F3 37			lda CRT.WHEREY.RESULT
  2552 349F 8D 70 3C			sta Y
  2553
  2554 				; optimize OK (loadmod_portb.inc), line = 162
  2555
  2556 34A2 A9 00			lda #$00
  2557 34A4 8D 72 3C			sta OFFSET
  2558 34A7 8D 73 3C			sta OFFSET+1
  2559 34AA 8D 74 3C			sta OFFSET+2
  2560 34AD 8D 75 3C			sta OFFSET+3
  2561
  2562 				; optimize OK (loadmod_portb.inc), line = 163
  2563
  2564 34B0 A9 01			lda #$01
  2565 34B2 8D 71 3C			sta NUM
  2566
  2567 				; optimize OK (loadmod_portb.inc), line = 165
  2568
  2569 34B5 A9 00			lda #$00
  2570 34B7 8D 6C 3C			sta I
  2571
  2572 34BA			l_04EF
  2573 				; --- ForToDoCondition
  2574 34BA AC 6C 3C			ldy I
  2575 34BD C0 1F			cpy #$1F
  2576 34BF 90 03 4C A0 36		jcs l_04FD
  2577
  2578 				; optimize OK (loadmod_portb.inc), line = 167
  2579
  2580 34C4 A9 00			lda #$00
  2581 34C6 99 80 06			sta adr.TSTRL,y
  2582
  2583 				; optimize OK (loadmod_portb.inc), line = 168
  2584
  2585 34C9 A9 DE			lda #$DE
  2586 34CB 99 A0 06			sta adr.TSTRH,y
  2587
  2588 				; optimize OK (loadmod_portb.inc), line = 169
  2589
  2590 34CE A9 00			lda #$00
  2591 34D0 99 C0 06			sta adr.TREPL,y
  2592
  2593 				; optimize OK (loadmod_portb.inc), line = 170
  2594
  2595 34D3 A9 DE			lda #$DE
  2596 34D5 99 E0 06			sta adr.TREPH,y
  2597
  2598 				; optimize OK (loadmod_portb.inc), line = 172
  2599
  2600 34D8 99 50 01			sta adr.TIVOL,y
  2601
  2602 				; optimize OK (loadmod_portb.inc), line = 174
  2603
  2604 34DB AD 6C 3C			lda I
  2605 34DE 0A				asl @
  2606 34DF A8				tay
  2607 34E0 B9 D6 3B			lda adr.SAMPLE,y
  2608 34E3 8D 7E 3C			sta SMP
  2609 34E6 85 82			sta :bp2
  2610 34E8 B9 D7 3B			lda adr.SAMPLE+1,y
  2611 34EB 8D 7F 3C			sta SMP+1
  2612 34EE 85 83			sta :bp2+1
  2613 				; optimize OK (loadmod_portb.inc), line = 176
  2614 34F0 A0 16			ldy #SMP.LEN-DATAORIGIN
  2615 34F2 B1 82			lda (:bp2),y
  2616 34F4 8D 7C 3C			sta LEN
  2617 34F7 C8				iny
  2618 34F8 B1 82			lda (:bp2),y
  2619 34FA 8D 7D 3C			sta LEN+1
  2620
  2621 				; optimize OK (loadmod_portb.inc), line = 178
  2622
  2623 34FD 0D 7C 3C			ora LEN
  2624 3500 D0 03 4C 7F 36		jeq l_053E
  2625
  2626 				; optimize OK (loadmod_portb.inc), line = 180
  2627
  2628 3505 AD 6F 3C			lda X
  2629 3508 8D F0 37			sta CRT.GOTOXY.X
  2630 350B AD 70 3C			lda Y
  2631 350E 8D F1 37			sta CRT.GOTOXY.Y
  2632 3511 20 DD 27			jsr CRT.GOTOXY
  2633
  2634 				; optimize FAIL ('@print', loadmod_portb.inc), line = 181
  2635
  2636 3514 AD 71 3C			lda NUM
  2637 3517 20 CE 26			jsr @printBYTE._a
  2638 					@print #$2F
  2638 				 LDY# $2F\ JSR @PRINT
  2638 351A A0 2F		 LDY# $2F
  2638 351C 20 6E 26		 JSR @PRINT
  2639 351F AD 19 3C			lda NUMBER_OF_SAMPLES
  2640 3522 20 CE 26			jsr @printBYTE._a
  2641
  2642 				; optimize OK (loadmod_portb.inc), line = 183
  2643
  2644 3525 A9 00			lda #$00
  2645 3527 38 ED 7C 3C			sub LEN
  2646 352B 8D 7A 3C			sta TEMP
  2647 352E A9 40			lda #$40
  2648 3530 ED 7D 3C			sbc LEN+1
  2649 3533 8D 7B 3C			sta TEMP+1
  2650
  2651 				; optimize OK (loadmod_portb.inc), line = 185
  2652
  2653 3536 AD 7A 3C			lda TEMP
  2654 3539 18 6D 72 3C			add OFFSET
  2655 353D 8D 8B 3C			sta XMS.POSITION
  2656 3540 AD 7B 3C			lda TEMP+1
  2657 3543 6D 73 3C			adc OFFSET+1
  2658 3546 8D 8C 3C			sta XMS.POSITION+1
  2659 3549 A9 00			lda #$00
  2660 354B 6D 74 3C			adc OFFSET+2
  2661 354E 8D 8D 3C			sta XMS.POSITION+2
  2662 3551 A9 00			lda #$00
  2663 3553 6D 75 3C			adc OFFSET+3
  2664 3556 8D 8E 3C			sta XMS.POSITION+3
  2665
  2666 				; optimize OK (loadmod_portb.inc), line = 187
  2667
  2668 3559 AD 7B 3C			lda TEMP+1
  2669 355C 18 69 40			add #$40
  2670 355F 8D 7B 3C			sta TEMP+1
  2671
  2672 				; optimize OK (loadmod_portb.inc), line = 189
  2673
  2674 3562 AC 6C 3C			ldy I
  2675 3565 AD 7A 3C			lda TEMP
  2676 3568 99 80 06			sta adr.TSTRL,y
  2677
  2678 				; optimize OK (loadmod_portb.inc), line = 190
  2679
  2680 356B AD 7B 3C			lda TEMP+1
  2681 356E 99 A0 06			sta adr.TSTRH,y
  2682
  2683 				; optimize OK (loadmod_portb.inc), line = 192
  2684
  2685 3571 AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  2686 357B A0 1D			ldy #SMP.LOOP_LEN-DATAORIGIN+$01
  2687 357D B1 82			lda (:bp2),y
  2688 357F C9 00			cmp #$00
  2689 3581 D0 05			bne @+
  2690 3583 88				dey
  2691 3584 B1 82			lda (:bp2),y
  2692 3586 C9 08			cmp #$08
  2693 				@
  2694 3588 B0 0D			jcs l_058A
  2695
  2696 				; optimize OK (loadmod_portb.inc), line = 193
  2697
  2698 358A A9 00			lda #$00
  2699 358C 8D 7A 3C			sta TEMP
  2700 358F A9 DE			lda #$DE
  2701 3591 8D 7B 3C			sta TEMP+1
  2702 3594 4C B5 35			jmp l_0598
  2703 3597			l_058A
  2704
  2705 				; optimize OK (loadmod_portb.inc), line = 195
  2706
  2707 3597 AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  2708 35A1 A0 1A			ldy #SMP.LOOP_START-DATAORIGIN
  2709 35A3 AD 7A 3C			lda TEMP
  2710 35A6 18 71 82			add (:bp2),y
  2711 35A9 C8				iny
  2712 35AA 8D 7A 3C			sta TEMP
  2713 35AD AD 7B 3C			lda TEMP+1
  2714 35B0 71 82			adc (:bp2),y
  2715 35B2 8D 7B 3C			sta TEMP+1
  2716 35B5			l_0598
  2717
  2718 				; optimize OK (loadmod_portb.inc), line = 197
  2719
  2720 35B5 AC 6C 3C			ldy I
  2721 35B8 AD 7A 3C			lda TEMP
  2722 35BB 99 C0 06			sta adr.TREPL,y
  2723
  2724 				; optimize OK (loadmod_portb.inc), line = 198
  2725
  2726 35BE AD 7B 3C			lda TEMP+1
  2727 35C1 99 E0 06			sta adr.TREPH,y
  2728
  2729 				; optimize OK (loadmod_portb.inc), line = 200
  2730
  2731 35C4 A9 DE			lda #$DE
  2732 35C6 85 9E			sta :STACKORIGIN+10
  2733 35C8 AC 7E 3C 84 82 AC + 	mwy SMP :bp2
  2734 35D2 A0 19			ldy #SMP.VOLUME-DATAORIGIN
  2735 35D4 B1 82			lda (:bp2),y
  2736 35D6 4A				lsr @
  2737 35D7 18 65 9E			add :STACKORIGIN+10
  2738 35DA AC 6C 3C			ldy I
  2739 35DD 99 50 01			sta adr.TIVOL,y
  2740
  2741 				; --- WhileProlog
  2742 35E0 4C 71 36			jmp l_05BD
  2743 35E3			l_05BE
  2744
  2745 				; optimize OK (loadmod_portb.inc), line = 204
  2746
  2747 35E3 AD 7D 3C			lda LEN+1
  2748 35E6 C9 01			cmp #$01
  2749 35E8 90 14			jcc l_05CF
  2750 35EA D0 05			bne @+
  2751 35EC AD 7C 3C			lda LEN
  2752 35EF 90 0D			jcc l_05CF
  2753 				@
  2754
  2755 				; optimize OK (loadmod_portb.inc), line = 205
  2756
  2757 35F1 A9 00			lda #$00
  2758 35F3 8D 7A 3C			sta TEMP
  2759 35F6 A9 01			lda #$01
  2760 35F8 8D 7B 3C			sta TEMP+1
  2761 35FB 4C 0A 36			jmp l_05DD
  2762 35FE			l_05CF
  2763
  2764 				; optimize OK (loadmod_portb.inc), line = 207
  2765
  2766 35FE AD 7C 3C			lda LEN
  2767 3601 8D 7A 3C			sta TEMP
  2768 3604 AD 7D 3C			lda LEN+1
  2769 3607 8D 7B 3C			sta TEMP+1
  2770 360A			l_05DD
  2771 				; BlockRead
  2772
  2773 				; optimize OK (loadmod_portb.inc), line = 209
  2774
  2775 360A AC B4 36 84 82 AC + 	mwy F :bp2
  2776 3614 A0 06			ldy #s@file.buffer
  2777 3616 AD 0C 37			lda BUF
  2778 3619 91 82			sta (:bp2),y
  2779 361B C8				iny
  2780 361C AD 0D 37			lda BUF+1
  2781 361F 91 82			sta (:bp2),y
  2782 3621 A0 08			ldy #s@file.nrecord
  2783 3623 AD 7A 3C			lda TEMP
  2784 3626 91 82			sta (:bp2),y
  2785 3628 C8				iny
  2786 3629 AD 7B 3C			lda TEMP+1
  2787 362C 91 82			sta (:bp2),y
  2788
  2789 362E 8A 48			txa:pha
  2790 3630 38				sec
  2791 					@readfile F, #7
  2791 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  2791 3631 AC B5 36		 LDY F+1
  2791 3634 AD B4 36		 LDA F
  2791 3637 A2 07		 LDX# 7
  2791 3639 20 E1 21		 JSR @READFILE
  2792 363C 68 AA			pla:tax
  2793
  2794 				; optimize FAIL ('NORMALIZEBUF', loadmod_portb.inc), line = 210
  2795
  2796 363E 20 9F 2D			jsr NORMALIZEBUF
  2797
  2798 				; optimize OK (loadmod_portb.inc), line = 211
  2799
  2800 3641 AD 0C 37			lda BUF
  2801 3644 85 88			sta OBJECTS.TMEMORYSTREAM.WRITEBUFFER.BUFFER
  2802 3646 AD 0D 37			lda BUF+1
  2803 3649 85 89			sta OBJECTS.TMEMORYSTREAM.WRITEBUFFER.BUFFER+1
  2804 364B AD 7A 3C			lda TEMP
  2805 364E 85 8C			sta OBJECTS.TMEMORYSTREAM.WRITEBUFFER.COUNT
  2806 3650 AD 7B 3C			lda TEMP+1
  2807 3653 85 8D			sta OBJECTS.TMEMORYSTREAM.WRITEBUFFER.COUNT+1
  2808 3655 AD BA 36			lda XMS
  2809 3658 AC BB 36			ldy XMS+1
  2810 365B 20 0C 29			jsr OBJECTS.TMEMORYSTREAM.WRITEBUFFER
  2811
  2812 				; optimize OK (loadmod_portb.inc), line = 213
  2813
  2814 365E AD 7C 3C			lda LEN
  2815 3661 38 ED 7A 3C			sub TEMP
  2816 3665 8D 7C 3C			sta LEN
  2817 3668 AD 7D 3C			lda LEN+1
  2818 366B ED 7B 3C			sbc TEMP+1
  2819 366E 8D 7D 3C			sta LEN+1
  2820 3671			l_05BD
  2821
  2822 				; optimize OK (loadmod_portb.inc), line = 202
  2823
  2824 3671 AD 7D 3C			lda LEN+1
  2825 3674 0D 7C 3C			ora LEN
  2826 3677 F0 03 4C E3 35		jne l_05BE
  2827
  2828 				; optimize FAIL (0, loadmod_portb.inc), line = 217
  2829
  2830 367C EE 71 3C			inc NUM
  2831 367F			l_053E
  2832
  2833 				; optimize OK (loadmod_portb.inc), line = 221
  2834
  2835 367F AD 73 3C			lda OFFSET+1
  2836 3682 18 69 40			add #$40
  2837 3685 8D 73 3C			sta OFFSET+1
  2838 3688 AD 74 3C			lda OFFSET+2
  2839 368B 69 00			adc #$00
  2840 368D 8D 74 3C			sta OFFSET+2
  2841 3690 AD 75 3C			lda OFFSET+3
  2842 3693 69 00			adc #$00
  2843 3695 8D 75 3C			sta OFFSET+3
  2844
  2845 				; --- ForToDoEpilog
  2846 3698 EE 6C 3C			inc I
  2847 369B F0 03 4C BA 34		jne l_04EF
  2848 36A0			l_04FD
  2849
  2850 				; optimize FAIL ('@print', loadmod_portb.inc), line = 225
  2851
  2852 36A0 20 69 26			@printEOL
  2853 				; CloseFile
  2854
  2855 36A3 8A 48			txa:pha
  2856 36A5 38				sec
  2857 					@closefile F
  2857 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  2857 36A6 AC B5 36		 LDY F+1
  2857 36A9 AD B4 36		 LDA F
  2857 36AC 20 B4 21		 JSR @CLOSEFILE
  2858 36AF 68 AA			pla:tax
  2859
  2860 				; ------------------------------------------------------------
  2861
  2862 = 3C1E			adr.FNAM	= [DATAORIGIN+$0482] .array [33]
  2863 36B1			.var FNAM	= adr.FNAM .word
  2864 36B1			.var F	= DATAORIGIN+$04A3 .word
  2865 = 3C4B			adr.NAME	= [DATAORIGIN+$04AF] .array [33]
  2866 36B1			.var NAME	= adr.NAME .word
  2867 = 3C6C			I	= DATAORIGIN+$04D0
  2868 = 3C6D			J	= DATAORIGIN+$04D1
  2869 = 3C6E			A	= DATAORIGIN+$04D2
  2870 = 3C6F			X	= DATAORIGIN+$04D3
  2871 = 3C70			Y	= DATAORIGIN+$04D4
  2872 = 3C71			NUM	= DATAORIGIN+$04D5
  2873 = 3C72			OFFSET	= DATAORIGIN+$04D6
  2874 = 3C76			TMP	= DATAORIGIN+$04DA
  2875 = 3C7A			TEMP	= DATAORIGIN+$04DE
  2876 = 3C7C			LEN	= DATAORIGIN+$04E0
  2877 = 3C7E			SMP	= DATAORIGIN+$04E2
  2878 = 379C			SMP.NAME	= DATAORIGIN+$0000
  2879 = 37B2			SMP.LEN	= DATAORIGIN+$0016
  2880 = 37B4			SMP.FINE_TUNE	= DATAORIGIN+$0018
  2881 = 37B5			SMP.VOLUME	= DATAORIGIN+$0019
  2882 = 37B6			SMP.LOOP_START	= DATAORIGIN+$001A
  2883 = 37B8			SMP.LOOP_LEN	= DATAORIGIN+$001C
  2884 = 3C80			P0	= DATAORIGIN+$04E4
  2885 = 3C82			P1	= DATAORIGIN+$04E6
  2886 = 3C84			P2	= DATAORIGIN+$04E8
  2887 = 3C86			adr.HEADER	= [DATAORIGIN+$04EA] .array [5]
  2888 36B1			.var HEADER	= adr.HEADER .word
  2889 = 3C8B			adr.XMS	= DATAORIGIN+$04EF	; [8] OBJECT
  2890 36B1			.var XMS	= adr.XMS .word
  2891 = 3C8B			XMS.POSITION	= DATAORIGIN+$04EF
  2892 = 3C8F			XMS.SIZE	= DATAORIGIN+$04F3
  2893
  2894 = 36B2			@VarData	= FNAM
  2895 = 0077			@VarDataSize	= 119
  2896
  2897 36B1			@exit
  2898 					.ifdef @new
  2899 					lda <@VarData
  2900 					sta :ztmp
  2901 					lda >@VarData
  2902 					ldy #@VarDataSize-1
  2903 					jmp @FreeMem
  2904 					els
  2905 36B1 60				rts						; ret
  2906 					eif
  2907 = 36B2 1E 3C		FNAM
  2907 = 36B4 3F 3C		F
  2907 = 36B6 4B 3C		NAME
  2907 = 36B8 86 3C		HEADER
  2907 = 36BA 8B 3C		XMS
  2907 				.endl
  2908 36BC			l_00C5
  2909
  2910 				; optimize OK (modplay2.pas), line = 766
  2911
  2912 36BC A9 00			lda #$00
  2913 36BE 20 00 28			jsr CRT.TEXTMODE
  2914
  2915 				; optimize FAIL ('@print', modplay2.pas), line = 768
  2916
  2917 					@printSTRING #CODEORIGIN+$00A7
  2917 				 LDY> CODEORIGIN+$00A7\ LDA< CODEORIGIN+$00A7\ JSR @PRINTSTRING
  2917 36C1 A0 20		 LDY> CODEORIGIN+$00A7
  2917 36C3 A9 A7		 LDA< CODEORIGIN+$00A7
  2917 36C5 20 9D 26		 JSR @PRINTSTRING
  2918 36C8 20 69 26			@printEOL
  2919
  2920 				; optimize FAIL ('@print', modplay2.pas), line = 769
  2921
  2922 36CB 20 69 26			@printEOL
  2923
  2924 				; optimize OK (modplay2.pas), line = 771
  2925
  2926 36CE AD 2F 02			lda ATARI.SDMCTL
  2927 36D1 8D 00 D4			sta ATARI.DMACTL
  2928
  2929 				; optimize FAIL ('SYSTEM.PARAMCOUNT', modplay2.pas), line = 773
  2930
  2931 36D4 20 AC 27			jsr SYSTEM.PARAMCOUNT
  2932 36D7 A9 00			lda #$00
  2933 36D9 CD C8 37			cmp SYSTEM.PARAMCOUNT.RESULT
  2934 36DC B0 16			jcs l_0627
  2935 				@
  2936
  2937 				; optimize OK (modplay2.pas), line = 775
  2938
  2939 36DE A9 01			lda #$01
  2940 36E0 20 B5 27			jsr SYSTEM.PARAMSTR
  2941 36E3 E8				inx
  2942 36E4 AD CA 27 95 94		mva SYSTEM.PARAMSTR.RESULT :STACKORIGIN,x
  2943 36E9 AD CB 27 95 A4		mva SYSTEM.PARAMSTR.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  2944 36EE 20 7F 2D			jsr LOADMOD
  2945
  2946 				; optimize FAIL ('PLAY', modplay2.pas), line = 784
  2947
  2948 36F1 20 42 29			jsr PLAY
  2949 36F4			l_0627
  2950
  2951 				; ------------------------------------------------------------
  2952
  2953 = D700			COVOX	= $D700
  2954 = 0025			PATTERN_LIMIT	= $25
  2955 = 001F			SAMPLE_LIMIT	= $1F
  2956 = D800			VOL6BIT	= $D800
  2957 = DB00			ZPAGE	= $DB00
  2958 = DC00			EFFECT	= $DC00
  2959 = DD00			TADCL	= $DD00
  2960 = DD30			TADCH	= $DD30
  2961 = DE00			VOLUME	= $DE00
  2962 = 4000			PATTERN_START	= $4000
  2963 = 4000			SAMPLE_START	= $4000
  2964 = 4000			SAMPLE_LEN	= $4000
  2965 = 20BE			adr.KOD	= CODEORIGIN+$00BE
  2966 36F4			.var KOD	= adr.KOD .word
  2967 = 0500			adr.BUF	= $0500
  2968 36F4			.var BUF	= adr.BUF .word
  2969 = 0150			adr.TIVOL	= $0150
  2970 36F4			.var TIVOL	= adr.TIVOL .word
  2971 = 0600			adr.ORDER	= $0600
  2972 36F4			.var ORDER	= adr.ORDER .word
  2973 = 0680			adr.TSTRL	= $0680
  2974 36F4			.var TSTRL	= adr.TSTRL .word
  2975 = 06A0			adr.TSTRH	= $06A0
  2976 36F4			.var TSTRH	= adr.TSTRH .word
  2977 = 06C0			adr.TREPL	= $06C0
  2978 36F4			.var TREPL	= adr.TREPL .word
  2979 = 06E0			adr.TREPH	= $06E0
  2980 36F4			.var TREPH	= adr.TREPH .word
  2981 = 381F			adr.MODNAME	= [DATAORIGIN+$0083] .array [21]
  2982 36F4			.var MODNAME	= adr.MODNAME .word
  2983 = 3834			adr.SAMPL_0	= DATAORIGIN+$0098	; [30] RECORD
  2984 36F4			.var SAMPL_0	= adr.SAMPL_0 .word
  2985 = 3834			adr.SAMPL_0.NAME	= [DATAORIGIN+$0098] .array [22]
  2986 36F4			.var SAMPL_0.NAME	= adr.SAMPL_0.NAME .word
  2987 = 384A			SAMPL_0.LEN	= DATAORIGIN+$00AE
  2988 = 384C			SAMPL_0.FINE_TUNE	= DATAORIGIN+$00B0
  2989 = 384D			SAMPL_0.VOLUME	= DATAORIGIN+$00B1
  2990 = 384E			SAMPL_0.LOOP_START	= DATAORIGIN+$00B2
  2991 = 3850			SAMPL_0.LOOP_LEN	= DATAORIGIN+$00B4
  2992 = 3852			adr.SAMPL_1	= DATAORIGIN+$00B6	; [30] RECORD
  2993 36F4			.var SAMPL_1	= adr.SAMPL_1 .word
  2994 = 3852			adr.SAMPL_1.NAME	= [DATAORIGIN+$00B6] .array [22]
  2995 36F4			.var SAMPL_1.NAME	= adr.SAMPL_1.NAME .word
  2996 = 3868			SAMPL_1.LEN	= DATAORIGIN+$00CC
  2997 = 386A			SAMPL_1.FINE_TUNE	= DATAORIGIN+$00CE
  2998 = 386B			SAMPL_1.VOLUME	= DATAORIGIN+$00CF
  2999 = 386C			SAMPL_1.LOOP_START	= DATAORIGIN+$00D0
  3000 = 386E			SAMPL_1.LOOP_LEN	= DATAORIGIN+$00D2
  3001 = 3870			adr.SAMPL_2	= DATAORIGIN+$00D4	; [30] RECORD
  3002 36F4			.var SAMPL_2	= adr.SAMPL_2 .word
  3003 = 3870			adr.SAMPL_2.NAME	= [DATAORIGIN+$00D4] .array [22]
  3004 36F4			.var SAMPL_2.NAME	= adr.SAMPL_2.NAME .word
  3005 = 3886			SAMPL_2.LEN	= DATAORIGIN+$00EA
  3006 = 3888			SAMPL_2.FINE_TUNE	= DATAORIGIN+$00EC
  3007 = 3889			SAMPL_2.VOLUME	= DATAORIGIN+$00ED
  3008 = 388A			SAMPL_2.LOOP_START	= DATAORIGIN+$00EE
  3009 = 388C			SAMPL_2.LOOP_LEN	= DATAORIGIN+$00F0
  3010 = 388E			adr.SAMPL_3	= DATAORIGIN+$00F2	; [30] RECORD
  3011 36F4			.var SAMPL_3	= adr.SAMPL_3 .word
  3012 = 388E			adr.SAMPL_3.NAME	= [DATAORIGIN+$00F2] .array [22]
  3013 36F4			.var SAMPL_3.NAME	= adr.SAMPL_3.NAME .word
  3014 = 38A4			SAMPL_3.LEN	= DATAORIGIN+$0108
  3015 = 38A6			SAMPL_3.FINE_TUNE	= DATAORIGIN+$010A
  3016 = 38A7			SAMPL_3.VOLUME	= DATAORIGIN+$010B
  3017 = 38A8			SAMPL_3.LOOP_START	= DATAORIGIN+$010C
  3018 = 38AA			SAMPL_3.LOOP_LEN	= DATAORIGIN+$010E
  3019 = 38AC			adr.SAMPL_4	= DATAORIGIN+$0110	; [30] RECORD
  3020 36F4			.var SAMPL_4	= adr.SAMPL_4 .word
  3021 = 38AC			adr.SAMPL_4.NAME	= [DATAORIGIN+$0110] .array [22]
  3022 36F4			.var SAMPL_4.NAME	= adr.SAMPL_4.NAME .word
  3023 = 38C2			SAMPL_4.LEN	= DATAORIGIN+$0126
  3024 = 38C4			SAMPL_4.FINE_TUNE	= DATAORIGIN+$0128
  3025 = 38C5			SAMPL_4.VOLUME	= DATAORIGIN+$0129
  3026 = 38C6			SAMPL_4.LOOP_START	= DATAORIGIN+$012A
  3027 = 38C8			SAMPL_4.LOOP_LEN	= DATAORIGIN+$012C
  3028 = 38CA			adr.SAMPL_5	= DATAORIGIN+$012E	; [30] RECORD
  3029 36F4			.var SAMPL_5	= adr.SAMPL_5 .word
  3030 = 38CA			adr.SAMPL_5.NAME	= [DATAORIGIN+$012E] .array [22]
  3031 36F4			.var SAMPL_5.NAME	= adr.SAMPL_5.NAME .word
  3032 = 38E0			SAMPL_5.LEN	= DATAORIGIN+$0144
  3033 = 38E2			SAMPL_5.FINE_TUNE	= DATAORIGIN+$0146
  3034 = 38E3			SAMPL_5.VOLUME	= DATAORIGIN+$0147
  3035 = 38E4			SAMPL_5.LOOP_START	= DATAORIGIN+$0148
  3036 = 38E6			SAMPL_5.LOOP_LEN	= DATAORIGIN+$014A
  3037 = 38E8			adr.SAMPL_6	= DATAORIGIN+$014C	; [30] RECORD
  3038 36F4			.var SAMPL_6	= adr.SAMPL_6 .word
  3039 = 38E8			adr.SAMPL_6.NAME	= [DATAORIGIN+$014C] .array [22]
  3040 36F4			.var SAMPL_6.NAME	= adr.SAMPL_6.NAME .word
  3041 = 38FE			SAMPL_6.LEN	= DATAORIGIN+$0162
  3042 = 3900			SAMPL_6.FINE_TUNE	= DATAORIGIN+$0164
  3043 = 3901			SAMPL_6.VOLUME	= DATAORIGIN+$0165
  3044 = 3902			SAMPL_6.LOOP_START	= DATAORIGIN+$0166
  3045 = 3904			SAMPL_6.LOOP_LEN	= DATAORIGIN+$0168
  3046 = 3906			adr.SAMPL_7	= DATAORIGIN+$016A	; [30] RECORD
  3047 36F4			.var SAMPL_7	= adr.SAMPL_7 .word
  3048 = 3906			adr.SAMPL_7.NAME	= [DATAORIGIN+$016A] .array [22]
  3049 36F4			.var SAMPL_7.NAME	= adr.SAMPL_7.NAME .word
  3050 = 391C			SAMPL_7.LEN	= DATAORIGIN+$0180
  3051 = 391E			SAMPL_7.FINE_TUNE	= DATAORIGIN+$0182
  3052 = 391F			SAMPL_7.VOLUME	= DATAORIGIN+$0183
  3053 = 3920			SAMPL_7.LOOP_START	= DATAORIGIN+$0184
  3054 = 3922			SAMPL_7.LOOP_LEN	= DATAORIGIN+$0186
  3055 = 3924			adr.SAMPL_8	= DATAORIGIN+$0188	; [30] RECORD
  3056 36F4			.var SAMPL_8	= adr.SAMPL_8 .word
  3057 = 3924			adr.SAMPL_8.NAME	= [DATAORIGIN+$0188] .array [22]
  3058 36F4			.var SAMPL_8.NAME	= adr.SAMPL_8.NAME .word
  3059 = 393A			SAMPL_8.LEN	= DATAORIGIN+$019E
  3060 = 393C			SAMPL_8.FINE_TUNE	= DATAORIGIN+$01A0
  3061 = 393D			SAMPL_8.VOLUME	= DATAORIGIN+$01A1
  3062 = 393E			SAMPL_8.LOOP_START	= DATAORIGIN+$01A2
  3063 = 3940			SAMPL_8.LOOP_LEN	= DATAORIGIN+$01A4
  3064 = 3942			adr.SAMPL_9	= DATAORIGIN+$01A6	; [30] RECORD
  3065 36F4			.var SAMPL_9	= adr.SAMPL_9 .word
  3066 = 3942			adr.SAMPL_9.NAME	= [DATAORIGIN+$01A6] .array [22]
  3067 36F4			.var SAMPL_9.NAME	= adr.SAMPL_9.NAME .word
  3068 = 3958			SAMPL_9.LEN	= DATAORIGIN+$01BC
  3069 = 395A			SAMPL_9.FINE_TUNE	= DATAORIGIN+$01BE
  3070 = 395B			SAMPL_9.VOLUME	= DATAORIGIN+$01BF
  3071 = 395C			SAMPL_9.LOOP_START	= DATAORIGIN+$01C0
  3072 = 395E			SAMPL_9.LOOP_LEN	= DATAORIGIN+$01C2
  3073 = 3960			adr.SAMPL_10	= DATAORIGIN+$01C4	; [30] RECORD
  3074 36F4			.var SAMPL_10	= adr.SAMPL_10 .word
  3075 = 3960			adr.SAMPL_10.NAME	= [DATAORIGIN+$01C4] .array [22]
  3076 36F4			.var SAMPL_10.NAME	= adr.SAMPL_10.NAME .word
  3077 = 3976			SAMPL_10.LEN	= DATAORIGIN+$01DA
  3078 = 3978			SAMPL_10.FINE_TUNE	= DATAORIGIN+$01DC
  3079 = 3979			SAMPL_10.VOLUME	= DATAORIGIN+$01DD
  3080 = 397A			SAMPL_10.LOOP_START	= DATAORIGIN+$01DE
  3081 = 397C			SAMPL_10.LOOP_LEN	= DATAORIGIN+$01E0
  3082 = 397E			adr.SAMPL_11	= DATAORIGIN+$01E2	; [30] RECORD
  3083 36F4			.var SAMPL_11	= adr.SAMPL_11 .word
  3084 = 397E			adr.SAMPL_11.NAME	= [DATAORIGIN+$01E2] .array [22]
  3085 36F4			.var SAMPL_11.NAME	= adr.SAMPL_11.NAME .word
  3086 = 3994			SAMPL_11.LEN	= DATAORIGIN+$01F8
  3087 = 3996			SAMPL_11.FINE_TUNE	= DATAORIGIN+$01FA
  3088 = 3997			SAMPL_11.VOLUME	= DATAORIGIN+$01FB
  3089 = 3998			SAMPL_11.LOOP_START	= DATAORIGIN+$01FC
  3090 = 399A			SAMPL_11.LOOP_LEN	= DATAORIGIN+$01FE
  3091 = 399C			adr.SAMPL_12	= DATAORIGIN+$0200	; [30] RECORD
  3092 36F4			.var SAMPL_12	= adr.SAMPL_12 .word
  3093 = 399C			adr.SAMPL_12.NAME	= [DATAORIGIN+$0200] .array [22]
  3094 36F4			.var SAMPL_12.NAME	= adr.SAMPL_12.NAME .word
  3095 = 39B2			SAMPL_12.LEN	= DATAORIGIN+$0216
  3096 = 39B4			SAMPL_12.FINE_TUNE	= DATAORIGIN+$0218
  3097 = 39B5			SAMPL_12.VOLUME	= DATAORIGIN+$0219
  3098 = 39B6			SAMPL_12.LOOP_START	= DATAORIGIN+$021A
  3099 = 39B8			SAMPL_12.LOOP_LEN	= DATAORIGIN+$021C
  3100 = 39BA			adr.SAMPL_13	= DATAORIGIN+$021E	; [30] RECORD
  3101 36F4			.var SAMPL_13	= adr.SAMPL_13 .word
  3102 = 39BA			adr.SAMPL_13.NAME	= [DATAORIGIN+$021E] .array [22]
  3103 36F4			.var SAMPL_13.NAME	= adr.SAMPL_13.NAME .word
  3104 = 39D0			SAMPL_13.LEN	= DATAORIGIN+$0234
  3105 = 39D2			SAMPL_13.FINE_TUNE	= DATAORIGIN+$0236
  3106 = 39D3			SAMPL_13.VOLUME	= DATAORIGIN+$0237
  3107 = 39D4			SAMPL_13.LOOP_START	= DATAORIGIN+$0238
  3108 = 39D6			SAMPL_13.LOOP_LEN	= DATAORIGIN+$023A
  3109 = 39D8			adr.SAMPL_14	= DATAORIGIN+$023C	; [30] RECORD
  3110 36F4			.var SAMPL_14	= adr.SAMPL_14 .word
  3111 = 39D8			adr.SAMPL_14.NAME	= [DATAORIGIN+$023C] .array [22]
  3112 36F4			.var SAMPL_14.NAME	= adr.SAMPL_14.NAME .word
  3113 = 39EE			SAMPL_14.LEN	= DATAORIGIN+$0252
  3114 = 39F0			SAMPL_14.FINE_TUNE	= DATAORIGIN+$0254
  3115 = 39F1			SAMPL_14.VOLUME	= DATAORIGIN+$0255
  3116 = 39F2			SAMPL_14.LOOP_START	= DATAORIGIN+$0256
  3117 = 39F4			SAMPL_14.LOOP_LEN	= DATAORIGIN+$0258
  3118 = 39F6			adr.SAMPL_15	= DATAORIGIN+$025A	; [30] RECORD
  3119 36F4			.var SAMPL_15	= adr.SAMPL_15 .word
  3120 = 39F6			adr.SAMPL_15.NAME	= [DATAORIGIN+$025A] .array [22]
  3121 36F4			.var SAMPL_15.NAME	= adr.SAMPL_15.NAME .word
  3122 = 3A0C			SAMPL_15.LEN	= DATAORIGIN+$0270
  3123 = 3A0E			SAMPL_15.FINE_TUNE	= DATAORIGIN+$0272
  3124 = 3A0F			SAMPL_15.VOLUME	= DATAORIGIN+$0273
  3125 = 3A10			SAMPL_15.LOOP_START	= DATAORIGIN+$0274
  3126 = 3A12			SAMPL_15.LOOP_LEN	= DATAORIGIN+$0276
  3127 = 3A14			adr.SAMPL_16	= DATAORIGIN+$0278	; [30] RECORD
  3128 36F4			.var SAMPL_16	= adr.SAMPL_16 .word
  3129 = 3A14			adr.SAMPL_16.NAME	= [DATAORIGIN+$0278] .array [22]
  3130 36F4			.var SAMPL_16.NAME	= adr.SAMPL_16.NAME .word
  3131 = 3A2A			SAMPL_16.LEN	= DATAORIGIN+$028E
  3132 = 3A2C			SAMPL_16.FINE_TUNE	= DATAORIGIN+$0290
  3133 = 3A2D			SAMPL_16.VOLUME	= DATAORIGIN+$0291
  3134 = 3A2E			SAMPL_16.LOOP_START	= DATAORIGIN+$0292
  3135 = 3A30			SAMPL_16.LOOP_LEN	= DATAORIGIN+$0294
  3136 = 3A32			adr.SAMPL_17	= DATAORIGIN+$0296	; [30] RECORD
  3137 36F4			.var SAMPL_17	= adr.SAMPL_17 .word
  3138 = 3A32			adr.SAMPL_17.NAME	= [DATAORIGIN+$0296] .array [22]
  3139 36F4			.var SAMPL_17.NAME	= adr.SAMPL_17.NAME .word
  3140 = 3A48			SAMPL_17.LEN	= DATAORIGIN+$02AC
  3141 = 3A4A			SAMPL_17.FINE_TUNE	= DATAORIGIN+$02AE
  3142 = 3A4B			SAMPL_17.VOLUME	= DATAORIGIN+$02AF
  3143 = 3A4C			SAMPL_17.LOOP_START	= DATAORIGIN+$02B0
  3144 = 3A4E			SAMPL_17.LOOP_LEN	= DATAORIGIN+$02B2
  3145 = 3A50			adr.SAMPL_18	= DATAORIGIN+$02B4	; [30] RECORD
  3146 36F4			.var SAMPL_18	= adr.SAMPL_18 .word
  3147 = 3A50			adr.SAMPL_18.NAME	= [DATAORIGIN+$02B4] .array [22]
  3148 36F4			.var SAMPL_18.NAME	= adr.SAMPL_18.NAME .word
  3149 = 3A66			SAMPL_18.LEN	= DATAORIGIN+$02CA
  3150 = 3A68			SAMPL_18.FINE_TUNE	= DATAORIGIN+$02CC
  3151 = 3A69			SAMPL_18.VOLUME	= DATAORIGIN+$02CD
  3152 = 3A6A			SAMPL_18.LOOP_START	= DATAORIGIN+$02CE
  3153 = 3A6C			SAMPL_18.LOOP_LEN	= DATAORIGIN+$02D0
  3154 = 3A6E			adr.SAMPL_19	= DATAORIGIN+$02D2	; [30] RECORD
  3155 36F4			.var SAMPL_19	= adr.SAMPL_19 .word
  3156 = 3A6E			adr.SAMPL_19.NAME	= [DATAORIGIN+$02D2] .array [22]
  3157 36F4			.var SAMPL_19.NAME	= adr.SAMPL_19.NAME .word
  3158 = 3A84			SAMPL_19.LEN	= DATAORIGIN+$02E8
  3159 = 3A86			SAMPL_19.FINE_TUNE	= DATAORIGIN+$02EA
  3160 = 3A87			SAMPL_19.VOLUME	= DATAORIGIN+$02EB
  3161 = 3A88			SAMPL_19.LOOP_START	= DATAORIGIN+$02EC
  3162 = 3A8A			SAMPL_19.LOOP_LEN	= DATAORIGIN+$02EE
  3163 = 3A8C			adr.SAMPL_20	= DATAORIGIN+$02F0	; [30] RECORD
  3164 36F4			.var SAMPL_20	= adr.SAMPL_20 .word
  3165 = 3A8C			adr.SAMPL_20.NAME	= [DATAORIGIN+$02F0] .array [22]
  3166 36F4			.var SAMPL_20.NAME	= adr.SAMPL_20.NAME .word
  3167 = 3AA2			SAMPL_20.LEN	= DATAORIGIN+$0306
  3168 = 3AA4			SAMPL_20.FINE_TUNE	= DATAORIGIN+$0308
  3169 = 3AA5			SAMPL_20.VOLUME	= DATAORIGIN+$0309
  3170 = 3AA6			SAMPL_20.LOOP_START	= DATAORIGIN+$030A
  3171 = 3AA8			SAMPL_20.LOOP_LEN	= DATAORIGIN+$030C
  3172 = 3AAA			adr.SAMPL_21	= DATAORIGIN+$030E	; [30] RECORD
  3173 36F4			.var SAMPL_21	= adr.SAMPL_21 .word
  3174 = 3AAA			adr.SAMPL_21.NAME	= [DATAORIGIN+$030E] .array [22]
  3175 36F4			.var SAMPL_21.NAME	= adr.SAMPL_21.NAME .word
  3176 = 3AC0			SAMPL_21.LEN	= DATAORIGIN+$0324
  3177 = 3AC2			SAMPL_21.FINE_TUNE	= DATAORIGIN+$0326
  3178 = 3AC3			SAMPL_21.VOLUME	= DATAORIGIN+$0327
  3179 = 3AC4			SAMPL_21.LOOP_START	= DATAORIGIN+$0328
  3180 = 3AC6			SAMPL_21.LOOP_LEN	= DATAORIGIN+$032A
  3181 = 3AC8			adr.SAMPL_22	= DATAORIGIN+$032C	; [30] RECORD
  3182 36F4			.var SAMPL_22	= adr.SAMPL_22 .word
  3183 = 3AC8			adr.SAMPL_22.NAME	= [DATAORIGIN+$032C] .array [22]
  3184 36F4			.var SAMPL_22.NAME	= adr.SAMPL_22.NAME .word
  3185 = 3ADE			SAMPL_22.LEN	= DATAORIGIN+$0342
  3186 = 3AE0			SAMPL_22.FINE_TUNE	= DATAORIGIN+$0344
  3187 = 3AE1			SAMPL_22.VOLUME	= DATAORIGIN+$0345
  3188 = 3AE2			SAMPL_22.LOOP_START	= DATAORIGIN+$0346
  3189 = 3AE4			SAMPL_22.LOOP_LEN	= DATAORIGIN+$0348
  3190 = 3AE6			adr.SAMPL_23	= DATAORIGIN+$034A	; [30] RECORD
  3191 36F4			.var SAMPL_23	= adr.SAMPL_23 .word
  3192 = 3AE6			adr.SAMPL_23.NAME	= [DATAORIGIN+$034A] .array [22]
  3193 36F4			.var SAMPL_23.NAME	= adr.SAMPL_23.NAME .word
  3194 = 3AFC			SAMPL_23.LEN	= DATAORIGIN+$0360
  3195 = 3AFE			SAMPL_23.FINE_TUNE	= DATAORIGIN+$0362
  3196 = 3AFF			SAMPL_23.VOLUME	= DATAORIGIN+$0363
  3197 = 3B00			SAMPL_23.LOOP_START	= DATAORIGIN+$0364
  3198 = 3B02			SAMPL_23.LOOP_LEN	= DATAORIGIN+$0366
  3199 = 3B04			adr.SAMPL_24	= DATAORIGIN+$0368	; [30] RECORD
  3200 36F4			.var SAMPL_24	= adr.SAMPL_24 .word
  3201 = 3B04			adr.SAMPL_24.NAME	= [DATAORIGIN+$0368] .array [22]
  3202 36F4			.var SAMPL_24.NAME	= adr.SAMPL_24.NAME .word
  3203 = 3B1A			SAMPL_24.LEN	= DATAORIGIN+$037E
  3204 = 3B1C			SAMPL_24.FINE_TUNE	= DATAORIGIN+$0380
  3205 = 3B1D			SAMPL_24.VOLUME	= DATAORIGIN+$0381
  3206 = 3B1E			SAMPL_24.LOOP_START	= DATAORIGIN+$0382
  3207 = 3B20			SAMPL_24.LOOP_LEN	= DATAORIGIN+$0384
  3208 = 3B22			adr.SAMPL_25	= DATAORIGIN+$0386	; [30] RECORD
  3209 36F4			.var SAMPL_25	= adr.SAMPL_25 .word
  3210 = 3B22			adr.SAMPL_25.NAME	= [DATAORIGIN+$0386] .array [22]
  3211 36F4			.var SAMPL_25.NAME	= adr.SAMPL_25.NAME .word
  3212 = 3B38			SAMPL_25.LEN	= DATAORIGIN+$039C
  3213 = 3B3A			SAMPL_25.FINE_TUNE	= DATAORIGIN+$039E
  3214 = 3B3B			SAMPL_25.VOLUME	= DATAORIGIN+$039F
  3215 = 3B3C			SAMPL_25.LOOP_START	= DATAORIGIN+$03A0
  3216 = 3B3E			SAMPL_25.LOOP_LEN	= DATAORIGIN+$03A2
  3217 = 3B40			adr.SAMPL_26	= DATAORIGIN+$03A4	; [30] RECORD
  3218 36F4			.var SAMPL_26	= adr.SAMPL_26 .word
  3219 = 3B40			adr.SAMPL_26.NAME	= [DATAORIGIN+$03A4] .array [22]
  3220 36F4			.var SAMPL_26.NAME	= adr.SAMPL_26.NAME .word
  3221 = 3B56			SAMPL_26.LEN	= DATAORIGIN+$03BA
  3222 = 3B58			SAMPL_26.FINE_TUNE	= DATAORIGIN+$03BC
  3223 = 3B59			SAMPL_26.VOLUME	= DATAORIGIN+$03BD
  3224 = 3B5A			SAMPL_26.LOOP_START	= DATAORIGIN+$03BE
  3225 = 3B5C			SAMPL_26.LOOP_LEN	= DATAORIGIN+$03C0
  3226 = 3B5E			adr.SAMPL_27	= DATAORIGIN+$03C2	; [30] RECORD
  3227 36F4			.var SAMPL_27	= adr.SAMPL_27 .word
  3228 = 3B5E			adr.SAMPL_27.NAME	= [DATAORIGIN+$03C2] .array [22]
  3229 36F4			.var SAMPL_27.NAME	= adr.SAMPL_27.NAME .word
  3230 = 3B74			SAMPL_27.LEN	= DATAORIGIN+$03D8
  3231 = 3B76			SAMPL_27.FINE_TUNE	= DATAORIGIN+$03DA
  3232 = 3B77			SAMPL_27.VOLUME	= DATAORIGIN+$03DB
  3233 = 3B78			SAMPL_27.LOOP_START	= DATAORIGIN+$03DC
  3234 = 3B7A			SAMPL_27.LOOP_LEN	= DATAORIGIN+$03DE
  3235 = 3B7C			adr.SAMPL_28	= DATAORIGIN+$03E0	; [30] RECORD
  3236 36F4			.var SAMPL_28	= adr.SAMPL_28 .word
  3237 = 3B7C			adr.SAMPL_28.NAME	= [DATAORIGIN+$03E0] .array [22]
  3238 36F4			.var SAMPL_28.NAME	= adr.SAMPL_28.NAME .word
  3239 = 3B92			SAMPL_28.LEN	= DATAORIGIN+$03F6
  3240 = 3B94			SAMPL_28.FINE_TUNE	= DATAORIGIN+$03F8
  3241 = 3B95			SAMPL_28.VOLUME	= DATAORIGIN+$03F9
  3242 = 3B96			SAMPL_28.LOOP_START	= DATAORIGIN+$03FA
  3243 = 3B98			SAMPL_28.LOOP_LEN	= DATAORIGIN+$03FC
  3244 = 3B9A			adr.SAMPL_29	= DATAORIGIN+$03FE	; [30] RECORD
  3245 36F4			.var SAMPL_29	= adr.SAMPL_29 .word
  3246 = 3B9A			adr.SAMPL_29.NAME	= [DATAORIGIN+$03FE] .array [22]
  3247 36F4			.var SAMPL_29.NAME	= adr.SAMPL_29.NAME .word
  3248 = 3BB0			SAMPL_29.LEN	= DATAORIGIN+$0414
  3249 = 3BB2			SAMPL_29.FINE_TUNE	= DATAORIGIN+$0416
  3250 = 3BB3			SAMPL_29.VOLUME	= DATAORIGIN+$0417
  3251 = 3BB4			SAMPL_29.LOOP_START	= DATAORIGIN+$0418
  3252 = 3BB6			SAMPL_29.LOOP_LEN	= DATAORIGIN+$041A
  3253 = 3BB8			adr.SAMPL_30	= DATAORIGIN+$041C	; [30] RECORD
  3254 36F4			.var SAMPL_30	= adr.SAMPL_30 .word
  3255 = 3BB8			adr.SAMPL_30.NAME	= [DATAORIGIN+$041C] .array [22]
  3256 36F4			.var SAMPL_30.NAME	= adr.SAMPL_30.NAME .word
  3257 = 3BCE			SAMPL_30.LEN	= DATAORIGIN+$0432
  3258 = 3BD0			SAMPL_30.FINE_TUNE	= DATAORIGIN+$0434
  3259 = 3BD1			SAMPL_30.VOLUME	= DATAORIGIN+$0435
  3260 = 3BD2			SAMPL_30.LOOP_START	= DATAORIGIN+$0436
  3261 = 3BD4			SAMPL_30.LOOP_LEN	= DATAORIGIN+$0438
  3262 = 3BD6			adr.SAMPLE	= [DATAORIGIN+$043A] .array [31] .word
  3263 36F4			.var SAMPLE	= adr.SAMPLE .word
  3264 = 3C14			GCHAR	= DATAORIGIN+$0478
  3265 = 3C15			SONG_LENGTH	= DATAORIGIN+$0479
  3266 = 3C16			SONG_RESTART	= DATAORIGIN+$047A
  3267 = 3C17			NUMBER_OF_PATTERNS	= DATAORIGIN+$047B
  3268 = 3C18			NUMBER_OF_BANKS	= DATAORIGIN+$047C
  3269 = 3C19			NUMBER_OF_SAMPLES	= DATAORIGIN+$047D
  3270 36F4			@exit
  3271
  3272 36F4 A2 00		@halt	ldx #$00
  3273 36F6 9A				txs
  3274 					.ifdef MAIN.@DEFINES.ROMOFF
  3275 					inc portb
  3276 					.fi
  3277
  3278 36F7 A0 01			ldy #$01
  3279
  3280 36F9 60				rts
  3281
  3282 				; ------------------------------------------------------------
  3283
  3284 36FA 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  3285
  3286 				; ------------------------------------------------------------
  3287
  3288 370A			.local	@DEFINES
  3289 370A			ATARI
  3290 				.endl
  3291
  3292 370A			.local	@RESOURCE
  3293 				.endl
  3294
  3295 = 370A BE 20		KOD
  3295 = 370C 00 05		BUF
  3295 = 370E 50 01		TIVOL
  3295 = 3710 00 06		ORDER
  3295 = 3712 80 06		TSTRL
  3295 = 3714 A0 06		TSTRH
  3295 = 3716 C0 06		TREPL
  3295 = 3718 E0 06		TREPH
  3295 = 371A 1F 38		MODNAME
  3295 = 371C 34 38		SAMPL_0
  3295 = 371E 34 38		SAMPL_0.NAME
  3295 = 3720 52 38		SAMPL_1
  3295 = 3722 52 38		SAMPL_1.NAME
  3295 = 3724 70 38		SAMPL_2
  3295 = 3726 70 38		SAMPL_2.NAME
  3295 = 3728 8E 38		SAMPL_3
  3295 = 372A 8E 38		SAMPL_3.NAME
  3295 = 372C AC 38		SAMPL_4
  3295 = 372E AC 38		SAMPL_4.NAME
  3295 = 3730 CA 38		SAMPL_5
  3295 = 3732 CA 38		SAMPL_5.NAME
  3295 = 3734 E8 38		SAMPL_6
  3295 = 3736 E8 38		SAMPL_6.NAME
  3295 = 3738 06 39		SAMPL_7
  3295 = 373A 06 39		SAMPL_7.NAME
  3295 = 373C 24 39		SAMPL_8
  3295 = 373E 24 39		SAMPL_8.NAME
  3295 = 3740 42 39		SAMPL_9
  3295 = 3742 42 39		SAMPL_9.NAME
  3295 = 3744 60 39		SAMPL_10
  3295 = 3746 60 39		SAMPL_10.NAME
  3295 = 3748 7E 39		SAMPL_11
  3295 = 374A 7E 39		SAMPL_11.NAME
  3295 = 374C 9C 39		SAMPL_12
  3295 = 374E 9C 39		SAMPL_12.NAME
  3295 = 3750 BA 39		SAMPL_13
  3295 = 3752 BA 39		SAMPL_13.NAME
  3295 = 3754 D8 39		SAMPL_14
  3295 = 3756 D8 39		SAMPL_14.NAME
  3295 = 3758 F6 39		SAMPL_15
  3295 = 375A F6 39		SAMPL_15.NAME
  3295 = 375C 14 3A		SAMPL_16
  3295 = 375E 14 3A		SAMPL_16.NAME
  3295 = 3760 32 3A		SAMPL_17
  3295 = 3762 32 3A		SAMPL_17.NAME
  3295 = 3764 50 3A		SAMPL_18
  3295 = 3766 50 3A		SAMPL_18.NAME
  3295 = 3768 6E 3A		SAMPL_19
  3295 = 376A 6E 3A		SAMPL_19.NAME
  3295 = 376C 8C 3A		SAMPL_20
  3295 = 376E 8C 3A		SAMPL_20.NAME
  3295 = 3770 AA 3A		SAMPL_21
  3295 = 3772 AA 3A		SAMPL_21.NAME
  3295 = 3774 C8 3A		SAMPL_22
  3295 = 3776 C8 3A		SAMPL_22.NAME
  3295 = 3778 E6 3A		SAMPL_23
  3295 = 377A E6 3A		SAMPL_23.NAME
  3295 = 377C 04 3B		SAMPL_24
  3295 = 377E 04 3B		SAMPL_24.NAME
  3295 = 3780 22 3B		SAMPL_25
  3295 = 3782 22 3B		SAMPL_25.NAME
  3295 = 3784 40 3B		SAMPL_26
  3295 = 3786 40 3B		SAMPL_26.NAME
  3295 = 3788 5E 3B		SAMPL_27
  3295 = 378A 5E 3B		SAMPL_27.NAME
  3295 = 378C 7C 3B		SAMPL_28
  3295 = 378E 7C 3B		SAMPL_28.NAME
  3295 = 3790 9A 3B		SAMPL_29
  3295 = 3792 9A 3B		SAMPL_29.NAME
  3295 = 3794 B8 3B		SAMPL_30
  3295 = 3796 B8 3B		SAMPL_30.NAME
  3295 = 3798 D6 3B		SAMPLE
  3295 				.endl							; MAIN
  3296
  3297 				; ------------------------------------------------------------
  3298 				; ------------------------------------------------------------
  3299
  3300 				.macro	UNITINITIALIZATION
  3301 				
  3302 					.ifdef MAIN.SYSTEM.@UnitInit
  3303 					jsr MAIN.SYSTEM.@UnitInit
  3304 					.fi
  3305 				
  3306 					.ifdef MAIN.ATARI.@UnitInit
  3307 					jsr MAIN.ATARI.@UnitInit
  3308 					.fi
  3309 				
  3310 					.ifdef MAIN.CRT.@UnitInit
  3311 					jsr MAIN.CRT.@UnitInit
  3312 					.fi
  3313 				
  3314 					.ifdef MAIN.MISC.@UnitInit
  3315 					jsr MAIN.MISC.@UnitInit
  3316 					.fi
  3317 				
  3318 					.ifdef MAIN.OBJECTS.@UnitInit
  3319 					jsr MAIN.OBJECTS.@UnitInit
  3320 					.fi
  3321 				.endm
  3322
  3323 				; ------------------------------------------------------------
  3324
  3325 					ift .SIZEOF(MAIN.SYSTEM) > 0
  3326 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  3326 				SYSTEM: $279B..$27DC
  3327 					eif
  3328
  3329 					ift .SIZEOF(MAIN.ATARI) > 0
  3330 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  3331 					eif
  3332
  3333 					ift .SIZEOF(MAIN.CRT) > 0
  3334 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  3334 				CRT: $27DD..$280A
  3335 					eif
  3336
  3337 					ift .SIZEOF(MAIN.MISC) > 0
  3338 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  3338 				MISC: $280B..$28B0
  3339 					eif
  3340
  3341 					ift .SIZEOF(MAIN.OBJECTS) > 0
  3342 					.print 'OBJECTS: ',MAIN.OBJECTS,'..',MAIN.OBJECTS+.SIZEOF(MAIN.OBJECTS)-1
  3342 				OBJECTS: $28B1..$2941
  3343 					eif
  3344
  3345 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  3345 				CODE: $2000..$3709
  3346
  3347 				; ------------------------------------------------------------
  3348
  3349 379A				.align $0004
  3350
  3351 379C			DATAORIGIN
  3352 379C-3C13> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3353 37B4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3354 37CC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3355 37E4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3356 37FC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3357 3814 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3358 382C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3359 3844 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3360 385C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3361 3874 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3362 388C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3363 38A4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3364 38BC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3365 38D4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3366 38EC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3367 3904 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3368 391C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3369 3934 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3370 394C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3371 3964 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3372 397C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3373 3994 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3374 39AC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3375 39C4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3376 39DC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3377 39F4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3378 3A0C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3379 3A24 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3380 3A3C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3381 3A54 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3382 3A6C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3383 3A84 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3384 3A9C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3385 3AB4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3386 3ACC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3387 3AE4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3388 3AFC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3389 3B14 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3390 3B2C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3391 3B44 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3392 3B5C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3393 3B74 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3394 3B8C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3395 3BA4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3396 3BBC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3397 3BD4 00 00 34 38 52 38 + .by  $00 $00 <[DATAORIGIN+$0098] >[DATAORIGIN+$0098] <[DATAORIGIN+$00B6] >[DATAORIGIN+$00B6] <[DATAORIGIN+$00D4] >[DATAORIGIN+$00D4]  <[DATAORIGIN+$00F2] >[DATAORIGIN+$00F2] <[DATAORIGIN+$0110] >[DATAORIGIN+$0110] <[DATAORIGIN+$012E] >[DATAORIGIN+$012E] <[DATAORIGIN+$014C] >[DATAORIGIN+$014C]  <[DATAORIGIN+$016A] >[DATAORIGIN+$016A] <[DATAORIGIN+$0188] >[DATAORIGIN+$0188] <[DATAORIGIN+$01A6] >[DATAORIGIN+$01A6] <[DATAORIGIN+$01C4] >[DATAORIGIN+$01C4]
  3398 3BEC 7E 39 9C 39 BA 39 + .by  <[DATAORIGIN+$01E2] >[DATAORIGIN+$01E2] <[DATAORIGIN+$0200] >[DATAORIGIN+$0200] <[DATAORIGIN+$021E] >[DATAORIGIN+$021E] <[DATAORIGIN+$023C] >[DATAORIGIN+$023C]  <[DATAORIGIN+$025A] >[DATAORIGIN+$025A] <[DATAORIGIN+$0278] >[DATAORIGIN+$0278] <[DATAORIGIN+$0296] >[DATAORIGIN+$0296] <[DATAORIGIN+$02B4] >[DATAORIGIN+$02B4]  <[DATAORIGIN+$02D2] >[DATAORIGIN+$02D2] <[DATAORIGIN+$02F0] >[DATAORIGIN+$02F0] <[DATAORIGIN+$030E] >[DATAORIGIN+$030E] <[DATAORIGIN+$032C] >[DATAORIGIN+$032C]
  3399 3C04 E6 3A 04 3B 22 3B + .by  <[DATAORIGIN+$034A] >[DATAORIGIN+$034A] <[DATAORIGIN+$0368] >[DATAORIGIN+$0368] <[DATAORIGIN+$0386] >[DATAORIGIN+$0386] <[DATAORIGIN+$03A4] >[DATAORIGIN+$03A4]  <[DATAORIGIN+$03C2] >[DATAORIGIN+$03C2] <[DATAORIGIN+$03E0] >[DATAORIGIN+$03E0] <[DATAORIGIN+$03FE] >[DATAORIGIN+$03FE] <[DATAORIGIN+$041C] >[DATAORIGIN+$041C]
  3400
  3401 = 0478			VARINITSIZE	= *-DATAORIGIN
  3402 = 04F8			VARDATASIZE	= 1272
  3403
  3404 = 3C94			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  3405
  3406 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  3406 				DATA: $379C..$3C94
  3407
  3408 02E0-02E1> 6A 27			run START
  3409
  3410 				; ------------------------------------------------------------
  3411
  3412 				.macro	STATICDATA
  3413 				.by  $02 $44 $3A $00 $05 $4F $6E $6C  $79 $20 $00 $14 $20 $62 $79 $74  $65 $73 $20 $6C $65 $6E $67 $74
  3414 				.by  $68 $20 $73 $61 $6D $70 $6C $65  $00 $04 $4D $2E $4B $2E $00 $13  $55 $6E $73 $75 $70 $6F $72 $74
  3415 				.by  $65 $64 $20 $4D $4F $44 $20 $66  $69 $6C $65 $00 $06 $4E $61 $6D  $65 $3A $20 $00 $09 $53 $61 $6D
  3416 				.by  $70 $6C $65 $73 $3A $20 $00 $10  $20 $73 $61 $6D $70 $6C $65 $73  $20 $61 $6C $6C $6F $77 $65 $64
  3417 				.by  $00 $0D $4E $65 $65 $64 $20 $6D  $69 $6E $69 $6D $75 $6D $20 $00  $16 $20 $62 $61 $6E $6B $73 $20
  3418 				.by  $65 $78 $70 $61 $6E $64 $65 $64  $20 $6D $65 $6D $6F $72 $79 $00  $0E $4C $6F $61 $64 $20 $50 $61
  3419 				.by  $74 $74 $65 $72 $6E $3A $20 $00  $0D $4C $6F $61 $64 $20 $53 $61  $6D $70 $6C $65 $3A $20 $00 $15
  3420 				.by  $4D $4F $44 $20 $50 $6C $61 $79  $65 $72 $20 $32 $2E $33 $20 $28  $36 $35 $30 $32 $29 $00 $B0 $06
  3421 				.by  $50 $06 $F4 $05 $A0 $05 $4C $05  $00 $05 $B8 $04 $74 $04 $34 $04  $F8 $03 $C0 $03 $80 $03 $58 $03
  3422 				.by  $28 $03 $FA $02 $D0 $02 $A6 $02  $80 $02 $5C $02 $3A $02 $1A $02  $FC $01 $E0 $01 $C5 $01 $AC $01
  3423 				.by  $94 $01 $7D $01 $68 $01 $53 $01  $40 $01 $2E $01 $1D $01 $0D $01  $FE $00 $F0 $00 $E2 $00 $D6 $00
  3424 				.by  $CA $00 $BE $00 $B4 $00 $AA $00  $A0 $00 $97 $00 $8F $00 $87 $00  $7F $00 $78 $00 $71 $00
  3425 				.endm
  3426
  3427 					end
