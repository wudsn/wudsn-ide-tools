mads 2.1.6
Source: modplay5.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/08/20] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1148 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 2075				RCASM 'arrays5.asm' EFFECT 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 0160			len = .sizeof(_EFFECT)
     6 				mcpy	ift main.EFFECT+len >= $bc20
     7 2075 A9 00 8D 2F 02		mva #0 sdmctl
     8 207A 8D 00 D4			sta dmactl
    11 207D 20 41 20			jsr sys.off
    13 2080 A9 9E 85 88 A9 20 +  MWA #DATA EDX
    13 2088 A9 00 85 8C A9 DC +  MWA #MAIN.EFFECT ECX
    13 2090 A9 60 85 84 A9 01 +  MWA #LEN EAX
    13 2098 20 00 20		 JSR RESOURCE.MEMCPY
    15 209B 4C 65 20			jmp sys.on
    16 209E			data
Source: arrays5.asm
     1 DC00			effect
     3 DC00 00 00 00 00 00 00 + 	:256 dta [#&$e0]	;>>2
    56 DD00 09 0A 0A 0B 0B 0C + TIDL	DTA L(56/6,60/6,63/6,67/6,71/6,75/6,80/6,85/6,90/6,95/6,101/6,107/6,113/6,120/6,127/6,135/6,143/6,151/6,160/6,170/6,180/6,190/6,202/6,214/6,226/6,240/6,254/6,269/6,285/6,302/6,320/6,339/6,360/6,381/6,404/6,428/6,453/6,480/6,508/6,538/6,570/6,604/6,640/6,678/6,720/6,762/6,808/6,856/6)
    58 				tidh	dta h(\
    59 				56/6,\
    60 				60/6,\
    61 				63/6,\
    62 				67/6,\
    63 				71/6,\
    64 				75/6,\
    65 				80/6,\
    66 				85/6,\
    67 				90/6,\
    68 				95/6,\
    69 				101/6,\
    70 				107/6,\
    71 				113/6,\
    72 				120/6,\
    73 				127/6,\
    74 				135/6,\
    75 				143/6,\
    76 				151/6,\
    77 				160/6,\
    78 				170/6,\
    79 				180/6,\
    80 				190/6,\
    81 				202/6,\
    82 				214/6,\
    83 				226/6,\
    84 				240/6,\
    85 				254/6,\
    86 				269/6,\
    87 				285/6,\
    88 				302/6,\
    89 				320/6,\
    90 				339/6,\
    91 				360/6,\
    92 				381/6,\
    93 				404/6,\
    94 				428/6,\
    95 				453/6,\
    96 				480/6,\
    97 				508/6,\
    98 				538/6,\
    99 				570/6,\
   100 				604/6,\
   101 				640/6,\
   102 				678/6,\
   103 				720/6,\
   104 				762/6,\
   105 				808/6,\
   106 				856/6)
   106 DD30 00 00 00 00 00 00 + TIDH	DTA H(56/6,60/6,63/6,67/6,71/6,75/6,80/6,85/6,90/6,95/6,101/6,107/6,113/6,120/6,127/6,135/6,143/6,151/6,160/6,170/6,180/6,190/6,202/6,214/6,226/6,240/6,254/6,269/6,285/6,302/6,320/6,339/6,360/6,381/6,404/6,428/6,453/6,480/6,508/6,538/6,570/6,604/6,640/6,678/6,720/6,762/6,808/6,856/6)
    23 					.print '$R RCASM   ',main.EFFECT,'..',main.EFFECT+len-1," 'arrays5.asm'"
    23 				$R RCASM   $DC00..$DD5F 'arrays5.asm'
    25 02E2-02E3> 75 20			ini mcpy
   110 21FE				RCDATA 'volume.tab' VOLUME 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 2100			len = .filesize('volume.tab')-0
    10 21FE				org RESORIGIN
    12 2075-4195> 20 41 20	mcpy	jsr sys.off
    14 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    14 2080 A9 00 85 8C A9 DE +  MWA #MAIN.VOLUME ECX
    14 2088 A9 00 85 84 A9 21 +  MWA #LEN EAX
    14 2090 20 00 20		 JSR RESOURCE.MEMCPY
    16 2093 4C 65 20			jmp sys.on
    18 2096 00 00 00 00 00 00 + data	ins 'volume.tab',0
    20 					.print '$R RCDATA  ',main.VOLUME,'..',main.VOLUME+len-1," 'volume.tab'"
    20 				$R RCDATA  $DE00..$FEFF 'volume.tab'
    22 02E2-02E3> 75 20			ini mcpy
Source: modplay5.a65
   111 4196				RCDATA 'draco_6bit.dat' VOL6BIT 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0300			len = .filesize('draco_6bit.dat')-0
    10 4196				org RESORIGIN
    12 2075-2395> 20 41 20	mcpy	jsr sys.off
    14 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    14 2080 A9 00 85 8C A9 C0 +  MWA #MAIN.VOL6BIT ECX
    14 2088 A9 00 85 84 A9 03 +  MWA #LEN EAX
    14 2090 20 00 20		 JSR RESOURCE.MEMCPY
    16 2093 4C 65 20			jmp sys.on
    18 2096 10 10 10 10 10 10 + data	ins 'draco_6bit.dat',0
    20 					.print '$R RCDATA  ',main.VOL6BIT,'..',main.VOL6BIT+len-1," 'draco_6bit.dat'"
    20 				$R RCDATA  $C000..$C2FF 'draco_6bit.dat'
    22 02E2-02E3> 75 20			ini mcpy
Source: modplay5.a65
   112 				.endl
   113
   114 				; ------------------------------------------------------------
   115
   116 2396				org CODEORIGIN
   117
   118 2000				STATICDATA
Macro: STATICDATA [Source: modplay5.a65]
     1 2000-3852> 02 44 3A 00 + .by  $02 $44 $3A $00 $05 $4F $6E $6C  $79 $20 $00 $14 $20 $62 $79 $74  $65 $73 $20 $6C $65 $6E $67 $74
     2 2018 68 20 73 61 6D 70 + .by  $68 $20 $73 $61 $6D $70 $6C $65  $00 $04 $4D $2E $4B $2E $00 $13  $55 $6E $73 $75 $70 $6F $72 $74
     3 2030 65 64 20 4D 4F 44 + .by  $65 $64 $20 $4D $4F $44 $20 $66  $69 $6C $65 $00 $06 $4E $61 $6D  $65 $3A $20 $00 $09 $53 $61 $6D
     4 2048 70 6C 65 73 3A 20 + .by  $70 $6C $65 $73 $3A $20 $00 $10  $20 $73 $61 $6D $70 $6C $65 $73  $20 $61 $6C $6C $6F $77 $65 $64
     5 2060 00 0D 4E 65 65 64 + .by  $00 $0D $4E $65 $65 $64 $20 $6D  $69 $6E $69 $6D $75 $6D $20 $00  $16 $20 $62 $61 $6E $6B $73 $20
     6 2078 65 78 70 61 6E 64 + .by  $65 $78 $70 $61 $6E $64 $65 $64  $20 $6D $65 $6D $6F $72 $79 $00  $0E $4C $6F $61 $64 $20 $50 $61
     7 2090 74 74 65 72 6E 3A + .by  $74 $74 $65 $72 $6E $3A $20 $00  $0D $4C $6F $61 $64 $20 $53 $61  $6D $70 $6C $65 $3A $20 $00 $1E
     8 20A8 4D 4F 44 20 50 6C + .by  $4D $4F $44 $20 $50 $6C $61 $79  $65 $72 $20 $52 $61 $70 $69 $64  $75 $73 $20 $31 $2E $36 $20 $28
     9 20C0 36 35 38 31 36 29 + .by  $36 $35 $38 $31 $36 $29 $00 $B0  $06 $50 $06 $F4 $05 $A0 $05 $4C  $05 $00 $05 $B8 $04 $74 $04 $34
    10 20D8 04 F8 03 C0 03 80 + .by  $04 $F8 $03 $C0 $03 $80 $03 $58  $03 $28 $03 $FA $02 $D0 $02 $A6  $02 $80 $02 $5C $02 $3A $02 $1A
    11 20F0 02 FC 01 E0 01 C5 + .by  $02 $FC $01 $E0 $01 $C5 $01 $AC  $01 $94 $01 $7D $01 $68 $01 $53  $01 $40 $01 $2E $01 $1D $01 $0D
    12 2108 01 FE 00 F0 00 E2 + .by  $01 $FE $00 $F0 $00 $E2 $00 $D6  $00 $CA $00 $BE $00 $B4 $00 $AA  $00 $A0 $00 $97 $00 $8F $00 $87
    13 2120 00 7F 00 78 00 71 + .by  $00 $7F $00 $78 $00 $71 $00
Source: modplay5.a65
   119
   120 				; ------------------------------------------------------------
   121
   122 2127			RTLIB
   123 2127				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   124
   125 				.print 'ZPAGE: ',zpage,'..',zpend-1
   125 				ZPAGE: $0080..$00D3
   126
   127 				.print 'RTLIB: ',RTLIB,'..',*-1
   127 				RTLIB: $2127..$2675
   128
   129 				; ------------------------------------------------------------
   130
   131 2676			START
   132 2676 BA				tsx
   133 2677 8E AC 37			stx MAIN.@halt+1
   134
   135 = 0083			VLEN	= VARDATASIZE-VARINITSIZE
   136 = 3CD2			VADR	= DATAORIGIN+VARINITSIZE
   137
   138 					ift VADR > $BFFF
   139 					ert 'Invalid memory address range ',VADR
   140 					eli (VLEN>0) && (VLEN<=256)
   141 267A A2 7D			ldx #256-VLEN
   142 267C A9 00			lda #$00
   143 267E 9D 55 3C E8 D0 FA		sta:rne VADR+VLEN-256,x+
   144 					eli VLEN>256
   145 					@fill #VADR #VLEN #$00
   146 					eif
   147
   148 				.ifdef :psptr
   149 					mwa #PROGRAMSTACK :psptr
   150 				.fi
   151
   152 					.ifdef MAIN.@DEFINES.ROMOFF
   153 					icl 'atari\romoff.asm'
   154 					.fi
   155
   156 2684 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   157 2686 BD 40 03 9D B1 37 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   158
   159 268F E8				inx						; X = 0
   160 2690 86 80			stx bp						; BP = 0
   161
   162 2692 8E 08 D2			stx audctl					; reset POKEY
   163 2695 8E 18 D2			stx audctl+$10
   164 2698 A9 03			lda #3
   165 269A 8D 0F D2			sta skctl
   166 269D 8D 1F D2			sta skctl+$10
   167
   168 26A0 CA				dex						; X = 255
   169
   170 26A1				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: modplay5.a65]
    19 26A1 20 A6 28			jsr MAIN.HIGHMEM.@UnitInit
   171
   172 26A4			.local	MAIN						; PROCEDURE
   173
   174 26A4 4C 74 37			jmp l_00CE
   175
   176 				; ------------------------------------------------------------
   177
   178 26A7			.local	SYSTEM						; UNIT
   179
   180 26A7			.local	HEXSTR						; FUNCTION | ASSEMBLER | REGISTER
   181
   182 				; -------------------  ASM Block 00000001  -------------------
   183
   184 26A7 20 1E 25			jsr @hexStr
   185
   186 				;	@move #@buf Result #33
   187 26AA A0 DF			ldy #256-33
   188 26AC B9 21 03 99 80 37 + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   189
   190 26B5			@exit
   191
   192 				; ------------------------------------------------------------
   193
   194 = 0088			VALUE	= :EDX
   195 = 008C			DIGITS	= :ECX
   196 = 385F			adr.RESULT	= [DATAORIGIN+$000B] .array [33]
   197 26B5			.var RESULT	= adr.RESULT .word
   198
   199 = 26B6			@VarData	= RESULT
   200 = 0021			@VarDataSize	= 33
   201
   202 26B5 60				rts						; ret
   203 = 26B6 5F 38		RESULT
   203 				.endl
   204
   205 26B8			.local	PARAMCOUNT					; FUNCTION | ASSEMBLER
   206
   207 				; -------------------  ASM Block 00000043  -------------------
   208
   209 					@cmdline #255
   209 				 LDA# 255\ JSR @CMDLINE
   209 26B8 A9 FF		 LDA# 255
   209 26BA 20 AC 22		 JSR @CMDLINE
   210 26BD 8D 80 38			sta Result
   211
   212 26C0			@exit
   213
   214 				; ------------------------------------------------------------
   215
   216 = 3880			RESULT	= DATAORIGIN+$002C
   217 26C0 60				rts						; ret
   218 				.endl
   219
   220 26C1			.local	PARAMSTR					; FUNCTION | ASSEMBLER
   221 26C1 8D 81 38			sta I
   222
   223 				; -------------------  ASM Block 00000044  -------------------
   224
   225 					@cmdline i
   225 				 LDA I\ JSR @CMDLINE
   225 26C4 AD 81 38		 LDA I
   225 26C7 20 AC 22		 JSR @CMDLINE
   226
   227 				;	@move #@buf Result #33
   228 26CA A0 DF			ldy #256-33
   229 26CC B9 21 03 99 A3 37 + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   230
   231 26D5			@exit
   232
   233 				; ------------------------------------------------------------
   234
   235 = 3881			I	= DATAORIGIN+$002D
   236 = 3882			adr.RESULT	= [DATAORIGIN+$002E] .array [33]
   237 26D5			.var RESULT	= adr.RESULT .word
   238
   239 = 3881			@VarData	= I
   240 = 0022			@VarDataSize	= 34
   241
   242 26D5 60				rts						; ret
   243 = 26D6 82 38		RESULT
   243 				.endl
   244
   245 26D8			.local	SWAP_0138					; FUNCTION | OVERLOAD
   246
   247 				; optimize OK (SYSTEM), line = 2229
   248
   249 26D8 AD A4 38			lda A+1
   250 26DB 8D A5 38			sta RESULT
   251 26DE AD A3 38			lda A
   252 26E1 8D A6 38			sta RESULT+1
   253 26E4			@exit
   254
   255 				; ------------------------------------------------------------
   256
   257 = 38A3			A	= DATAORIGIN+$004F
   258 = 38A5			RESULT	= DATAORIGIN+$0051
   259
   260 = 38A3			@VarData	= A
   261 = 0002			@VarDataSize	= 2
   262
   263 26E4 60				rts						; ret
   264 				.endl
   265
   266 				; ------------------------------------------------------------
   267
   268 = 0101			__PORTB_BANKS	= $0101
   269 = 0648			M_PI_2	= $0648
   270 = 0192			D_PI_2	= $0192
   271 = 0004			D_PI_180	= $04
   272 = 0000			MGTIA	= $00
   273 = 0080			MVBXE	= $80
   274 = 0000			VBXE_XDLADR	= $00
   275 = 00E0			VBXE_BCBTMP	= $E0
   276 = 0100			VBXE_BCBADR	= $0100
   277 = 1000			VBXE_MAPADR	= $1000
   278 = 1000			VBXE_CHBASE	= $1000
   279 = 5000			VBXE_OVRADR	= $5000
   280 = B000			VBXE_WINDOW	= $B000
   281 = 0000			IDLI	= $00
   282 = 0001			IVBL	= $01
   283 = 0002			ITIM1	= $02
   284 = 0003			ITIM2	= $03
   285 = 0004			ITIM4	= $04
   286 = 00FE			CH_DELCHR	= $FE
   287 = 009B			CH_ENTER	= $9B
   288 = 001B			CH_ESC	= $1B
   289 = 001C			CH_CURS_UP	= $1C
   290 = 001D			CH_CURS_DOWN	= $1D
   291 = 001E			CH_CURS_LEFT	= $1E
   292 = 001F			CH_CURS_RIGHT	= $1F
   293 = 007F			CH_TAB	= $7F
   294 = 009B			CH_EOL	= $9B
   295 = 007D			CH_CLR	= $7D
   296 = 00FD			CH_BELL	= $FD
   297 = 007E			CH_DEL	= $7E
   298 = 009C			CH_DELLINE	= $9C
   299 = 009D			CH_INSLINE	= $9D
   300 = 0000			PAL_PMCOLOR0	= $00
   301 = 0001			PAL_PMCOLOR1	= $01
   302 = 0002			PAL_PMCOLOR2	= $02
   303 = 0003			PAL_PMCOLOR3	= $03
   304 = 0004			PAL_COLOR0	= $04
   305 = 0005			PAL_COLOR1	= $05
   306 = 0006			PAL_COLOR2	= $06
   307 = 0007			PAL_COLOR3	= $07
   308 = 0008			PAL_COLBAK	= $08
   309 = 0000			COLOR_BLACK	= $00
   310 = 000E			COLOR_WHITE	= $0E
   311 = 0032			COLOR_RED	= $32
   312 = 0096			COLOR_CYAN	= $96
   313 = 0068			COLOR_VIOLET	= $68
   314 = 00C4			COLOR_GREEN	= $C4
   315 = 0074			COLOR_BLUE	= $74
   316 = 00EE			COLOR_YELLOW	= $EE
   317 = 0028			COLOR_ORANGE	= $28
   318 = 00E4			COLOR_BROWN	= $E4
   319 = 003C			COLOR_LIGHTRED	= $3C
   320 = 0004			COLOR_GRAY1	= $04
   321 = 0006			COLOR_GRAY2	= $06
   322 = 000A			COLOR_GRAY3	= $0A
   323 = 00CC			COLOR_LIGHTGREEN	= $CC
   324 = 007C			COLOR_LIGHTBLUE	= $7C
   325 = 0004			FMOPENREAD	= $04
   326 = 0008			FMOPENWRITE	= $08
   327 = 0009			FMOPENAPPEND	= $09
   328 = 000C			FMOPENREADWRITE	= $0C
   329 = 3854			SCREENWIDTH	= DATAORIGIN+$0000
   330 = 3856			SCREENHEIGHT	= DATAORIGIN+$0002
   331 = 3858			DATESEPARATOR	= DATAORIGIN+$0004
   332 = D20A			RND	= $D20A
   333 = 02C0			adr.PALETTE	= $02C0
   334 26E5			.var PALETTE	= adr.PALETTE .word
   335 = D012			adr.HPALETTE	= $D012
   336 26E5			.var HPALETTE	= adr.HPALETTE .word
   337 = 3859			FILEMODE	= DATAORIGIN+$0005
   338 = 385A			GRAPHMODE	= DATAORIGIN+$0006
   339 = 385B			IORESULT	= DATAORIGIN+$0007
   340 = 385C			EOLN	= DATAORIGIN+$0008
   341 = 385D			RNDSEED	= DATAORIGIN+$0009
   342
   343 = 26E5 C0 02		PALETTE
   343 = 26E7 12 D0		HPALETTE
   343 				.endl							; UNIT SYSTEM
   344
   345 				; ------------------------------------------------------------
   346
   347 26E9			.local	ATARI						; UNIT
   348
   349 				; ------------------------------------------------------------
   350
   351 = 0010			IRQENS	= $10
   352 = 0012			RTCLOK	= $12
   353 = 0012			RTCLOK1	= $12
   354 = 0013			RTCLOK2	= $13
   355 = 0014			RTCLOK3	= $14
   356 = 004D			ATRACT	= $4D
   357 = 0052			LMARGIN	= $52
   358 = 0053			RMARGIN	= $53
   359 = 0054			ROWCRS	= $54
   360 = 0055			COLCRS	= $55
   361 = 0057			DINDEX	= $57
   362 = 0058			SAVMSC	= $58
   363 = 0062			PALNTS	= $62
   364 = 006A			RAMTOP	= $6A
   365 = 0200			VDSLST	= $0200
   366 = 0230			SDLSTL	= $0230
   367 = 0290			TXTROW	= $0290
   368 = 0291			TXTCOL	= $0291
   369 = 0293			TINDEX	= $0293
   370 = 0294			TXTMSC	= $0294
   371 = 022F			SDMCTL	= $022F
   372 = 026F			GPRIOR	= $026F
   373 = 02F0			CRSINH	= $02F0
   374 = 02F3			CHACT	= $02F3
   375 = 02F4			CHBAS	= $02F4
   376 = 02FC			CH	= $02FC
   377 = 02C0			PCOLR0	= $02C0
   378 = 02C1			PCOLR1	= $02C1
   379 = 02C2			PCOLR2	= $02C2
   380 = 02C3			PCOLR3	= $02C3
   381 = 02C4			COLOR0	= $02C4
   382 = 02C5			COLOR1	= $02C5
   383 = 02C6			COLOR2	= $02C6
   384 = 02C7			COLOR3	= $02C7
   385 = 02C8			COLOR4	= $02C8
   386 = 02C8			COLBAKS	= $02C8
   387 = D000			HPOSP0	= $D000
   388 = D001			HPOSP1	= $D001
   389 = D002			HPOSP2	= $D002
   390 = D003			HPOSP3	= $D003
   391 = D004			HPOSM0	= $D004
   392 = D005			HPOSM1	= $D005
   393 = D006			HPOSM2	= $D006
   394 = D007			HPOSM3	= $D007
   395 = D008			SIZEP0	= $D008
   396 = D009			SIZEP1	= $D009
   397 = D00A			SIZEP2	= $D00A
   398 = D00B			SIZEP3	= $D00B
   399 = D00C			SIZEM	= $D00C
   400 = D00D			GRAFP0	= $D00D
   401 = D00E			GRAFP1	= $D00E
   402 = D00F			GRAFP2	= $D00F
   403 = D010			GRAFP3	= $D010
   404 = D011			GRAFM	= $D011
   405 = D004			P0PF	= $D004
   406 = D014			PAL	= $D014
   407 = D012			COLPM0	= $D012
   408 = D013			COLPM1	= $D013
   409 = D014			COLPM2	= $D014
   410 = D015			COLPM3	= $D015
   411 = D016			COLPF0	= $D016
   412 = D017			COLPF1	= $D017
   413 = D018			COLPF2	= $D018
   414 = D019			COLPF3	= $D019
   415 = D01A			COLBK	= $D01A
   416 = D01B			PRIOR	= $D01B
   417 = D01D			GRACTL	= $D01D
   418 = D01E			HITCLR	= $D01E
   419 = D01F			CONSOL	= $D01F
   420 = D200			AUDF1	= $D200
   421 = D201			AUDC1	= $D201
   422 = D202			AUDF2	= $D202
   423 = D203			AUDC2	= $D203
   424 = D204			AUDF3	= $D204
   425 = D205			AUDC3	= $D205
   426 = D206			AUDF4	= $D206
   427 = D207			AUDC4	= $D207
   428 = D208			AUDCTL	= $D208
   429 = D209			KBCODE	= $D209
   430 = D20E			IRQEN	= $D20E
   431 = D20F			SKSTAT	= $D20F
   432 = D300			PORTA	= $D300
   433 = D301			PORTB	= $D301
   434 = D302			PACTL	= $D302
   435 = D400			DMACTL	= $D400
   436 = D401			CHACTL	= $D401
   437 = D402			DLISTL	= $D402
   438 = D404			HSCROL	= $D404
   439 = D405			VSCROL	= $D405
   440 = D407			PMBASE	= $D407
   441 = D409			CHBASE	= $D409
   442 = D40A			WSYNC	= $D40A
   443 = D40B			VCOUNT	= $D40B
   444 = D40C			PENH	= $D40C
   445 = D40D			PENV	= $D40D
   446 = D40E			NMIEN	= $D40E
   447 = FFFA			NMIVEC	= $FFFA
   448 = FFFC			RESETVEC	= $FFFC
   449 = FFFE			IRQVEC	= $FFFE
   450
   451 				.endl							; UNIT ATARI
   452
   453 				; ------------------------------------------------------------
   454
   455 26E9			.local	CRT						; UNIT
   456
   457 26E9			.local	GOTOXY						; PROCEDURE | ASSEMBLER
   458
   459 				; -------------------  ASM Block 00000056  -------------------
   460
   461 26E9 AC A8 38			ldy x
   462 26EC F0 01			beq @+
   463
   464 26EE 88				dey
   465
   466 26EF 84 55		@	sty colcrs
   467 26F1 A0 00 84 56			mvy #$00 colcrs+1
   468
   469 26F5 AC A9 38			ldy y
   470 26F8 F0 01			beq @+
   471
   472 26FA 88				dey
   473
   474 26FB 84 54		@	sty rowcrs
   475
   476 				; ------------------------------------------------------------
   477
   478 = 38A8			X	= DATAORIGIN+$0054
   479 = 38A9			Y	= DATAORIGIN+$0055
   480
   481 = 38A8			@VarData	= X
   482 = 0002			@VarDataSize	= 2
   483
   484 26FD			@exit
   485 					.ifdef @new
   486 					lda <@VarData
   487 					sta :ztmp
   488 					lda >@VarData
   489 					ldy #@VarDataSize-1
   490 					jmp @FreeMem
   491 					els
   492 26FD 60				rts						; ret
   493 					eif
   494 				.endl
   495
   496 26FE			.local	WHEREX						; FUNCTION | ASSEMBLER
   497
   498 				; -------------------  ASM Block 00000057  -------------------
   499
   500 26FE A4 55			ldy colcrs
   501 2700 C8				iny
   502 2701 8C AA 38			sty Result
   503
   504
   505 2704			@exit
   506
   507 				; ------------------------------------------------------------
   508
   509 = 38AA			RESULT	= DATAORIGIN+$0056
   510 2704 60				rts						; ret
   511 				.endl
   512
   513 2705			.local	WHEREY						; FUNCTION | ASSEMBLER
   514
   515 				; -------------------  ASM Block 00000058  -------------------
   516
   517 2705 A4 54			ldy rowcrs
   518 2707 C8				iny
   519 2708 8C AB 38			sty Result
   520
   521 270B			@exit
   522
   523 				; ------------------------------------------------------------
   524
   525 = 38AB			RESULT	= DATAORIGIN+$0057
   526 270B 60				rts						; ret
   527 				.endl
   528
   529 270C			.local	TEXTMODE					; PROCEDURE | ASSEMBLER
   530 270C 8D AC 38			sta MODE
   531
   532 				; -------------------  ASM Block 00000059  -------------------
   533
   534 270F 8A 48			txa:pha
   535
   536 2711 20 AD 23			@clrscr
   537
   538 2714 68 AA			pla:tax
   539
   540 				; ------------------------------------------------------------
   541
   542 = 38AC			MODE	= DATAORIGIN+$0058
   543
   544 = 38AC			@VarData	= MODE
   545 = 0001			@VarDataSize	= 1
   546
   547 2716			@exit
   548 					.ifdef @new
   549 					lda <@VarData
   550 					sta :ztmp
   551 					lda >@VarData
   552 					ldy #@VarDataSize-1
   553 					jmp @FreeMem
   554 					els
   555 2716 60				rts						; ret
   556 					eif
   557 				.endl
   558
   559 				; ------------------------------------------------------------
   560
   561 = 38A7			TEXTATTR	= DATAORIGIN+$0053
   562 = D01F			CONSOL	= $D01F
   563 = 0000			CN_START_SELECT_OPTION	= $00
   564 = 0001			CN_SELECT_OPTION	= $01
   565 = 0002			CN_START_OPTION	= $02
   566 = 0003			CN_OPTION	= $03
   567 = 0004			CN_START_SELECT	= $04
   568 = 0005			CN_SELECT	= $05
   569 = 0006			CN_START	= $06
   570 = 0007			CN_NONE	= $07
   571 = 0000			BW40	= $00
   572 = 0001			CO40	= $01
   573 = 0002			BW80	= $02
   574 = 0003			CO80	= $03
   575 = 0007			MONO	= $07
   576 = 0001			C40	= $01
   577 = 0003			C80	= $03
   578 = 0000			BLACK	= $00
   579 = 000F			WHITE	= $0F
   580 = 0026			RED	= $26
   581 = 00AC			CYAN	= $AC
   582 = 0048			PURPLE	= $48
   583 = 00B6			GREEN	= $B6
   584 = 0086			BLUE	= $86
   585 = 00DC			YELLOW	= $DC
   586 = 0018			ORANGE	= $18
   587 = 00F4			BROWN	= $F4
   588 = 002A			LIGHT_RED	= $2A
   589 = 0004			DARK_GREY	= $04
   590 = 0008			GREY	= $08
   591 = 00BC			LIGHT_GREEN	= $BC
   592 = 009A			LIGHT_BLUE	= $9A
   593 = 000C			LIGHT_GREY	= $0C
   594 = 0080			BLINK	= $80
   595
   596 				.endl							; UNIT CRT
   597
   598 				; ------------------------------------------------------------
   599
   600 2717			.local	MISC						; UNIT
   601
   602 2717			.local	DETECTHIGHMEM					; FUNCTION
   603
   604 				; optimize OK (MISC), line = 115
   605
   606 2717 A9 00			lda #$00
   607 2719 8D AD 38			sta RESULT
   608 271C 8D AE 38			sta RESULT+1
   609
   610 				; optimize FAIL ('DETECTCPU', MISC), line = 117
   611
   612 271F 20 8D 27			jsr DETECTCPU
   613 2722 A9 7F			lda #$7F
   614 2724 CD AF 38			cmp DETECTCPU.RESULT
   615 2727 B0 63			jcs l_0173
   616 				@
   617
   618 				; -------------------  ASM Block 00000063  -------------------
   619
   620
   621 = 0084			adr	= eax
   622 = 38AD			bcnt	= Result
   623 = 38AE			bfirst	= Result+1
   624
   625 					opt c+
   626
   627 2729 8E 8B 27			stx @sp
   628
   629 272C 78				sei
   630 272D EE 0E D4			inc nmien
   631
   632 2730 64 84		ramsize	stz adr
   633 2732 64 85			stz adr+1
   634 2734 A9 01			lda #$01
   635 2736 85 86			sta adr+2
   636
   637 2738 9C AE 38			stz bfirst
   638 273B 9C AD 38			stz bcnt
   639
   640 273E 9C 00 00		?lp0	stz.w $0000
   641
   642 2741 A7 84			lda [adr]
   643 2743 49 FF			eor #$ff
   644 2745 87 84			sta [adr]
   645 2747 C7 84			cmp [adr]
   646 2749 D0 0B			bne ?nx
   647 274B AE 00 00			ldx.w $0000
   648 274E D0 06			bne ?nx
   649 2750 49 FF			eor #$ff
   650 2752 87 84			sta [adr]
   651 2754 80 06			bra ?fnd
   652
   653 2756 E6 86		?nx	inc adr+2
   654 2758 D0 E4			bne ?lp0
   655
   656 275A 80 2A			bra ?abt
   657
   658 275C A5 86		?fnd	lda adr+2
   659 275E 8D AE 38			sta bfirst
   660
   661 2761 E6 86			inc adr+2
   662 2763 EE AD 38			inc bcnt
   663
   664 2766 9C 00 00		?lp1	stz.w $0000
   665
   666 2769 A7 84			lda [adr]
   667 276B 49 FF			eor #$ff
   668 276D 87 84			sta [adr]
   669 276F C7 84			cmp [adr]
   670 2771 D0 13			bne ?abt
   671 2773 AE 00 00			ldx.w $0000
   672 2776 D0 0E			bne ?abt
   673 2778 49 FF			eor #$ff
   674 277A 87 84			sta [adr]
   675 277C EE AD 38			inc bcnt
   676 277F E6 86			inc adr+2
   677 2781 D0 E3			bne ?lp1
   678
   679 2783 CE AD 38		        dec bcnt
   680
   681 2786			?abt
   682 2786 CE 0E D4			dec nmien
   683 2789 58				cli
   684
   685 278A A2 00			ldx #0
   686 = 278B			@sp	equ *-1
   687
   688 					opt c-
   689
   690 278C			l_0173
   691 278C			@exit
   692
   693 				; ------------------------------------------------------------
   694
   695 = 38AD			RESULT	= DATAORIGIN+$0059
   696 278C 60				rts						; ret
   697 				.endl
   698
   699 278D			.local	DETECTCPU					; FUNCTION | ASSEMBLER
   700
   701 				; -------------------  ASM Block 00000067  -------------------
   702
   703 278D 8A 48			txa:pha
   704
   705 					opt c+
   706
   707 				;detekcja zainstalowanego procesora
   708 278F A9 99			lda #$99
   709 2791 18				clc
   710 2792 F8				sed
   711 2793 69 01			adc #$01
   712 2795 D8				cld
   713 2796 F0 05			beq DetectCPU_CMOS
   714
   715 2798			DetectCPU_02
   716 2798 A9 00			lda #0
   717 279A 4C AA 27			jmp stop
   718
   719 279D			DetectCPU_CMOS
   720 279D A9 00			lda #0
   721 279F C2 02			rep #%00000010		;wyzerowanie bitu Z
   722 27A1 D0 05			bne DetectCPU_C816
   723
   724 27A3			DetectCPU_C02
   725 27A3 A9 01			lda #1
   726 27A5 4C AA 27			jmp stop
   727
   728 27A8			DetectCPU_C816
   729 27A8 A9 80			lda #$80
   730
   731 27AA 8D AF 38		stop	sta Result
   732
   733 					opt c-
   734
   735 27AD 68 AA			pla:tax
   736
   737
   738 27AF			@exit
   739
   740 				; ------------------------------------------------------------
   741
   742 = 38AF			RESULT	= DATAORIGIN+$005B
   743 27AF 60				rts						; ret
   744 				.endl
   745
   746 				; ------------------------------------------------------------
   747
   748 = 0101			adr.BANKS	= $0101
   749 27B0			.var BANKS	= adr.BANKS .word
   750 = FFF7			DETECTOS	= $FFF7
   751
   752 = 27B0 01 01		BANKS
   752 				.endl							; UNIT MISC
   753
   754 				; ------------------------------------------------------------
   755
   756 27B2			.local	HIGHMEM						; UNIT
   757
   758 27B2			.local	THIGHMEMORYSTREAM.CREATE			; PROCEDURE
   759 27B2 8D B1 38			sta THIGHMEMORYSTREAM
   760 27B5 8C B2 38			sty THIGHMEMORYSTREAM+1
   761 27B8 8D B3 38			sta POSITION
   762 27BB 8C B4 38			sty POSITION+1
   763 27BE 18 69 04			add #4
   764 27C1 90 01			scc
   765 27C3 C8				iny
   766 27C4 8D B5 38			sta SIZE
   767 27C7 8C B6 38			sty SIZE+1
   768
   769 				; optimize OK (HIGHMEM), line = 69
   770
   771 27CA A9 00			lda #$00
   772 27CC AC B5 38 84 82 AC + 	mwy SIZE :bp2
   773 27D6 A0 00			ldy #$00
   774 27D8 91 82			sta (:bp2),y
   775 27DA C8				iny
   776 27DB 91 82			sta (:bp2),y
   777 27DD C8				iny
   778 27DE AD B0 38			lda BANK
   779 27E1 91 82			sta (:bp2),y
   780 27E3 C8				iny
   781 27E4 A9 00			lda #$00
   782 27E6 91 82			sta (:bp2),y
   783
   784 				; optimize OK (HIGHMEM), line = 70
   785
   786 27E8 AC B3 38 84 82 AC + 	mwy POSITION :bp2
   787 27F2 A0 00			ldy #$00
   788 27F4 91 82			sta (:bp2),y
   789 27F6 C8				iny
   790 27F7 91 82			sta (:bp2),y
   791 27F9 C8				iny
   792 27FA 91 82			sta (:bp2),y
   793 27FC C8				iny
   794 27FD 91 82			sta (:bp2),y
   795
   796 				; ------------------------------------------------------------
   797
   798 = 38B1			THIGHMEMORYSTREAM	= DATAORIGIN+$005D
   799 = 38B3			POSITION	= DATAORIGIN+$005F
   800 = 38B5			SIZE	= DATAORIGIN+$0061
   801
   802 = 38B1			@VarData	= THIGHMEMORYSTREAM
   803 = 0006			@VarDataSize	= 6
   804
   805 27FF			@exit
   806 					.ifdef @new
   807 					lda <@VarData
   808 					sta :ztmp
   809 					lda >@VarData
   810 					ldy #@VarDataSize-1
   811 					jmp @FreeMem
   812 					els
   813 27FF 60				rts						; ret
   814 					eif
   815 				.endl
   816
   817 2800			.local	READWRITEHIGHMEM				; PROCEDURE | ASSEMBLER
   818
   819 				; -------------------  ASM Block 00000072  -------------------
   820
   821 2800 8E 24 28			stx @sp
   822
   823 					opt c+
   824
   825 2803 A2 00			ldx #0
   826 2805 A0 00			ldy #0
   827
   828 2807 B7 88		loop	lda [edx],y
   829 2809 97 8C			sta [ecx],y
   830
   831 280B C8				iny
   832 280C D0 0D			bne skp
   833
   834 280E E6 89 D0 02 E6 8A		inw edx+1
   835 2814 E6 8D D0 02 E6 8E		inw ecx+1
   836
   837 281A E8				inx
   838
   839 281B E4 85		skp	cpx eax+1
   840 281D D0 E8			bne loop
   841 281F C4 84			cpy eax
   842 2821 D0 E4			bne loop
   843
   844 					opt c-
   845
   846 2823 A2 00			ldx #0
   847 = 2824			@sp	equ *-1
   848
   849 2825			@exit
   850 					.ifdef @new
   851 					lda <@VarData
   852 					sta :ztmp
   853 					lda >@VarData
   854 					ldy #@VarDataSize-1
   855 					jmp @FreeMem
   856 					els
   857 2825 60				rts						; ret
   858 					eif
   859 				.endl
   860
   861 2826			.local	THIGHMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
   862 2826 8D BB 38			sta THIGHMEMORYSTREAM
   863 2829 8C BC 38			sty THIGHMEMORYSTREAM+1
   864 282C 8D C1 38			sta POSITION
   865 282F 8C C2 38			sty POSITION+1
   866 2832 18 69 04			add #4
   867 2835 90 01			scc
   868 2837 C8				iny
   869 2838 8D C3 38			sta SIZE
   870 283B 8C C4 38			sty SIZE+1
   871
   872 				; optimize OK (HIGHMEM), line = 159
   873
   874 283E AD C0 38			lda COUNT+1
   875 2841 0D BF 38			ora COUNT
   876 2844 F0 5F			jeq l_01A0
   877
   878 				; -------------------  ASM Block 00000074  -------------------
   879
   880 2846 AD BD 38 85 88 AD + 	mwa Buffer edx	; src
   881 2850 A9 00 85 8A			mva #0 edx+2
   882
   883 2854 AD C1 38 85 84 AD + 	mwa Position eax
   884
   885 285E A0 00			ldy #0		; dst
   886 2860 B1 84			lda (eax),y
   887 2862 85 8C			sta ecx
   888 2864 C8				iny
   889 2865 B1 84			lda (eax),y
   890 2867 85 8D			sta ecx+1
   891 2869 C8				iny
   892 286A B1 84			lda (eax),y
   893 286C 85 8E			sta ecx+2
   894
   895 286E AD BF 38 85 84 AD + 	mwa Count eax
   896
   897 				; optimize FAIL ('READWRITEHIGHMEM', HIGHMEM), line = 179
   898
   899 2878 20 00 28			jsr READWRITEHIGHMEM
   900
   901 				; optimize OK (HIGHMEM), line = 181
   902
   903 287B AC C1 38 84 82 AC + 	mwy POSITION :bp2
   904 2885 A0 00			ldy #$00
   905 2887 B1 82			lda (:bp2),y
   906 2889 18 6D BF 38			add COUNT
   907 288D 91 82			sta (:bp2),y
   908 288F C8				iny
   909 2890 B1 82			lda (:bp2),y
   910 2892 6D C0 38			adc COUNT+1
   911 2895 91 82			sta (:bp2),y
   912 2897 C8				iny
   913 2898 B1 82			lda (:bp2),y
   914 289A 69 00			adc #$00
   915 289C 91 82			sta (:bp2),y
   916 289E C8				iny
   917 289F B1 82			lda (:bp2),y
   918 28A1 69 00			adc #$00
   919 28A3 91 82			sta (:bp2),y
   920 28A5			l_01A0
   921
   922 				; ------------------------------------------------------------
   923
   924 = 38BB			THIGHMEMORYSTREAM	= DATAORIGIN+$0067
   925 = 38BD			BUFFER	= DATAORIGIN+$0069
   926 = 38BF			COUNT	= DATAORIGIN+$006B
   927 = 38C1			POSITION	= DATAORIGIN+$006D
   928 = 38C3			SIZE	= DATAORIGIN+$006F
   929
   930 = 38BB			@VarData	= THIGHMEMORYSTREAM
   931 = 000A			@VarDataSize	= 10
   932
   933 28A5			@exit
   934 					.ifdef @new
   935 					lda <@VarData
   936 					sta :ztmp
   937 					lda >@VarData
   938 					ldy #@VarDataSize-1
   939 					jmp @FreeMem
   940 					els
   941 28A5 60				rts						; ret
   942 					eif
   943 				.endl
   944
   945 				; ------------------------------------------------------------
   946 				; ------------------------------------------------------------
   947 28A6			@UnitInit
   948
   949 				; optimize FAIL ('MISC.DETECTCPU', HIGHMEM), line = 387
   950
   951 28A6 20 8D 27			jsr MISC.DETECTCPU
   952 28A9 AD AF 38			lda MISC.DETECTCPU.RESULT
   953 28AC C9 80			cmp #$80
   954 28AE D0 0C			jne l_01B7
   955 				@
   956
   957 				; optimize FAIL ('MISC.DETECTHIGHMEM', HIGHMEM), line = 388
   958
   959 28B0 20 17 27			jsr MISC.DETECTHIGHMEM
   960 28B3 AD AD 38			lda MISC.DETECTHIGHMEM.RESULT
   961 28B6 8D B0 38			sta BANK
   962 28B9 4C C1 28			jmp l_01C5
   963 28BC			l_01B7
   964
   965 				; optimize OK (HIGHMEM), line = 390
   966
   967 28BC A9 00			lda #$00
   968 28BE 8D B0 38			sta BANK
   969 28C1			l_01C5
   970
   971 28C1 60				rts
   972
   973 				; ------------------------------------------------------------
   974
   975 = 38B0			BANK	= DATAORIGIN+$005C
   976
   977 				.endl							; UNIT HIGHMEM
   978
   979 28C2			.local	PLAY						; PROCEDURE | ASSEMBLER
   980
   981 				; -------------------  ASM Block 00000081  -------------------
   982
   983
   984 				/****************************************************************************
   985 				  MOVE - copy memory block >...
   986 				  X = source
   987 				  Y = destination
   988 				  A = length-1
   989 				*****************************************************************************/
   989
   990 				.macro move
   991 				
   992 				 ldx.w #[:1]&$00FFFF
   993 				 ldy.w #[:2]&$00FFFF
   994 				 lda.w #[:3]
   995 				
   996 				 mvn ^[:1],^[:2]
   997 				
   998 				.endm
   999
  1000 					opt c+
  1001
  1002 28C2			.zpvar = $d8
  1003
  1004 28C2			.zpvar nr0, nr1, nr2, nr3, patno, patend, cnts, pause, track_pos .byte
  1005 28C2			.zpvar pat0, pat1, pat2 .long
  1006
  1007 28C2 20 CF 2C			jsr wait
  1008
  1009 28C5 78				sei
  1010
  1011 28C6 8E 1C 2D			stx _rx
  1012
  1013 28C9 9C 0E D4			stz nmien
  1014 28CC 9C 0E D2			stz irqen
  1015
  1016 28CF A9 FE 8D 01 D3		mva #$fe portb
  1017
  1018 28D4 A2 08			ldx #8
  1019 28D6 9E 00 D2		lp	stz AUDF1,x
  1020 28D9 9E 10 D2			stz AUDF1+$10,x
  1021 28DC CA				dex
  1022 28DD 10 F7			bpl lp
  1023
  1024 28DF A2 00			ldx #0
  1025 28E1 B5 00 9D 00 D9 E8 + 	mva:rne 0,x ZPAGE,x+		; copy $00 page
  1026 28E9 BD 00 03 9D 00 DA + 	mva:rne $300,x ZPAGE+$100,x+	; copy $03 page
  1027
  1028
  1029 				;	ldx #0
  1030 28F2 BD D8 2A		mv1	lda .adr(mainloop),x
  1031 28F5 9D E0 03			sta mainloop,x
  1032 28F8 BD D8 2B			lda .adr(mainloop)+$100,x
  1033 28FB 9D E0 04			sta mainloop+$100,x
  1034 28FE E8				inx
  1035 28FF D0 F1			bne mv1
  1036
  1037 				;	ldx #0
  1038 2901 BD E3 29		mv0	lda .adr(playloop),x
  1039 2904 9D 00 D8			sta playloop,x
  1040 2907 E8				inx
  1041 2908 E0 F5			cpx #.sizeof(playloop)
  1042 290A D0 F5			bne mv0
  1043
  1044 290C AD D3 3C			lda SONG_LENGTH
  1045 290F 8D 95 05			sta mainloop.patmax+1
  1046
  1047 				;	lda SONG_RESTART
  1048 				;	sta mainloop.patres+1
  1049
  1050 2912 A9 DE			lda >volume		; silence
  1051 2914 8D DB D8			sta playloop.ivol0+1
  1052 2917 8D E5 D8			sta playloop.ivol1+1
  1053 291A 8D E8 D8			sta playloop.ivol2+1
  1054 291D 8D DE D8			sta playloop.ivol3+1
  1055 				/*
  1056 					lda POKEY
  1057 					bne skip
  1058
  1059 					lda >COVOX		; covox
  1060 					sta playloop.ch0+2
  1061 					sta playloop.ch1+2
  1062 					sta playloop.ch2+2
  1063 					sta playloop.ch3+2
  1064
  1065 					ldy #0
  1066 					sty playloop.ch0+1
  1067 					iny
  1068 					sty playloop.ch1+1
  1069 					iny
  1070 					sty playloop.ch2+1
  1071 					iny
  1072 					sty playloop.ch3+1
  1073
  1074 					jmp start
  1075 				*/
  1075
  1076
  1077 2920 A9 DE		skip	lda >VOLUME		; pokey
  1078 2922 8D 2B 29			sta mvol+2
  1079
  1080 2925 A0 20			ldy #32			; POKEY volume table
  1081 2927 A2 00			ldx #0
  1082 2929 5E 00 DE		mvol	lsr VOLUME,x
  1083 292C E8				inx
  1084 292D D0 FA			bne mvol
  1085
  1086 292F EE 2B 29			inc mvol+2
  1087 2932 88				dey
  1088 2933 10 F4			bpl mvol
  1089
  1090 2935			start
  1091 2935 9C 00 D4			stz dmactl
  1092
  1093 2938 64 DC			stz patno
  1094 293A 64 E0			stz track_pos
  1095
  1096 293C 64 E1			stz pat0
  1097 293E 64 E4			stz pat1
  1098 2940 64 E7			stz pat2
  1099
  1100 2942 A9 06			lda #6
  1101 2944 85 DF			sta pause
  1102 2946 85 DE			sta cnts
  1103
  1104 2948 A9 0F			lda ^pattern_start
  1105 294A 85 E3			sta pat0+2
  1106 294C 85 E6			sta pat1+2
  1107 294E 85 E9			sta pat2+2
  1108
  1109 2950 AC 00 06			ldy adr.ORDER
  1110 2953 84 E2			sty pat0+1
  1111 2955 C8				iny
  1112 2956 84 E5			sty pat1+1
  1113 2958 C8				iny
  1114 2959 84 E8			sty pat2+1
  1115
  1116
  1117 295B 18 FB			clc:xce
  1118
  1119 295D C2 30			.ia 16
  1120
  1121 295F 8B				phb
  1122 2960				move $0000 player $1000-1
Macro: MAIN.PLAY.MOVE [Source: modplay5.a65]
     2 2960 A2 00 00		 ldx.w #[$0000]&$00FFFF
     3 2963 A0 00 00		 ldy.w #[PLAYER]&$00FFFF
     4 2966 A9 FF 0F		 lda.w #[$1000-1]
     6 2969 54 0E 00		 mvn ^[$0000],^[PLAYER]
Source: modplay5.a65
  1123 296C				move $c000 player+$c000 $1000-1
Macro: MAIN.PLAY.MOVE [Source: modplay5.a65]
     2 296C A2 00 C0		 ldx.w #[$C000]&$00FFFF
     3 296F A0 00 C0		 ldy.w #[PLAYER+$C000]&$00FFFF
     4 2972 A9 FF 0F		 lda.w #[$1000-1]
     6 2975 54 0E 00		 mvn ^[$C000],^[PLAYER+$C000]
Source: modplay5.a65
  1124 2978				move $d800 player+$d800 $2700-1
Macro: MAIN.PLAY.MOVE [Source: modplay5.a65]
     2 2978 A2 00 D8		 ldx.w #[$D800]&$00FFFF
     3 297B A0 00 D8		 ldy.w #[PLAYER+$D800]&$00FFFF
     4 297E A9 FF 26		 lda.w #[$2700-1]
     6 2981 54 0E 00		 mvn ^[$D800],^[PLAYER+$D800]
Source: modplay5.a65
  1125 2984 AB				plb
  1126
  1127 2985 E2 30			.ia 8
  1128
  1129
  1130 2987 A9 DF 8D EA FF A9 + 	mwa	#nmi nmivec16		; custom NMI handler
  1131 2991 A9 DB 8D EE FF A9 + 	mwa	#irq irqvec16		; custom IRQ handler
  1132
  1133
  1134 					;set IRQ position in scanline for consistency and disable keyboard scan
  1135
  1136 299B 8D 0A D4			sta	wsync
  1137
  1138 299E A9 00			lda	#0
  1139 29A0 8D 0F D2			sta	skctl
  1140 29A3 8D 1F D2			sta	skctl+$10
  1141
  1142 29A6 8D 18 D2			sta	audctl+$10
  1143
  1144
  1145 				;	mva	#$01	AUDCTL		; 0=POKEY 64KHz, 1=15KHz
  1146
  1147 29A9 A9 40 8D 08 D2		mva #%01000000	AUDCTL
  1148
  1149 29AE A9 20 8D 00 D2		mva #32	AUDF1			; 48 kHz
  1150
  1151 29B3 A9 01 8D 0E D2		mva #$01	IRQEN
  1152
  1153 				;	lda	#1
  1154 29B8 8D 0F D2			sta	skctl
  1155 29BB 8D 1F D2			sta	skctl+$10
  1156 29BE 8D 09 D2			sta	stimer
  1157
  1158 29C1 A9 40 8D 0E D4		mva	#$40	nmien
  1159
  1160 29C6 AD 30 02 8D 02 D4 + 	mwa sdlstl dlistl
  1161 				;	mva sdmctl dmactl
  1162
  1163 29D2 A9 0E			lda ^player
  1164 29D4 48				pha
  1165 29D5 AB				plb
  1166
  1167 29D6 58				cli
  1168
  1169 29D7 5C CA 05 0E			jmp player+mainloop.stop
  1170
  1171
  1172 29DB 5C 00 D8 0E		IRQ	jmp player+playloop	; PLAYLOOP
  1173
  1174 29DF 5C E0 03 0E		NMI	jmp player+mainloop	; MAINLOOP
  1175
  1176
  1177 D800			.local	playloop,play_smp
  1178
  1179 				;	phb
  1180
  1181 D800 C2 30			.ia16
  1182
  1183 D802 8D EF D8			sta regA
  1184 D805 8E F2 D8			stx regX
  1185
  1186 D808 E2 30			.ia8
  1187
  1188 D80A A9 00			lda #0			; opcode 'inc.l' not exists
  1189 D80C 8F 0E D2 00			sta.l IRQEN
  1190 D810 A9 01			lda #1
  1191 D812 8F 0E D2 00			sta.l IRQEN
  1192
  1193
  1194 D816 A2 00			ldx voice: #0
  1195
  1196 D818 BD 00 C0			lda vol6bit,x
  1197 D81B 8F 11 D2 00			sta.l audc1+$10
  1198
  1199 D81F BD 00 C1			lda vol6bit+$100,x
  1200 D822 8F 13 D2 00			sta.l audc2+$10
  1201
  1202 D826 BD 00 C2			lda vol6bit+$200,x
  1203 D829 8F 15 D2 00			sta.l audc3+$10
  1204
  1205
  1206 D82D A2 00			ldx voice_: #0
  1207
  1208 D82F BD 00 C0			lda vol6bit,x
  1209 D832 8F 01 D2 00			sta.l audc1
  1210
  1211 D836 BD 00 C1			lda vol6bit+$100,x
  1212 D839 8F 03 D2 00			sta.l audc2
  1213
  1214 D83D BD 00 C2			lda vol6bit+$200,x
  1215 D840 8F 05 D2 00			sta.l audc3
  1216
  1217
  1218 					.ifdef MAIN.@DEFINES.STATUS
  1219 					lda #$0f
  1220 					sta.l colbak
  1221 					.endif
  1222
  1223 				; ---
  1224 				; ---	AUDC 1
  1225 				; ---
  1226
  1227 D844 18				clc
  1228
  1229 D845 A9 00		ist_0	lda #0
  1230 D847 69 00		iad0_m	adc #0
  1231 D849 8D 46 D8			sta ist_0+1
  1232 D84C AD BD D8			lda p_0c+1
  1233 D84F 69 00		iad0_s	adc #0
  1234 D851 90 0C			bcc ext_0
  1235
  1236 D853 EE BE D8			inc p_0c+2
  1237 D856 D0 07			bne ext_0
  1238
  1239 D858 A9 00		ire0_s	lda #0
  1240 D85A 8D BE D8			sta p_0c+2
  1241 D85D A9 00		ire0_m	lda #0
  1242
  1243 D85F 8D BD D8		ext_0	sta p_0c+1
  1244
  1245
  1246 				; ---
  1247 				; ---	AUDC 2
  1248 				; ---
  1249
  1250 D862 18				clc
  1251
  1252 D863 A9 00		ist_1	lda #0
  1253 D865 69 00		iad1_m	adc #0
  1254 D867 8D 64 D8			sta ist_1+1
  1255 D86A AD C4 D8			lda p_1c+1
  1256 D86D 69 00		iad1_s	adc #0
  1257 D86F 90 0C			bcc ext_1
  1258
  1259 D871 EE C5 D8			inc p_1c+2
  1260 D874 D0 07			bne ext_1
  1261
  1262 D876 A9 00		ire1_s	lda #0
  1263 D878 8D C5 D8			sta p_1c+2
  1264 D87B A9 00		ire1_m	lda #0
  1265
  1266 D87D 8D C4 D8		ext_1	sta p_1c+1
  1267
  1268
  1269 				; ---
  1270 				; ---	AUDC 3
  1271 				; ---
  1272
  1273 D880 18				clc
  1274
  1275 D881 A9 00		ist_2	lda #0
  1276 D883 69 00		iad2_m	adc #0
  1277 D885 8D 82 D8			sta ist_2+1
  1278 D888 AD CB D8			lda p_2c+1
  1279 D88B 69 00		iad2_s	adc #0
  1280 D88D 90 0C			bcc ext_2
  1281
  1282 D88F EE CC D8			inc p_2c+2
  1283 D892 D0 07			bne ext_2
  1284
  1285 D894 A9 00		ire2_s	lda #0
  1286 D896 8D CC D8			sta p_2c+2
  1287 D899 A9 00		ire2_m	lda #0
  1288
  1289 D89B 8D CB D8		ext_2	sta p_2c+1
  1290
  1291
  1292 				; ---
  1293 				; ---	AUDC 4
  1294 				; ---
  1295
  1296 D89E 18				clc
  1297
  1298 D89F A9 00		ist_3	lda #0
  1299 D8A1 69 00		iad3_m	adc #0
  1300 D8A3 8D A0 D8			sta ist_3+1
  1301 D8A6 AD D2 D8			lda p_3c+1
  1302 D8A9 69 00		iad3_s	adc #0
  1303 D8AB 90 0C			bcc ext_3
  1304
  1305 D8AD EE D3 D8			inc p_3c+2
  1306 D8B0 D0 07			bne ext_3
  1307
  1308 D8B2 A9 00		ire3_s	lda #0
  1309 D8B4 8D D3 D8			sta p_3c+2
  1310 D8B7 A9 00		ire3_m	lda #0
  1311
  1312 D8B9 8D D2 D8		ext_3	sta p_3c+1
  1313
  1314
  1315 D8BC AF FF FF 10		p_0c	lda.l sample_start+$FFFF	; ch #1
  1316 D8C0 8D DA D8			sta ivol0
  1317 D8C3 AF FF FF 10		p_1c	lda.l sample_start+$FFFF	; ch #2
  1318 D8C7 8D E4 D8			sta ivol1
  1319 D8CA AF FF FF 10		p_2c	lda.l sample_start+$FFFF	; ch #3
  1320 D8CE 8D E7 D8			sta ivol2
  1321 D8D1 AF FF FF 10		p_3c	lda.l sample_start+$FFFF	; ch #4
  1322 D8D5 8D DD D8			sta ivol3
  1323
  1324 D8D8 18				clc
  1325 D8D9 AD 00 DE			lda ivol0: volume
  1326 D8DC 6D 00 DE			adc ivol3: volume
  1327 D8DF 8D 17 D8			sta voice
  1328
  1329
  1330 D8E2 18				clc
  1331 D8E3 AD 00 DE			lda ivol1: volume
  1332 D8E6 6D 00 DE			adc ivol2: volume
  1333 D8E9 8D 2E D8			sta voice_
  1334
  1335
  1336 					.ifdef MAIN.@DEFINES.STATUS
  1337 					lda #$00
  1338 					sta.l colbak
  1339 					.endif
  1340
  1341
  1342 D8EC C2 30			.ia16
  1343
  1344 D8EE A9 00 00			lda.w regA: #0
  1345 D8F1 A2 00 00			ldx.w regX: #0
  1346
  1347 				;	plb
  1348 D8F4 40				rti
  1349
  1350 					.print 'PLAY_SMP: ',*
  1350 				PLAY_SMP: $D8F5
  1351
  1352 				.endl
  1353
  1354
  1355 				; ----------------------------------------
  1356 				; copy to HighMem
  1357 				; ----------------------------------------
  1358
  1359 03E0			.local	mainloop,main_lop
  1360
  1361 				;	phb
  1362
  1363 03E0 C2 30			.ai16
  1364
  1365 03E2 8D C1 05			sta regA
  1366 03E5 8E C4 05			stx regX
  1367 03E8 8C C7 05			sty regY
  1368
  1369 03EB E2 30			.ai8
  1370
  1371 03ED C6 DE			dec cnts
  1372 03EF F0 03			seq
  1373 03F1 4C B1 05			jmp nmiExit
  1374
  1375 03F4 64 DD			stz patend
  1376
  1377 03F6 A4 E0			ldy track_pos
  1378
  1379 				*---------------------------
  1380 				* track  0
  1381
  1382 03F8			i_0	;ldy #1
  1383 03F8 B7 E4			lda [pat1],y
  1384 03FA 8D 0B 04			sta i_0c+1
  1385 03FD 29 1F			and #$1f
  1386 03FF F0 09			beq i_0c
  1387 0401 AA				tax
  1388 0402 85 D8			sta nr0
  1389 0404 BD DF 05			lda adr.tivol-1,x
  1390 0407 8D DB D8			sta playloop.ivol0+1
  1391
  1392 040A AE 00 DC		i_0c	ldx EFFECT
  1393 040D F0 17			beq i_0f
  1394 040F E0 40			cpx #$40
  1395 0411 D0 05			bne @+
  1396 					;ldy #2
  1397 0413 B7 E7			lda [pat2],y
  1398 0415 8D DB D8			sta playloop.ivol0+1
  1399 0418 E0 C0		@	cpx #$c0
  1400 041A D0 04			bne @+
  1401 					;ldy #2
  1402 041C B7 E7			lda [pat2],y
  1403 041E 85 DF			sta pause
  1404 0420 E0 80		@	cpx #$80
  1405 0422 D0 02			bne i_0f
  1406 0424 86 DD			stx patend
  1407
  1408 0426			i_0f	;ldy #0
  1409 0426 B7 E1			lda [pat0],y
  1410 0428 F0 31			beq i_1
  1411 042A AA				tax
  1412 042B BD FF DC			lda tadcl-1,x
  1413 042E 8D 48 D8			sta playloop.iad0_m+1
  1414 0431 BD 2F DD			lda tadch-1,x
  1415 0434 8D 50 D8			sta playloop.iad0_s+1
  1416
  1417 0437 9C 46 D8			stz playloop.ist_0+1
  1418
  1419 043A A6 D8			ldx nr0
  1420 043C 8A				txa
  1421 043D 18 69 0F			add ^sample_start-1
  1422 0440 8D BF D8			sta playloop.p_0c+3
  1423
  1424 0443 BD 7F 06			lda adr.tstrl-1,x
  1425 0446 8D BD D8			sta playloop.p_0c+1
  1426 0449 BD 9F 06			lda adr.tstrh-1,x
  1427 044C 8D BE D8			sta playloop.p_0c+2
  1428
  1429 044F BD BF 06			lda adr.trepl-1,x
  1430 0452 8D 5E D8			sta playloop.ire0_m+1
  1431 0455 BD DF 06			lda adr.treph-1,x
  1432 0458 8D 59 D8			sta playloop.ire0_s+1
  1433
  1434 				* track 1
  1435
  1436 045B C8			i_1	iny
  1437
  1438 					;ldy #4
  1439 045C B7 E4			lda [pat1],y
  1440 045E 8D 6F 04			sta i_1c+1
  1441 0461 29 1F			and #$1f
  1442 0463 F0 09			beq i_1c
  1443 0465 AA				tax
  1444 0466 85 D9			sta nr1
  1445 0468 BD DF 05			lda adr.tivol-1,x
  1446 046B 8D E5 D8			sta playloop.ivol1+1
  1447
  1448 046E AE 00 DC		i_1c	ldx EFFECT
  1449 0471 F0 17			beq i_1f
  1450 0473 E0 40			cpx #$40
  1451 0475 D0 05			bne @+
  1452 					;ldy #5
  1453 0477 B7 E7			lda [pat2],y
  1454 0479 8D E5 D8			sta playloop.ivol1+1
  1455 047C E0 C0		@	cpx #$c0
  1456 047E D0 04			bne @+
  1457 					;ldy #5
  1458 0480 B7 E7			lda [pat2],y
  1459 0482 85 DF			sta pause
  1460 0484 E0 80		@	cpx #$80
  1461 0486 D0 02			bne i_1f
  1462 0488 86 DD			stx patend
  1463
  1464 048A			i_1f	;ldy #3
  1465 048A B7 E1			lda [pat0],y
  1466 048C F0 31			beq i_2
  1467 048E AA				tax
  1468 048F BD FF DC			lda tadcl-1,x
  1469 0492 8D 66 D8			sta playloop.iad1_m+1
  1470 0495 BD 2F DD			lda tadch-1,x
  1471 0498 8D 6E D8			sta playloop.iad1_s+1
  1472
  1473 049B 9C 64 D8			stz playloop.ist_1+1
  1474
  1475 049E A6 D9			ldx nr1
  1476 04A0 8A				txa
  1477 04A1 18 69 0F			add ^sample_start-1
  1478 04A4 8D C6 D8			sta playloop.p_1c+3
  1479
  1480 04A7 BD 7F 06			lda adr.tstrl-1,x
  1481 04AA 8D C4 D8			sta playloop.p_1c+1
  1482 04AD BD 9F 06			lda adr.tstrh-1,x
  1483 04B0 8D C5 D8			sta playloop.p_1c+2
  1484
  1485 04B3 BD BF 06			lda adr.trepl-1,x
  1486 04B6 8D 7C D8			sta playloop.ire1_m+1
  1487 04B9 BD DF 06			lda adr.treph-1,x
  1488 04BC 8D 77 D8			sta playloop.ire1_s+1
  1489
  1490 				* track 2
  1491
  1492 04BF C8			i_2	iny
  1493
  1494 					;ldy #7
  1495 04C0 B7 E4			lda [pat1],y
  1496 04C2 8D D3 04			sta i_2c+1
  1497 04C5 29 1F			and #$1f
  1498 04C7 F0 09			beq i_2c
  1499 04C9 AA				tax
  1500 04CA 85 DA			sta nr2
  1501 04CC BD DF 05			lda adr.tivol-1,x
  1502 04CF 8D E8 D8			sta playloop.ivol2+1
  1503
  1504 04D2 AE 00 DC		i_2c	ldx EFFECT
  1505 04D5 F0 17			beq i_2f
  1506 04D7 E0 40			cpx #$40
  1507 04D9 D0 05			bne @+
  1508 					;ldy #8
  1509 04DB B7 E7			lda [pat2],y
  1510 04DD 8D E8 D8			sta playloop.ivol2+1
  1511 04E0 E0 C0		@	cpx #$c0
  1512 04E2 D0 04			bne @+
  1513 					;ldy #8
  1514 04E4 B7 E7			lda [pat2],y
  1515 04E6 85 DF			sta pause
  1516 04E8 E0 80		@	cpx #$80
  1517 04EA D0 02			bne i_2f
  1518 04EC 86 DD			stx patend
  1519
  1520 04EE			i_2f	;ldy #6
  1521 04EE B7 E1			lda [pat0],y
  1522 04F0 F0 31			beq i_3
  1523 04F2 AA				tax
  1524 04F3 BD FF DC			lda tadcl-1,x
  1525 04F6 8D 84 D8			sta playloop.iad2_m+1
  1526 04F9 BD 2F DD			lda tadch-1,x
  1527 04FC 8D 8C D8			sta playloop.iad2_s+1
  1528
  1529 04FF 9C 82 D8			stz playloop.ist_2+1
  1530
  1531 0502 A6 DA			ldx nr2
  1532 0504 8A				txa
  1533 0505 18 69 0F			add ^sample_start-1
  1534 0508 8D CD D8			sta playloop.p_2c+3
  1535
  1536 050B BD 7F 06			lda adr.tstrl-1,x
  1537 050E 8D CB D8			sta playloop.p_2c+1
  1538 0511 BD 9F 06			lda adr.tstrh-1,x
  1539 0514 8D CC D8			sta playloop.p_2c+2
  1540
  1541 0517 BD BF 06			lda adr.trepl-1,x
  1542 051A 8D 9A D8			sta playloop.ire2_m+1
  1543 051D BD DF 06			lda adr.treph-1,x
  1544 0520 8D 95 D8			sta playloop.ire2_s+1
  1545
  1546 				* track 3
  1547
  1548 0523 C8			i_3	iny
  1549
  1550 					;ldy #10
  1551 0524 B7 E4			lda [pat1],y
  1552 0526 8D 37 05			sta i_3c+1
  1553 0529 29 1F			and #$1f
  1554 052B F0 09			beq i_3c
  1555 052D AA				tax
  1556 052E 85 DB			sta nr3
  1557 0530 BD DF 05			lda adr.tivol-1,x
  1558 0533 8D DE D8			sta playloop.ivol3+1
  1559
  1560 0536 AE 00 DC		i_3c	ldx EFFECT
  1561 0539 F0 17			beq i_3f
  1562 053B E0 40			cpx #$40
  1563 053D D0 05			bne @+
  1564 					;ldy #11
  1565 053F B7 E7			lda [pat2],y
  1566 0541 8D DE D8			sta playloop.ivol3+1
  1567 0544 E0 C0		@	cpx #$c0
  1568 0546 D0 04			bne @+
  1569 					;ldy #11
  1570 0548 B7 E7			lda [pat2],y
  1571 054A 85 DF			sta pause
  1572 054C E0 80		@	cpx #$80
  1573 054E D0 02			bne i_3f
  1574 0550 86 DD			stx patend
  1575
  1576 0552			i_3f	;ldy #9
  1577 0552 B7 E1			lda [pat0],y
  1578 0554 F0 31			beq i_e
  1579 0556 AA				tax
  1580 0557 BD FF DC			lda tadcl-1,x
  1581 055A 8D A2 D8			sta playloop.iad3_m+1
  1582 055D BD 2F DD			lda tadch-1,x
  1583 0560 8D AA D8			sta playloop.iad3_s+1
  1584
  1585 0563 9C A0 D8			stz playloop.ist_3+1
  1586
  1587 0566 A6 DB			ldx nr3
  1588 0568 8A				txa
  1589 0569 18 69 0F			add ^sample_start-1
  1590 056C 8D D4 D8			sta playloop.p_3c+3
  1591
  1592 056F BD 7F 06			lda adr.tstrl-1,x
  1593 0572 8D D2 D8			sta playloop.p_3c+1
  1594 0575 BD 9F 06			lda adr.tstrh-1,x
  1595 0578 8D D3 D8			sta playloop.p_3c+2
  1596
  1597 057B BD BF 06			lda adr.trepl-1,x
  1598 057E 8D B8 D8			sta playloop.ire3_m+1
  1599 0581 BD DF 06			lda adr.treph-1,x
  1600 0584 8D B3 D8			sta playloop.ire3_s+1
  1601
  1602 0587			i_e
  1603 0587 A5 DD			lda patend
  1604 0589 D0 05			bne i_en
  1605
  1606 058B C8				iny
  1607 058C 84 E0			sty track_pos
  1608 058E D0 1D			bne i_end
  1609
  1610 0590 E6 DC		i_en	inc patno
  1611 0592 A6 DC			ldx patno
  1612 0594 E0 00		patmax	cpx #0
  1613 0596 90 08			bcc i_ens
  1614
  1615 0598 A9 06			lda #6
  1616 059A 85 DF			sta pause
  1617 059C A2 00		patres	ldx #0
  1618 059E 86 DC			stx patno
  1619
  1620 05A0 BC 00 06		i_ens	ldy adr.ORDER,x
  1621 05A3 84 E2			sty pat0+1
  1622 05A5 C8				iny
  1623 05A6 84 E5			sty pat1+1
  1624 05A8 C8				iny
  1625 05A9 84 E8			sty pat2+1
  1626
  1627 05AB 64 E0			stz track_pos
  1628
  1629 05AD			i_end
  1630 05AD A5 DF			lda pause
  1631 05AF 85 DE			sta cnts
  1632
  1633 05B1			nmiExit
  1634 05B1 AF 1F D0 00			lda.l consol
  1635 05B5 C9 06			cmp #$06
  1636 05B7 D0 05			bne skp
  1637
  1638 05B9 A9 2C			lda #$2c	; bit *
  1639 05BB 8D CA 05			sta stop
  1640
  1641 05BE			skp
  1642
  1643 05BE C2 30			.ia16
  1644
  1645 05C0 A9 00 00			lda.w regA: #0
  1646 05C3 A2 00 00			ldx.w regX: #0
  1647 05C6 A0 00 00			ldy.w regY: #0
  1648
  1649 				;	plb
  1650 05C9 40				rti
  1651
  1652
  1653 05CA 4C CA 05		stop	jmp *			; do nothing
  1654
  1655 05CD E2 30			.ia8
  1656
  1657 05CF A9 00			lda #0
  1658 05D1 48				pha
  1659 05D2 AB				plb
  1660
  1661 05D3 5C DC 2C 00			jml stop2
  1662
  1663 				.endl
  1664
  1665
  1666 				; ----------------------------------------
  1667 				; memory bank #0 (0000..FFFF)
  1668 				; ----------------------------------------
  1669
  1670 2CCF AD 0F D2		wait	lda skstat	; wait on keypress
  1671 2CD2 29 04			and #4
  1672 2CD4 F0 F9			beq wait
  1673
  1674 2CD6 AD 0B D4 D0 FB		lda:rne vcount
  1675 2CDB 60				rts
  1676
  1677 2CDC			stop2
  1678 2CDC AD 0B D4 D0 FB		lda:rne vcount
  1679
  1680 2CE1 78				sei
  1681 2CE2 9C 0E D4			stz NMIEN
  1682 2CE5 9C 0E D2			stz IRQEN
  1683
  1684 2CE8 9C 08 D2			stz AUDCTL
  1685 2CEB 9C 18 D2			stz AUDCTL+$10
  1686
  1687 2CEE A2 00			ldx #0
  1688 2CF0 BD 00 D9 95 00 E8 + 	mva:rne ZPAGE,x 0,x+		; restore $00 page
  1689 2CF8 BD 00 DA 9D 00 03 + 	mva:rne ZPAGE+$100,x $300,x+	; restore $03 page
  1690
  1691 2D01 38 FB			sec:xce
  1692
  1693 2D03 A9 FF			lda #$ff
  1694 2D05 8D 01 D3			sta portb
  1695
  1696 2D08 AD 2F 02 8D 00 D4		mva sdmctl dmactl
  1697
  1698 2D0E A5 10			lda irqens
  1699 2D10 8D 0E D2			sta IRQEN
  1700
  1701 2D13 A9 03			lda	#3
  1702 2D15 8D 0F D2			sta	skctl
  1703 2D18 8D 1F D2			sta	skctl+$10
  1704
  1705 2D1B A2 00			ldx _rx: #0
  1706
  1707 2D1D A9 40 8D 0E D4		mva #$40 nmien
  1708 2D22 58				cli
  1709
  1710 					opt c-
  1711
  1712
  1713 2D23			@exit
  1714 					.ifdef @new
  1715 					lda <@VarData
  1716 					sta :ztmp
  1717 					lda >@VarData
  1718 					ldy #@VarDataSize-1
  1719 					jmp @FreeMem
  1720 					els
  1721 2D23 60				rts						; ret
  1722 					eif
  1723 = 00D8			NR0
  1723 = 00D9			NR1
  1723 = 00DA			NR2
  1723 = 00DB			NR3
  1723 = 00DC			PATNO
  1723 = 00DD			PATEND
  1723 = 00DE			CNTS
  1723 = 00DF			PAUSE
  1723 = 00E0			TRACK_POS
  1723 = 00E1			PAT0
  1723 = 00E4			PAT1
  1723 = 00E7			PAT2
  1723 				.endl
  1724
  1725 2D24			.local	CNVPATTERN					; FUNCTION | ASSEMBLER
  1726
  1727 				; -------------------  ASM Block 00000082  -------------------
  1728
  1729
  1730 2D24 A9 00			lda #0
  1731 2D26 8D E0 3C			sta Result
  1732 2D29 8D E1 3C			sta Result+1
  1733 2D2C 8D E2 3C			sta Result+2
  1734 2D2F 8D E3 3C			sta Result+3
  1735
  1736 2D32 AD 00 05			lda adr.BUF
  1737 2D35 29 0F			and #$f
  1738 2D37 0D 01 05			ora adr.BUF+1
  1739 2D3A F0 4A			beq _sil
  1740
  1741 2D3C A0 00			ldy #0
  1742 2D3E B9 C7 20		_tst	lda adr.KOD,y
  1743 2D41 CD 01 05			cmp adr.BUF+1
  1744 2D44 D0 7D			bne pls
  1745 2D46 AD 00 05			lda adr.BUF		;kod dzwieku
  1746 2D49 29 0F			and #$f
  1747 2D4B D9 C8 20			cmp adr.KOD+1,y
  1748 2D4E D0 73			bne pls
  1749 2D50 C8				iny
  1750 2D51 C8				iny
  1751 2D52 98				tya
  1752 2D53 4A				lsr @
  1753 				; ldy #0
  1754 2D54 8D E0 3C			sta Result		;czestotliwosc
  1755
  1756 2D57 AD 02 05			lda adr.BUF+2		;oblicz nr instr
  1757 2D5A 4A				lsr @
  1758 2D5B 4A				lsr @
  1759 2D5C 4A				lsr @
  1760 2D5D 4A				lsr @
  1761 2D5E 8D 67 2D			sta or_+1
  1762 2D61 AD 00 05			lda adr.BUF
  1763 2D64 29 F0			and #$f0
  1764 2D66 09 00		or_	ora #0
  1765 2D68 29 1F			and #$1f
  1766 				; ldy #1
  1767 2D6A 8D E1 3C		_con	sta Result+1		;numer instrumentu
  1768
  1769 				; ldy #2
  1770 2D6D A9 00			lda #0
  1771 2D6F 8D E2 3C			sta Result+2
  1772 				; dey
  1773 2D72 AD 02 05			lda adr.BUF+2
  1774 2D75 29 0F			and #$f
  1775 2D77 C9 0C			cmp #$c
  1776 2D79 F0 1A			beq _vol		; Effect Cxy (Set Volume)
  1777 2D7B C9 0F			cmp #$f
  1778 2D7D F0 2A			beq _tmp		; Effect Fxy (Set Speed)
  1779 2D7F C9 0D			cmp #$d
  1780 2D81 F0 08			beq _break		; Effect Dxy (Pattern Break)
  1781 2D83 4C CC 2D			jmp stop
  1782
  1783 2D86 8D E0 3C		_sil	sta Result
  1784 2D89 F0 DF			beq _con
  1785
  1786 2D8B A9 80		_break	lda #$80
  1787 2D8D 0D E1 3C			ora Result+1
  1788 2D90 8D E1 3C			sta Result+1
  1789 2D93 D0 37			bne stop
  1790
  1791 2D95 A9 40		_vol	lda #$40
  1792 2D97 0D E1 3C			ora Result+1
  1793 2D9A 8D E1 3C			sta Result+1
  1794
  1795 2D9D AD 03 05			lda adr.BUF+3		;parametr komendy
  1796
  1797 2DA0 4A				lsr @
  1798 2DA1 18				clc
  1799 2DA2 69 DE			adc >VOLUME
  1800 2DA4 8D E2 3C			sta Result+2
  1801 2DA7 D0 23			bne stop
  1802
  1803 2DA9 AD 03 05		_tmp	lda adr.BUF+3
  1804 2DAC C9 20			cmp #$20
  1805 2DAE B0 10			bcs _tq
  1806 2DB0 A9 C0			lda #$c0
  1807 2DB2 0D E1 3C			ora Result+1
  1808 2DB5 8D E1 3C			sta Result+1
  1809 				; ldy #2
  1810 2DB8 AD 03 05			lda adr.BUF+3		;parametr komendy
  1811 2DBB 29 1F			and #$1f
  1812 2DBD 8D E2 3C			sta Result+2
  1813 2DC0			_tq
  1814 2DC0 4C CC 2D			jmp stop
  1815
  1816 2DC3 C8			pls	iny
  1817 2DC4 C8				iny
  1818 2DC5 C0 60			cpy #96
  1819
  1820 2DC7 F0 03 4C 3E 2D		jne _tst
  1821
  1822 2DCC			stop
  1823
  1824 2DCC			@exit
  1825
  1826 				; ------------------------------------------------------------
  1827
  1828 = 3CE0			RESULT	= DATAORIGIN+$048C
  1829 2DCC 60				rts						; ret
  1830 				.endl
  1831
  1832 2DCD			.local	LOADMOD						; PROCEDURE
  1833
  1834 				; ------------------------------------------------------------
  1835
  1836 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1837 				; as Pointer
  1838 2DCD B5 94			lda :STACKORIGIN,x
  1839 2DCF 85 82			sta :bp2
  1840 2DD1 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1841 2DD3 85 83			sta :bp2+1
  1842 2DD5 A0 20			ldy #$20
  1843 2DD7 B1 82 99 E4 3C 88 + 	mva:rpl (:bp2),y adr.FNAM,y-
  1844 2DDF A9 E4 8D 6C 37 A9 + 	mwa #adr.FNAM FNAM
  1845 2DE9 CA				dex
  1846 2DEA			@main
  1847
  1848 2DEA 4C 04 2E			jmp l_01D1
  1849
  1850 2DED			.local	NORMALIZEBUF					; PROCEDURE
  1851
  1852 				; optimize OK (loadmod_hmem.inc), line = 16
  1853
  1854 2DED A9 00			lda #$00
  1855 2DEF A8				tay
  1856
  1857 2DF0			l_01E1
  1858 				; --- ForToDoCondition
  1859 2DF0 C0 E0			cpy #$E0
  1860 2DF2 B0 0C			jcs l_01EF
  1861
  1862 				; optimize OK (loadmod_hmem.inc), line = 17
  1863
  1864 2DF4 B9 00 05			lda adr.BUF,y
  1865 2DF7 18 69 80			add #$80
  1866 2DFA 99 00 05			sta adr.BUF,y
  1867
  1868 				; --- ForToDoEpilog
  1869 2DFD C8				iny
  1870 2DFE D0 F0			jne l_01E1
  1871 2E00			l_01EF
  1872 2E00 8C 33 3D			sty J
  1873
  1874 				; ------------------------------------------------------------
  1875
  1876 2E03			@exit
  1877 					.ifdef @new
  1878 					lda <@VarData
  1879 					sta :ztmp
  1880 					lda >@VarData
  1881 					ldy #@VarDataSize-1
  1882 					jmp @FreeMem
  1883 					els
  1884 2E03 60				rts						; ret
  1885 					eif
  1886 				.endl
  1887 2E04			l_01D1
  1888 2E04 A0 FD			ldy #256-3
  1889 2E06 B9 03 1F 99 14 3C + 	mva:rne CODEORIGIN+$0000+3-256,y adr.NAME+3-256,y+
  1890
  1891 				; optimize OK (loadmod_hmem.inc), line = 25
  1892
  1893 2E0F AD E4 3C			lda adr.FNAM
  1894 2E12 18 69 02			add #$02
  1895 2E15 8D 11 3D			sta adr.NAME+$00
  1896
  1897 				; optimize OK (loadmod_hmem.inc), line = 27
  1898
  1899 2E18 A9 01			lda #$01
  1900 2E1A 8D 32 3D			sta I
  1901 2E1D AD E4 3C 8D 24 2E		mva adr.FNAM @FORTMP_0212_0
  1902
  1903 2E23			l_0215
  1904 				; --- ForToDoCondition
  1905 2E23 A9 00			lda @FORTMP_0212_0:#$00
  1906 2E25 CD 32 3D			cmp I
  1907 2E28 90 0E			jcc l_0223
  1908
  1909 				; optimize OK (loadmod_hmem.inc), line = 28
  1910
  1911 2E2A AC 32 3D			ldy I
  1912 2E2D B9 E4 3C			lda adr.FNAM,y
  1913 2E30 99 13 3D			sta adr.NAME+$02,y
  1914
  1915 				; --- ForToDoEpilog
  1916 2E33 EE 32 3D			inc I
  1917 2E36 D0 EB			jne l_0215
  1918 2E38			l_0223
  1919 				; AssignFile
  1920
  1921 				; optimize OK (loadmod_hmem.inc), line = 30
  1922
  1923 2E38 AC 6E 37 84 82 AC + 	mwy F :bp2
  1924 2E42 A0 00			ldy #s@file.pfname
  1925 2E44 AD 70 37			lda NAME
  1926 2E47 91 82			sta (:bp2),y
  1927 2E49 C8				iny
  1928 2E4A AD 71 37			lda NAME+1
  1929 2E4D 91 82			sta (:bp2),y
  1930 2E4F A0 05			ldy #s@file.status
  1931 2E51 A9 00			lda #$00
  1932 2E53 91 82			sta (:bp2),y
  1933 				; Reset
  1934 2E55 A0 02			ldy #s@file.record
  1935 2E57 A9 01			lda #$01
  1936 2E59 91 82			sta (:bp2),y
  1937 2E5B C8				iny
  1938 2E5C A9 00			lda #$00
  1939 2E5E 91 82			sta (:bp2),y
  1940
  1941 2E60 8A 48			txa:pha
  1942 2E62 38				sec
  1943 					@openfile F, MAIN.SYSTEM.FileMode
  1943 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  1943 2E63 AC 6F 37		 LDY F+1
  1943 2E66 AD 6E 37		 LDA F
  1943 2E69 AE 59 38		 LDX MAIN.SYSTEM.FILEMODE
  1943 2E6C 20 27 21		 JSR @OPENFILE
  1944 2E6F 68 AA			pla:tax
  1945
  1946 				; BlockRead
  1947
  1948 				; optimize OK (loadmod_hmem.inc), line = 32
  1949
  1950 2E71 AC 6E 37 84 82 AC + 	mwy F :bp2
  1951 2E7B A0 06			ldy #s@file.buffer
  1952 2E7D AD D1 37			lda MODNAME
  1953 2E80 91 82			sta (:bp2),y
  1954 2E82 C8				iny
  1955 2E83 AD D2 37			lda MODNAME+1
  1956 2E86 91 82			sta (:bp2),y
  1957 2E88 A0 08			ldy #s@file.nrecord
  1958 2E8A A9 14			lda #$14
  1959 2E8C 91 82			sta (:bp2),y
  1960 2E8E C8				iny
  1961 2E8F A9 00			lda #$00
  1962 2E91 91 82			sta (:bp2),y
  1963
  1964 2E93 8A 48			txa:pha
  1965 2E95 38				sec
  1966 					@readfile F, #7
  1966 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  1966 2E96 AC 6F 37		 LDY F+1
  1966 2E99 AD 6E 37		 LDA F
  1966 2E9C A2 07		 LDX# 7
  1966 2E9E 20 EA 21		 JSR @READFILE
  1967 2EA1 68 AA			pla:tax
  1968
  1969 				; optimize OK (loadmod_hmem.inc), line = 34
  1970
  1971 2EA3 A9 00			lda #$00
  1972 2EA5 8D D7 3C			sta NUMBER_OF_SAMPLES
  1973
  1974 				; optimize OK (loadmod_hmem.inc), line = 36
  1975
  1976 2EA8 8D 32 3D			sta I
  1977
  1978 2EAB			l_025B
  1979 				; --- ForToDoCondition
  1980 2EAB AD 32 3D			lda I
  1981 2EAE C9 1F			cmp #$1F
  1982 2EB0 90 03 4C 57 30		jcs l_0269
  1983
  1984 				; optimize OK (loadmod_hmem.inc), line = 38
  1985
  1986 2EB5 0A				asl @
  1987 2EB6 A8				tay
  1988 2EB7 B9 94 3C			lda adr.SAMPLE,y
  1989 2EBA 8D 46 3D			sta SMP
  1990 2EBD B9 95 3C			lda adr.SAMPLE+1,y
  1991 2EC0 8D 47 3D			sta SMP+1
  1992 				; BlockRead
  1993
  1994 				; optimize OK (loadmod_hmem.inc), line = 40
  1995
  1996 2EC3 AC 6E 37 84 82 AC + 	mwy F :bp2
  1997 2ECD A0 06			ldy #s@file.buffer
  1998 2ECF A9 00			lda #SMP.NAME-DATAORIGIN
  1999 2ED1 18 6D 46 3D			add SMP
  2000 2ED5 91 82			sta (:bp2),y
  2001 2ED7 C8				iny
  2002 2ED8 A9 00			lda #$00
  2003 2EDA 6D 47 3D			adc SMP+1
  2004 2EDD 91 82			sta (:bp2),y
  2005 2EDF A0 08			ldy #s@file.nrecord
  2006 2EE1 A9 1E			lda #$1E
  2007 2EE3 91 82			sta (:bp2),y
  2008 2EE5 C8				iny
  2009 2EE6 A9 00			lda #$00
  2010 2EE8 91 82			sta (:bp2),y
  2011
  2012 2EEA 8A 48			txa:pha
  2013 2EEC 38				sec
  2014 					@readfile F, #7
  2014 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  2014 2EED AC 6F 37		 LDY F+1
  2014 2EF0 AD 6E 37		 LDA F
  2014 2EF3 A2 07		 LDX# 7
  2014 2EF5 20 EA 21		 JSR @READFILE
  2015 2EF8 68 AA			pla:tax
  2016
  2017 				; optimize OK (loadmod_hmem.inc), line = 42
  2018
  2019 2EFA AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2020 2F04 A0 16			ldy #SMP.LEN-DATAORIGIN
  2021 2F06 B1 82			lda (:bp2),y
  2022 2F08 8D A3 38			sta SYSTEM.SWAP_0138.A
  2023 2F0B C8				iny
  2024 2F0C B1 82			lda (:bp2),y
  2025 2F0E 8D A4 38			sta SYSTEM.SWAP_0138.A+1
  2026 2F11 20 D8 26			jsr SYSTEM.SWAP_0138
  2027 2F14 E8				inx
  2028 2F15 AD A5 38 95 94		mva SYSTEM.SWAP_0138.RESULT :STACKORIGIN,x
  2029 2F1A AD A6 38 95 A4		mva SYSTEM.SWAP_0138.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  2030 2F1F E8				inx
  2031 2F20 A9 01 95 94			mva #$01 :STACKORIGIN,x
  2032 2F24 20 F0 23			jsr shlEAX_CL.WORD
  2033 2F27 CA				dex
  2034 2F28 AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2035 2F32 A0 16			ldy #SMP.LEN-DATAORIGIN
  2036 2F34 B5 94			lda :STACKORIGIN,x
  2037 2F36 91 82			sta (:bp2),y
  2038 2F38 C8				iny
  2039 2F39 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2040 2F3B 91 82			sta (:bp2),y
  2041 2F3D CA				dex
  2042
  2043 				; optimize OK (loadmod_hmem.inc), line = 43
  2044
  2045 2F3E AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2046 2F48 A0 1A			ldy #SMP.LOOP_START-DATAORIGIN
  2047 2F4A B1 82			lda (:bp2),y
  2048 2F4C 8D A3 38			sta SYSTEM.SWAP_0138.A
  2049 2F4F C8				iny
  2050 2F50 B1 82			lda (:bp2),y
  2051 2F52 8D A4 38			sta SYSTEM.SWAP_0138.A+1
  2052 2F55 20 D8 26			jsr SYSTEM.SWAP_0138
  2053 2F58 E8				inx
  2054 2F59 AD A5 38 95 94		mva SYSTEM.SWAP_0138.RESULT :STACKORIGIN,x
  2055 2F5E AD A6 38 95 A4		mva SYSTEM.SWAP_0138.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  2056 2F63 E8				inx
  2057 2F64 A9 01 95 94			mva #$01 :STACKORIGIN,x
  2058 2F68 20 F0 23			jsr shlEAX_CL.WORD
  2059 2F6B CA				dex
  2060 2F6C AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2061 2F76 A0 1A			ldy #SMP.LOOP_START-DATAORIGIN
  2062 2F78 B5 94			lda :STACKORIGIN,x
  2063 2F7A 91 82			sta (:bp2),y
  2064 2F7C C8				iny
  2065 2F7D B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2066 2F7F 91 82			sta (:bp2),y
  2067 2F81 CA				dex
  2068
  2069 				; optimize OK (loadmod_hmem.inc), line = 44
  2070
  2071 2F82 AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2072 2F8C A0 1C			ldy #SMP.LOOP_LEN-DATAORIGIN
  2073 2F8E B1 82			lda (:bp2),y
  2074 2F90 8D A3 38			sta SYSTEM.SWAP_0138.A
  2075 2F93 C8				iny
  2076 2F94 B1 82			lda (:bp2),y
  2077 2F96 8D A4 38			sta SYSTEM.SWAP_0138.A+1
  2078 2F99 20 D8 26			jsr SYSTEM.SWAP_0138
  2079 2F9C E8				inx
  2080 2F9D AD A5 38 95 94		mva SYSTEM.SWAP_0138.RESULT :STACKORIGIN,x
  2081 2FA2 AD A6 38 95 A4		mva SYSTEM.SWAP_0138.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  2082 2FA7 E8				inx
  2083 2FA8 A9 01 95 94			mva #$01 :STACKORIGIN,x
  2084 2FAC 20 F0 23			jsr shlEAX_CL.WORD
  2085 2FAF CA				dex
  2086 2FB0 AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2087 2FBA A0 1C			ldy #SMP.LOOP_LEN-DATAORIGIN
  2088 2FBC B5 94			lda :STACKORIGIN,x
  2089 2FBE 91 82			sta (:bp2),y
  2090 2FC0 C8				iny
  2091 2FC1 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2092 2FC3 91 82			sta (:bp2),y
  2093 2FC5 CA				dex
  2094
  2095 				; optimize OK (loadmod_hmem.inc), line = 46
  2096
  2097 2FC6 AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2098 2FD0 A0 18			ldy #SMP.FINE_TUNE-DATAORIGIN
  2099 2FD2 B1 82			lda (:bp2),y
  2100 2FD4 38 E9 08			sub #$08
  2101 2FD7 50 02			svc
  2102 2FD9 49 80			eor #$80
  2103 2FDB 30 07			jmi l_02A9
  2104 2FDD B1 82			lda (:bp2),y
  2105 2FDF 38 E9 10			sub #$10
  2106 2FE2 91 82			sta (:bp2),y
  2107 2FE4			l_02A9
  2108
  2109 				; optimize OK (loadmod_hmem.inc), line = 48
  2110
  2111 2FE4 AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2112 2FEE A0 16			ldy #SMP.LEN-DATAORIGIN
  2113 2FF0 B1 82			lda (:bp2),y
  2114 2FF2 C8				iny
  2115 2FF3 11 82			ora (:bp2),y
  2116 2FF5 F0 0A			jeq l_02BE
  2117
  2118 				; optimize FAIL (0, loadmod_hmem.inc), line = 49
  2119
  2120 2FF7 EE D7 3C			inc NUMBER_OF_SAMPLES
  2121
  2122 				; optimize OK (loadmod_hmem.inc), line = 50
  2123
  2124 2FFA AC 32 3D			ldy I
  2125 2FFD C8				iny
  2126 2FFE 8C D6 3C			sty NUMBER_OF_BANKS
  2127 3001			l_02BE
  2128
  2129 				; optimize OK (loadmod_hmem.inc), line = 53
  2130
  2131 3001 AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2132 300B A0 16			ldy #SMP.LEN-DATAORIGIN
  2133 300D B1 82			lda (:bp2),y
  2134 300F 85 9D			sta :STACKORIGIN+9
  2135 3011 C8				iny
  2136 3012 A9 00			lda #$00
  2137 3014 C9 01			cmp #$01
  2138 3016 D0 0A			bne @+
  2139 3018 B1 82			lda (:bp2),y
  2140 301A C9 00			cmp #$00
  2141 301C D0 04			bne @+
  2142 301E A5 9D			lda :STACKORIGIN+9
  2143 3020 C9 00			cmp #$00
  2144 				@
  2145 3022 90 2B			jcc l_02E0
  2146 3024 F0 29			jeq l_02E0
  2147
  2148 				; optimize FAIL ('@print', loadmod_hmem.inc), line = 54
  2149
  2150 					@printSTRING #CODEORIGIN+$0004
  2150 				 LDY> CODEORIGIN+$0004\ LDA< CODEORIGIN+$0004\ JSR @PRINTSTRING
  2150 3026 A0 20		 LDY> CODEORIGIN+$0004
  2150 3028 A9 04		 LDA< CODEORIGIN+$0004
  2150 302A 20 A8 25		 JSR @PRINTSTRING
  2151 302D A9 00 85 88			mva #$00 :dx
  2152 3031 A9 00 85 89			mva #$00 :dx+1
  2153 3035 A9 01 85 8A			mva #$01 :dx+2
  2154 3039 A9 00 85 8B			mva #$00 :dx+3
  2155 303D 20 F8 25			@printVALUE
  2156 					@printSTRING #CODEORIGIN+$000B
  2156 				 LDY> CODEORIGIN+$000B\ LDA< CODEORIGIN+$000B\ JSR @PRINTSTRING
  2156 3040 A0 20		 LDY> CODEORIGIN+$000B
  2156 3042 A9 0B		 LDA< CODEORIGIN+$000B
  2156 3044 20 A8 25		 JSR @PRINTSTRING
  2157 3047 20 74 25			@printEOL
  2158 304A A9 00			lda #$00
  2159 304C 4C AB 37			jmp @halt
  2160 304F			l_02E0
  2161
  2162 				; --- ForToDoEpilog
  2163 304F EE 32 3D			inc I
  2164 3052 F0 03 4C AB 2E		jne l_025B
  2165 3057			l_0269
  2166 				; BlockRead
  2167
  2168 				; optimize OK (loadmod_hmem.inc), line = 61
  2169
  2170 3057 AC 6E 37 84 82 AC + 	mwy F :bp2
  2171 3061 A0 06			ldy #s@file.buffer
  2172 3063 A9 D3			lda <SONG_LENGTH
  2173 3065 91 82			sta (:bp2),y
  2174 3067 C8				iny
  2175 3068 A9 3C			lda >SONG_LENGTH
  2176 306A 91 82			sta (:bp2),y
  2177 306C A0 08			ldy #s@file.nrecord
  2178 306E A9 01			lda #$01
  2179 3070 91 82			sta (:bp2),y
  2180 3072 C8				iny
  2181 3073 A9 00			lda #$00
  2182 3075 91 82			sta (:bp2),y
  2183
  2184 3077 8A 48			txa:pha
  2185 3079 38				sec
  2186 					@readfile F, #7
  2186 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  2186 307A AC 6F 37		 LDY F+1
  2186 307D AD 6E 37		 LDA F
  2186 3080 A2 07		 LDX# 7
  2186 3082 20 EA 21		 JSR @READFILE
  2187 3085 68 AA			pla:tax
  2188
  2189 				; BlockRead
  2190
  2191 				; optimize OK (loadmod_hmem.inc), line = 62
  2192
  2193 3087 AC 6E 37 84 82 AC + 	mwy F :bp2
  2194 3091 A0 06			ldy #s@file.buffer
  2195 3093 A9 D4			lda <SONG_RESTART
  2196 3095 91 82			sta (:bp2),y
  2197 3097 C8				iny
  2198 3098 A9 3C			lda >SONG_RESTART
  2199 309A 91 82			sta (:bp2),y
  2200 309C A0 08			ldy #s@file.nrecord
  2201 309E A9 01			lda #$01
  2202 30A0 91 82			sta (:bp2),y
  2203 30A2 C8				iny
  2204 30A3 A9 00			lda #$00
  2205 30A5 91 82			sta (:bp2),y
  2206
  2207 30A7 8A 48			txa:pha
  2208 30A9 38				sec
  2209 					@readfile F, #7
  2209 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  2209 30AA AC 6F 37		 LDY F+1
  2209 30AD AD 6E 37		 LDA F
  2209 30B0 A2 07		 LDX# 7
  2209 30B2 20 EA 21		 JSR @READFILE
  2210 30B5 68 AA			pla:tax
  2211
  2212 				; optimize OK (loadmod_hmem.inc), line = 65
  2213
  2214 30B7 A9 00			lda #$00
  2215 30B9 8D D5 3C			sta NUMBER_OF_PATTERNS
  2216
  2217 				; optimize OK (loadmod_hmem.inc), line = 67
  2218
  2219 30BC 8D 32 3D			sta I
  2220
  2221 30BF			l_0313
  2222 				; --- ForToDoCondition
  2223 30BF AD 32 3D			lda I
  2224 30C2 30 54			jmi l_0321
  2225 				; BlockRead
  2226
  2227 				; optimize OK (loadmod_hmem.inc), line = 68
  2228
  2229 30C4 AC 6E 37 84 82 AC + 	mwy F :bp2
  2230 30CE A0 06			ldy #s@file.buffer
  2231 30D0 A9 34			lda <A
  2232 30D2 91 82			sta (:bp2),y
  2233 30D4 C8				iny
  2234 30D5 A9 3D			lda >A
  2235 30D7 91 82			sta (:bp2),y
  2236 30D9 A0 08			ldy #s@file.nrecord
  2237 30DB A9 01			lda #$01
  2238 30DD 91 82			sta (:bp2),y
  2239 30DF C8				iny
  2240 30E0 A9 00			lda #$00
  2241 30E2 91 82			sta (:bp2),y
  2242
  2243 30E4 8A 48			txa:pha
  2244 30E6 38				sec
  2245 					@readfile F, #7
  2245 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  2245 30E7 AC 6F 37		 LDY F+1
  2245 30EA AD 6E 37		 LDA F
  2245 30ED A2 07		 LDX# 7
  2245 30EF 20 EA 21		 JSR @READFILE
  2246 30F2 68 AA			pla:tax
  2247
  2248 				; optimize OK (loadmod_hmem.inc), line = 70
  2249
  2250 30F4 AD 34 3D			lda A
  2251 30F7 0A				asl @
  2252 30F8 18 69 00			add #$00
  2253 30FB 18 6D 34 3D			add A
  2254 30FF AC 32 3D			ldy I
  2255 3102 99 00 06			sta adr.ORDER,y
  2256
  2257 				; optimize OK (loadmod_hmem.inc), line = 72
  2258
  2259 3105 AD D5 3C			lda NUMBER_OF_PATTERNS
  2260 3108 CD 34 3D			cmp A
  2261 310B B0 06			jcs l_0354
  2262 310D AD 34 3D			lda A
  2263 3110 8D D5 3C			sta NUMBER_OF_PATTERNS
  2264 3113			l_0354
  2265
  2266 				; --- ForToDoEpilog
  2267 3113 EE 32 3D			inc I
  2268 3116 D0 A7			jne l_0313
  2269 3118			l_0321
  2270
  2271 				; optimize FAIL (0, loadmod_hmem.inc), line = 75
  2272
  2273 3118 EE D5 3C			inc NUMBER_OF_PATTERNS
  2274 				; BlockRead
  2275
  2276 				; optimize OK (loadmod_hmem.inc), line = 78
  2277
  2278 311B AC 6E 37 84 82 AC + 	mwy F :bp2
  2279 3125 A0 06			ldy #s@file.buffer
  2280 3127 A9 4E			lda <adr.HEADER
  2281 3129 18 69 01			add #$01
  2282 312C 91 82			sta (:bp2),y
  2283 312E C8				iny
  2284 312F A9 3D			lda >adr.HEADER
  2285 3131 69 00			adc #$00
  2286 3133 91 82			sta (:bp2),y
  2287 3135 A0 08			ldy #s@file.nrecord
  2288 3137 A9 04			lda #$04
  2289 3139 91 82			sta (:bp2),y
  2290 313B C8				iny
  2291 313C A9 00			lda #$00
  2292 313E 91 82			sta (:bp2),y
  2293
  2294 3140 8A 48			txa:pha
  2295 3142 38				sec
  2296 					@readfile F, #7
  2296 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  2296 3143 AC 6F 37		 LDY F+1
  2296 3146 AD 6E 37		 LDA F
  2296 3149 A2 07		 LDX# 7
  2296 314B 20 EA 21		 JSR @READFILE
  2297 314E 68 AA			pla:tax
  2298
  2299 				; optimize OK (loadmod_hmem.inc), line = 79
  2300
  2301 3150 A9 04			lda #$04
  2302 3152 8D 4E 3D			sta adr.HEADER+$00
  2303
  2304 				; optimize FAIL ('cmpSTRING', loadmod_hmem.inc), line = 81
  2305
  2306 3155 E8				inx
  2307 3156 AD 72 37 95 94		mva HEADER :STACKORIGIN,x
  2308 315B AD 73 37 95 A4		mva HEADER+1 :STACKORIGIN+STACKWIDTH,x
  2309 3160 E8				inx
  2310 3161 A9 21 95 94			mva #$21 :STACKORIGIN,x
  2311 3165 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  2312 3169 A0 01			ldy #1
  2313 316B 20 23 24			jsr cmpSTRING
  2314 316E D0 01			bne @+
  2315 3170 88				dey
  2316 				@
  2317 3171 CA				dex
  2318 3172 CA				dex
  2319 3173 98				tya
  2320 3174 F0 0F			jeq l_0384
  2321
  2322 				; optimize FAIL ('@print', loadmod_hmem.inc), line = 82
  2323
  2324 					@printSTRING #CODEORIGIN+$0027
  2324 				 LDY> CODEORIGIN+$0027\ LDA< CODEORIGIN+$0027\ JSR @PRINTSTRING
  2324 3176 A0 20		 LDY> CODEORIGIN+$0027
  2324 3178 A9 27		 LDA< CODEORIGIN+$0027
  2324 317A 20 A8 25		 JSR @PRINTSTRING
  2325 317D 20 74 25			@printEOL
  2326 3180 A9 00			lda #$00
  2327 3182 4C AB 37			jmp @halt
  2328 3185			l_0384
  2329
  2330 				; optimize FAIL ('@print', loadmod_hmem.inc), line = 88
  2331
  2332 					@printSTRING #CODEORIGIN+$003C
  2332 				 LDY> CODEORIGIN+$003C\ LDA< CODEORIGIN+$003C\ JSR @PRINTSTRING
  2332 3185 A0 20		 LDY> CODEORIGIN+$003C
  2332 3187 A9 3C		 LDA< CODEORIGIN+$003C
  2332 3189 20 A8 25		 JSR @PRINTSTRING
  2333 318C E8				inx
  2334 318D AD D1 37			lda MODNAME
  2335 3190 AC D2 37			ldy MODNAME+1
  2336 3193 20 82 25			jsr @printPCHAR
  2337 3196 CA				dex
  2338 3197 20 74 25			@printEOL
  2339
  2340 				; optimize OK (loadmod_hmem.inc), line = 90
  2341
  2342 319A A9 00			lda #$00
  2343 319C 8D 32 3D			sta I
  2344
  2345 319F			l_039E
  2346 				; --- ForToDoCondition
  2347 319F AD 32 3D			lda I
  2348 31A2 C9 1F			cmp #$1F
  2349 31A4 90 03 4C 0D 33		jcs l_03AC
  2350
  2351 				; optimize OK (loadmod_hmem.inc), line = 92
  2352
  2353 31A9 0A				asl @
  2354 31AA A8				tay
  2355 31AB B9 94 3C			lda adr.SAMPLE,y
  2356 31AE 8D 46 3D			sta SMP
  2357 31B1 85 82			sta :bp2
  2358 31B3 B9 95 3C			lda adr.SAMPLE+1,y
  2359 31B6 8D 47 3D			sta SMP+1
  2360 31B9 85 83			sta :bp2+1
  2361 				; optimize OK (loadmod_hmem.inc), line = 94
  2362 31BB A0 16			ldy #SMP.LEN-DATAORIGIN
  2363 31BD B1 82			lda (:bp2),y
  2364 31BF C8				iny
  2365 31C0 11 82			ora (:bp2),y
  2366 31C2 D0 03 4C 05 33		jeq l_03C5
  2367
  2368 				; optimize OK (loadmod_hmem.inc), line = 95
  2369
  2370 31C7 AD 32 3D			lda I
  2371 31CA 18 69 01			add #$01
  2372 31CD 85 88			sta SYSTEM.HEXSTR.VALUE
  2373 31CF A9 00			lda #$00
  2374 31D1 69 00			adc #$00
  2375 31D3 85 89			sta SYSTEM.HEXSTR.VALUE+1
  2376 31D5 A9 00			lda #$00
  2377 31D7 69 00			adc #$00
  2378 31D9 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  2379 31DB A9 00			lda #$00
  2380 31DD 69 00			adc #$00
  2381 31DF 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  2382 31E1 A9 02			lda #$02
  2383 31E3 85 8C			sta SYSTEM.HEXSTR.DIGITS
  2384 31E5 20 A7 26			jsr SYSTEM.HEXSTR
  2385 					@printSTRING SYSTEM.HEXSTR.RESULT
  2385 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  2385 31E8 AC B7 26		 LDY SYSTEM.HEXSTR.RESULT+1
  2385 31EB AD B6 26		 LDA SYSTEM.HEXSTR.RESULT
  2385 31EE 20 A8 25		 JSR @PRINTSTRING
  2386 					@print #$20
  2386 				 LDY# $20\ JSR @PRINT
  2386 31F1 A0 20		 LDY# $20
  2386 31F3 20 79 25		 JSR @PRINT
  2387 31F6 E8				inx
  2388 31F7 A9 00			lda #SMP.NAME-DATAORIGIN
  2389 31F9 18 6D 46 3D			add SMP
  2390 31FD 95 94			sta :STACKORIGIN,x
  2391 31FF A9 00			lda #$00
  2392 3201 6D 47 3D			adc SMP+1
  2393 3204 95 A4			sta :STACKORIGIN+STACKWIDTH,x
  2394 3206 B5 94			lda :STACKORIGIN,x
  2395 3208 B4 A4			ldy :STACKORIGIN+STACKWIDTH,x
  2396 320A 20 82 25			jsr @printPCHAR
  2397 320D CA				dex
  2398
  2399 				; optimize FAIL ('CRT.WHEREY', loadmod_hmem.inc), line = 96
  2400
  2401 320E 20 05 27			jsr CRT.WHEREY
  2402 3211 A9 1A			lda #$1A
  2403 3213 8D A8 38			sta CRT.GOTOXY.X
  2404 3216 AD AB 38			lda CRT.WHEREY.RESULT
  2405 3219 8D A9 38			sta CRT.GOTOXY.Y
  2406 321C 20 E9 26			jsr CRT.GOTOXY
  2407
  2408 				; optimize FAIL ('@print', loadmod_hmem.inc), line = 97
  2409
  2410 					@print #$20
  2410 				 LDY# $20\ JSR @PRINT
  2410 321F A0 20		 LDY# $20
  2410 3221 20 79 25		 JSR @PRINT
  2411 3224 AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2412 322E A0 16			ldy #SMP.LEN-DATAORIGIN
  2413 3230 B1 82			lda (:bp2),y
  2414 3232 85 88			sta SYSTEM.HEXSTR.VALUE
  2415 3234 C8				iny
  2416 3235 B1 82			lda (:bp2),y
  2417 3237 85 89			sta SYSTEM.HEXSTR.VALUE+1
  2418 3239 A9 00			lda #$00
  2419 323B 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  2420 323D 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  2421 323F A9 04			lda #$04
  2422 3241 85 8C			sta SYSTEM.HEXSTR.DIGITS
  2423 3243 20 A7 26			jsr SYSTEM.HEXSTR
  2424 					@printSTRING SYSTEM.HEXSTR.RESULT
  2424 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  2424 3246 AC B7 26		 LDY SYSTEM.HEXSTR.RESULT+1
  2424 3249 AD B6 26		 LDA SYSTEM.HEXSTR.RESULT
  2424 324C 20 A8 25		 JSR @PRINTSTRING
  2425 					@print #$20
  2425 				 LDY# $20\ JSR @PRINT
  2425 324F A0 20		 LDY# $20
  2425 3251 20 79 25		 JSR @PRINT
  2426 3254 E8				inx
  2427 3255 AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2428 325F A0 18			ldy #SMP.FINE_TUNE-DATAORIGIN
  2429 3261 B1 82 95 94			mva (:bp2),y :STACKORIGIN,x
  2430 3265 20 D7 25			jsr @printSHORTINT
  2431 3268 CA				dex
  2432
  2433 				; optimize FAIL ('CRT.WHEREY', loadmod_hmem.inc), line = 98
  2434
  2435 3269 20 05 27			jsr CRT.WHEREY
  2436 326C A9 23			lda #$23
  2437 326E 8D A8 38			sta CRT.GOTOXY.X
  2438 3271 AD AB 38			lda CRT.WHEREY.RESULT
  2439 3274 8D A9 38			sta CRT.GOTOXY.Y
  2440 3277 20 E9 26			jsr CRT.GOTOXY
  2441
  2442 				; optimize OK (loadmod_hmem.inc), line = 99
  2443
  2444 327A AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2445 3284 A0 19			ldy #SMP.VOLUME-DATAORIGIN
  2446 3286 B1 82			lda (:bp2),y
  2447 3288 85 88			sta SYSTEM.HEXSTR.VALUE
  2448 328A A9 00			lda #$00
  2449 328C 85 89			sta SYSTEM.HEXSTR.VALUE+1
  2450 328E 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  2451 3290 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  2452 3292 A9 02			lda #$02
  2453 3294 85 8C			sta SYSTEM.HEXSTR.DIGITS
  2454 3296 20 A7 26			jsr SYSTEM.HEXSTR
  2455 					@printSTRING SYSTEM.HEXSTR.RESULT
  2455 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  2455 3299 AC B7 26		 LDY SYSTEM.HEXSTR.RESULT+1
  2455 329C AD B6 26		 LDA SYSTEM.HEXSTR.RESULT
  2455 329F 20 A8 25		 JSR @PRINTSTRING
  2456 					@print #$20
  2456 				 LDY# $20\ JSR @PRINT
  2456 32A2 A0 20		 LDY# $20
  2456 32A4 20 79 25		 JSR @PRINT
  2457 32A7 AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2458 32B1 A0 1A			ldy #SMP.LOOP_START-DATAORIGIN
  2459 32B3 B1 82			lda (:bp2),y
  2460 32B5 85 88			sta SYSTEM.HEXSTR.VALUE
  2461 32B7 C8				iny
  2462 32B8 B1 82			lda (:bp2),y
  2463 32BA 85 89			sta SYSTEM.HEXSTR.VALUE+1
  2464 32BC A9 00			lda #$00
  2465 32BE 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  2466 32C0 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  2467 32C2 A9 04			lda #$04
  2468 32C4 85 8C			sta SYSTEM.HEXSTR.DIGITS
  2469 32C6 20 A7 26			jsr SYSTEM.HEXSTR
  2470 					@printSTRING SYSTEM.HEXSTR.RESULT
  2470 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  2470 32C9 AC B7 26		 LDY SYSTEM.HEXSTR.RESULT+1
  2470 32CC AD B6 26		 LDA SYSTEM.HEXSTR.RESULT
  2470 32CF 20 A8 25		 JSR @PRINTSTRING
  2471 					@print #$20
  2471 				 LDY# $20\ JSR @PRINT
  2471 32D2 A0 20		 LDY# $20
  2471 32D4 20 79 25		 JSR @PRINT
  2472 32D7 AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2473 32E1 A0 1C			ldy #SMP.LOOP_LEN-DATAORIGIN
  2474 32E3 B1 82			lda (:bp2),y
  2475 32E5 85 88			sta SYSTEM.HEXSTR.VALUE
  2476 32E7 C8				iny
  2477 32E8 B1 82			lda (:bp2),y
  2478 32EA 85 89			sta SYSTEM.HEXSTR.VALUE+1
  2479 32EC A9 00			lda #$00
  2480 32EE 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  2481 32F0 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  2482 32F2 A9 04			lda #$04
  2483 32F4 85 8C			sta SYSTEM.HEXSTR.DIGITS
  2484 32F6 20 A7 26			jsr SYSTEM.HEXSTR
  2485 					@printSTRING SYSTEM.HEXSTR.RESULT
  2485 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  2485 32F9 AC B7 26		 LDY SYSTEM.HEXSTR.RESULT+1
  2485 32FC AD B6 26		 LDA SYSTEM.HEXSTR.RESULT
  2485 32FF 20 A8 25		 JSR @PRINTSTRING
  2486 3302 20 74 25			@printEOL
  2487 3305			l_03C5
  2488
  2489 				; --- ForToDoEpilog
  2490 3305 EE 32 3D			inc I
  2491 3308 F0 03 4C 9F 31		jne l_039E
  2492 330D			l_03AC
  2493
  2494 				; optimize OK (loadmod_hmem.inc), line = 105
  2495
  2496 330D AD D5 3C			lda NUMBER_OF_PATTERNS
  2497 3310 C9 56			cmp #$56
  2498 3312 90 30			jcc l_0420
  2499
  2500 				; optimize FAIL ('@print', loadmod_hmem.inc), line = 106
  2501
  2502 					@print #$9B
  2502 				 LDY# $9B\ JSR @PRINT
  2502 3314 A0 9B		 LDY# $9B
  2502 3316 20 79 25		 JSR @PRINT
  2503 					@printSTRING #CODEORIGIN+$0044
  2503 				 LDY> CODEORIGIN+$0044\ LDA< CODEORIGIN+$0044\ JSR @PRINTSTRING
  2503 3319 A0 20		 LDY> CODEORIGIN+$0044
  2503 331B A9 44		 LDA< CODEORIGIN+$0044
  2503 331D 20 A8 25		 JSR @PRINTSTRING
  2504 3320 AD D5 3C			lda NUMBER_OF_PATTERNS
  2505 3323 20 E3 25			jsr @printBYTE._a
  2506 3326 20 74 25			@printEOL
  2507
  2508 				; optimize FAIL ('@print', loadmod_hmem.inc), line = 107
  2509
  2510 					@printSTRING #CODEORIGIN+$0004
  2510 				 LDY> CODEORIGIN+$0004\ LDA< CODEORIGIN+$0004\ JSR @PRINTSTRING
  2510 3329 A0 20		 LDY> CODEORIGIN+$0004
  2510 332B A9 04		 LDA< CODEORIGIN+$0004
  2510 332D 20 A8 25		 JSR @PRINTSTRING
  2511 3330 A9 55			lda #$55
  2512 3332 20 E3 25			jsr @printBYTE._a
  2513 					@printSTRING #CODEORIGIN+$004F
  2513 				 LDY> CODEORIGIN+$004F\ LDA< CODEORIGIN+$004F\ JSR @PRINTSTRING
  2513 3335 A0 20		 LDY> CODEORIGIN+$004F
  2513 3337 A9 4F		 LDA< CODEORIGIN+$004F
  2513 3339 20 A8 25		 JSR @PRINTSTRING
  2514 333C 20 74 25			@printEOL
  2515 333F A9 00			lda #$00
  2516 3341 4C AB 37			jmp @halt
  2517 3344			l_0420
  2518
  2519 				; optimize FAIL ('HIGHMEM.THIGHMEMORYSTREAM.CREATE', loadmod_hmem.inc), line = 112
  2520
  2521 3344 AD 51 38			lda XMS
  2522 3347 AC 52 38			ldy XMS+1
  2523 334A 20 B2 27			jsr HIGHMEM.THIGHMEMORYSTREAM.CREATE
  2524
  2525 				; optimize OK (loadmod_hmem.inc), line = 114
  2526
  2527 334D A9 00			lda #$00
  2528 334F 85 8C			sta :ecx
  2529 3351 85 8D			sta :ecx+1
  2530 3353 A9 01			lda #$01
  2531 3355 85 8E			sta :ecx+2
  2532 3357 A9 00			lda #$00
  2533 3359 85 8F			sta :ecx+3
  2534 335B AD D6 3C			lda NUMBER_OF_BANKS
  2535 335E 85 84			sta :eax
  2536 3360 A9 00			lda #$00
  2537 3362 85 85			sta :eax+1
  2538 3364 85 86			sta :eax+2
  2539 3366 85 87			sta :eax+3
  2540 3368 20 E8 24			jsr imulECX
  2541 336B AD DF 3C			lda XMS.SIZE+3
  2542 336E C5 87			cmp :eax+3
  2543 3370 D0 13			bne @+
  2544 3372 AD DE 3C			lda XMS.SIZE+2
  2545 3375 C5 86			cmp :eax+2
  2546 3377 D0 0C			bne @+
  2547 3379 AD DD 3C			lda XMS.SIZE+1
  2548 337C C5 85			cmp :eax+1
  2549 337E D0 05			bne @+
  2550 3380 AD DC 3C			lda XMS.SIZE
  2551 3383 C5 84			cmp :eax
  2552 				@
  2553 3385 B0 21			jcs l_0459
  2554
  2555 				; optimize FAIL ('@print', loadmod_hmem.inc), line = 115
  2556
  2557 					@print #$9B
  2557 				 LDY# $9B\ JSR @PRINT
  2557 3387 A0 9B		 LDY# $9B
  2557 3389 20 79 25		 JSR @PRINT
  2558 					@printSTRING #CODEORIGIN+$0061
  2558 				 LDY> CODEORIGIN+$0061\ LDA< CODEORIGIN+$0061\ JSR @PRINTSTRING
  2558 338C A0 20		 LDY> CODEORIGIN+$0061
  2558 338E A9 61		 LDA< CODEORIGIN+$0061
  2558 3390 20 A8 25		 JSR @PRINTSTRING
  2559 3393 AD D6 3C			lda NUMBER_OF_BANKS
  2560 3396 20 E3 25			jsr @printBYTE._a
  2561 					@printSTRING #CODEORIGIN+$0070
  2561 				 LDY> CODEORIGIN+$0070\ LDA< CODEORIGIN+$0070\ JSR @PRINTSTRING
  2561 3399 A0 20		 LDY> CODEORIGIN+$0070
  2561 339B A9 70		 LDA< CODEORIGIN+$0070
  2561 339D 20 A8 25		 JSR @PRINTSTRING
  2562 33A0 20 74 25			@printEOL
  2563 33A3 A9 00			lda #$00
  2564 33A5 4C AB 37			jmp @halt
  2565 33A8			l_0459
  2566
  2567 				; optimize OK (loadmod_hmem.inc), line = 120
  2568
  2569 33A8 A9 00			lda #$00
  2570 33AA 8D 40 3D			sta TEMP
  2571 33AD A9 50			lda #$50
  2572 33AF 8D 41 3D			sta TEMP+1
  2573 33B2 A9 00			lda #$00
  2574 33B4 8D 42 3D			sta TEMP+2
  2575 33B7 8D 43 3D			sta TEMP+3
  2576
  2577 				; optimize OK (loadmod_hmem.inc), line = 122
  2578
  2579 33BA 8D D8 3C			sta XMS.POSITION
  2580 33BD 8D D9 3C			sta XMS.POSITION+1
  2581 33C0 A9 0F			lda #$0F
  2582 33C2 8D DA 3C			sta XMS.POSITION+2
  2583 33C5 A9 00			lda #$00
  2584 33C7 8D DB 3C			sta XMS.POSITION+3
  2585
  2586 				; optimize FAIL ('@print', loadmod_hmem.inc), line = 124
  2587
  2588 					@print #$9B
  2588 				 LDY# $9B\ JSR @PRINT
  2588 33CA A0 9B		 LDY# $9B
  2588 33CC 20 79 25		 JSR @PRINT
  2589 					@printSTRING #CODEORIGIN+$0088
  2589 				 LDY> CODEORIGIN+$0088\ LDA< CODEORIGIN+$0088\ JSR @PRINTSTRING
  2589 33CF A0 20		 LDY> CODEORIGIN+$0088
  2589 33D1 A9 88		 LDA< CODEORIGIN+$0088
  2589 33D3 20 A8 25		 JSR @PRINTSTRING
  2590
  2591 				; optimize FAIL ('CRT.WHEREX', loadmod_hmem.inc), line = 125
  2592
  2593 33D6 20 FE 26			jsr CRT.WHEREX
  2594 33D9 AD AA 38			lda CRT.WHEREX.RESULT
  2595 33DC 8D 35 3D			sta X
  2596
  2597 				; optimize FAIL ('CRT.WHEREY', loadmod_hmem.inc), line = 126
  2598
  2599 33DF 20 05 27			jsr CRT.WHEREY
  2600 33E2 AD AB 38			lda CRT.WHEREY.RESULT
  2601 33E5 8D 36 3D			sta Y
  2602
  2603 				; optimize OK (loadmod_hmem.inc), line = 128
  2604
  2605 33E8 A9 01			lda #$01
  2606 33EA 8D 32 3D			sta I
  2607
  2608 33ED			l_0496
  2609 				; --- ForToDoCondition
  2610 33ED AD 32 3D			lda I
  2611 33F0 CD D5 3C			cmp NUMBER_OF_PATTERNS
  2612 33F3 90 05			scc
  2613 33F5 F0 03 4C 0B 35		jne l_04A4
  2614
  2615 				; optimize OK (loadmod_hmem.inc), line = 130
  2616
  2617 33FA AD 40 3D			lda TEMP
  2618 33FD 8D 48 3D			sta P0
  2619 3400 AD 41 3D			lda TEMP+1
  2620 3403 8D 49 3D			sta P0+1
  2621
  2622 				; optimize OK (loadmod_hmem.inc), line = 131
  2623
  2624 3406 AD 40 3D			lda TEMP
  2625 3409 8D 4A 3D			sta P1
  2626 340C AD 41 3D			lda TEMP+1
  2627 340F 18 69 01			add #$01
  2628 3412 8D 4B 3D			sta P1+1
  2629
  2630 				; optimize OK (loadmod_hmem.inc), line = 132
  2631
  2632 3415 AD 40 3D			lda TEMP
  2633 3418 8D 4C 3D			sta P2
  2634 341B AD 41 3D			lda TEMP+1
  2635 341E 18 69 02			add #$02
  2636 3421 8D 4D 3D			sta P2+1
  2637
  2638 				; optimize OK (loadmod_hmem.inc), line = 134
  2639
  2640 3424 AD 35 3D			lda X
  2641 3427 8D A8 38			sta CRT.GOTOXY.X
  2642 342A AD 36 3D			lda Y
  2643 342D 8D A9 38			sta CRT.GOTOXY.Y
  2644 3430 20 E9 26			jsr CRT.GOTOXY
  2645
  2646 				; optimize FAIL ('@print', loadmod_hmem.inc), line = 135
  2647
  2648 3433 AD 32 3D			lda I
  2649 3436 20 E3 25			jsr @printBYTE._a
  2650 					@print #$2F
  2650 				 LDY# $2F\ JSR @PRINT
  2650 3439 A0 2F		 LDY# $2F
  2650 343B 20 79 25		 JSR @PRINT
  2651 343E AD D5 3C			lda NUMBER_OF_PATTERNS
  2652 3441 20 E3 25			jsr @printBYTE._a
  2653
  2654 				; optimize OK (loadmod_hmem.inc), line = 137
  2655
  2656 3444 A9 00			lda #$00
  2657 3446 8D 33 3D			sta J
  2658
  2659 3449			l_04D8
  2660 				; --- ForToDoCondition
  2661 				; BlockRead
  2662
  2663 				; optimize OK (loadmod_hmem.inc), line = 138
  2664
  2665 3449 AC 6E 37 84 82 AC + 	mwy F :bp2
  2666 3453 A0 06			ldy #s@file.buffer
  2667 3455 AD C3 37			lda BUF
  2668 3458 91 82			sta (:bp2),y
  2669 345A C8				iny
  2670 345B AD C4 37			lda BUF+1
  2671 345E 91 82			sta (:bp2),y
  2672 3460 A0 08			ldy #s@file.nrecord
  2673 3462 A9 04			lda #$04
  2674 3464 91 82			sta (:bp2),y
  2675 3466 C8				iny
  2676 3467 A9 00			lda #$00
  2677 3469 91 82			sta (:bp2),y
  2678
  2679 346B 8A 48			txa:pha
  2680 346D 38				sec
  2681 					@readfile F, #7
  2681 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  2681 346E AC 6F 37		 LDY F+1
  2681 3471 AD 6E 37		 LDA F
  2681 3474 A2 07		 LDX# 7
  2681 3476 20 EA 21		 JSR @READFILE
  2682 3479 68 AA			pla:tax
  2683
  2684 				; optimize FAIL ('CNVPATTERN', loadmod_hmem.inc), line = 140
  2685
  2686 347B 20 24 2D			jsr CNVPATTERN
  2687 347E AD E0 3C			lda CNVPATTERN.RESULT
  2688 3481 8D 3C 3D			sta TMP
  2689 3484 AD E1 3C			lda CNVPATTERN.RESULT+1
  2690 3487 8D 3D 3D			sta TMP+1
  2691 348A AD E2 3C			lda CNVPATTERN.RESULT+2
  2692 348D 8D 3E 3D			sta TMP+2
  2693 3490 AD E3 3C			lda CNVPATTERN.RESULT+3
  2694 3493 8D 3F 3D			sta TMP+3
  2695
  2696 				; optimize OK (loadmod_hmem.inc), line = 142
  2697
  2698 3496 AC 48 3D 84 82 AC + 	mwy P0 :bp2
  2699 34A0 A0 00			ldy #$00
  2700 34A2 AD 3C 3D			lda TMP
  2701 34A5 91 82			sta (:bp2),y
  2702 34A7 EE 48 3D			inc P0
  2703 34AA D0 03			sne
  2704 34AC EE 49 3D			inc P0+1
  2705
  2706 				; optimize OK (loadmod_hmem.inc), line = 143
  2707
  2708 34AF AD 3D 3D			lda TMP+1
  2709 34B2 AC 4B 3D 84 81		mvy P1+1 :bp+1
  2710 34B7 AC 4A 3D			ldy P1
  2711 34BA 91 80			sta (:bp),y
  2712 34BC EE 4A 3D			inc P1
  2713 34BF D0 03			sne
  2714 34C1 EE 4B 3D			inc P1+1
  2715
  2716 				; optimize OK (loadmod_hmem.inc), line = 144
  2717
  2718 34C4 AD 3E 3D			lda TMP+2
  2719 34C7 AC 4D 3D 84 81		mvy P2+1 :bp+1
  2720 34CC AC 4C 3D			ldy P2
  2721 34CF 91 80			sta (:bp),y
  2722 34D1 EE 4C 3D			inc P2
  2723 34D4 D0 03			sne
  2724 34D6 EE 4D 3D			inc P2+1
  2725
  2726 				; --- ForToDoEpilog
  2727 34D9 EE 33 3D			inc J
  2728 34DC F0 03 4C 49 34		jne l_04D8
  2729 34E1			l_04E6
  2730
  2731 				; optimize OK (loadmod_hmem.inc), line = 147
  2732
  2733 34E1 CE 49 3D			dec P0+1
  2734
  2735 				; optimize OK (loadmod_hmem.inc), line = 149
  2736
  2737 34E4 AD 48 3D			lda P0
  2738 34E7 8D BD 38			sta HIGHMEM.THIGHMEMORYSTREAM.WRITEBUFFER.BUFFER
  2739 34EA AD 49 3D			lda P0+1
  2740 34ED 8D BE 38			sta HIGHMEM.THIGHMEMORYSTREAM.WRITEBUFFER.BUFFER+1
  2741 34F0 A9 00			lda #$00
  2742 34F2 8D BF 38			sta HIGHMEM.THIGHMEMORYSTREAM.WRITEBUFFER.COUNT
  2743 34F5 A9 03			lda #$03
  2744 34F7 8D C0 38			sta HIGHMEM.THIGHMEMORYSTREAM.WRITEBUFFER.COUNT+1
  2745 34FA AD 51 38			lda XMS
  2746 34FD AC 52 38			ldy XMS+1
  2747 3500 20 26 28			jsr HIGHMEM.THIGHMEMORYSTREAM.WRITEBUFFER
  2748
  2749 				; --- ForToDoEpilog
  2750 3503 EE 32 3D			inc I
  2751 3506 F0 03 4C ED 33		jne l_0496
  2752 350B			l_04A4
  2753
  2754 				; optimize FAIL ('@print', loadmod_hmem.inc), line = 154
  2755
  2756 350B 20 74 25			@printEOL
  2757
  2758 				; optimize FAIL ('@print', loadmod_hmem.inc), line = 155
  2759
  2760 					@printSTRING #CODEORIGIN+$0098
  2760 				 LDY> CODEORIGIN+$0098\ LDA< CODEORIGIN+$0098\ JSR @PRINTSTRING
  2760 350E A0 20		 LDY> CODEORIGIN+$0098
  2760 3510 A9 98		 LDA< CODEORIGIN+$0098
  2760 3512 20 A8 25		 JSR @PRINTSTRING
  2761
  2762 				; optimize FAIL ('CRT.WHEREX', loadmod_hmem.inc), line = 156
  2763
  2764 3515 20 FE 26			jsr CRT.WHEREX
  2765 3518 AD AA 38			lda CRT.WHEREX.RESULT
  2766 351B 8D 35 3D			sta X
  2767
  2768 				; optimize FAIL ('CRT.WHEREY', loadmod_hmem.inc), line = 157
  2769
  2770 351E 20 05 27			jsr CRT.WHEREY
  2771 3521 AD AB 38			lda CRT.WHEREY.RESULT
  2772 3524 8D 36 3D			sta Y
  2773
  2774 				; optimize OK (loadmod_hmem.inc), line = 159
  2775
  2776 3527 A9 00			lda #$00
  2777 3529 8D 38 3D			sta OFFSET
  2778 352C 8D 39 3D			sta OFFSET+1
  2779 352F A9 10			lda #$10
  2780 3531 8D 3A 3D			sta OFFSET+2
  2781 3534 A9 00			lda #$00
  2782 3536 8D 3B 3D			sta OFFSET+3
  2783
  2784 				; optimize OK (loadmod_hmem.inc), line = 160
  2785
  2786 3539 A9 01			lda #$01
  2787 353B 8D 37 3D			sta NUM
  2788
  2789 				; optimize OK (loadmod_hmem.inc), line = 162
  2790
  2791 353E A9 00			lda #$00
  2792 3540 8D 32 3D			sta I
  2793
  2794 3543			l_053E
  2795 				; --- ForToDoCondition
  2796 3543 AC 32 3D			ldy I
  2797 3546 C0 1F			cpy #$1F
  2798 3548 90 03 4C 5A 37		jcs l_054C
  2799
  2800 				; optimize OK (loadmod_hmem.inc), line = 164
  2801
  2802 354D A9 00			lda #$00
  2803 354F 99 80 06			sta adr.TSTRL,y
  2804
  2805 				; optimize OK (loadmod_hmem.inc), line = 165
  2806
  2807 3552 A9 DE			lda #$DE
  2808 3554 99 A0 06			sta adr.TSTRH,y
  2809
  2810 				; optimize OK (loadmod_hmem.inc), line = 166
  2811
  2812 3557 A9 00			lda #$00
  2813 3559 99 C0 06			sta adr.TREPL,y
  2814
  2815 				; optimize OK (loadmod_hmem.inc), line = 167
  2816
  2817 355C A9 DE			lda #$DE
  2818 355E 99 E0 06			sta adr.TREPH,y
  2819
  2820 				; optimize OK (loadmod_hmem.inc), line = 169
  2821
  2822 3561 99 E0 05			sta adr.TIVOL,y
  2823
  2824 				; optimize OK (loadmod_hmem.inc), line = 171
  2825
  2826 3564 AD 32 3D			lda I
  2827 3567 0A				asl @
  2828 3568 A8				tay
  2829 3569 B9 94 3C			lda adr.SAMPLE,y
  2830 356C 8D 46 3D			sta SMP
  2831 356F 85 82			sta :bp2
  2832 3571 B9 95 3C			lda adr.SAMPLE+1,y
  2833 3574 8D 47 3D			sta SMP+1
  2834 3577 85 83			sta :bp2+1
  2835 				; optimize OK (loadmod_hmem.inc), line = 173
  2836 3579 A0 16			ldy #SMP.LEN-DATAORIGIN
  2837 357B B1 82			lda (:bp2),y
  2838 357D 8D 44 3D			sta LEN
  2839 3580 C8				iny
  2840 3581 B1 82			lda (:bp2),y
  2841 3583 8D 45 3D			sta LEN+1
  2842
  2843 				; optimize OK (loadmod_hmem.inc), line = 175
  2844
  2845 3586 0D 44 3D			ora LEN
  2846 3589 D0 03 4C 41 37		jeq l_058D
  2847
  2848 				; optimize OK (loadmod_hmem.inc), line = 177
  2849
  2850 358E AD 35 3D			lda X
  2851 3591 8D A8 38			sta CRT.GOTOXY.X
  2852 3594 AD 36 3D			lda Y
  2853 3597 8D A9 38			sta CRT.GOTOXY.Y
  2854 359A 20 E9 26			jsr CRT.GOTOXY
  2855
  2856 				; optimize FAIL ('@print', loadmod_hmem.inc), line = 178
  2857
  2858 359D AD 37 3D			lda NUM
  2859 35A0 20 E3 25			jsr @printBYTE._a
  2860 					@print #$2F
  2860 				 LDY# $2F\ JSR @PRINT
  2860 35A3 A0 2F		 LDY# $2F
  2860 35A5 20 79 25		 JSR @PRINT
  2861 35A8 AD D7 3C			lda NUMBER_OF_SAMPLES
  2862 35AB 20 E3 25			jsr @printBYTE._a
  2863
  2864 				; optimize OK (loadmod_hmem.inc), line = 180
  2865
  2866 35AE A9 00			lda #$00
  2867 35B0 38 ED 44 3D			sub LEN
  2868 35B4 85 9D			sta :STACKORIGIN+9
  2869 35B6 A9 00			lda #$00
  2870 35B8 ED 45 3D			sbc LEN+1
  2871 35BB 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2872 35BD A9 01			lda #$01
  2873 35BF E9 00			sbc #$00
  2874 35C1 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
  2875 35C3 A9 00			lda #$00
  2876 35C5 E9 00			sbc #$00
  2877 35C7 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
  2878 35C9 A5 9D			lda :STACKORIGIN+9
  2879 35CB 18 6D 38 3D			add OFFSET
  2880 35CF 8D 40 3D			sta TEMP
  2881 35D2 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2882 35D4 6D 39 3D			adc OFFSET+1
  2883 35D7 8D 41 3D			sta TEMP+1
  2884 35DA A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
  2885 35DC 6D 3A 3D			adc OFFSET+2
  2886 35DF 8D 42 3D			sta TEMP+2
  2887 35E2 A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
  2888 35E4 6D 3B 3D			adc OFFSET+3
  2889 35E7 8D 43 3D			sta TEMP+3
  2890
  2891 				; optimize OK (loadmod_hmem.inc), line = 182
  2892
  2893 35EA AD 40 3D			lda TEMP
  2894 35ED 8D D8 3C			sta XMS.POSITION
  2895 35F0 AD 41 3D			lda TEMP+1
  2896 35F3 8D D9 3C			sta XMS.POSITION+1
  2897 35F6 AD 42 3D			lda TEMP+2
  2898 35F9 8D DA 3C			sta XMS.POSITION+2
  2899 35FC AD 43 3D			lda TEMP+3
  2900 35FF 8D DB 3C			sta XMS.POSITION+3
  2901
  2902 				; optimize OK (loadmod_hmem.inc), line = 184
  2903
  2904 3602 AC 32 3D			ldy I
  2905 3605 AD 40 3D			lda TEMP
  2906 3608 99 80 06			sta adr.TSTRL,y
  2907
  2908 				; optimize OK (loadmod_hmem.inc), line = 185
  2909
  2910 360B AD 41 3D			lda TEMP+1
  2911 360E 99 A0 06			sta adr.TSTRH,y
  2912
  2913 				; optimize OK (loadmod_hmem.inc), line = 187
  2914
  2915 3611 AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2916 361B A0 1D			ldy #SMP.LOOP_LEN-DATAORIGIN+$01
  2917 361D B1 82			lda (:bp2),y
  2918 361F C9 00			cmp #$00
  2919 3621 D0 05			bne @+
  2920 3623 88				dey
  2921 3624 B1 82			lda (:bp2),y
  2922 3626 C9 08			cmp #$08
  2923 				@
  2924 3628 B0 13			jcs l_05D5
  2925
  2926 				; optimize OK (loadmod_hmem.inc), line = 188
  2927
  2928 362A A9 FF			lda #$FF
  2929 362C 8D 40 3D			sta TEMP
  2930 362F 8D 41 3D			sta TEMP+1
  2931 3632 A9 00			lda #$00
  2932 3634 8D 42 3D			sta TEMP+2
  2933 3637 8D 43 3D			sta TEMP+3
  2934 363A 4C 6B 36			jmp l_05E3
  2935 363D			l_05D5
  2936
  2937 				; optimize OK (loadmod_hmem.inc), line = 190
  2938
  2939 363D AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2940 3647 A0 1A			ldy #SMP.LOOP_START-DATAORIGIN
  2941 3649 AD 40 3D			lda TEMP
  2942 364C 18 71 82			add (:bp2),y
  2943 364F C8				iny
  2944 3650 8D 40 3D			sta TEMP
  2945 3653 AD 41 3D			lda TEMP+1
  2946 3656 71 82			adc (:bp2),y
  2947 3658 8D 41 3D			sta TEMP+1
  2948 365B AD 42 3D			lda TEMP+2
  2949 365E 69 00			adc #$00
  2950 3660 8D 42 3D			sta TEMP+2
  2951 3663 AD 43 3D			lda TEMP+3
  2952 3666 69 00			adc #$00
  2953 3668 8D 43 3D			sta TEMP+3
  2954 366B			l_05E3
  2955
  2956 				; optimize OK (loadmod_hmem.inc), line = 192
  2957
  2958 366B AC 32 3D			ldy I
  2959 366E AD 40 3D			lda TEMP
  2960 3671 99 C0 06			sta adr.TREPL,y
  2961
  2962 				; optimize OK (loadmod_hmem.inc), line = 193
  2963
  2964 3674 AD 41 3D			lda TEMP+1
  2965 3677 99 E0 06			sta adr.TREPH,y
  2966
  2967 				; optimize OK (loadmod_hmem.inc), line = 195
  2968
  2969 367A AC 46 3D 84 82 AC + 	mwy SMP :bp2
  2970 3684 A0 19			ldy #SMP.VOLUME-DATAORIGIN
  2971 3686 B1 82			lda (:bp2),y
  2972 3688 4A				lsr @
  2973 3689 18 69 DE			add #$DE
  2974 368C AC 32 3D			ldy I
  2975 368F 99 E0 05			sta adr.TIVOL,y
  2976
  2977 				; --- WhileProlog
  2978 3692 4C 33 37			jmp l_0606
  2979 3695			l_0607
  2980
  2981 				; optimize OK (loadmod_hmem.inc), line = 199
  2982
  2983 3695 AD 45 3D			lda LEN+1
  2984 3698 D0 07			bne @+
  2985 369A AD 44 3D			lda LEN
  2986 369D C9 E0			cmp #$E0
  2987 369F 90 13			jcc l_0618
  2988 				@
  2989
  2990 				; optimize OK (loadmod_hmem.inc), line = 200
  2991
  2992 36A1 A9 E0			lda #$E0
  2993 36A3 8D 40 3D			sta TEMP
  2994 36A6 A9 00			lda #$00
  2995 36A8 8D 41 3D			sta TEMP+1
  2996 36AB 8D 42 3D			sta TEMP+2
  2997 36AE 8D 43 3D			sta TEMP+3
  2998 36B1 4C C8 36			jmp l_0626
  2999 36B4			l_0618
  3000
  3001 				; optimize OK (loadmod_hmem.inc), line = 202
  3002
  3003 36B4 AD 44 3D			lda LEN
  3004 36B7 8D 40 3D			sta TEMP
  3005 36BA AD 45 3D			lda LEN+1
  3006 36BD 8D 41 3D			sta TEMP+1
  3007 36C0 A9 00			lda #$00
  3008 36C2 8D 42 3D			sta TEMP+2
  3009 36C5 8D 43 3D			sta TEMP+3
  3010 36C8			l_0626
  3011 				; BlockRead
  3012
  3013 				; optimize OK (loadmod_hmem.inc), line = 204
  3014
  3015 36C8 AC 6E 37 84 82 AC + 	mwy F :bp2
  3016 36D2 A0 06			ldy #s@file.buffer
  3017 36D4 AD C3 37			lda BUF
  3018 36D7 91 82			sta (:bp2),y
  3019 36D9 C8				iny
  3020 36DA AD C4 37			lda BUF+1
  3021 36DD 91 82			sta (:bp2),y
  3022 36DF A0 08			ldy #s@file.nrecord
  3023 36E1 AD 40 3D			lda TEMP
  3024 36E4 91 82			sta (:bp2),y
  3025 36E6 C8				iny
  3026 36E7 AD 41 3D			lda TEMP+1
  3027 36EA 91 82			sta (:bp2),y
  3028
  3029 36EC 8A 48			txa:pha
  3030 36EE 38				sec
  3031 					@readfile F, #7
  3031 				 LDY F+1\ LDA F\ LDX# 7\ JSR @READFILE
  3031 36EF AC 6F 37		 LDY F+1
  3031 36F2 AD 6E 37		 LDA F
  3031 36F5 A2 07		 LDX# 7
  3031 36F7 20 EA 21		 JSR @READFILE
  3032 36FA 68 AA			pla:tax
  3033
  3034 				; optimize FAIL ('NORMALIZEBUF', loadmod_hmem.inc), line = 205
  3035
  3036 36FC 20 ED 2D			jsr NORMALIZEBUF
  3037
  3038 				; optimize OK (loadmod_hmem.inc), line = 206
  3039
  3040 36FF AD C3 37			lda BUF
  3041 3702 8D BD 38			sta HIGHMEM.THIGHMEMORYSTREAM.WRITEBUFFER.BUFFER
  3042 3705 AD C4 37			lda BUF+1
  3043 3708 8D BE 38			sta HIGHMEM.THIGHMEMORYSTREAM.WRITEBUFFER.BUFFER+1
  3044 370B AD 40 3D			lda TEMP
  3045 370E 8D BF 38			sta HIGHMEM.THIGHMEMORYSTREAM.WRITEBUFFER.COUNT
  3046 3711 AD 41 3D			lda TEMP+1
  3047 3714 8D C0 38			sta HIGHMEM.THIGHMEMORYSTREAM.WRITEBUFFER.COUNT+1
  3048 3717 AD 51 38			lda XMS
  3049 371A AC 52 38			ldy XMS+1
  3050 371D 20 26 28			jsr HIGHMEM.THIGHMEMORYSTREAM.WRITEBUFFER
  3051
  3052 				; optimize OK (loadmod_hmem.inc), line = 208
  3053
  3054 3720 AD 44 3D			lda LEN
  3055 3723 38 ED 40 3D			sub TEMP
  3056 3727 8D 44 3D			sta LEN
  3057 372A AD 45 3D			lda LEN+1
  3058 372D ED 41 3D			sbc TEMP+1
  3059 3730 8D 45 3D			sta LEN+1
  3060 3733			l_0606
  3061
  3062 				; optimize OK (loadmod_hmem.inc), line = 197
  3063
  3064 3733 AD 45 3D			lda LEN+1
  3065 3736 0D 44 3D			ora LEN
  3066 3739 F0 03 4C 95 36		jne l_0607
  3067
  3068 				; optimize FAIL (0, loadmod_hmem.inc), line = 212
  3069
  3070 373E EE 37 3D			inc NUM
  3071 3741			l_058D
  3072
  3073 				; optimize OK (loadmod_hmem.inc), line = 216
  3074
  3075 3741 AD 3A 3D			lda OFFSET+2
  3076 3744 18 69 01			add #$01
  3077 3747 8D 3A 3D			sta OFFSET+2
  3078 374A AD 3B 3D			lda OFFSET+3
  3079 374D 69 00			adc #$00
  3080 374F 8D 3B 3D			sta OFFSET+3
  3081
  3082 				; --- ForToDoEpilog
  3083 3752 EE 32 3D			inc I
  3084 3755 F0 03 4C 43 35		jne l_053E
  3085 375A			l_054C
  3086
  3087 				; optimize FAIL ('@print', loadmod_hmem.inc), line = 220
  3088
  3089 375A 20 74 25			@printEOL
  3090 				; CloseFile
  3091
  3092 375D 8A 48			txa:pha
  3093 375F 38				sec
  3094 					@closefile F
  3094 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  3094 3760 AC 6F 37		 LDY F+1
  3094 3763 AD 6E 37		 LDA F
  3094 3766 20 BD 21		 JSR @CLOSEFILE
  3095 3769 68 AA			pla:tax
  3096
  3097 				; ------------------------------------------------------------
  3098
  3099 = 3CE4			adr.FNAM	= [DATAORIGIN+$0490] .array [33]
  3100 376B			.var FNAM	= adr.FNAM .word
  3101 376B			.var F	= DATAORIGIN+$04B1 .word
  3102 = 3D11			adr.NAME	= [DATAORIGIN+$04BD] .array [33]
  3103 376B			.var NAME	= adr.NAME .word
  3104 = 3D32			I	= DATAORIGIN+$04DE
  3105 = 3D33			J	= DATAORIGIN+$04DF
  3106 = 3D34			A	= DATAORIGIN+$04E0
  3107 = 3D35			X	= DATAORIGIN+$04E1
  3108 = 3D36			Y	= DATAORIGIN+$04E2
  3109 = 3D37			NUM	= DATAORIGIN+$04E3
  3110 = 3D38			OFFSET	= DATAORIGIN+$04E4
  3111 = 3D3C			TMP	= DATAORIGIN+$04E8
  3112 = 3D40			TEMP	= DATAORIGIN+$04EC
  3113 = 3D44			LEN	= DATAORIGIN+$04F0
  3114 = 3D46			SMP	= DATAORIGIN+$04F2
  3115 = 3854			SMP.NAME	= DATAORIGIN+$0000
  3116 = 386A			SMP.LEN	= DATAORIGIN+$0016
  3117 = 386C			SMP.FINE_TUNE	= DATAORIGIN+$0018
  3118 = 386D			SMP.VOLUME	= DATAORIGIN+$0019
  3119 = 386E			SMP.LOOP_START	= DATAORIGIN+$001A
  3120 = 3870			SMP.LOOP_LEN	= DATAORIGIN+$001C
  3121 = 3D48			P0	= DATAORIGIN+$04F4
  3122 = 3D4A			P1	= DATAORIGIN+$04F6
  3123 = 3D4C			P2	= DATAORIGIN+$04F8
  3124 = 3D4E			adr.HEADER	= [DATAORIGIN+$04FA] .array [5]
  3125 376B			.var HEADER	= adr.HEADER .word
  3126
  3127 = 376C			@VarData	= FNAM
  3128 = 0071			@VarDataSize	= 113
  3129
  3130 376B			@exit
  3131 					.ifdef @new
  3132 					lda <@VarData
  3133 					sta :ztmp
  3134 					lda >@VarData
  3135 					ldy #@VarDataSize-1
  3136 					jmp @FreeMem
  3137 					els
  3138 376B 60				rts						; ret
  3139 					eif
  3140 = 376C E4 3C		FNAM
  3140 = 376E 05 3D		F
  3140 = 3770 11 3D		NAME
  3140 = 3772 4E 3D		HEADER
  3140 				.endl
  3141 3774			l_00CE
  3142
  3143 				; optimize OK (modplay5.pas), line = 786
  3144
  3145 3774 A9 00			lda #$00
  3146 3776 20 0C 27			jsr CRT.TEXTMODE
  3147
  3148 				; optimize FAIL ('@print', modplay5.pas), line = 788
  3149
  3150 					@printSTRING #CODEORIGIN+$00A7
  3150 				 LDY> CODEORIGIN+$00A7\ LDA< CODEORIGIN+$00A7\ JSR @PRINTSTRING
  3150 3779 A0 20		 LDY> CODEORIGIN+$00A7
  3150 377B A9 A7		 LDA< CODEORIGIN+$00A7
  3150 377D 20 A8 25		 JSR @PRINTSTRING
  3151 3780 20 74 25			@printEOL
  3152
  3153 				; optimize FAIL ('@print', modplay5.pas), line = 789
  3154
  3155 3783 20 74 25			@printEOL
  3156
  3157 				; optimize FAIL ('SYSTEM.PARAMCOUNT', modplay5.pas), line = 792
  3158
  3159 3786 20 B8 26			jsr SYSTEM.PARAMCOUNT
  3160 3789 A9 00			lda #$00
  3161 378B CD 80 38			cmp SYSTEM.PARAMCOUNT.RESULT
  3162 378E B0 16			jcs l_0667
  3163 				@
  3164
  3165 				; optimize OK (modplay5.pas), line = 794
  3166
  3167 3790 A9 01			lda #$01
  3168 3792 20 C1 26			jsr SYSTEM.PARAMSTR
  3169 3795 E8				inx
  3170 3796 AD D6 26 95 94		mva SYSTEM.PARAMSTR.RESULT :STACKORIGIN,x
  3171 379B AD D7 26 95 A4		mva SYSTEM.PARAMSTR.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  3172 37A0 20 CD 2D			jsr LOADMOD
  3173
  3174 				; optimize FAIL ('PLAY', modplay5.pas), line = 803
  3175
  3176 37A3 20 C2 28			jsr PLAY
  3177 37A6			l_0667
  3178 37A6 A9 00			lda #$00
  3179 37A8 4C AB 37			jmp @halt
  3180
  3181 				; ------------------------------------------------------------
  3182
  3183 = D700			COVOX	= $D700
  3184 = 5000			PATTERN_TEMP	= $5000
  3185 = 0055			PATTERN_LIMIT	= $55
  3186 = D900			ZPAGE	= $D900
  3187 = DC00			EFFECT	= $DC00
  3188 = DD00			TADCL	= $DD00
  3189 = DD30			TADCH	= $DD30
  3190 = DE00			VOLUME	= $DE00
  3191 = 010000			SAMPLE_LEN	= $10000
  3192 = 20C7			adr.KOD	= CODEORIGIN+$00C7
  3193 37AB			.var KOD	= adr.KOD .word
  3194 = 0500			adr.BUF	= $0500
  3195 37AB			.var BUF	= adr.BUF .word
  3196 = 05E0			adr.TIVOL	= $05E0
  3197 37AB			.var TIVOL	= adr.TIVOL .word
  3198 = 0600			adr.ORDER	= $0600
  3199 37AB			.var ORDER	= adr.ORDER .word
  3200 = 0680			adr.TSTRL	= $0680
  3201 37AB			.var TSTRL	= adr.TSTRL .word
  3202 = 06A0			adr.TSTRH	= $06A0
  3203 37AB			.var TSTRH	= adr.TSTRH .word
  3204 = 06C0			adr.TREPL	= $06C0
  3205 37AB			.var TREPL	= adr.TREPL .word
  3206 = 06E0			adr.TREPH	= $06E0
  3207 37AB			.var TREPH	= adr.TREPH .word
  3208 = 38DD			adr.MODNAME	= [DATAORIGIN+$0089] .array [21]
  3209 37AB			.var MODNAME	= adr.MODNAME .word
  3210 = 38F2			adr.SAMPL_0	= DATAORIGIN+$009E	; [30] RECORD
  3211 37AB			.var SAMPL_0	= adr.SAMPL_0 .word
  3212 = 38F2			adr.SAMPL_0.NAME	= [DATAORIGIN+$009E] .array [22]
  3213 37AB			.var SAMPL_0.NAME	= adr.SAMPL_0.NAME .word
  3214 = 3908			SAMPL_0.LEN	= DATAORIGIN+$00B4
  3215 = 390A			SAMPL_0.FINE_TUNE	= DATAORIGIN+$00B6
  3216 = 390B			SAMPL_0.VOLUME	= DATAORIGIN+$00B7
  3217 = 390C			SAMPL_0.LOOP_START	= DATAORIGIN+$00B8
  3218 = 390E			SAMPL_0.LOOP_LEN	= DATAORIGIN+$00BA
  3219 = 3910			adr.SAMPL_1	= DATAORIGIN+$00BC	; [30] RECORD
  3220 37AB			.var SAMPL_1	= adr.SAMPL_1 .word
  3221 = 3910			adr.SAMPL_1.NAME	= [DATAORIGIN+$00BC] .array [22]
  3222 37AB			.var SAMPL_1.NAME	= adr.SAMPL_1.NAME .word
  3223 = 3926			SAMPL_1.LEN	= DATAORIGIN+$00D2
  3224 = 3928			SAMPL_1.FINE_TUNE	= DATAORIGIN+$00D4
  3225 = 3929			SAMPL_1.VOLUME	= DATAORIGIN+$00D5
  3226 = 392A			SAMPL_1.LOOP_START	= DATAORIGIN+$00D6
  3227 = 392C			SAMPL_1.LOOP_LEN	= DATAORIGIN+$00D8
  3228 = 392E			adr.SAMPL_2	= DATAORIGIN+$00DA	; [30] RECORD
  3229 37AB			.var SAMPL_2	= adr.SAMPL_2 .word
  3230 = 392E			adr.SAMPL_2.NAME	= [DATAORIGIN+$00DA] .array [22]
  3231 37AB			.var SAMPL_2.NAME	= adr.SAMPL_2.NAME .word
  3232 = 3944			SAMPL_2.LEN	= DATAORIGIN+$00F0
  3233 = 3946			SAMPL_2.FINE_TUNE	= DATAORIGIN+$00F2
  3234 = 3947			SAMPL_2.VOLUME	= DATAORIGIN+$00F3
  3235 = 3948			SAMPL_2.LOOP_START	= DATAORIGIN+$00F4
  3236 = 394A			SAMPL_2.LOOP_LEN	= DATAORIGIN+$00F6
  3237 = 394C			adr.SAMPL_3	= DATAORIGIN+$00F8	; [30] RECORD
  3238 37AB			.var SAMPL_3	= adr.SAMPL_3 .word
  3239 = 394C			adr.SAMPL_3.NAME	= [DATAORIGIN+$00F8] .array [22]
  3240 37AB			.var SAMPL_3.NAME	= adr.SAMPL_3.NAME .word
  3241 = 3962			SAMPL_3.LEN	= DATAORIGIN+$010E
  3242 = 3964			SAMPL_3.FINE_TUNE	= DATAORIGIN+$0110
  3243 = 3965			SAMPL_3.VOLUME	= DATAORIGIN+$0111
  3244 = 3966			SAMPL_3.LOOP_START	= DATAORIGIN+$0112
  3245 = 3968			SAMPL_3.LOOP_LEN	= DATAORIGIN+$0114
  3246 = 396A			adr.SAMPL_4	= DATAORIGIN+$0116	; [30] RECORD
  3247 37AB			.var SAMPL_4	= adr.SAMPL_4 .word
  3248 = 396A			adr.SAMPL_4.NAME	= [DATAORIGIN+$0116] .array [22]
  3249 37AB			.var SAMPL_4.NAME	= adr.SAMPL_4.NAME .word
  3250 = 3980			SAMPL_4.LEN	= DATAORIGIN+$012C
  3251 = 3982			SAMPL_4.FINE_TUNE	= DATAORIGIN+$012E
  3252 = 3983			SAMPL_4.VOLUME	= DATAORIGIN+$012F
  3253 = 3984			SAMPL_4.LOOP_START	= DATAORIGIN+$0130
  3254 = 3986			SAMPL_4.LOOP_LEN	= DATAORIGIN+$0132
  3255 = 3988			adr.SAMPL_5	= DATAORIGIN+$0134	; [30] RECORD
  3256 37AB			.var SAMPL_5	= adr.SAMPL_5 .word
  3257 = 3988			adr.SAMPL_5.NAME	= [DATAORIGIN+$0134] .array [22]
  3258 37AB			.var SAMPL_5.NAME	= adr.SAMPL_5.NAME .word
  3259 = 399E			SAMPL_5.LEN	= DATAORIGIN+$014A
  3260 = 39A0			SAMPL_5.FINE_TUNE	= DATAORIGIN+$014C
  3261 = 39A1			SAMPL_5.VOLUME	= DATAORIGIN+$014D
  3262 = 39A2			SAMPL_5.LOOP_START	= DATAORIGIN+$014E
  3263 = 39A4			SAMPL_5.LOOP_LEN	= DATAORIGIN+$0150
  3264 = 39A6			adr.SAMPL_6	= DATAORIGIN+$0152	; [30] RECORD
  3265 37AB			.var SAMPL_6	= adr.SAMPL_6 .word
  3266 = 39A6			adr.SAMPL_6.NAME	= [DATAORIGIN+$0152] .array [22]
  3267 37AB			.var SAMPL_6.NAME	= adr.SAMPL_6.NAME .word
  3268 = 39BC			SAMPL_6.LEN	= DATAORIGIN+$0168
  3269 = 39BE			SAMPL_6.FINE_TUNE	= DATAORIGIN+$016A
  3270 = 39BF			SAMPL_6.VOLUME	= DATAORIGIN+$016B
  3271 = 39C0			SAMPL_6.LOOP_START	= DATAORIGIN+$016C
  3272 = 39C2			SAMPL_6.LOOP_LEN	= DATAORIGIN+$016E
  3273 = 39C4			adr.SAMPL_7	= DATAORIGIN+$0170	; [30] RECORD
  3274 37AB			.var SAMPL_7	= adr.SAMPL_7 .word
  3275 = 39C4			adr.SAMPL_7.NAME	= [DATAORIGIN+$0170] .array [22]
  3276 37AB			.var SAMPL_7.NAME	= adr.SAMPL_7.NAME .word
  3277 = 39DA			SAMPL_7.LEN	= DATAORIGIN+$0186
  3278 = 39DC			SAMPL_7.FINE_TUNE	= DATAORIGIN+$0188
  3279 = 39DD			SAMPL_7.VOLUME	= DATAORIGIN+$0189
  3280 = 39DE			SAMPL_7.LOOP_START	= DATAORIGIN+$018A
  3281 = 39E0			SAMPL_7.LOOP_LEN	= DATAORIGIN+$018C
  3282 = 39E2			adr.SAMPL_8	= DATAORIGIN+$018E	; [30] RECORD
  3283 37AB			.var SAMPL_8	= adr.SAMPL_8 .word
  3284 = 39E2			adr.SAMPL_8.NAME	= [DATAORIGIN+$018E] .array [22]
  3285 37AB			.var SAMPL_8.NAME	= adr.SAMPL_8.NAME .word
  3286 = 39F8			SAMPL_8.LEN	= DATAORIGIN+$01A4
  3287 = 39FA			SAMPL_8.FINE_TUNE	= DATAORIGIN+$01A6
  3288 = 39FB			SAMPL_8.VOLUME	= DATAORIGIN+$01A7
  3289 = 39FC			SAMPL_8.LOOP_START	= DATAORIGIN+$01A8
  3290 = 39FE			SAMPL_8.LOOP_LEN	= DATAORIGIN+$01AA
  3291 = 3A00			adr.SAMPL_9	= DATAORIGIN+$01AC	; [30] RECORD
  3292 37AB			.var SAMPL_9	= adr.SAMPL_9 .word
  3293 = 3A00			adr.SAMPL_9.NAME	= [DATAORIGIN+$01AC] .array [22]
  3294 37AB			.var SAMPL_9.NAME	= adr.SAMPL_9.NAME .word
  3295 = 3A16			SAMPL_9.LEN	= DATAORIGIN+$01C2
  3296 = 3A18			SAMPL_9.FINE_TUNE	= DATAORIGIN+$01C4
  3297 = 3A19			SAMPL_9.VOLUME	= DATAORIGIN+$01C5
  3298 = 3A1A			SAMPL_9.LOOP_START	= DATAORIGIN+$01C6
  3299 = 3A1C			SAMPL_9.LOOP_LEN	= DATAORIGIN+$01C8
  3300 = 3A1E			adr.SAMPL_10	= DATAORIGIN+$01CA	; [30] RECORD
  3301 37AB			.var SAMPL_10	= adr.SAMPL_10 .word
  3302 = 3A1E			adr.SAMPL_10.NAME	= [DATAORIGIN+$01CA] .array [22]
  3303 37AB			.var SAMPL_10.NAME	= adr.SAMPL_10.NAME .word
  3304 = 3A34			SAMPL_10.LEN	= DATAORIGIN+$01E0
  3305 = 3A36			SAMPL_10.FINE_TUNE	= DATAORIGIN+$01E2
  3306 = 3A37			SAMPL_10.VOLUME	= DATAORIGIN+$01E3
  3307 = 3A38			SAMPL_10.LOOP_START	= DATAORIGIN+$01E4
  3308 = 3A3A			SAMPL_10.LOOP_LEN	= DATAORIGIN+$01E6
  3309 = 3A3C			adr.SAMPL_11	= DATAORIGIN+$01E8	; [30] RECORD
  3310 37AB			.var SAMPL_11	= adr.SAMPL_11 .word
  3311 = 3A3C			adr.SAMPL_11.NAME	= [DATAORIGIN+$01E8] .array [22]
  3312 37AB			.var SAMPL_11.NAME	= adr.SAMPL_11.NAME .word
  3313 = 3A52			SAMPL_11.LEN	= DATAORIGIN+$01FE
  3314 = 3A54			SAMPL_11.FINE_TUNE	= DATAORIGIN+$0200
  3315 = 3A55			SAMPL_11.VOLUME	= DATAORIGIN+$0201
  3316 = 3A56			SAMPL_11.LOOP_START	= DATAORIGIN+$0202
  3317 = 3A58			SAMPL_11.LOOP_LEN	= DATAORIGIN+$0204
  3318 = 3A5A			adr.SAMPL_12	= DATAORIGIN+$0206	; [30] RECORD
  3319 37AB			.var SAMPL_12	= adr.SAMPL_12 .word
  3320 = 3A5A			adr.SAMPL_12.NAME	= [DATAORIGIN+$0206] .array [22]
  3321 37AB			.var SAMPL_12.NAME	= adr.SAMPL_12.NAME .word
  3322 = 3A70			SAMPL_12.LEN	= DATAORIGIN+$021C
  3323 = 3A72			SAMPL_12.FINE_TUNE	= DATAORIGIN+$021E
  3324 = 3A73			SAMPL_12.VOLUME	= DATAORIGIN+$021F
  3325 = 3A74			SAMPL_12.LOOP_START	= DATAORIGIN+$0220
  3326 = 3A76			SAMPL_12.LOOP_LEN	= DATAORIGIN+$0222
  3327 = 3A78			adr.SAMPL_13	= DATAORIGIN+$0224	; [30] RECORD
  3328 37AB			.var SAMPL_13	= adr.SAMPL_13 .word
  3329 = 3A78			adr.SAMPL_13.NAME	= [DATAORIGIN+$0224] .array [22]
  3330 37AB			.var SAMPL_13.NAME	= adr.SAMPL_13.NAME .word
  3331 = 3A8E			SAMPL_13.LEN	= DATAORIGIN+$023A
  3332 = 3A90			SAMPL_13.FINE_TUNE	= DATAORIGIN+$023C
  3333 = 3A91			SAMPL_13.VOLUME	= DATAORIGIN+$023D
  3334 = 3A92			SAMPL_13.LOOP_START	= DATAORIGIN+$023E
  3335 = 3A94			SAMPL_13.LOOP_LEN	= DATAORIGIN+$0240
  3336 = 3A96			adr.SAMPL_14	= DATAORIGIN+$0242	; [30] RECORD
  3337 37AB			.var SAMPL_14	= adr.SAMPL_14 .word
  3338 = 3A96			adr.SAMPL_14.NAME	= [DATAORIGIN+$0242] .array [22]
  3339 37AB			.var SAMPL_14.NAME	= adr.SAMPL_14.NAME .word
  3340 = 3AAC			SAMPL_14.LEN	= DATAORIGIN+$0258
  3341 = 3AAE			SAMPL_14.FINE_TUNE	= DATAORIGIN+$025A
  3342 = 3AAF			SAMPL_14.VOLUME	= DATAORIGIN+$025B
  3343 = 3AB0			SAMPL_14.LOOP_START	= DATAORIGIN+$025C
  3344 = 3AB2			SAMPL_14.LOOP_LEN	= DATAORIGIN+$025E
  3345 = 3AB4			adr.SAMPL_15	= DATAORIGIN+$0260	; [30] RECORD
  3346 37AB			.var SAMPL_15	= adr.SAMPL_15 .word
  3347 = 3AB4			adr.SAMPL_15.NAME	= [DATAORIGIN+$0260] .array [22]
  3348 37AB			.var SAMPL_15.NAME	= adr.SAMPL_15.NAME .word
  3349 = 3ACA			SAMPL_15.LEN	= DATAORIGIN+$0276
  3350 = 3ACC			SAMPL_15.FINE_TUNE	= DATAORIGIN+$0278
  3351 = 3ACD			SAMPL_15.VOLUME	= DATAORIGIN+$0279
  3352 = 3ACE			SAMPL_15.LOOP_START	= DATAORIGIN+$027A
  3353 = 3AD0			SAMPL_15.LOOP_LEN	= DATAORIGIN+$027C
  3354 = 3AD2			adr.SAMPL_16	= DATAORIGIN+$027E	; [30] RECORD
  3355 37AB			.var SAMPL_16	= adr.SAMPL_16 .word
  3356 = 3AD2			adr.SAMPL_16.NAME	= [DATAORIGIN+$027E] .array [22]
  3357 37AB			.var SAMPL_16.NAME	= adr.SAMPL_16.NAME .word
  3358 = 3AE8			SAMPL_16.LEN	= DATAORIGIN+$0294
  3359 = 3AEA			SAMPL_16.FINE_TUNE	= DATAORIGIN+$0296
  3360 = 3AEB			SAMPL_16.VOLUME	= DATAORIGIN+$0297
  3361 = 3AEC			SAMPL_16.LOOP_START	= DATAORIGIN+$0298
  3362 = 3AEE			SAMPL_16.LOOP_LEN	= DATAORIGIN+$029A
  3363 = 3AF0			adr.SAMPL_17	= DATAORIGIN+$029C	; [30] RECORD
  3364 37AB			.var SAMPL_17	= adr.SAMPL_17 .word
  3365 = 3AF0			adr.SAMPL_17.NAME	= [DATAORIGIN+$029C] .array [22]
  3366 37AB			.var SAMPL_17.NAME	= adr.SAMPL_17.NAME .word
  3367 = 3B06			SAMPL_17.LEN	= DATAORIGIN+$02B2
  3368 = 3B08			SAMPL_17.FINE_TUNE	= DATAORIGIN+$02B4
  3369 = 3B09			SAMPL_17.VOLUME	= DATAORIGIN+$02B5
  3370 = 3B0A			SAMPL_17.LOOP_START	= DATAORIGIN+$02B6
  3371 = 3B0C			SAMPL_17.LOOP_LEN	= DATAORIGIN+$02B8
  3372 = 3B0E			adr.SAMPL_18	= DATAORIGIN+$02BA	; [30] RECORD
  3373 37AB			.var SAMPL_18	= adr.SAMPL_18 .word
  3374 = 3B0E			adr.SAMPL_18.NAME	= [DATAORIGIN+$02BA] .array [22]
  3375 37AB			.var SAMPL_18.NAME	= adr.SAMPL_18.NAME .word
  3376 = 3B24			SAMPL_18.LEN	= DATAORIGIN+$02D0
  3377 = 3B26			SAMPL_18.FINE_TUNE	= DATAORIGIN+$02D2
  3378 = 3B27			SAMPL_18.VOLUME	= DATAORIGIN+$02D3
  3379 = 3B28			SAMPL_18.LOOP_START	= DATAORIGIN+$02D4
  3380 = 3B2A			SAMPL_18.LOOP_LEN	= DATAORIGIN+$02D6
  3381 = 3B2C			adr.SAMPL_19	= DATAORIGIN+$02D8	; [30] RECORD
  3382 37AB			.var SAMPL_19	= adr.SAMPL_19 .word
  3383 = 3B2C			adr.SAMPL_19.NAME	= [DATAORIGIN+$02D8] .array [22]
  3384 37AB			.var SAMPL_19.NAME	= adr.SAMPL_19.NAME .word
  3385 = 3B42			SAMPL_19.LEN	= DATAORIGIN+$02EE
  3386 = 3B44			SAMPL_19.FINE_TUNE	= DATAORIGIN+$02F0
  3387 = 3B45			SAMPL_19.VOLUME	= DATAORIGIN+$02F1
  3388 = 3B46			SAMPL_19.LOOP_START	= DATAORIGIN+$02F2
  3389 = 3B48			SAMPL_19.LOOP_LEN	= DATAORIGIN+$02F4
  3390 = 3B4A			adr.SAMPL_20	= DATAORIGIN+$02F6	; [30] RECORD
  3391 37AB			.var SAMPL_20	= adr.SAMPL_20 .word
  3392 = 3B4A			adr.SAMPL_20.NAME	= [DATAORIGIN+$02F6] .array [22]
  3393 37AB			.var SAMPL_20.NAME	= adr.SAMPL_20.NAME .word
  3394 = 3B60			SAMPL_20.LEN	= DATAORIGIN+$030C
  3395 = 3B62			SAMPL_20.FINE_TUNE	= DATAORIGIN+$030E
  3396 = 3B63			SAMPL_20.VOLUME	= DATAORIGIN+$030F
  3397 = 3B64			SAMPL_20.LOOP_START	= DATAORIGIN+$0310
  3398 = 3B66			SAMPL_20.LOOP_LEN	= DATAORIGIN+$0312
  3399 = 3B68			adr.SAMPL_21	= DATAORIGIN+$0314	; [30] RECORD
  3400 37AB			.var SAMPL_21	= adr.SAMPL_21 .word
  3401 = 3B68			adr.SAMPL_21.NAME	= [DATAORIGIN+$0314] .array [22]
  3402 37AB			.var SAMPL_21.NAME	= adr.SAMPL_21.NAME .word
  3403 = 3B7E			SAMPL_21.LEN	= DATAORIGIN+$032A
  3404 = 3B80			SAMPL_21.FINE_TUNE	= DATAORIGIN+$032C
  3405 = 3B81			SAMPL_21.VOLUME	= DATAORIGIN+$032D
  3406 = 3B82			SAMPL_21.LOOP_START	= DATAORIGIN+$032E
  3407 = 3B84			SAMPL_21.LOOP_LEN	= DATAORIGIN+$0330
  3408 = 3B86			adr.SAMPL_22	= DATAORIGIN+$0332	; [30] RECORD
  3409 37AB			.var SAMPL_22	= adr.SAMPL_22 .word
  3410 = 3B86			adr.SAMPL_22.NAME	= [DATAORIGIN+$0332] .array [22]
  3411 37AB			.var SAMPL_22.NAME	= adr.SAMPL_22.NAME .word
  3412 = 3B9C			SAMPL_22.LEN	= DATAORIGIN+$0348
  3413 = 3B9E			SAMPL_22.FINE_TUNE	= DATAORIGIN+$034A
  3414 = 3B9F			SAMPL_22.VOLUME	= DATAORIGIN+$034B
  3415 = 3BA0			SAMPL_22.LOOP_START	= DATAORIGIN+$034C
  3416 = 3BA2			SAMPL_22.LOOP_LEN	= DATAORIGIN+$034E
  3417 = 3BA4			adr.SAMPL_23	= DATAORIGIN+$0350	; [30] RECORD
  3418 37AB			.var SAMPL_23	= adr.SAMPL_23 .word
  3419 = 3BA4			adr.SAMPL_23.NAME	= [DATAORIGIN+$0350] .array [22]
  3420 37AB			.var SAMPL_23.NAME	= adr.SAMPL_23.NAME .word
  3421 = 3BBA			SAMPL_23.LEN	= DATAORIGIN+$0366
  3422 = 3BBC			SAMPL_23.FINE_TUNE	= DATAORIGIN+$0368
  3423 = 3BBD			SAMPL_23.VOLUME	= DATAORIGIN+$0369
  3424 = 3BBE			SAMPL_23.LOOP_START	= DATAORIGIN+$036A
  3425 = 3BC0			SAMPL_23.LOOP_LEN	= DATAORIGIN+$036C
  3426 = 3BC2			adr.SAMPL_24	= DATAORIGIN+$036E	; [30] RECORD
  3427 37AB			.var SAMPL_24	= adr.SAMPL_24 .word
  3428 = 3BC2			adr.SAMPL_24.NAME	= [DATAORIGIN+$036E] .array [22]
  3429 37AB			.var SAMPL_24.NAME	= adr.SAMPL_24.NAME .word
  3430 = 3BD8			SAMPL_24.LEN	= DATAORIGIN+$0384
  3431 = 3BDA			SAMPL_24.FINE_TUNE	= DATAORIGIN+$0386
  3432 = 3BDB			SAMPL_24.VOLUME	= DATAORIGIN+$0387
  3433 = 3BDC			SAMPL_24.LOOP_START	= DATAORIGIN+$0388
  3434 = 3BDE			SAMPL_24.LOOP_LEN	= DATAORIGIN+$038A
  3435 = 3BE0			adr.SAMPL_25	= DATAORIGIN+$038C	; [30] RECORD
  3436 37AB			.var SAMPL_25	= adr.SAMPL_25 .word
  3437 = 3BE0			adr.SAMPL_25.NAME	= [DATAORIGIN+$038C] .array [22]
  3438 37AB			.var SAMPL_25.NAME	= adr.SAMPL_25.NAME .word
  3439 = 3BF6			SAMPL_25.LEN	= DATAORIGIN+$03A2
  3440 = 3BF8			SAMPL_25.FINE_TUNE	= DATAORIGIN+$03A4
  3441 = 3BF9			SAMPL_25.VOLUME	= DATAORIGIN+$03A5
  3442 = 3BFA			SAMPL_25.LOOP_START	= DATAORIGIN+$03A6
  3443 = 3BFC			SAMPL_25.LOOP_LEN	= DATAORIGIN+$03A8
  3444 = 3BFE			adr.SAMPL_26	= DATAORIGIN+$03AA	; [30] RECORD
  3445 37AB			.var SAMPL_26	= adr.SAMPL_26 .word
  3446 = 3BFE			adr.SAMPL_26.NAME	= [DATAORIGIN+$03AA] .array [22]
  3447 37AB			.var SAMPL_26.NAME	= adr.SAMPL_26.NAME .word
  3448 = 3C14			SAMPL_26.LEN	= DATAORIGIN+$03C0
  3449 = 3C16			SAMPL_26.FINE_TUNE	= DATAORIGIN+$03C2
  3450 = 3C17			SAMPL_26.VOLUME	= DATAORIGIN+$03C3
  3451 = 3C18			SAMPL_26.LOOP_START	= DATAORIGIN+$03C4
  3452 = 3C1A			SAMPL_26.LOOP_LEN	= DATAORIGIN+$03C6
  3453 = 3C1C			adr.SAMPL_27	= DATAORIGIN+$03C8	; [30] RECORD
  3454 37AB			.var SAMPL_27	= adr.SAMPL_27 .word
  3455 = 3C1C			adr.SAMPL_27.NAME	= [DATAORIGIN+$03C8] .array [22]
  3456 37AB			.var SAMPL_27.NAME	= adr.SAMPL_27.NAME .word
  3457 = 3C32			SAMPL_27.LEN	= DATAORIGIN+$03DE
  3458 = 3C34			SAMPL_27.FINE_TUNE	= DATAORIGIN+$03E0
  3459 = 3C35			SAMPL_27.VOLUME	= DATAORIGIN+$03E1
  3460 = 3C36			SAMPL_27.LOOP_START	= DATAORIGIN+$03E2
  3461 = 3C38			SAMPL_27.LOOP_LEN	= DATAORIGIN+$03E4
  3462 = 3C3A			adr.SAMPL_28	= DATAORIGIN+$03E6	; [30] RECORD
  3463 37AB			.var SAMPL_28	= adr.SAMPL_28 .word
  3464 = 3C3A			adr.SAMPL_28.NAME	= [DATAORIGIN+$03E6] .array [22]
  3465 37AB			.var SAMPL_28.NAME	= adr.SAMPL_28.NAME .word
  3466 = 3C50			SAMPL_28.LEN	= DATAORIGIN+$03FC
  3467 = 3C52			SAMPL_28.FINE_TUNE	= DATAORIGIN+$03FE
  3468 = 3C53			SAMPL_28.VOLUME	= DATAORIGIN+$03FF
  3469 = 3C54			SAMPL_28.LOOP_START	= DATAORIGIN+$0400
  3470 = 3C56			SAMPL_28.LOOP_LEN	= DATAORIGIN+$0402
  3471 = 3C58			adr.SAMPL_29	= DATAORIGIN+$0404	; [30] RECORD
  3472 37AB			.var SAMPL_29	= adr.SAMPL_29 .word
  3473 = 3C58			adr.SAMPL_29.NAME	= [DATAORIGIN+$0404] .array [22]
  3474 37AB			.var SAMPL_29.NAME	= adr.SAMPL_29.NAME .word
  3475 = 3C6E			SAMPL_29.LEN	= DATAORIGIN+$041A
  3476 = 3C70			SAMPL_29.FINE_TUNE	= DATAORIGIN+$041C
  3477 = 3C71			SAMPL_29.VOLUME	= DATAORIGIN+$041D
  3478 = 3C72			SAMPL_29.LOOP_START	= DATAORIGIN+$041E
  3479 = 3C74			SAMPL_29.LOOP_LEN	= DATAORIGIN+$0420
  3480 = 3C76			adr.SAMPL_30	= DATAORIGIN+$0422	; [30] RECORD
  3481 37AB			.var SAMPL_30	= adr.SAMPL_30 .word
  3482 = 3C76			adr.SAMPL_30.NAME	= [DATAORIGIN+$0422] .array [22]
  3483 37AB			.var SAMPL_30.NAME	= adr.SAMPL_30.NAME .word
  3484 = 3C8C			SAMPL_30.LEN	= DATAORIGIN+$0438
  3485 = 3C8E			SAMPL_30.FINE_TUNE	= DATAORIGIN+$043A
  3486 = 3C8F			SAMPL_30.VOLUME	= DATAORIGIN+$043B
  3487 = 3C90			SAMPL_30.LOOP_START	= DATAORIGIN+$043C
  3488 = 3C92			SAMPL_30.LOOP_LEN	= DATAORIGIN+$043E
  3489 = 3C94			adr.SAMPLE	= [DATAORIGIN+$0440] .array [31] .word
  3490 37AB			.var SAMPLE	= adr.SAMPLE .word
  3491 = 3CD2			GCHAR	= DATAORIGIN+$047E
  3492 = 3CD3			SONG_LENGTH	= DATAORIGIN+$047F
  3493 = 3CD4			SONG_RESTART	= DATAORIGIN+$0480
  3494 = 3CD5			NUMBER_OF_PATTERNS	= DATAORIGIN+$0481
  3495 = 3CD6			NUMBER_OF_BANKS	= DATAORIGIN+$0482
  3496 = 3CD7			NUMBER_OF_SAMPLES	= DATAORIGIN+$0483
  3497 = 3CD8			adr.XMS	= DATAORIGIN+$0484	; [8] OBJECT
  3498 37AB			.var XMS	= adr.XMS .word
  3499 = 3CD8			XMS.POSITION	= DATAORIGIN+$0484
  3500 = 3CDC			XMS.SIZE	= DATAORIGIN+$0488
  3501 = C000			VOL6BIT	= $C000
  3502 = D800			PLAY_SMP	= $D800
  3503 = 03E0			MAIN_LOP	= $03E0
  3504 = 0E0000			PLAYER	= $E0000
  3505 = 0F0000			PATTERN_START	= $F0000
  3506 = 100000			SAMPLE_START	= $100000
  3507 37AB			@exit
  3508
  3509 37AB A2 00		@halt	ldx #$00
  3510 37AD 9A				txs
  3511 					.ifdef MAIN.@DEFINES.ROMOFF
  3512 					inc portb
  3513 					.fi
  3514
  3515 37AE A0 01			ldy #$01
  3516
  3517 37B0 60				rts
  3518
  3519 				; ------------------------------------------------------------
  3520
  3521 37B1 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  3522
  3523 				; ------------------------------------------------------------
  3524
  3525 37C1			.local	@DEFINES
  3526 37C1			ATARI
  3527 				.endl
  3528
  3529 37C1			.local	@RESOURCE
  3530 				.endl
  3531
  3532 = 37C1 C7 20		KOD
  3532 = 37C3 00 05		BUF
  3532 = 37C5 E0 05		TIVOL
  3532 = 37C7 00 06		ORDER
  3532 = 37C9 80 06		TSTRL
  3532 = 37CB A0 06		TSTRH
  3532 = 37CD C0 06		TREPL
  3532 = 37CF E0 06		TREPH
  3532 = 37D1 DD 38		MODNAME
  3532 = 37D3 F2 38		SAMPL_0
  3532 = 37D5 F2 38		SAMPL_0.NAME
  3532 = 37D7 10 39		SAMPL_1
  3532 = 37D9 10 39		SAMPL_1.NAME
  3532 = 37DB 2E 39		SAMPL_2
  3532 = 37DD 2E 39		SAMPL_2.NAME
  3532 = 37DF 4C 39		SAMPL_3
  3532 = 37E1 4C 39		SAMPL_3.NAME
  3532 = 37E3 6A 39		SAMPL_4
  3532 = 37E5 6A 39		SAMPL_4.NAME
  3532 = 37E7 88 39		SAMPL_5
  3532 = 37E9 88 39		SAMPL_5.NAME
  3532 = 37EB A6 39		SAMPL_6
  3532 = 37ED A6 39		SAMPL_6.NAME
  3532 = 37EF C4 39		SAMPL_7
  3532 = 37F1 C4 39		SAMPL_7.NAME
  3532 = 37F3 E2 39		SAMPL_8
  3532 = 37F5 E2 39		SAMPL_8.NAME
  3532 = 37F7 00 3A		SAMPL_9
  3532 = 37F9 00 3A		SAMPL_9.NAME
  3532 = 37FB 1E 3A		SAMPL_10
  3532 = 37FD 1E 3A		SAMPL_10.NAME
  3532 = 37FF 3C 3A		SAMPL_11
  3532 = 3801 3C 3A		SAMPL_11.NAME
  3532 = 3803 5A 3A		SAMPL_12
  3532 = 3805 5A 3A		SAMPL_12.NAME
  3532 = 3807 78 3A		SAMPL_13
  3532 = 3809 78 3A		SAMPL_13.NAME
  3532 = 380B 96 3A		SAMPL_14
  3532 = 380D 96 3A		SAMPL_14.NAME
  3532 = 380F B4 3A		SAMPL_15
  3532 = 3811 B4 3A		SAMPL_15.NAME
  3532 = 3813 D2 3A		SAMPL_16
  3532 = 3815 D2 3A		SAMPL_16.NAME
  3532 = 3817 F0 3A		SAMPL_17
  3532 = 3819 F0 3A		SAMPL_17.NAME
  3532 = 381B 0E 3B		SAMPL_18
  3532 = 381D 0E 3B		SAMPL_18.NAME
  3532 = 381F 2C 3B		SAMPL_19
  3532 = 3821 2C 3B		SAMPL_19.NAME
  3532 = 3823 4A 3B		SAMPL_20
  3532 = 3825 4A 3B		SAMPL_20.NAME
  3532 = 3827 68 3B		SAMPL_21
  3532 = 3829 68 3B		SAMPL_21.NAME
  3532 = 382B 86 3B		SAMPL_22
  3532 = 382D 86 3B		SAMPL_22.NAME
  3532 = 382F A4 3B		SAMPL_23
  3532 = 3831 A4 3B		SAMPL_23.NAME
  3532 = 3833 C2 3B		SAMPL_24
  3532 = 3835 C2 3B		SAMPL_24.NAME
  3532 = 3837 E0 3B		SAMPL_25
  3532 = 3839 E0 3B		SAMPL_25.NAME
  3532 = 383B FE 3B		SAMPL_26
  3532 = 383D FE 3B		SAMPL_26.NAME
  3532 = 383F 1C 3C		SAMPL_27
  3532 = 3841 1C 3C		SAMPL_27.NAME
  3532 = 3843 3A 3C		SAMPL_28
  3532 = 3845 3A 3C		SAMPL_28.NAME
  3532 = 3847 58 3C		SAMPL_29
  3532 = 3849 58 3C		SAMPL_29.NAME
  3532 = 384B 76 3C		SAMPL_30
  3532 = 384D 76 3C		SAMPL_30.NAME
  3532 = 384F 94 3C		SAMPLE
  3532 = 3851 D8 3C		XMS
  3532 				.endl							; MAIN
  3533
  3534 				; ------------------------------------------------------------
  3535 				; ------------------------------------------------------------
  3536
  3537 				.macro	UNITINITIALIZATION
  3538 				
  3539 					.ifdef MAIN.SYSTEM.@UnitInit
  3540 					jsr MAIN.SYSTEM.@UnitInit
  3541 					.fi
  3542 				
  3543 					.ifdef MAIN.ATARI.@UnitInit
  3544 					jsr MAIN.ATARI.@UnitInit
  3545 					.fi
  3546 				
  3547 					.ifdef MAIN.CRT.@UnitInit
  3548 					jsr MAIN.CRT.@UnitInit
  3549 					.fi
  3550 				
  3551 					.ifdef MAIN.MISC.@UnitInit
  3552 					jsr MAIN.MISC.@UnitInit
  3553 					.fi
  3554 				
  3555 					.ifdef MAIN.HIGHMEM.@UnitInit
  3556 					jsr MAIN.HIGHMEM.@UnitInit
  3557 					.fi
  3558 				.endm
  3559
  3560 				; ------------------------------------------------------------
  3561
  3562 					ift .SIZEOF(MAIN.SYSTEM) > 0
  3563 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  3563 				SYSTEM: $26A7..$26E8
  3564 					eif
  3565
  3566 					ift .SIZEOF(MAIN.ATARI) > 0
  3567 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  3568 					eif
  3569
  3570 					ift .SIZEOF(MAIN.CRT) > 0
  3571 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  3571 				CRT: $26E9..$2716
  3572 					eif
  3573
  3574 					ift .SIZEOF(MAIN.MISC) > 0
  3575 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  3575 				MISC: $2717..$27B1
  3576 					eif
  3577
  3578 					ift .SIZEOF(MAIN.HIGHMEM) > 0
  3579 					.print 'HIGHMEM: ',MAIN.HIGHMEM,'..',MAIN.HIGHMEM+.SIZEOF(MAIN.HIGHMEM)-1
  3579 				HIGHMEM: $27B2..$28C1
  3580 					eif
  3581
  3582 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  3582 				CODE: $2000..$37C0
  3583
  3584 				; ------------------------------------------------------------
  3585
  3586 3853				.align $0004
  3587
  3588 3854			DATAORIGIN
  3589 3854-3CD1> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3590 386C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3591 3884 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3592 389C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3593 38B4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3594 38CC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3595 38E4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3596 38FC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3597 3914 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3598 392C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3599 3944 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3600 395C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3601 3974 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3602 398C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3603 39A4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3604 39BC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3605 39D4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3606 39EC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3607 3A04 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3608 3A1C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3609 3A34 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3610 3A4C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3611 3A64 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3612 3A7C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3613 3A94 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3614 3AAC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3615 3AC4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3616 3ADC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3617 3AF4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3618 3B0C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3619 3B24 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3620 3B3C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3621 3B54 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3622 3B6C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3623 3B84 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3624 3B9C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3625 3BB4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3626 3BCC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3627 3BE4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3628 3BFC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3629 3C14 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3630 3C2C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3631 3C44 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3632 3C5C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3633 3C74 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  3634 3C8C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  <[DATAORIGIN+$009E] >[DATAORIGIN+$009E] <[DATAORIGIN+$00BC] >[DATAORIGIN+$00BC] <[DATAORIGIN+$00DA] >[DATAORIGIN+$00DA] <[DATAORIGIN+$00F8] >[DATAORIGIN+$00F8]  <[DATAORIGIN+$0116] >[DATAORIGIN+$0116] <[DATAORIGIN+$0134] >[DATAORIGIN+$0134] <[DATAORIGIN+$0152] >[DATAORIGIN+$0152] <[DATAORIGIN+$0170] >[DATAORIGIN+$0170]
  3635 3CA4 E2 39 00 3A 1E 3A + .by  <[DATAORIGIN+$018E] >[DATAORIGIN+$018E] <[DATAORIGIN+$01AC] >[DATAORIGIN+$01AC] <[DATAORIGIN+$01CA] >[DATAORIGIN+$01CA] <[DATAORIGIN+$01E8] >[DATAORIGIN+$01E8]  <[DATAORIGIN+$0206] >[DATAORIGIN+$0206] <[DATAORIGIN+$0224] >[DATAORIGIN+$0224] <[DATAORIGIN+$0242] >[DATAORIGIN+$0242] <[DATAORIGIN+$0260] >[DATAORIGIN+$0260]  <[DATAORIGIN+$027E] >[DATAORIGIN+$027E] <[DATAORIGIN+$029C] >[DATAORIGIN+$029C] <[DATAORIGIN+$02BA] >[DATAORIGIN+$02BA] <[DATAORIGIN+$02D8] >[DATAORIGIN+$02D8]
  3636 3CBC 4A 3B 68 3B 86 3B + .by  <[DATAORIGIN+$02F6] >[DATAORIGIN+$02F6] <[DATAORIGIN+$0314] >[DATAORIGIN+$0314] <[DATAORIGIN+$0332] >[DATAORIGIN+$0332] <[DATAORIGIN+$0350] >[DATAORIGIN+$0350]  <[DATAORIGIN+$036E] >[DATAORIGIN+$036E] <[DATAORIGIN+$038C] >[DATAORIGIN+$038C] <[DATAORIGIN+$03AA] >[DATAORIGIN+$03AA] <[DATAORIGIN+$03C8] >[DATAORIGIN+$03C8]  <[DATAORIGIN+$03E6] >[DATAORIGIN+$03E6] <[DATAORIGIN+$0404] >[DATAORIGIN+$0404] <[DATAORIGIN+$0422] >[DATAORIGIN+$0422]
  3637
  3638 = 047E			VARINITSIZE	= *-DATAORIGIN
  3639 = 0501			VARDATASIZE	= 1281
  3640
  3641 = 3D55			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  3642
  3643 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  3643 				DATA: $3854..$3D55
  3644
  3645 02E0-02E1> 76 26			run START
  3646
  3647 				; ------------------------------------------------------------
  3648
  3649 				.macro	STATICDATA
  3650 				.by  $02 $44 $3A $00 $05 $4F $6E $6C  $79 $20 $00 $14 $20 $62 $79 $74  $65 $73 $20 $6C $65 $6E $67 $74
  3651 				.by  $68 $20 $73 $61 $6D $70 $6C $65  $00 $04 $4D $2E $4B $2E $00 $13  $55 $6E $73 $75 $70 $6F $72 $74
  3652 				.by  $65 $64 $20 $4D $4F $44 $20 $66  $69 $6C $65 $00 $06 $4E $61 $6D  $65 $3A $20 $00 $09 $53 $61 $6D
  3653 				.by  $70 $6C $65 $73 $3A $20 $00 $10  $20 $73 $61 $6D $70 $6C $65 $73  $20 $61 $6C $6C $6F $77 $65 $64
  3654 				.by  $00 $0D $4E $65 $65 $64 $20 $6D  $69 $6E $69 $6D $75 $6D $20 $00  $16 $20 $62 $61 $6E $6B $73 $20
  3655 				.by  $65 $78 $70 $61 $6E $64 $65 $64  $20 $6D $65 $6D $6F $72 $79 $00  $0E $4C $6F $61 $64 $20 $50 $61
  3656 				.by  $74 $74 $65 $72 $6E $3A $20 $00  $0D $4C $6F $61 $64 $20 $53 $61  $6D $70 $6C $65 $3A $20 $00 $1E
  3657 				.by  $4D $4F $44 $20 $50 $6C $61 $79  $65 $72 $20 $52 $61 $70 $69 $64  $75 $73 $20 $31 $2E $36 $20 $28
  3658 				.by  $36 $35 $38 $31 $36 $29 $00 $B0  $06 $50 $06 $F4 $05 $A0 $05 $4C  $05 $00 $05 $B8 $04 $74 $04 $34
  3659 				.by  $04 $F8 $03 $C0 $03 $80 $03 $58  $03 $28 $03 $FA $02 $D0 $02 $A6  $02 $80 $02 $5C $02 $3A $02 $1A
  3660 				.by  $02 $FC $01 $E0 $01 $C5 $01 $AC  $01 $94 $01 $7D $01 $68 $01 $53  $01 $40 $01 $2E $01 $1D $01 $0D
  3661 				.by  $01 $FE $00 $F0 $00 $E2 $00 $D6  $00 $CA $00 $BE $00 $B4 $00 $AA  $00 $A0 $00 $97 $00 $8F $00 $87
  3662 				.by  $00 $7F $00 $78 $00 $71 $00
  3663 				.endm
  3664
  3665 					end
