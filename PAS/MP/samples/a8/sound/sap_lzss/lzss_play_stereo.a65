; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/09/27] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	SAPRPLAY '' PLAY_R 0 0 0 0 0 0 0 0
	SAPRPLAY '' PLAY_L 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_006E

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	HEXSTR						; FUNCTION | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000001  -------------------

	jsr @hexStr

;	@move #@buf Result #33
	ldy #256-33
	mva:rne @buf+33-256,y adr.Result+33-256,y+

@exit

; ------------------------------------------------------------

VALUE	= :EDX
DIGITS	= :ECX
adr.RESULT	= [DATAORIGIN+$000B] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= RESULT
@VarDataSize	= 33

	rts						; ret
.endl

.local	FILLCHAR_00AB					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000021  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	PAUSE_00CA					; PROCEDURE | ASSEMBLER | OVERLOAD

; -------------------  ASM Block 00000035  -------------------

	lda:cmp:req :rtclok+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	READKEY						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000051  -------------------

	m@call @GetKey
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$002D
	rts						; ret
.endl

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000055  -------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	seq
	iny		; true
	sty Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$002E
	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$002C
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	SAPLZSS						; UNIT

.local	TLZSSPLAY.INIT					; PROCEDURE | ASSEMBLER
	sta TLZSSPLAY
	sty TLZSSPLAY+1
	sta JMP
	sty JMP+1
	add #1
	scc
	iny
	sta PLAYER
	sty PLAYER+1
	add #2
	scc
	iny
	sta MODUL
	sty MODUL+1

; -------------------  ASM Block 00000062  -------------------

	txa:pha

	mwa TLZSSPlay :bp2

	ldy #0
	lda #$4c	; JMP
	sta (:bp2),y

	iny
	lda (:bp2),y
	add #6		; jsr player+6
	sta adr
	iny
	lda (:bp2),y
	adc #0
	sta adr+1

	ldy #4
	lda (:bp2),y
	tax		; hi byte of MPT module to Y reg
	dey
	lda (:bp2),y	; low byte of MPT module to X reg

	ldy a		; POKEY: $00 | $10 | ...

	jsr $ffff
adr	equ *-2

	pla:tax

; ------------------------------------------------------------

TLZSSPLAY	= DATAORIGIN+$002F
A	= DATAORIGIN+$0031
JMP	= DATAORIGIN+$0032
PLAYER	= DATAORIGIN+$0034
MODUL	= DATAORIGIN+$0036

@VarData	= TLZSSPLAY
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TLZSSPLAY.DECODE				; PROCEDURE | ASSEMBLER
	sta TLZSSPLAY
	sty TLZSSPLAY+1
	sta JMP
	sty JMP+1
	add #1
	scc
	iny
	sta PLAYER
	sty PLAYER+1
	add #2
	scc
	iny
	sta MODUL
	sty MODUL+1

; -------------------  ASM Block 00000063  -------------------

	mwa TLZSSPlay ptr

	clc

	jsr $ff00		; jmp (TLZSSPlay)	6502 buggy indirect jump
ptr	equ *-2


; ------------------------------------------------------------

TLZSSPLAY	= DATAORIGIN+$0038
JMP	= DATAORIGIN+$003A
PLAYER	= DATAORIGIN+$003C
MODUL	= DATAORIGIN+$003E

@VarData	= TLZSSPLAY
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TLZSSPLAY.PLAY					; PROCEDURE | ASSEMBLER
	sta TLZSSPLAY
	sty TLZSSPLAY+1
	sta JMP
	sty JMP+1
	add #1
	scc
	iny
	sta PLAYER
	sty PLAYER+1
	add #2
	scc
	iny
	sta MODUL
	sty MODUL+1

; -------------------  ASM Block 00000064  -------------------

	mwa TLZSSPlay ptr

	sec

	jsr $ff00		; jmp (TLZSSPlay)	6502 buggy indirect jump
ptr	equ *-2

; ------------------------------------------------------------

TLZSSPLAY	= DATAORIGIN+$0040
JMP	= DATAORIGIN+$0042
PLAYER	= DATAORIGIN+$0044
MODUL	= DATAORIGIN+$0046

@VarData	= TLZSSPLAY
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TLZSSPLAY.STOP					; PROCEDURE | ASSEMBLER
	sta TLZSSPLAY
	sty TLZSSPLAY+1
	sta JMP
	sty JMP+1
	add #1
	scc
	iny
	sta PLAYER
	sty PLAYER+1
	add #2
	scc
	iny
	sta MODUL
	sty MODUL+1

; -------------------  ASM Block 00000065  -------------------

	lda #0
	sta $d208
	sta $d218
	ldy #3
	sty $d20f
	sty $d21f
	ldy #8
clr	sta $d200,y
	sta $d210,y
	dey
	bpl clr

; ------------------------------------------------------------

TLZSSPLAY	= DATAORIGIN+$0048
JMP	= DATAORIGIN+$004A
PLAYER	= DATAORIGIN+$004C
MODUL	= DATAORIGIN+$004E

@VarData	= TLZSSPLAY
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

	rts

; ------------------------------------------------------------

.endl							; UNIT SAPLZSS
l_006E

; GetResourceHandle
	mwa #MAIN.@RESOURCE.mod_r.end-MAIN.@RESOURCE.mod_r LEN

; GetResourceHandle
	mwa #MAIN.@RESOURCE.mod_r P

; optimize FAIL ('@print', lzss_play_stereo.pas), line = 30

	@printSTRING #CODEORIGIN+$0007
	lda LEN
	ldy LEN+1
	jsr @printWORD._ay
	@printSTRING #CODEORIGIN+$0019
	lda P
	sta SYSTEM.HEXSTR.VALUE
	lda P+1
	sta SYSTEM.HEXSTR.VALUE+1
	lda #$00
	sta SYSTEM.HEXSTR.VALUE+2
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$04
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	@printSTRING SYSTEM.HEXSTR.RESULT
	@printEOL

; optimize OK (lzss_play_stereo.pas), line = 32

	lda P
	sta MSX_R.MODUL
	lda P+1
	sta MSX_R.MODUL+1

; optimize OK (lzss_play_stereo.pas), line = 34

	lda #$00
	sta MSX_R.PLAYER
	lda #$C0
	sta MSX_R.PLAYER+1

; GetResourceHandle
	mwa #MAIN.@RESOURCE.mod_l.end-MAIN.@RESOURCE.mod_l LEN

; GetResourceHandle
	mwa #MAIN.@RESOURCE.mod_l P

; optimize FAIL ('@print', lzss_play_stereo.pas), line = 38

	@printSTRING #CODEORIGIN+$002E
	lda LEN
	ldy LEN+1
	jsr @printWORD._ay
	@printSTRING #CODEORIGIN+$0019
	lda P
	sta SYSTEM.HEXSTR.VALUE
	lda P+1
	sta SYSTEM.HEXSTR.VALUE+1
	lda #$00
	sta SYSTEM.HEXSTR.VALUE+2
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$04
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	@printSTRING SYSTEM.HEXSTR.RESULT
	@printEOL

; optimize OK (lzss_play_stereo.pas), line = 40

	lda P
	sta MSX_L.MODUL
	lda P+1
	sta MSX_L.MODUL+1

; optimize OK (lzss_play_stereo.pas), line = 42

	lda #$00
	sta MSX_L.PLAYER
	lda #$F0
	sta MSX_L.PLAYER+1

; optimize OK (lzss_play_stereo.pas), line = 45

	lda #$00
	sta SYSTEM.FILLCHAR_00AB.A
	lda #$C3
	sta SYSTEM.FILLCHAR_00AB.A+1
	lda #$00
	sta SYSTEM.FILLCHAR_00AB.COUNT
	lda #$09
	sta SYSTEM.FILLCHAR_00AB.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_00AB.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_00AB
	m@INLINE
	.endl

; optimize OK (lzss_play_stereo.pas), line = 46

	lda #$00
	sta SYSTEM.FILLCHAR_00AB.A
	lda #$F3
	sta SYSTEM.FILLCHAR_00AB.A+1
	lda #$00
	sta SYSTEM.FILLCHAR_00AB.COUNT
	lda #$09
	sta SYSTEM.FILLCHAR_00AB.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_00AB.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_00AB
	m@INLINE
	.endl

; optimize OK (lzss_play_stereo.pas), line = 49

	lda #$00
	sta SAPLZSS.TLZSSPLAY.INIT.A
	lda MSX_R
	ldy MSX_R+1
	jsr SAPLZSS.TLZSSPLAY.INIT

; optimize OK (lzss_play_stereo.pas), line = 50

	lda #$10
	sta SAPLZSS.TLZSSPLAY.INIT.A
	lda MSX_L
	ldy MSX_L+1
	jsr SAPLZSS.TLZSSPLAY.INIT

; optimize FAIL ('@print', lzss_play_stereo.pas), line = 52

	@printEOL

; optimize FAIL ('@print', lzss_play_stereo.pas), line = 53

	@printSTRING #CODEORIGIN+$0040
	@printEOL

; --- RepeatUntilProlog
l_0134

; optimize FAIL ('SYSTEM.PAUSE_00CA', lzss_play_stereo.pas), line = 56

	jsr SYSTEM.PAUSE_00CA

; optimize FAIL ('SAPLZSS.TLZSSPLAY.DECODE', lzss_play_stereo.pas), line = 58

	lda MSX_R
	ldy MSX_R+1
	jsr SAPLZSS.TLZSSPLAY.DECODE

; optimize FAIL ('SAPLZSS.TLZSSPLAY.DECODE', lzss_play_stereo.pas), line = 59

	lda MSX_L
	ldy MSX_L+1
	jsr SAPLZSS.TLZSSPLAY.DECODE

; optimize FAIL ('SAPLZSS.TLZSSPLAY.PLAY', lzss_play_stereo.pas), line = 61

	lda MSX_R
	ldy MSX_R+1
	jsr SAPLZSS.TLZSSPLAY.PLAY

; optimize FAIL ('SAPLZSS.TLZSSPLAY.PLAY', lzss_play_stereo.pas), line = 62

	lda MSX_L
	ldy MSX_L+1
	jsr SAPLZSS.TLZSSPLAY.PLAY

; optimize FAIL ('CRT.KEYPRESSED', lzss_play_stereo.pas), line = 64

	jsr CRT.KEYPRESSED
	lda CRT.KEYPRESSED.RESULT
	jeq l_0134

; optimize FAIL ('CRT.READKEY', lzss_play_stereo.pas), line = 66

	jsr CRT.READKEY
	lda CRT.READKEY.RESULT
	sta CH

; optimize FAIL ('SAPLZSS.TLZSSPLAY.STOP', lzss_play_stereo.pas), line = 68

	lda MSX_R
	ldy MSX_R+1
	jsr SAPLZSS.TLZSSPLAY.STOP

; ------------------------------------------------------------

PLAY_R	= $C000
PLAY_L	= $F000
adr.MSX_R	= DATAORIGIN+$0050	; [5] OBJECT
.var MSX_R	= adr.MSX_R .word
MSX_R.JMP	= DATAORIGIN+$0050
MSX_R.PLAYER	= DATAORIGIN+$0051
MSX_R.MODUL	= DATAORIGIN+$0053
adr.MSX_L	= DATAORIGIN+$0055	; [5] OBJECT
.var MSX_L	= adr.MSX_L .word
MSX_L.JMP	= DATAORIGIN+$0055
MSX_L.PLAYER	= DATAORIGIN+$0056
MSX_L.MODUL	= DATAORIGIN+$0058
LEN	= DATAORIGIN+$005A
P	= DATAORIGIN+$005C
CH	= DATAORIGIN+$005E
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
ROMOFF
.endl

.local	@RESOURCE
MOD_R
	dta a(MOD_R.end-MOD_R-2)
	ins 'lzss\acid_r.lz16'
MOD_R.end
MOD_L
	dta a(MOD_L.end-MOD_L-2)
	ins 'lzss\acid_l.lz16'
MOD_L.end
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.SAPLZSS.@UnitInit
	jsr MAIN.SAPLZSS.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.SAPLZSS) > 0
	.print 'SAPLZSS: ',MAIN.SAPLZSS,'..',MAIN.SAPLZSS+.SIZEOF(MAIN.SAPLZSS)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
	.print '$R MOD_R',' ',"'lzss\acid_r.lz16'",' ',MAIN.@RESOURCE.MOD_R,'..',MAIN.@RESOURCE.MOD_R.end-1
	.print '$R MOD_L',' ',"'lzss\acid_l.lz16'",' ',MAIN.@RESOURCE.MOD_L,'..',MAIN.@RESOURCE.MOD_L.end-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 95

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $05 $6D $6F $64 $5F $72 $00 $10  $6D $6F $64 $75 $6C $5F $72 $20  $6C $65 $6E $67 $74 $68 $3A $20
.by  $00 $0C $2C $20 $61 $64 $64 $72  $65 $73 $73 $3A $20 $24 $00 $05  $6D $6F $64 $5F $6C $00 $10 $6D
.by  $6F $64 $75 $6C $5F $6C $20 $6C  $65 $6E $67 $74 $68 $3A $20 $00  $25 $50 $61 $73 $63 $61 $6C $20
.by  $53 $41 $50 $2D $52 $20 $4C $5A  $53 $53 $20 $38 $63 $68 $6E $20  $70 $6C $61 $79 $65 $72 $20 $65
.by  $78 $61 $6D $70 $6C $65 $00
.endm

	end
