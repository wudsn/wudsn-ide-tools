mads 2.1.6
Source: foxinit.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/07/07] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: foxinit.a65]
     1 FFFF> 2000-2785> 14 78 + .by  $14 $78 $30 $46 $20 $44 $6F $73  $20 $49 $6E $69 $74 $69 $61 $6C  $69 $7A $65 $72 $20 $00 $0A $32
     2 2018 30 32 32 2D 30 37 + .by  $30 $32 $32 $2D $30 $37 $2D $31  $30 $00 $14 $53 $65 $6C $65 $63  $74 $20 $64 $72 $69 $76 $65 $20
     3 2030 28 31 2D 38 29 3A + .by  $28 $31 $2D $38 $29 $3A $20 $00  $07 $45 $72 $72 $6F $72 $3A $20  $00 $02 $3A $20 $00 $06 $44 $6F
     4 2048 75 62 6C 65 00 0F + .by  $75 $62 $6C $65 $00 $0F $53 $69  $6E $67 $6C $65 $2F $45 $6E $68  $61 $6E $63 $65 $64 $00 $08 $20
     5 2060 64 65 6E 73 69 74 + .by  $64 $65 $6E $73 $69 $74 $79 $00  $13 $57 $72 $69 $74 $65 $20 $78  $30 $46 $20 $44 $6F $73 $20 $28
     6 2078 59 2F 4E 29 00 0D + .by  $59 $2F $4E $29 $00 $0D $41 $67  $61 $69 $6E $20 $28 $59 $2F $4E  $29 $3F $20 $00 $46 $03 $EB $07
     7 2090 09 09 8D 05 03 A9 + .by  $09 $09 $8D $05 $03 $A9 $5C $8D  $E7 $02 $A9 $09 $8D $E8 $02 $A2  $44 $A8 $20 $86 $E4 $20 $8C $08
     8 20A8 30 56 20 E8 08 30 + .by  $30 $56 $20 $E8 $08 $30 $43 $85  $44 $20 $E8 $08 $30 $4A $85 $45  $C9 $FF $B0 $EE $20 $E8 $08 $30
     9 20C0 3F 85 46 20 E8 08 + .by  $3F $85 $46 $20 $E8 $08 $30 $38  $85 $47 $A9 $09 $8D $E2 $02 $8D  $E3 $02 $20 $E8 $08 $30 $29 $A0
    10 20D8 00 91 44 A4 44 A5 + .by  $00 $91 $44 $A4 $44 $A5 $45 $E6  $44 $D0 $02 $E6 $45 $C4 $46 $E5  $47 $90 $E7 $A9 $08 $48 $48 $6C
    11 20F0 E2 02 6C E0 02 A5 + .by  $E2 $02 $6C $E0 $02 $A5 $22 $C9  $28 $D0 $05 $20 $61 $08 $10 $A5  $38 $60 $A2 $00 $86 $43 $A9 $3A
    12 2108 A0 01 D1 24 F0 01 + .by  $A0 $01 $D1 $24 $F0 $01 $C8 $C8  $B1 $24 $C9 $60 $B0 $0C $C9 $30  $B0 $0B $C9 $2E $D0 $04 $E0 $08
    13 2120 F0 ED 88 A9 20 9D + .by  $F0 $ED $88 $A9 $20 $9D $51 $09  $E8 $E0 $0B $90 $E2 $A0 $69 $A9  $01 $A2 $52 $20 $3A $09 $30 $3A
    14 2138 A2 0B BD F5 06 F0 + .by  $A2 $0B $BD $F5 $06 $F0 $69 $29  $DF $C9 $42 $D0 $2E $A0 $0B $BD  $04 $07 $D9 $50 $09 $D0 $24 $CA
    15 2150 88 D0 F4 BD 03 07 + .by  $88 $D0 $F4 $BD $03 $07 $8D $7E  $07 $A5 $43 $0A $0A $5D $04 $07  $8D $7D $07 $8C $7F $07 $8C $E9
    16 2168 08 A0 7D 99 FF 06 + .by  $08 $A0 $7D $99 $FF $06 $88 $D0  $FA $C8 $60 $E6 $43 $8A $29 $F0  $18 $69 $1B $AA $10 $BC $EE $0A
    17 2180 03 A2 52 20 4B 09 + .by  $03 $A2 $52 $20 $4B $09 $10 $B0  $60 $A0 $00 $CC $7F $07 $90 $0E  $A2 $52 $20 $2C $09 $30 $13 $AC
    18 2198 7F 07 F0 1A A0 00 + .by  $7F $07 $F0 $1A $A0 $00 $B9 $00  $07 $C8 $8C $E9 $08 $A0 $01 $60  $A0 $AA $60 $08 $23 $09 $E7 $08
    19 21B0 17 09 08 09 53 08 + .by  $17 $09 $08 $09 $53 $08 $A0 $88  $60 $AC $7F $07 $EE $7F $07 $99  $00 $07 $A0 $01 $60 $A5 $2A $C9
    20 21C8 08 D0 F7 A2 57 AD + .by  $08 $D0 $F7 $A2 $57 $AD $7D $07  $29 $03 $AC $7E $07 $D0 $04 $C9  $00 $F0 $DB $8C $0A $03 $8D $0B
    21 21E0 03 4D 7D 07 8D 7D + .by  $03 $4D $7D $07 $8D $7D $07 $A9  $00 $8D $7E $07 $8E $02 $03 $4C  $53 $E4 $41 $55 $54 $4F $52 $55
    22 21F8 4E 20 20 20 20 00 + .by  $4E $20 $20 $20 $20 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $46 $03 $E1 $07
    23 2210 09 09 A0 00 8C D5 + .by  $09 $09 $A0 $00 $8C $D5 $02 $A0  $01 $8C $D6 $02 $8D $05 $03 $A9  $5C $8D $E7 $02 $A9 $09 $8D $E8
    24 2228 02 A2 44 A8 20 86 + .by  $02 $A2 $44 $A8 $20 $86 $E4 $20  $8C $08 $30 $56 $20 $E8 $08 $30  $43 $85 $44 $20 $E8 $08 $30 $4A
    25 2240 85 45 C9 FF B0 EE + .by  $85 $45 $C9 $FF $B0 $EE $20 $E8  $08 $30 $3F $85 $46 $20 $E8 $08  $30 $38 $85 $47 $A9 $09 $8D $E2
    26 2258 02 8D E3 02 20 E8 + .by  $02 $8D $E3 $02 $20 $E8 $08 $30  $29 $A0 $00 $91 $44 $A4 $44 $A5  $45 $E6 $44 $D0 $02 $E6 $45 $C4
    27 2270 46 E5 47 90 E7 A9 + .by  $46 $E5 $47 $90 $E7 $A9 $08 $48  $48 $6C $E2 $02 $6C $E0 $02 $A5  $22 $C9 $28 $D0 $05 $20 $61 $08
    28 2288 10 A5 38 60 A2 00 + .by  $10 $A5 $38 $60 $A2 $00 $86 $43  $A9 $3A $A0 $01 $D1 $24 $F0 $01  $C8 $C8 $B1 $24 $C9 $60 $B0 $0C
    29 22A0 C9 30 B0 0B C9 2E + .by  $C9 $30 $B0 $0B $C9 $2E $D0 $04  $E0 $08 $F0 $ED $88 $A9 $20 $9D  $51 $09 $E8 $E0 $0B $90 $E2 $A0
    30 22B8 69 A9 01 A2 52 20 + .by  $69 $A9 $01 $A2 $52 $20 $3A $09  $30 $3A $A2 $0B $BD $F5 $06 $F0  $69 $29 $DF $C9 $42 $D0 $2E $A0
    31 22D0 0B BD 04 07 D9 50 + .by  $0B $BD $04 $07 $D9 $50 $09 $D0  $24 $CA $88 $D0 $F4 $BD $03 $07  $8D $FE $07 $A5 $43 $0A $0A $5D
    32 22E8 04 07 8D FD 07 8C + .by  $04 $07 $8D $FD $07 $8C $FF $07  $8C $E9 $08 $A0 $FD $99 $FF $06  $88 $D0 $FA $C8 $60 $E6 $43 $8A
    33 2300 29 F0 18 69 1B AA + .by  $29 $F0 $18 $69 $1B $AA $10 $BC  $EE $0A $03 $A2 $52 $20 $4B $09  $10 $B0 $60 $A0 $00 $CC $FF $07
    34 2318 90 0E A2 52 20 2C + .by  $90 $0E $A2 $52 $20 $2C $09 $30  $13 $AC $FF $07 $F0 $1A $A0 $00  $B9 $00 $07 $C8 $8C $E9 $08 $A0
    35 2330 01 60 A0 AA 60 08 + .by  $01 $60 $A0 $AA $60 $08 $23 $09  $E7 $08 $17 $09 $08 $09 $53 $08  $A0 $88 $60 $AC $FF $07 $EE $FF
    36 2348 07 99 00 07 A0 01 + .by  $07 $99 $00 $07 $A0 $01 $60 $A5  $2A $C9 $08 $D0 $F7 $A2 $57 $AD  $FD $07 $29 $03 $AC $FE $07 $D0
    37 2360 04 C9 00 F0 DB 8C + .by  $04 $C9 $00 $F0 $DB $8C $0A $03  $8D $0B $03 $4D $FD $07 $8D $FD  $07 $A9 $00 $8D $FE $07 $8E $02
    38 2378 03 4C 53 E4 41 55 + .by  $03 $4C $53 $E4 $41 $55 $54 $4F  $52 $55 $4E $20 $20 $20 $20 $00  $00 $00 $00 $00
Source: foxinit.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 238C			RTLIB
   113 238C				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D3
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $238C..$252D
   118
   119 				; ------------------------------------------------------------
   120
   121 252E			START
   122 252E BA				tsx
   123 252F 8E 67 27			stx MAIN.@halt+1
   124
   125 = 0016			VLEN	= VARDATASIZE-VARINITSIZE
   126 = 2786			VADR	= DATAORIGIN+VARINITSIZE
   127
   128 					ift VADR > $BFFF
   129 					ert 'Invalid memory address range ',VADR
   130 					eli (VLEN>0) && (VLEN<=256)
   131 2532 A2 EA			ldx #256-VLEN
   132 2534 A9 00			lda #$00
   133 2536 9D 9C 26 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   134 					eli VLEN>256
   135 					@fill #VADR #VLEN #$00
   136 					eif
   137
   138 				.ifdef :psptr
   139 					mwa #PROGRAMSTACK :psptr
   140 				.fi
   141
   142 					.ifdef MAIN.@DEFINES.ROMOFF
   143 					icl 'atari\romoff.asm'
   144 					.fi
   145
   146 253C A2 0F			ldx #$0F					; DOS II+/D ParamStr
   147 253E BD 40 03 9D 6C 27 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   148
   149 2547 E8				inx						; X = 0
   150 2548 86 80			stx bp						; BP = 0
   151
   152 254A 8E 0F D2			stx skctl					; reset POKEY
   153 254D A9 03			lda #3
   154 254F 8D 0F D2			sta skctl
   155
   156 2552 CA				dex						; X = 255
   157
   158 2553				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: foxinit.a65]
   159
   160 2553			.local	MAIN						; PROCEDURE
   161
   162 2553 4C 06 26			jmp l_0093
   163
   164 				; ------------------------------------------------------------
   165
   166 2556			.local	SYSTEM						; UNIT
   167
   168 2556			.local	UPCASE						; FUNCTION
   169 2556 8D 8B 27			sta A
   170
   171 				; optimize OK (SYSTEM), line = 1256
   172
   173 2559 8D 8D 27			sta @CASETMP_0002
   174 255C 18				clc						; clear carry for add
   175 255D 69 85			adc #$FF-$7A					; make m = $FF
   176 255F 69 1A			adc #$7A-$61+1					; carry set if in range n to m
   177 2561 90 0C			jcc l_00C7
   178 				@
   179
   180 				; optimize OK (SYSTEM), line = 1257
   181
   182 2563 AD 8B 27			lda A
   183 2566 38 E9 20			sub #$20
   184 2569 8D 8C 27			sta RESULT
   185
   186 256C 4C 75 25			jmp a_0002
   187 256F			l_00C7
   188
   189 				; optimize OK (SYSTEM), line = 1259
   190
   191 256F AD 8B 27			lda A
   192 2572 8D 8C 27			sta RESULT
   193 2575			a_0002
   194 2575			@exit
   195
   196 				; ------------------------------------------------------------
   197
   198 = 278B			A	= DATAORIGIN+$000B
   199 = 278C			RESULT	= DATAORIGIN+$000C
   200 = 278D			@CASETMP_0002	= DATAORIGIN+$000D
   201
   202 = 278B			@VarData	= A
   203 = 0002			@VarDataSize	= 2
   204
   205 2575 60				rts						; ret
   206 				.endl
   207
   208 				; ------------------------------------------------------------
   209
   210 = 0101			__PORTB_BANKS	= $0101
   211 = 0648			M_PI_2	= $0648
   212 = 0192			D_PI_2	= $0192
   213 = 0004			D_PI_180	= $04
   214 = 0000			MGTIA	= $00
   215 = 0080			MVBXE	= $80
   216 = 0000			VBXE_XDLADR	= $00
   217 = 00E0			VBXE_BCBTMP	= $E0
   218 = 0100			VBXE_BCBADR	= $0100
   219 = 1000			VBXE_MAPADR	= $1000
   220 = 1000			VBXE_CHBASE	= $1000
   221 = 5000			VBXE_OVRADR	= $5000
   222 = B000			VBXE_WINDOW	= $B000
   223 = 0000			IDLI	= $00
   224 = 0001			IVBL	= $01
   225 = 0002			ITIM1	= $02
   226 = 0003			ITIM2	= $03
   227 = 0004			ITIM4	= $04
   228 = 00FE			CH_DELCHR	= $FE
   229 = 009B			CH_ENTER	= $9B
   230 = 001B			CH_ESC	= $1B
   231 = 001C			CH_CURS_UP	= $1C
   232 = 001D			CH_CURS_DOWN	= $1D
   233 = 001E			CH_CURS_LEFT	= $1E
   234 = 001F			CH_CURS_RIGHT	= $1F
   235 = 007F			CH_TAB	= $7F
   236 = 009B			CH_EOL	= $9B
   237 = 007D			CH_CLR	= $7D
   238 = 00FD			CH_BELL	= $FD
   239 = 007E			CH_DEL	= $7E
   240 = 009C			CH_DELLINE	= $9C
   241 = 009D			CH_INSLINE	= $9D
   242 = 0000			PAL_PMCOLOR0	= $00
   243 = 0001			PAL_PMCOLOR1	= $01
   244 = 0002			PAL_PMCOLOR2	= $02
   245 = 0003			PAL_PMCOLOR3	= $03
   246 = 0004			PAL_COLOR0	= $04
   247 = 0005			PAL_COLOR1	= $05
   248 = 0006			PAL_COLOR2	= $06
   249 = 0007			PAL_COLOR3	= $07
   250 = 0008			PAL_COLBAK	= $08
   251 = 0000			COLOR_BLACK	= $00
   252 = 000E			COLOR_WHITE	= $0E
   253 = 0032			COLOR_RED	= $32
   254 = 0096			COLOR_CYAN	= $96
   255 = 0068			COLOR_VIOLET	= $68
   256 = 00C4			COLOR_GREEN	= $C4
   257 = 0074			COLOR_BLUE	= $74
   258 = 00EE			COLOR_YELLOW	= $EE
   259 = 0028			COLOR_ORANGE	= $28
   260 = 00E4			COLOR_BROWN	= $E4
   261 = 003C			COLOR_LIGHTRED	= $3C
   262 = 0004			COLOR_GRAY1	= $04
   263 = 0006			COLOR_GRAY2	= $06
   264 = 000A			COLOR_GRAY3	= $0A
   265 = 00CC			COLOR_LIGHTGREEN	= $CC
   266 = 007C			COLOR_LIGHTBLUE	= $7C
   267 = 0004			FMOPENREAD	= $04
   268 = 0008			FMOPENWRITE	= $08
   269 = 0009			FMOPENAPPEND	= $09
   270 = 000C			FMOPENREADWRITE	= $0C
   271 = 2780			SCREENWIDTH	= DATAORIGIN+$0000
   272 = 2782			SCREENHEIGHT	= DATAORIGIN+$0002
   273 = 2784			DATESEPARATOR	= DATAORIGIN+$0004
   274 = D20A			RND	= $D20A
   275 = 02C0			adr.PALETTE	= $02C0
   276 2576			.var PALETTE	= adr.PALETTE .word
   277 = D012			adr.HPALETTE	= $D012
   278 2576			.var HPALETTE	= adr.HPALETTE .word
   279 = 2785			FILEMODE	= DATAORIGIN+$0005
   280 = 2786			GRAPHMODE	= DATAORIGIN+$0006
   281 = 2787			IORESULT	= DATAORIGIN+$0007
   282 = 2788			EOLN	= DATAORIGIN+$0008
   283 = 2789			RNDSEED	= DATAORIGIN+$0009
   284
   285 = 2576 C0 02		PALETTE
   285 = 2578 12 D0		HPALETTE
   285 				.endl							; UNIT SYSTEM
   286
   287 				; ------------------------------------------------------------
   288
   289 257A			.local	ATARI						; UNIT
   290
   291 				; ------------------------------------------------------------
   292
   293 = 0010			IRQENS	= $10
   294 = 0012			RTCLOK	= $12
   295 = 0012			RTCLOK1	= $12
   296 = 0013			RTCLOK2	= $13
   297 = 0014			RTCLOK3	= $14
   298 = 004D			ATRACT	= $4D
   299 = 0052			LMARGIN	= $52
   300 = 0053			RMARGIN	= $53
   301 = 0054			ROWCRS	= $54
   302 = 0055			COLCRS	= $55
   303 = 0057			DINDEX	= $57
   304 = 0058			SAVMSC	= $58
   305 = 0062			PALNTS	= $62
   306 = 006A			RAMTOP	= $6A
   307 = 0200			VDSLST	= $0200
   308 = 0230			SDLSTL	= $0230
   309 = 0290			TXTROW	= $0290
   310 = 0291			TXTCOL	= $0291
   311 = 0293			TINDEX	= $0293
   312 = 0294			TXTMSC	= $0294
   313 = 022F			SDMCTL	= $022F
   314 = 026F			GPRIOR	= $026F
   315 = 02F0			CRSINH	= $02F0
   316 = 02F3			CHACT	= $02F3
   317 = 02F4			CHBAS	= $02F4
   318 = 02FC			CH	= $02FC
   319 = 02C0			PCOLR0	= $02C0
   320 = 02C1			PCOLR1	= $02C1
   321 = 02C2			PCOLR2	= $02C2
   322 = 02C3			PCOLR3	= $02C3
   323 = 02C4			COLOR0	= $02C4
   324 = 02C5			COLOR1	= $02C5
   325 = 02C6			COLOR2	= $02C6
   326 = 02C7			COLOR3	= $02C7
   327 = 02C8			COLOR4	= $02C8
   328 = 02C8			COLBAKS	= $02C8
   329 = D000			HPOSP0	= $D000
   330 = D001			HPOSP1	= $D001
   331 = D002			HPOSP2	= $D002
   332 = D003			HPOSP3	= $D003
   333 = D004			HPOSM0	= $D004
   334 = D005			HPOSM1	= $D005
   335 = D006			HPOSM2	= $D006
   336 = D007			HPOSM3	= $D007
   337 = D008			SIZEP0	= $D008
   338 = D009			SIZEP1	= $D009
   339 = D00A			SIZEP2	= $D00A
   340 = D00B			SIZEP3	= $D00B
   341 = D00C			SIZEM	= $D00C
   342 = D00D			GRAFP0	= $D00D
   343 = D00E			GRAFP1	= $D00E
   344 = D00F			GRAFP2	= $D00F
   345 = D010			GRAFP3	= $D010
   346 = D011			GRAFM	= $D011
   347 = D004			P0PF	= $D004
   348 = D014			PAL	= $D014
   349 = D012			COLPM0	= $D012
   350 = D013			COLPM1	= $D013
   351 = D014			COLPM2	= $D014
   352 = D015			COLPM3	= $D015
   353 = D016			COLPF0	= $D016
   354 = D017			COLPF1	= $D017
   355 = D018			COLPF2	= $D018
   356 = D019			COLPF3	= $D019
   357 = D01A			COLBK	= $D01A
   358 = D01B			PRIOR	= $D01B
   359 = D01D			GRACTL	= $D01D
   360 = D01E			HITCLR	= $D01E
   361 = D01F			CONSOL	= $D01F
   362 = D200			AUDF1	= $D200
   363 = D201			AUDC1	= $D201
   364 = D202			AUDF2	= $D202
   365 = D203			AUDC2	= $D203
   366 = D204			AUDF3	= $D204
   367 = D205			AUDC3	= $D205
   368 = D206			AUDF4	= $D206
   369 = D207			AUDC4	= $D207
   370 = D208			AUDCTL	= $D208
   371 = D209			KBCODE	= $D209
   372 = D20E			IRQEN	= $D20E
   373 = D20F			SKSTAT	= $D20F
   374 = D300			PORTA	= $D300
   375 = D301			PORTB	= $D301
   376 = D400			DMACTL	= $D400
   377 = D401			CHACTL	= $D401
   378 = D402			DLISTL	= $D402
   379 = D404			HSCROL	= $D404
   380 = D405			VSCROL	= $D405
   381 = D407			PMBASE	= $D407
   382 = D409			CHBASE	= $D409
   383 = D40A			WSYNC	= $D40A
   384 = D40B			VCOUNT	= $D40B
   385 = D40C			PENH	= $D40C
   386 = D40D			PENV	= $D40D
   387 = D40E			NMIEN	= $D40E
   388 = FFFA			NMIVEC	= $FFFA
   389 = FFFC			RESETVEC	= $FFFC
   390 = FFFE			IRQVEC	= $FFFE
   391
   392 				.endl							; UNIT ATARI
   393
   394 				; ------------------------------------------------------------
   395
   396 257A			.local	CRT						; UNIT
   397
   398 				; ------------------------------------------------------------
   399
   400 = 278E			TEXTATTR	= DATAORIGIN+$000E
   401 = D01F			CONSOL	= $D01F
   402 = 0000			CN_START_SELECT_OPTION	= $00
   403 = 0001			CN_SELECT_OPTION	= $01
   404 = 0002			CN_START_OPTION	= $02
   405 = 0003			CN_OPTION	= $03
   406 = 0004			CN_START_SELECT	= $04
   407 = 0005			CN_SELECT	= $05
   408 = 0006			CN_START	= $06
   409 = 0007			CN_NONE	= $07
   410 = 0000			BW40	= $00
   411 = 0001			CO40	= $01
   412 = 0002			BW80	= $02
   413 = 0003			CO80	= $03
   414 = 0007			MONO	= $07
   415 = 0001			C40	= $01
   416 = 0003			C80	= $03
   417 = 0000			BLACK	= $00
   418 = 000F			WHITE	= $0F
   419 = 0026			RED	= $26
   420 = 00AC			CYAN	= $AC
   421 = 0048			PURPLE	= $48
   422 = 00B6			GREEN	= $B6
   423 = 0086			BLUE	= $86
   424 = 00DC			YELLOW	= $DC
   425 = 0018			ORANGE	= $18
   426 = 00F4			BROWN	= $F4
   427 = 002A			LIGHT_RED	= $2A
   428 = 0004			DARK_GREY	= $04
   429 = 0008			GREY	= $08
   430 = 00BC			LIGHT_GREEN	= $BC
   431 = 009A			LIGHT_BLUE	= $9A
   432 = 000C			LIGHT_GREY	= $0C
   433 = 0080			BLINK	= $80
   434
   435 				.endl							; UNIT CRT
   436
   437 				; ------------------------------------------------------------
   438
   439 257A			.local	SIODISK						; UNIT
   440
   441 257A			.local	READCONFIG					; FUNCTION | ASSEMBLER
   442 257A 8D 8F 27			sta DEVNUM
   443
   444 				; -------------------  ASM Block 00000062  -------------------
   445
   446 257D 8A 48			txa:pha
   447
   448 257F AD 8F 27			lda devnum
   449 2582				m@call	@sio.devnrm
Macro: M@CALL [Source: macros.asm]
    12 2582 20 C1 23				jsr @SIO.DEVNRM
   450 2585 98				tya
   451 2586 30 37			bmi _err
   452
   453 2588 A9 53			lda #'S'	; odczyt statusu stacji
   454 258A 8D 02 03			sta dcmnd
   455
   456 258D				m@call	jdskint	; $e453
Macro: M@CALL [Source: macros.asm]
    12 258D 20 53 E4				jsr JDSKINT
   457 2590 98				tya
   458 2591 30 2C			bmi _err
   459
   460 2593 A2 00			ldx <256	; 256 bajtow
   461 2595 A0 01			ldy >256	; w sektorze
   462
   463 2597 AD EA 02			lda dvstat
   464 259A 29 20			and #%00100000
   465 259C D0 04			bne _skp
   466
   467 259E A2 80			ldx <128	;128 bajtow
   468 25A0 A0 00			ldy >128	;w sektorze
   469
   470 25A2			_skp	m@call	@sio.devsec
Macro: M@CALL [Source: macros.asm]
    12 25A2 20 D8 23				jsr @SIO.DEVSEC
   471
   472 25A5 AD EA 02 8D 90 27		mva dvstat result
   473 25AB AD EB 02 8D 91 27		mva dvstat+1 result+1
   474 25B1 AD EC 02 8D 92 27		mva dvstat+2 result+2
   475 25B7 AD ED 02 8D 93 27		mva dvstat+3 result+3
   476
   477 25BD A0 01			ldy #1
   478
   479 25BF 8C 87 27		_err	sty MAIN.SYSTEM.IOResult
   480
   481 25C2 68 AA			pla:tax
   482
   483 25C4			@exit
   484
   485 				; ------------------------------------------------------------
   486
   487 = 278F			DEVNUM	= DATAORIGIN+$000F
   488 = 2790			RESULT	= DATAORIGIN+$0010
   489
   490 = 278F			@VarData	= DEVNUM
   491 = 0001			@VarDataSize	= 1
   492
   493 25C4 60				rts						; ret
   494 				.endl
   495
   496 25C5			.local	WRITEBOOT					; PROCEDURE | ASSEMBLER
   497
   498 				; -------------------  ASM Block 00000066  -------------------
   499
   500 25C5 8A 48			txa:pha
   501
   502 25C7 AD 94 27			lda devnum
   503 25CA				m@call	@sio.devnrm
Macro: M@CALL [Source: macros.asm]
    12 25CA 20 C1 23				jsr @SIO.DEVNRM
   504 25CD 98				tya
   505 25CE 30 30			bmi _err
   506
   507 25D0 A9 01			lda <1
   508 25D2 8D 0A 03			sta daux1
   509 25D5 A9 00			lda >1
   510 25D7 8D 0B 03			sta daux2
   511
   512 25DA AE 95 27		lp	ldx buf
   513 25DD AC 96 27			ldy buf+1
   514 25E0 A9 50			lda #'P'	; $50 - Put Sector, without verify
   515
   516 25E2				m@call	@sio.boot
Macro: M@CALL [Source: macros.asm]
    12 25E2 20 B1 23				jsr @SIO.BOOT
   517 25E5 98				tya
   518 25E6 30 18			bmi _err
   519
   520 25E8 18 AD 95 27 69 80 + 	adw buf #128
   521
   522 25F6 EE 0A 03			inc daux1
   523 25F9 AD 0A 03			lda daux1
   524 25FC C9 04			cmp #4
   525 25FE D0 DA			bne lp
   526
   527 2600 8C 87 27		_err	sty MAIN.SYSTEM.IOResult
   528
   529 2603 68 AA			pla:tax
   530
   531 				; ------------------------------------------------------------
   532
   533 = 2794			DEVNUM	= DATAORIGIN+$0014
   534 = 2795			BUF	= DATAORIGIN+$0015
   535
   536 = 2794			@VarData	= DEVNUM
   537 = 0003			@VarDataSize	= 3
   538
   539 2605			@exit
   540 					.ifdef @new
   541 					lda <@VarData
   542 					sta :ztmp
   543 					lda >@VarData
   544 					ldy #@VarDataSize-1
   545 					jmp @FreeMem
   546 					els
   547 2605 60				rts						; ret
   548 					eif
   549 				.endl
   550
   551 				; ------------------------------------------------------------
   552
   553 				.endl							; UNIT SIODISK
   554 2606			l_0093
   555
   556 				; optimize FAIL ('@print', foxinit.pas), line = 73
   557
   558 					@printSTRING #CODEORIGIN+$0000
   558 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
   558 2606 A0 20		 LDY> CODEORIGIN+$0000
   558 2608 A9 00		 LDA< CODEORIGIN+$0000
   558 260A 20 72 24		 JSR @PRINTSTRING
   559 					@printSTRING #CODEORIGIN+$0016
   559 				 LDY> CODEORIGIN+$0016\ LDA< CODEORIGIN+$0016\ JSR @PRINTSTRING
   559 260D A0 20		 LDY> CODEORIGIN+$0016
   559 260F A9 16		 LDA< CODEORIGIN+$0016
   559 2611 20 72 24		 JSR @PRINTSTRING
   560 					@print #$9B
   560 				 LDY# $9B\ JSR @PRINT
   560 2614 A0 9B		 LDY# $9B
   560 2616 20 69 24		 JSR @PRINT
   561 2619 20 64 24			@printEOL
   562 261C			AGAIN
   563
   564 				; optimize OK (foxinit.pas), line = 77
   565
   566 261C A9 00			lda #$00
   567 261E 8D 9A 27			sta OK
   568
   569 				; --- RepeatUntilProlog
   570 2621			l_013B
   571
   572 				; optimize FAIL ('@print', foxinit.pas), line = 81
   573
   574 					@printSTRING #CODEORIGIN+$0022
   574 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   574 2621 A0 20		 LDY> CODEORIGIN+$0022
   574 2623 A9 22		 LDA< CODEORIGIN+$0022
   574 2625 20 72 24		 JSR @PRINTSTRING
   575 2628 20 F4 23			@getline
   576 262B AD 01 04 8D 99 27		mva @buf+1 CH
   577
   578 				; optimize OK (foxinit.pas), line = 84
   579
   580 2631 8D 9B 27			sta @CASETMP_0003
   581 2634 18				clc						; clear carry for add
   582 2635 69 C7			adc #$FF-$38					; make m = $FF
   583 2637 69 08			adc #$38-$31+1					; carry set if in range n to m
   584 2639 90 08			jcc l_014B
   585 				@
   586
   587 				; optimize OK (foxinit.pas), line = 85
   588
   589 263B A9 01			lda #$01
   590 263D 8D 9A 27			sta OK
   591
   592 2640 4C 48 26			jmp a_0003
   593 2643			l_014B
   594
   595 				; optimize OK (foxinit.pas), line = 87
   596
   597 2643 A9 00			lda #$00
   598 2645 8D 9A 27			sta OK
   599 2648			a_0003
   600
   601 				; optimize OK (foxinit.pas), line = 90
   602
   603 2648 AD 9A 27			lda OK
   604 264B F0 D4			jeq l_013B
   605
   606 				; optimize OK (foxinit.pas), line = 92
   607
   608 264D AD 99 27			lda CH
   609 2650 38 E9 30			sub #$30
   610 2653 8D 98 27			sta DRV
   611
   612 				; optimize OK (foxinit.pas), line = 94
   613
   614 2656 20 7A 25			jsr SIODISK.READCONFIG
   615 2659 E8				inx
   616 265A AD 90 27 95 94		mva SIODISK.READCONFIG.RESULT :STACKORIGIN,x
   617 265F AD 91 27 95 A4		mva SIODISK.READCONFIG.RESULT+1 :STACKORIGIN+STACKWIDTH,x
   618 2664 AD 92 27 95 B4		mva SIODISK.READCONFIG.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
   619 2669 AD 93 27 95 C4		mva SIODISK.READCONFIG.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
   620 266E E8				inx
   621 266F A9 20 95 94			mva #$20 :STACKORIGIN,x
   622 2673 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
   623 2677 A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
   624 267B A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
   625 267F 20 4B 24			jsr andEAX_ECX
   626 2682 CA				dex
   627 2683 B5 94			lda :STACKORIGIN,x
   628 2685 8D 97 27			sta DENSITY
   629 2688 CA				dex
   630
   631 				; optimize OK (foxinit.pas), line = 96
   632
   633 2689 AD 87 27			lda SYSTEM.IORESULT
   634 268C 10 18			jpl l_0186
   635
   636 				; optimize FAIL ('@print', foxinit.pas), line = 97
   637
   638 					@printSTRING #CODEORIGIN+$0038
   638 				 LDY> CODEORIGIN+$0038\ LDA< CODEORIGIN+$0038\ JSR @PRINTSTRING
   638 268E A0 20		 LDY> CODEORIGIN+$0038
   638 2690 A9 38		 LDA< CODEORIGIN+$0038
   638 2692 20 72 24		 JSR @PRINTSTRING
   639 2695 AD 87 27			lda SYSTEM.IORESULT
   640 2698 20 A3 24			jsr @printBYTE._a
   641 					@print #$9B
   641 				 LDY# $9B\ JSR @PRINT
   641 269B A0 9B		 LDY# $9B
   641 269D 20 69 24		 JSR @PRINT
   642 26A0 20 64 24			@printEOL
   643 26A3 4C 1C 26			jmp AGAIN
   644 26A6			l_0186
   645
   646 				; optimize FAIL ('@print', foxinit.pas), line = 101
   647
   648 					@print #$44
   648 				 LDY# $44\ JSR @PRINT
   648 26A6 A0 44		 LDY# $44
   648 26A8 20 69 24		 JSR @PRINT
   649 26AB AD 98 27			lda DRV
   650 26AE 20 A3 24			jsr @printBYTE._a
   651 					@printSTRING #CODEORIGIN+$0041
   651 				 LDY> CODEORIGIN+$0041\ LDA< CODEORIGIN+$0041\ JSR @PRINTSTRING
   651 26B1 A0 20		 LDY> CODEORIGIN+$0041
   651 26B3 A9 41		 LDA< CODEORIGIN+$0041
   651 26B5 20 72 24		 JSR @PRINTSTRING
   652
   653 				; optimize OK (foxinit.pas), line = 103
   654
   655 26B8 AD 97 27			lda DENSITY
   656 26BB F0 0A			jeq l_01B7
   657
   658 				; optimize FAIL ('@print', foxinit.pas), line = 104
   659
   660 					@printSTRING #CODEORIGIN+$0045
   660 				 LDY> CODEORIGIN+$0045\ LDA< CODEORIGIN+$0045\ JSR @PRINTSTRING
   660 26BD A0 20		 LDY> CODEORIGIN+$0045
   660 26BF A9 45		 LDA< CODEORIGIN+$0045
   660 26C1 20 72 24		 JSR @PRINTSTRING
   661 26C4 4C CE 26			jmp l_01C4
   662 26C7			l_01B7
   663
   664 				; optimize FAIL ('@print', foxinit.pas), line = 106
   665
   666 					@printSTRING #CODEORIGIN+$004D
   666 				 LDY> CODEORIGIN+$004D\ LDA< CODEORIGIN+$004D\ JSR @PRINTSTRING
   666 26C7 A0 20		 LDY> CODEORIGIN+$004D
   666 26C9 A9 4D		 LDA< CODEORIGIN+$004D
   666 26CB 20 72 24		 JSR @PRINTSTRING
   667 26CE			l_01C4
   668
   669 				; optimize FAIL ('@print', foxinit.pas), line = 108
   670
   671 					@printSTRING #CODEORIGIN+$005E
   671 				 LDY> CODEORIGIN+$005E\ LDA< CODEORIGIN+$005E\ JSR @PRINTSTRING
   671 26CE A0 20		 LDY> CODEORIGIN+$005E
   671 26D0 A9 5E		 LDA< CODEORIGIN+$005E
   671 26D2 20 72 24		 JSR @PRINTSTRING
   672 					@print #$9B
   672 				 LDY# $9B\ JSR @PRINT
   672 26D5 A0 9B		 LDY# $9B
   672 26D7 20 69 24		 JSR @PRINT
   673 26DA 20 64 24			@printEOL
   674
   675 				; optimize FAIL ('@print', foxinit.pas), line = 110
   676
   677 					@printSTRING #CODEORIGIN+$0068
   677 				 LDY> CODEORIGIN+$0068\ LDA< CODEORIGIN+$0068\ JSR @PRINTSTRING
   677 26DD A0 20		 LDY> CODEORIGIN+$0068
   677 26DF A9 68		 LDA< CODEORIGIN+$0068
   677 26E1 20 72 24		 JSR @PRINTSTRING
   678 26E4 20 F4 23			@getline
   679 26E7 AD 01 04 8D 99 27		mva @buf+1 CH
   680
   681 				; optimize OK (foxinit.pas), line = 113
   682
   683 26ED 20 56 25			jsr SYSTEM.UPCASE
   684 26F0 AD 8C 27			lda SYSTEM.UPCASE.RESULT
   685 26F3 C9 59			cmp #$59
   686 26F5 D0 32			jne l_01E8
   687 				@
   688
   689 				; optimize OK (foxinit.pas), line = 115
   690
   691 26F7 AD 97 27			lda DENSITY
   692 26FA F0 18			jeq l_01FB
   693
   694 				; optimize OK (foxinit.pas), line = 116
   695
   696 26FC AD 98 27			lda DRV
   697 26FF 8D 94 27			sta SIODISK.WRITEBOOT.DEVNUM
   698 2702 AD 7E 27			lda XDOS_D
   699 2705 8D 95 27			sta SIODISK.WRITEBOOT.BUF
   700 2708 AD 7F 27			lda XDOS_D+1
   701 270B 8D 96 27			sta SIODISK.WRITEBOOT.BUF+1
   702 270E 20 C5 25			jsr SIODISK.WRITEBOOT
   703 2711 4C 29 27			jmp l_020B
   704 2714			l_01FB
   705
   706 				; optimize OK (foxinit.pas), line = 118
   707
   708 2714 AD 98 27			lda DRV
   709 2717 8D 94 27			sta SIODISK.WRITEBOOT.DEVNUM
   710 271A AD 7C 27			lda XDOS_S
   711 271D 8D 95 27			sta SIODISK.WRITEBOOT.BUF
   712 2720 AD 7D 27			lda XDOS_S+1
   713 2723 8D 96 27			sta SIODISK.WRITEBOOT.BUF+1
   714 2726 20 C5 25			jsr SIODISK.WRITEBOOT
   715 2729			l_020B
   716 2729			l_01E8
   717
   718 				; optimize OK (foxinit.pas), line = 122
   719
   720 2729 AD 87 27			lda SYSTEM.IORESULT
   721 272C 10 18			jpl l_0225
   722
   723 				; optimize FAIL ('@print', foxinit.pas), line = 123
   724
   725 					@printSTRING #CODEORIGIN+$0038
   725 				 LDY> CODEORIGIN+$0038\ LDA< CODEORIGIN+$0038\ JSR @PRINTSTRING
   725 272E A0 20		 LDY> CODEORIGIN+$0038
   725 2730 A9 38		 LDA< CODEORIGIN+$0038
   725 2732 20 72 24		 JSR @PRINTSTRING
   726 2735 AD 87 27			lda SYSTEM.IORESULT
   727 2738 20 A3 24			jsr @printBYTE._a
   728 					@print #$9B
   728 				 LDY# $9B\ JSR @PRINT
   728 273B A0 9B		 LDY# $9B
   728 273D 20 69 24		 JSR @PRINT
   729 2740 20 64 24			@printEOL
   730 2743 4C 1C 26			jmp AGAIN
   731 2746			l_0225
   732
   733 				; optimize FAIL ('@print', foxinit.pas), line = 127
   734
   735 					@printSTRING #CODEORIGIN+$007D
   735 				 LDY> CODEORIGIN+$007D\ LDA< CODEORIGIN+$007D\ JSR @PRINTSTRING
   735 2746 A0 20		 LDY> CODEORIGIN+$007D
   735 2748 A9 7D		 LDA< CODEORIGIN+$007D
   735 274A 20 72 24		 JSR @PRINTSTRING
   736 274D 20 64 24			@printEOL
   737 2750 20 F4 23			@getline
   738 2753 AD 01 04 8D 99 27		mva @buf+1 CH
   739
   740 				; optimize OK (foxinit.pas), line = 130
   741
   742 2759 20 56 25			jsr SYSTEM.UPCASE
   743 275C AD 8C 27			lda SYSTEM.UPCASE.RESULT
   744 275F C9 59			cmp #$59
   745 2761 D0 03			jne l_0251
   746 				@
   747 2763 4C 1C 26			jmp AGAIN
   748 2766			l_0251
   749
   750 				; ------------------------------------------------------------
   751
   752 = 208C			adr.XDOS_S	= CODEORIGIN+$008C
   753 2766			.var XDOS_S	= adr.XDOS_S .word
   754 = 220C			adr.XDOS_D	= CODEORIGIN+$020C
   755 2766			.var XDOS_D	= adr.XDOS_D .word
   756 = 2797			DENSITY	= DATAORIGIN+$0017
   757 = 2798			DRV	= DATAORIGIN+$0018
   758 = 2799			CH	= DATAORIGIN+$0019
   759 = 279A			OK	= DATAORIGIN+$001A
   760 = 279B			@CASETMP_0003	= DATAORIGIN+$001B
   761 2766			@exit
   762
   763 2766 A2 00		@halt	ldx #$00
   764 2768 9A				txs
   765 					.ifdef MAIN.@DEFINES.ROMOFF
   766 					inc portb
   767 					.fi
   768
   769 2769 A0 01			ldy #$01
   770
   771 276B 60				rts
   772
   773 				; ------------------------------------------------------------
   774
   775 276C 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   776
   777 				; ------------------------------------------------------------
   778
   779 277C			.local	@DEFINES
   780 277C			ATARI
   781 				.endl
   782
   783 277C			.local	@RESOURCE
   784 				.endl
   785
   786 = 277C 8C 20		XDOS_S
   786 = 277E 0C 22		XDOS_D
   786 				.endl							; MAIN
   787
   788 				; ------------------------------------------------------------
   789 				; ------------------------------------------------------------
   790
   791 				.macro	UNITINITIALIZATION
   792 				
   793 					.ifdef MAIN.SYSTEM.@UnitInit
   794 					jsr MAIN.SYSTEM.@UnitInit
   795 					.fi
   796 				
   797 					.ifdef MAIN.ATARI.@UnitInit
   798 					jsr MAIN.ATARI.@UnitInit
   799 					.fi
   800 				
   801 					.ifdef MAIN.CRT.@UnitInit
   802 					jsr MAIN.CRT.@UnitInit
   803 					.fi
   804 				
   805 					.ifdef MAIN.SIODISK.@UnitInit
   806 					jsr MAIN.SIODISK.@UnitInit
   807 					.fi
   808 				.endm
   809
   810 				; ------------------------------------------------------------
   811
   812 					ift .SIZEOF(MAIN.SYSTEM) > 0
   813 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   813 				SYSTEM: $2556..$2579
   814 					eif
   815
   816 					ift .SIZEOF(MAIN.ATARI) > 0
   817 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   818 					eif
   819
   820 					ift .SIZEOF(MAIN.CRT) > 0
   821 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   822 					eif
   823
   824 					ift .SIZEOF(MAIN.SIODISK) > 0
   825 					.print 'SIODISK: ',MAIN.SIODISK,'..',MAIN.SIODISK+.SIZEOF(MAIN.SIODISK)-1
   825 				SIODISK: $257A..$2605
   826 					eif
   827
   828 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   828 				CODE: $2000..$277B
   829
   830 				; ------------------------------------------------------------
   831
   832 2780				.align $0004
   833
   834 2780			DATAORIGIN
   835 2780 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   836
   837 = 0006			VARINITSIZE	= *-DATAORIGIN
   838 = 001C			VARDATASIZE	= 28
   839
   840 = 279C			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   841
   842 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   842 				DATA: $2780..$279C
   843
   844 02E0-02E1> 2E 25			run START
   845
   846 				; ------------------------------------------------------------
   847
   848 				.macro	STATICDATA
   849 				.by  $14 $78 $30 $46 $20 $44 $6F $73  $20 $49 $6E $69 $74 $69 $61 $6C  $69 $7A $65 $72 $20 $00 $0A $32
   850 				.by  $30 $32 $32 $2D $30 $37 $2D $31  $30 $00 $14 $53 $65 $6C $65 $63  $74 $20 $64 $72 $69 $76 $65 $20
   851 				.by  $28 $31 $2D $38 $29 $3A $20 $00  $07 $45 $72 $72 $6F $72 $3A $20  $00 $02 $3A $20 $00 $06 $44 $6F
   852 				.by  $75 $62 $6C $65 $00 $0F $53 $69  $6E $67 $6C $65 $2F $45 $6E $68  $61 $6E $63 $65 $64 $00 $08 $20
   853 				.by  $64 $65 $6E $73 $69 $74 $79 $00  $13 $57 $72 $69 $74 $65 $20 $78  $30 $46 $20 $44 $6F $73 $20 $28
   854 				.by  $59 $2F $4E $29 $00 $0D $41 $67  $61 $69 $6E $20 $28 $59 $2F $4E  $29 $3F $20 $00 $46 $03 $EB $07
   855 				.by  $09 $09 $8D $05 $03 $A9 $5C $8D  $E7 $02 $A9 $09 $8D $E8 $02 $A2  $44 $A8 $20 $86 $E4 $20 $8C $08
   856 				.by  $30 $56 $20 $E8 $08 $30 $43 $85  $44 $20 $E8 $08 $30 $4A $85 $45  $C9 $FF $B0 $EE $20 $E8 $08 $30
   857 				.by  $3F $85 $46 $20 $E8 $08 $30 $38  $85 $47 $A9 $09 $8D $E2 $02 $8D  $E3 $02 $20 $E8 $08 $30 $29 $A0
   858 				.by  $00 $91 $44 $A4 $44 $A5 $45 $E6  $44 $D0 $02 $E6 $45 $C4 $46 $E5  $47 $90 $E7 $A9 $08 $48 $48 $6C
   859 				.by  $E2 $02 $6C $E0 $02 $A5 $22 $C9  $28 $D0 $05 $20 $61 $08 $10 $A5  $38 $60 $A2 $00 $86 $43 $A9 $3A
   860 				.by  $A0 $01 $D1 $24 $F0 $01 $C8 $C8  $B1 $24 $C9 $60 $B0 $0C $C9 $30  $B0 $0B $C9 $2E $D0 $04 $E0 $08
   861 				.by  $F0 $ED $88 $A9 $20 $9D $51 $09  $E8 $E0 $0B $90 $E2 $A0 $69 $A9  $01 $A2 $52 $20 $3A $09 $30 $3A
   862 				.by  $A2 $0B $BD $F5 $06 $F0 $69 $29  $DF $C9 $42 $D0 $2E $A0 $0B $BD  $04 $07 $D9 $50 $09 $D0 $24 $CA
   863 				.by  $88 $D0 $F4 $BD $03 $07 $8D $7E  $07 $A5 $43 $0A $0A $5D $04 $07  $8D $7D $07 $8C $7F $07 $8C $E9
   864 				.by  $08 $A0 $7D $99 $FF $06 $88 $D0  $FA $C8 $60 $E6 $43 $8A $29 $F0  $18 $69 $1B $AA $10 $BC $EE $0A
   865 				.by  $03 $A2 $52 $20 $4B $09 $10 $B0  $60 $A0 $00 $CC $7F $07 $90 $0E  $A2 $52 $20 $2C $09 $30 $13 $AC
   866 				.by  $7F $07 $F0 $1A $A0 $00 $B9 $00  $07 $C8 $8C $E9 $08 $A0 $01 $60  $A0 $AA $60 $08 $23 $09 $E7 $08
   867 				.by  $17 $09 $08 $09 $53 $08 $A0 $88  $60 $AC $7F $07 $EE $7F $07 $99  $00 $07 $A0 $01 $60 $A5 $2A $C9
   868 				.by  $08 $D0 $F7 $A2 $57 $AD $7D $07  $29 $03 $AC $7E $07 $D0 $04 $C9  $00 $F0 $DB $8C $0A $03 $8D $0B
   869 				.by  $03 $4D $7D $07 $8D $7D $07 $A9  $00 $8D $7E $07 $8E $02 $03 $4C  $53 $E4 $41 $55 $54 $4F $52 $55
   870 				.by  $4E $20 $20 $20 $20 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $46 $03 $E1 $07
   871 				.by  $09 $09 $A0 $00 $8C $D5 $02 $A0  $01 $8C $D6 $02 $8D $05 $03 $A9  $5C $8D $E7 $02 $A9 $09 $8D $E8
   872 				.by  $02 $A2 $44 $A8 $20 $86 $E4 $20  $8C $08 $30 $56 $20 $E8 $08 $30  $43 $85 $44 $20 $E8 $08 $30 $4A
   873 				.by  $85 $45 $C9 $FF $B0 $EE $20 $E8  $08 $30 $3F $85 $46 $20 $E8 $08  $30 $38 $85 $47 $A9 $09 $8D $E2
   874 				.by  $02 $8D $E3 $02 $20 $E8 $08 $30  $29 $A0 $00 $91 $44 $A4 $44 $A5  $45 $E6 $44 $D0 $02 $E6 $45 $C4
   875 				.by  $46 $E5 $47 $90 $E7 $A9 $08 $48  $48 $6C $E2 $02 $6C $E0 $02 $A5  $22 $C9 $28 $D0 $05 $20 $61 $08
   876 				.by  $10 $A5 $38 $60 $A2 $00 $86 $43  $A9 $3A $A0 $01 $D1 $24 $F0 $01  $C8 $C8 $B1 $24 $C9 $60 $B0 $0C
   877 				.by  $C9 $30 $B0 $0B $C9 $2E $D0 $04  $E0 $08 $F0 $ED $88 $A9 $20 $9D  $51 $09 $E8 $E0 $0B $90 $E2 $A0
   878 				.by  $69 $A9 $01 $A2 $52 $20 $3A $09  $30 $3A $A2 $0B $BD $F5 $06 $F0  $69 $29 $DF $C9 $42 $D0 $2E $A0
   879 				.by  $0B $BD $04 $07 $D9 $50 $09 $D0  $24 $CA $88 $D0 $F4 $BD $03 $07  $8D $FE $07 $A5 $43 $0A $0A $5D
   880 				.by  $04 $07 $8D $FD $07 $8C $FF $07  $8C $E9 $08 $A0 $FD $99 $FF $06  $88 $D0 $FA $C8 $60 $E6 $43 $8A
   881 				.by  $29 $F0 $18 $69 $1B $AA $10 $BC  $EE $0A $03 $A2 $52 $20 $4B $09  $10 $B0 $60 $A0 $00 $CC $FF $07
   882 				.by  $90 $0E $A2 $52 $20 $2C $09 $30  $13 $AC $FF $07 $F0 $1A $A0 $00  $B9 $00 $07 $C8 $8C $E9 $08 $A0
   883 				.by  $01 $60 $A0 $AA $60 $08 $23 $09  $E7 $08 $17 $09 $08 $09 $53 $08  $A0 $88 $60 $AC $FF $07 $EE $FF
   884 				.by  $07 $99 $00 $07 $A0 $01 $60 $A5  $2A $C9 $08 $D0 $F7 $A2 $57 $AD  $FD $07 $29 $03 $AC $FE $07 $D0
   885 				.by  $04 $C9 $00 $F0 $DB $8C $0A $03  $8D $0B $03 $4D $FD $07 $8D $FD  $07 $A9 $00 $8D $FE $07 $8E $02
   886 				.by  $03 $4C $53 $E4 $41 $55 $54 $4F  $52 $55 $4E $20 $20 $20 $20 $00  $00 $00 $00 $00
   887 				.endm
   888
   889 					end
