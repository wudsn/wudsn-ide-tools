mads 2.1.6
Source: bootext.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/06/02] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: bootext.a65]
     1 FFFF> 2000-24D9> 0E 42 + .by  $0E $42 $6F $6F $74 $20 $65 $78  $74 $72 $61 $63 $74 $6F $72 $00  $0A $44 $31 $3A $44 $4F $53 $2E
     2 2018 42 4F 54 00		.by  $42 $4F $54 $00
Source: bootext.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 201C			RTLIB
   113 201C				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D3
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $201C..$2384
   118
   119 				; ------------------------------------------------------------
   120
   121 2385			START
   122 2385 BA				tsx
   123 2386 8E C1 24			stx MAIN.@halt+1
   124
   125 = 001C			VLEN	= VARDATASIZE-VARINITSIZE
   126 = 24E2			VADR	= DATAORIGIN+VARINITSIZE
   127
   128 					ift VADR > $BFFF
   129 					ert 'Invalid memory address range ',VADR
   130 					eli (VLEN>0) && (VLEN<=256)
   131 2389 A2 E4			ldx #256-VLEN
   132 238B A9 00			lda #$00
   133 238D 9D FE 23 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   134 					eli VLEN>256
   135 					@fill #VADR #VLEN #$00
   136 					eif
   137
   138 				.ifdef :psptr
   139 					mwa #PROGRAMSTACK :psptr
   140 				.fi
   141
   142 					.ifdef MAIN.@DEFINES.ROMOFF
   143 					icl 'atari\romoff.asm'
   144 					.fi
   145
   146 2393 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   147 2395 BD 40 03 9D C6 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   148
   149 239E E8				inx						; X = 0
   150 239F 86 80			stx bp						; BP = 0
   151
   152 23A1 8E 0F D2			stx skctl					; reset POKEY
   153 23A4 A9 03			lda #3
   154 23A6 8D 0F D2			sta skctl
   155
   156 23A9 CA				dex						; X = 255
   157
   158 23AA				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: bootext.a65]
   159
   160 23AA			.local	MAIN						; PROCEDURE
   161
   162 23AA 4C 00 24			jmp l_0023
   163
   164 				; ------------------------------------------------------------
   165
   166 23AD			.local	SYSTEM						; UNIT
   167
   168 				; ------------------------------------------------------------
   169
   170 = 0101			__PORTB_BANKS	= $0101
   171 = 0648			M_PI_2	= $0648
   172 = 0192			D_PI_2	= $0192
   173 = 0004			D_PI_180	= $04
   174 = 0000			MGTIA	= $00
   175 = 0080			MVBXE	= $80
   176 = 0000			VBXE_XDLADR	= $00
   177 = 00E0			VBXE_BCBTMP	= $E0
   178 = 0100			VBXE_BCBADR	= $0100
   179 = 1000			VBXE_MAPADR	= $1000
   180 = 1000			VBXE_CHBASE	= $1000
   181 = 5000			VBXE_OVRADR	= $5000
   182 = B000			VBXE_WINDOW	= $B000
   183 = 0000			IDLI	= $00
   184 = 0001			IVBL	= $01
   185 = 0002			ITIM1	= $02
   186 = 0003			ITIM2	= $03
   187 = 0004			ITIM4	= $04
   188 = 00FE			CH_DELCHR	= $FE
   189 = 009B			CH_ENTER	= $9B
   190 = 001B			CH_ESC	= $1B
   191 = 001C			CH_CURS_UP	= $1C
   192 = 001D			CH_CURS_DOWN	= $1D
   193 = 001E			CH_CURS_LEFT	= $1E
   194 = 001F			CH_CURS_RIGHT	= $1F
   195 = 007F			CH_TAB	= $7F
   196 = 009B			CH_EOL	= $9B
   197 = 007D			CH_CLR	= $7D
   198 = 00FD			CH_BELL	= $FD
   199 = 007E			CH_DEL	= $7E
   200 = 009C			CH_DELLINE	= $9C
   201 = 009D			CH_INSLINE	= $9D
   202 = 0000			PAL_PMCOLOR0	= $00
   203 = 0001			PAL_PMCOLOR1	= $01
   204 = 0002			PAL_PMCOLOR2	= $02
   205 = 0003			PAL_PMCOLOR3	= $03
   206 = 0004			PAL_COLOR0	= $04
   207 = 0005			PAL_COLOR1	= $05
   208 = 0006			PAL_COLOR2	= $06
   209 = 0007			PAL_COLOR3	= $07
   210 = 0008			PAL_COLBAK	= $08
   211 = 0000			COLOR_BLACK	= $00
   212 = 000E			COLOR_WHITE	= $0E
   213 = 0032			COLOR_RED	= $32
   214 = 0096			COLOR_CYAN	= $96
   215 = 0068			COLOR_VIOLET	= $68
   216 = 00C4			COLOR_GREEN	= $C4
   217 = 0074			COLOR_BLUE	= $74
   218 = 00EE			COLOR_YELLOW	= $EE
   219 = 0028			COLOR_ORANGE	= $28
   220 = 00E4			COLOR_BROWN	= $E4
   221 = 003C			COLOR_LIGHTRED	= $3C
   222 = 0004			COLOR_GRAY1	= $04
   223 = 0006			COLOR_GRAY2	= $06
   224 = 000A			COLOR_GRAY3	= $0A
   225 = 00CC			COLOR_LIGHTGREEN	= $CC
   226 = 007C			COLOR_LIGHTBLUE	= $7C
   227 = 0004			FMOPENREAD	= $04
   228 = 0008			FMOPENWRITE	= $08
   229 = 0009			FMOPENAPPEND	= $09
   230 = 000C			FMOPENREADWRITE	= $0C
   231 = 24DC			SCREENWIDTH	= DATAORIGIN+$0000
   232 = 24DE			SCREENHEIGHT	= DATAORIGIN+$0002
   233 = 24E0			DATESEPARATOR	= DATAORIGIN+$0004
   234 = D20A			RND	= $D20A
   235 = 02C0			adr.PALETTE	= $02C0
   236 23AD			.var PALETTE	= adr.PALETTE .word
   237 = D012			adr.HPALETTE	= $D012
   238 23AD			.var HPALETTE	= adr.HPALETTE .word
   239 = 24E1			FILEMODE	= DATAORIGIN+$0005
   240 = 24E2			GRAPHMODE	= DATAORIGIN+$0006
   241 = 24E3			IORESULT	= DATAORIGIN+$0007
   242 = 24E4			EOLN	= DATAORIGIN+$0008
   243 = 24E5			RNDSEED	= DATAORIGIN+$0009
   244
   245 = 23AD C0 02		PALETTE
   245 = 23AF 12 D0		HPALETTE
   245 				.endl							; UNIT SYSTEM
   246
   247 				; ------------------------------------------------------------
   248
   249 23B1			.local	ATARI						; UNIT
   250
   251 				; ------------------------------------------------------------
   252
   253 = 0010			IRQENS	= $10
   254 = 0012			RTCLOK	= $12
   255 = 0012			RTCLOK1	= $12
   256 = 0013			RTCLOK2	= $13
   257 = 0014			RTCLOK3	= $14
   258 = 004D			ATRACT	= $4D
   259 = 0052			LMARGIN	= $52
   260 = 0053			RMARGIN	= $53
   261 = 0054			ROWCRS	= $54
   262 = 0055			COLCRS	= $55
   263 = 0057			DINDEX	= $57
   264 = 0058			SAVMSC	= $58
   265 = 0062			PALNTS	= $62
   266 = 006A			RAMTOP	= $6A
   267 = 0200			VDSLST	= $0200
   268 = 0230			SDLSTL	= $0230
   269 = 0290			TXTROW	= $0290
   270 = 0291			TXTCOL	= $0291
   271 = 0293			TINDEX	= $0293
   272 = 0294			TXTMSC	= $0294
   273 = 022F			SDMCTL	= $022F
   274 = 026F			GPRIOR	= $026F
   275 = 02F0			CRSINH	= $02F0
   276 = 02F3			CHACT	= $02F3
   277 = 02F4			CHBAS	= $02F4
   278 = 02FC			CH	= $02FC
   279 = 02C0			PCOLR0	= $02C0
   280 = 02C1			PCOLR1	= $02C1
   281 = 02C2			PCOLR2	= $02C2
   282 = 02C3			PCOLR3	= $02C3
   283 = 02C4			COLOR0	= $02C4
   284 = 02C5			COLOR1	= $02C5
   285 = 02C6			COLOR2	= $02C6
   286 = 02C7			COLOR3	= $02C7
   287 = 02C8			COLOR4	= $02C8
   288 = 02C8			COLBAKS	= $02C8
   289 = D000			HPOSP0	= $D000
   290 = D001			HPOSP1	= $D001
   291 = D002			HPOSP2	= $D002
   292 = D003			HPOSP3	= $D003
   293 = D004			HPOSM0	= $D004
   294 = D005			HPOSM1	= $D005
   295 = D006			HPOSM2	= $D006
   296 = D007			HPOSM3	= $D007
   297 = D008			SIZEP0	= $D008
   298 = D009			SIZEP1	= $D009
   299 = D00A			SIZEP2	= $D00A
   300 = D00B			SIZEP3	= $D00B
   301 = D00C			SIZEM	= $D00C
   302 = D00D			GRAFP0	= $D00D
   303 = D00E			GRAFP1	= $D00E
   304 = D00F			GRAFP2	= $D00F
   305 = D010			GRAFP3	= $D010
   306 = D011			GRAFM	= $D011
   307 = D004			P0PF	= $D004
   308 = D014			PAL	= $D014
   309 = D012			COLPM0	= $D012
   310 = D013			COLPM1	= $D013
   311 = D014			COLPM2	= $D014
   312 = D015			COLPM3	= $D015
   313 = D016			COLPF0	= $D016
   314 = D017			COLPF1	= $D017
   315 = D018			COLPF2	= $D018
   316 = D019			COLPF3	= $D019
   317 = D01A			COLBK	= $D01A
   318 = D01B			PRIOR	= $D01B
   319 = D01D			GRACTL	= $D01D
   320 = D01E			HITCLR	= $D01E
   321 = D01F			CONSOL	= $D01F
   322 = D200			AUDF1	= $D200
   323 = D201			AUDC1	= $D201
   324 = D202			AUDF2	= $D202
   325 = D203			AUDC2	= $D203
   326 = D204			AUDF3	= $D204
   327 = D205			AUDC3	= $D205
   328 = D206			AUDF4	= $D206
   329 = D207			AUDC4	= $D207
   330 = D208			AUDCTL	= $D208
   331 = D209			KBCODE	= $D209
   332 = D20E			IRQEN	= $D20E
   333 = D20F			SKSTAT	= $D20F
   334 = D300			PORTA	= $D300
   335 = D301			PORTB	= $D301
   336 = D400			DMACTL	= $D400
   337 = D401			CHACTL	= $D401
   338 = D402			DLISTL	= $D402
   339 = D404			HSCROL	= $D404
   340 = D405			VSCROL	= $D405
   341 = D407			PMBASE	= $D407
   342 = D409			CHBASE	= $D409
   343 = D40A			WSYNC	= $D40A
   344 = D40B			VCOUNT	= $D40B
   345 = D40C			PENH	= $D40C
   346 = D40D			PENV	= $D40D
   347 = D40E			NMIEN	= $D40E
   348 = FFFA			NMIVEC	= $FFFA
   349 = FFFC			RESETVEC	= $FFFC
   350 = FFFE			IRQVEC	= $FFFE
   351
   352 				.endl							; UNIT ATARI
   353
   354 				; ------------------------------------------------------------
   355
   356 23B1			.local	CRT						; UNIT
   357
   358 23B1			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   359
   360 				; -------------------  ASM Block 00000056  -------------------
   361
   362 23B1 A0 00			ldy #$00	; false
   363 23B3 AD FC 02			lda kbcodes
   364 23B6 C9 FF			cmp #$ff
   365 23B8 F0 01			seq
   366 23BA C8				iny		; true
   367 23BB 8C E8 24			sty Result
   368
   369 23BE			@exit
   370
   371 				; ------------------------------------------------------------
   372
   373 = 24E8			RESULT	= DATAORIGIN+$000C
   374 23BE 60				rts						; ret
   375 				.endl
   376
   377 				; ------------------------------------------------------------
   378
   379 = 24E7			TEXTATTR	= DATAORIGIN+$000B
   380 = D01F			CONSOL	= $D01F
   381 = 0000			CN_START_SELECT_OPTION	= $00
   382 = 0001			CN_SELECT_OPTION	= $01
   383 = 0002			CN_START_OPTION	= $02
   384 = 0003			CN_OPTION	= $03
   385 = 0004			CN_START_SELECT	= $04
   386 = 0005			CN_SELECT	= $05
   387 = 0006			CN_START	= $06
   388 = 0007			CN_NONE	= $07
   389 = 0000			BW40	= $00
   390 = 0001			CO40	= $01
   391 = 0002			BW80	= $02
   392 = 0003			CO80	= $03
   393 = 0007			MONO	= $07
   394 = 0001			C40	= $01
   395 = 0003			C80	= $03
   396 = 0000			BLACK	= $00
   397 = 000F			WHITE	= $0F
   398 = 0026			RED	= $26
   399 = 00AC			CYAN	= $AC
   400 = 0048			PURPLE	= $48
   401 = 00B6			GREEN	= $B6
   402 = 0086			BLUE	= $86
   403 = 00DC			YELLOW	= $DC
   404 = 0018			ORANGE	= $18
   405 = 00F4			BROWN	= $F4
   406 = 002A			LIGHT_RED	= $2A
   407 = 0004			DARK_GREY	= $04
   408 = 0008			GREY	= $08
   409 = 00BC			LIGHT_GREEN	= $BC
   410 = 009A			LIGHT_BLUE	= $9A
   411 = 000C			LIGHT_GREY	= $0C
   412 = 0080			BLINK	= $80
   413
   414 				.endl							; UNIT CRT
   415
   416 				; ------------------------------------------------------------
   417
   418 23BF			.local	SIODISK						; UNIT
   419
   420 23BF			.local	READBOOT					; PROCEDURE | ASSEMBLER
   421
   422 				; -------------------  ASM Block 00000066  -------------------
   423
   424 23BF 8A 48			txa:pha
   425
   426 23C1 AD E9 24			lda devnum
   427 23C4				m@call	@sio.devnrm
Macro: M@CALL [Source: macros.asm]
    12 23C4 20 51 20				jsr @SIO.DEVNRM
   428 23C7 98				tya
   429 23C8 30 30			bmi _err
   430
   431 23CA A9 01			lda <1
   432 23CC 8D 0A 03			sta daux1
   433 23CF A9 00			lda >1
   434 23D1 8D 0B 03			sta daux2
   435
   436 23D4 AE EA 24		lp	ldx buf
   437 23D7 AC EB 24			ldy buf+1
   438 23DA A9 52			lda #'R'	; $52 - Get Sector
   439
   440 23DC				m@call	@sio.boot
Macro: M@CALL [Source: macros.asm]
    12 23DC 20 41 20				jsr @SIO.BOOT
   441 23DF 98				tya
   442 23E0 30 18			bmi _err
   443
   444 23E2 18 AD EA 24 69 80 + 	adw buf #128
   445
   446 23F0 EE 0A 03			inc daux1
   447 23F3 AD 0A 03			lda daux1
   448 23F6 C9 04			cmp #4
   449 23F8 D0 DA			bne lp
   450
   451 23FA 8C E3 24		_err	sty MAIN.SYSTEM.IOResult
   452
   453 23FD 68 AA			pla:tax
   454
   455 				; ------------------------------------------------------------
   456
   457 = 24E9			DEVNUM	= DATAORIGIN+$000D
   458 = 24EA			BUF	= DATAORIGIN+$000E
   459
   460 = 24E9			@VarData	= DEVNUM
   461 = 0003			@VarDataSize	= 3
   462
   463 23FF			@exit
   464 					.ifdef @new
   465 					lda <@VarData
   466 					sta :ztmp
   467 					lda >@VarData
   468 					ldy #@VarDataSize-1
   469 					jmp @FreeMem
   470 					els
   471 23FF 60				rts						; ret
   472 					eif
   473 				.endl
   474
   475 				; ------------------------------------------------------------
   476
   477 				.endl							; UNIT SIODISK
   478 2400			l_0023
   479
   480 				; optimize FAIL ('@print', bootext.pas), line = 17
   481
   482 					@printSTRING #CODEORIGIN+$0000
   482 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
   482 2400 A0 20		 LDY> CODEORIGIN+$0000
   482 2402 A9 00		 LDA< CODEORIGIN+$0000
   482 2404 20 C9 22		 JSR @PRINTSTRING
   483 2407 20 BB 22			@printEOL
   484
   485 				; optimize FAIL ('@print', bootext.pas), line = 19
   486
   487 240A AD EC 24			lda DENSITY
   488 240D 20 FA 22			jsr @printBYTE._a
   489 2410 20 BB 22			@printEOL
   490
   491 				; optimize OK (bootext.pas), line = 21
   492
   493 2413 A9 40			lda #$40
   494 2415 8D D6 24			sta BUF
   495 2418 A9 BC			lda #$BC
   496 241A 8D D7 24			sta BUF+1
   497
   498 				; optimize OK (bootext.pas), line = 23
   499
   500 241D A9 02			lda #$02
   501 241F 8D E9 24			sta SIODISK.READBOOT.DEVNUM
   502 2422 AD D6 24			lda BUF
   503 2425 8D EA 24			sta SIODISK.READBOOT.BUF
   504 2428 AD D7 24			lda BUF+1
   505 242B 8D EB 24			sta SIODISK.READBOOT.BUF+1
   506 242E 20 BF 23			jsr SIODISK.READBOOT
   507 				; AssignFile
   508
   509 				; optimize OK (bootext.pas), line = 25
   510
   511 2431 AC D8 24 84 82 AC + 	mwy F :bp2
   512 243B A0 00			ldy #s@file.pfname
   513 243D A9 10			lda #$10
   514 243F 91 82			sta (:bp2),y
   515 2441 C8				iny
   516 2442 A9 20			lda #$20
   517 2444 91 82			sta (:bp2),y
   518 2446 A0 05			ldy #s@file.status
   519 2448 A9 00			lda #$00
   520 244A 91 82			sta (:bp2),y
   521 				; Rewrite
   522 244C A0 02			ldy #s@file.record
   523 244E A9 01			lda #$01
   524 2450 91 82			sta (:bp2),y
   525 2452 C8				iny
   526 2453 A9 00			lda #$00
   527 2455 91 82			sta (:bp2),y
   528
   529 2457 8A 48			txa:pha
   530 2459 38				sec
   531 					@openfile F, #8
   531 				 LDY F+1\ LDA F\ LDX# 8\ JSR @OPENFILE
   531 245A AC D9 24		 LDY F+1
   531 245D AD D8 24		 LDA F
   531 2460 A2 08		 LDX# 8
   531 2462 20 84 20		 JSR @OPENFILE
   532 2465 68 AA			pla:tax
   533
   534 				; BlockWrite
   535
   536 				; optimize OK (bootext.pas), line = 26
   537
   538 2467 A9 FC			lda <P
   539 2469 85 82			sta :bp2
   540 246B A9 24			lda >P
   541 246D 85 83			sta :bp2+1
   542 246F A0 00			ldy #$00
   543 2471 B1 82			lda (:bp2),y
   544 2473 85 9D			sta :STACKORIGIN+9
   545 2475 C8				iny
   546 2476 B1 82			lda (:bp2),y
   547 2478 85 AD			sta :STACKORIGIN+STACKWIDTH+9
   548 247A AC D8 24 84 82 AC + 	mwy F :bp2
   549 2484 A0 06			ldy #s@file.buffer
   550 2486 A5 9D			lda :STACKORIGIN+9
   551 2488 91 82			sta (:bp2),y
   552 248A C8				iny
   553 248B A5 AD			lda :STACKORIGIN+STACKWIDTH+9
   554 248D 91 82			sta (:bp2),y
   555 248F A0 08			ldy #s@file.nrecord
   556 2491 A9 80			lda #$80
   557 2493 91 82			sta (:bp2),y
   558 2495 C8				iny
   559 2496 A9 01			lda #$01
   560 2498 91 82			sta (:bp2),y
   561
   562 249A 8A 48			txa:pha
   563 249C 38				sec
   564 					@readfile F, #11
   564 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
   564 249D AC D9 24		 LDY F+1
   564 24A0 AD D8 24		 LDA F
   564 24A3 A2 0B		 LDX# 11
   564 24A5 20 47 21		 JSR @READFILE
   565 24A8 68 AA			pla:tax
   566
   567 				; CloseFile
   568
   569 24AA 8A 48			txa:pha
   570 24AC 38				sec
   571 					@closefile F
   571 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
   571 24AD AC D9 24		 LDY F+1
   571 24B0 AD D8 24		 LDA F
   571 24B3 20 1A 21		 JSR @CLOSEFILE
   572 24B6 68 AA			pla:tax
   573
   574 				; --- RepeatUntilProlog
   575 24B8			l_00BE
   576
   577 				; optimize FAIL ('CRT.KEYPRESSED', bootext.pas), line = 29
   578
   579 24B8 20 B1 23			jsr CRT.KEYPRESSED
   580 24BB AD E8 24			lda CRT.KEYPRESSED.RESULT
   581 24BE F0 F8			jeq l_00BE
   582
   583 				; ------------------------------------------------------------
   584
   585 = 24EC			DENSITY	= DATAORIGIN+$0010
   586 = 24ED			adr.BUF	= [DATAORIGIN+$0011] .array [1]
   587 24C0			.var BUF	= adr.BUF .word
   588 24C0			.var F	= DATAORIGIN+$0012 .word
   589 = 24FA			X	= DATAORIGIN+$001E
   590 = 24FC			P	= DATAORIGIN+$0020
   591 24C0			@exit
   592
   593 24C0 A2 00		@halt	ldx #$00
   594 24C2 9A				txs
   595 					.ifdef MAIN.@DEFINES.ROMOFF
   596 					inc portb
   597 					.fi
   598
   599 24C3 A0 01			ldy #$01
   600
   601 24C5 60				rts
   602
   603 				; ------------------------------------------------------------
   604
   605 24C6 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   606
   607 				; ------------------------------------------------------------
   608
   609 24D6			.local	@DEFINES
   610 24D6			ATARI
   611 				.endl
   612
   613 24D6			.local	@RESOURCE
   614 				.endl
   615
   616 = 24D6 ED 24		BUF
   616 = 24D8 EE 24		F
   616 				.endl							; MAIN
   617
   618 				; ------------------------------------------------------------
   619 				; ------------------------------------------------------------
   620
   621 				.macro	UNITINITIALIZATION
   622 				
   623 					.ifdef MAIN.SYSTEM.@UnitInit
   624 					jsr MAIN.SYSTEM.@UnitInit
   625 					.fi
   626 				
   627 					.ifdef MAIN.ATARI.@UnitInit
   628 					jsr MAIN.ATARI.@UnitInit
   629 					.fi
   630 				
   631 					.ifdef MAIN.CRT.@UnitInit
   632 					jsr MAIN.CRT.@UnitInit
   633 					.fi
   634 				
   635 					.ifdef MAIN.SIODISK.@UnitInit
   636 					jsr MAIN.SIODISK.@UnitInit
   637 					.fi
   638 				.endm
   639
   640 				; ------------------------------------------------------------
   641
   642 					ift .SIZEOF(MAIN.SYSTEM) > 0
   643 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   643 				SYSTEM: $23AD..$23B0
   644 					eif
   645
   646 					ift .SIZEOF(MAIN.ATARI) > 0
   647 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   648 					eif
   649
   650 					ift .SIZEOF(MAIN.CRT) > 0
   651 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   651 				CRT: $23B1..$23BE
   652 					eif
   653
   654 					ift .SIZEOF(MAIN.SIODISK) > 0
   655 					.print 'SIODISK: ',MAIN.SIODISK,'..',MAIN.SIODISK+.SIZEOF(MAIN.SIODISK)-1
   655 				SIODISK: $23BF..$23FF
   656 					eif
   657
   658 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   658 				CODE: $2000..$24D5
   659
   660 				; ------------------------------------------------------------
   661
   662 24DA				.align $0004
   663
   664 24DC			DATAORIGIN
   665 24DC-24E1> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
   666
   667 = 0006			VARINITSIZE	= *-DATAORIGIN
   668 = 0022			VARDATASIZE	= 34
   669
   670 = 24FE			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   671
   672 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   672 				DATA: $24DC..$24FE
   673
   674 02E0-02E1> 85 23			run START
   675
   676 				; ------------------------------------------------------------
   677
   678 				.macro	STATICDATA
   679 				.by  $0E $42 $6F $6F $74 $20 $65 $78  $74 $72 $61 $63 $74 $6F $72 $00  $0A $44 $31 $3A $44 $4F $53 $2E
   680 				.by  $42 $4F $54 $00
   681 				.endm
   682
   683 					end
