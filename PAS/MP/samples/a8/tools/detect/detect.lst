mads 2.1.6
Source: detect.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/06/17] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 = 0080			fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0082			bp	.ds 2
    26 = 0084			bp2	.ds 2
    27
    28 = 0086			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 008A			edx	.ds 4
    30 = 008E			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0092			ztmp8	.ds 1
    35 = 0093			ztmp9	.ds 1
    36 = 0094			ztmp10	.ds 1
    37 = 0095			ztmp11	.ds 1
    38
    39 = 0096			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0086			ax	= eax
    45 = 0086			al	= eax
    46 = 0087			ah	= eax+1
    47
    48 = 008E			cx	= ecx
    49 = 008E			cl	= ecx
    50 = 008F			ch	= ecx+1
    51
    52 = 008A			dx	= edx
    53 = 008A			dl	= edx
    54 = 008B			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0086			FP1MAN0	.ds 1
    59 = 0087			FP1MAN1	.ds 1
    60 = 0088			FP1MAN2	.ds 1
    61 = 0089			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0092			FP1SGN	.ds 1
    66 = 0093			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 008A			FP2MAN0	.ds 1
    71 = 008B			FP2MAN1	.ds 1
    72 = 008C			FP2MAN2	.ds 1
    73 = 008D			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0094			FP2SGN	.ds 1
    78 = 0095			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008E			FPMAN0	.ds 1
    83 = 008F			FPMAN1	.ds 1
    84 = 0090			FPMAN2	.ds 1
    85 = 0091			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0084			FPSGN	.ds 1
    90 = 0085			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: detect.a65]
     1 FFFF> 2000-2E40> 09 20 + .by  $09 $20 $20 $20 $20 $43 $50 $55  $3A $20 $00 $04 $36 $35 $30 $32  $00 $05 $36 $35 $63 $30 $32 $00
     2 2018 05 36 35 38 31 36 + .by  $05 $36 $35 $38 $31 $36 $00 $04  $20 $4D $48 $7A $00 $09 $20 $20  $20 $56 $42 $58 $45 $3A $20 $00
     3 2030 03 20 28 24 00 0C + .by  $03 $20 $28 $24 $00 $0C $30 $30  $29 $2C $20 $43 $4F $52 $45 $20  $31 $2E $00 $06 $20 $52 $41 $4D
     4 2048 42 4F 00 09 20 20 + .by  $42 $4F $00 $09 $20 $20 $41 $4E  $54 $49 $43 $3A $20 $00 $03 $50  $41 $4C $00 $04 $4E $54 $53 $43
     5 2060 00 09 20 20 42 61 + .by  $00 $09 $20 $20 $42 $61 $73 $69  $63 $3A $20 $00 $07 $52 $4F $4D  $20 $4F $46 $46 $00 $11 $41 $74
     6 2078 61 72 69 20 42 61 + .by  $61 $72 $69 $20 $42 $61 $73 $69  $63 $20 $52 $65 $76 $2E $41 $00  $11 $41 $74 $61 $72 $69 $20 $42
     7 2090 61 73 69 63 20 52 + .by  $61 $73 $69 $63 $20 $52 $65 $76  $2E $42 $00 $11 $41 $74 $61 $72  $69 $20 $42 $61 $73 $69 $63 $20
     8 20A8 52 65 76 2E 43 00 + .by  $52 $65 $76 $2E $43 $00 $07 $55  $4E $4B $4E $4F $57 $4E $00 $09  $20 $53 $79 $73 $74 $65 $6D $3A
     9 20C0 20 00 0E 58 4C 2F + .by  $20 $00 $0E $58 $4C $2F $58 $45  $20 $4F $53 $20 $52 $65 $76 $2E  $31 $00 $0E $58 $4C $2F $58 $45
    10 20D8 20 4F 53 20 52 65 + .by  $20 $4F $53 $20 $52 $65 $76 $2E  $32 $00 $0E $58 $4C $2F $58 $45  $20 $4F $53 $20 $52 $65 $76 $2E
    11 20F0 33 00 13 58 4C 2F + .by  $33 $00 $13 $58 $4C $2F $58 $45  $2F $58 $45 $47 $53 $20 $4F $53  $20 $52 $65 $76 $2E $34 $00 $0F
    12 2108 58 4C 2F 58 45 20 + .by  $58 $4C $2F $58 $45 $20 $4F $53  $20 $52 $65 $76 $2E $31 $30 $00  $0F $58 $4C $2F $58 $45 $20 $4F
    13 2120 53 20 52 65 76 2E + .by  $53 $20 $52 $65 $76 $2E $31 $31  $00 $0F $58 $4C $2F $58 $45 $20  $4F $53 $20 $52 $65 $76 $2E $33
    14 2138 42 00 0C 51 4D 45 + .by  $42 $00 $0C $51 $4D $45 $47 $2B  $4F $53 $20 $34 $2E $30 $34 $00  $0C $51 $4D $45 $47 $2B $4F $53
    15 2150 20 52 43 30 31 00 + .by  $20 $52 $43 $30 $31 $00 $09 $20  $53 $74 $65 $72 $65 $6F $3A $20  $00 $09 $20 $4D $61 $70 $52 $61
    16 2168 6D 3A 20 00 09 48 + .by  $6D $3A $20 $00 $09 $48 $69 $67  $68 $4D $65 $6D $3A $20 $00 $02  $4B $42 $00 $09 $20 $45 $78 $74
    17 2180 4D 65 6D 3A 20 00 + .by  $4D $65 $6D $3A $20 $00 $06 $20  $62 $61 $6E $6B $73 $00 $04 $7F  $1F $1F $1F $00 $0D $50 $72 $65
    18 2198 73 73 20 61 6E 79 + .by  $73 $73 $20 $61 $6E $79 $20 $6B  $65 $79 $00
Source: detect.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 21A3			RTLIB
   113 21A3				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D5
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $21A3..$277F
   118
   119 				; ------------------------------------------------------------
   120
   121 2780			START
   122 2780 BA				tsx
   123 2781 8E 2C 2E			stx MAIN.@halt+1
   124
   125 = 0043			VLEN	= VARDATASIZE-VARINITSIZE
   126 = 2E4A			VADR	= DATAORIGIN+VARINITSIZE
   127
   128 					ift VADR > $BFFF
   129 					ert 'Invalid memory address range ',VADR
   130 					eli (VLEN>0) && (VLEN<=256)
   131 2784 A2 BD			ldx #256-VLEN
   132 2786 A9 00			lda #$00
   133 2788 9D 8D 2D E8 D0 FA		sta:rne VADR+VLEN-256,x+
   134 					eli VLEN>256
   135 					@fill #VADR #VLEN #$00
   136 					eif
   137
   138 				.ifdef :psptr
   139 					mwa #PROGRAMSTACK :psptr
   140 				.fi
   141
   142 					.ifdef MAIN.@DEFINES.ROMOFF
   143 					icl 'atari\romoff.asm'
   144 					.fi
   145
   146 278E A2 0F			ldx #$0F					; DOS II+/D ParamStr
   147 2790 BD 40 03 9D 31 2E + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   148
   149 2799 E8				inx						; X = 0
   150 279A 86 82			stx bp						; BP = 0
   151
   152 279C 8E 0F D2			stx skctl					; reset POKEY
   153 279F A9 03			lda #3
   154 27A1 8D 0F D2			sta skctl
   155
   156 27A4 CA				dex						; X = 255
   157
   158 27A5				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: detect.a65]
Source: detect.a65
   159
   160 27A5			.local	MAIN						; PROCEDURE
   161
   162 27A5 4C DA 2A			jmp l_01AA
   163
   164 				; ------------------------------------------------------------
   165
   166 27A8			.local	SYSTEM						; UNIT
   167
   168 27A8			.local	HEXSTR						; FUNCTION | ASSEMBLER | REGISTER
   169
   170 				; -------------------  ASM Block 00000001  -------------------
   171
   172 27A8 20 5C 25			jsr @hexStr
   173
   174 				;	@move #@buf Result #33
   175 27AB A0 DF			ldy #256-33
   176 27AD B9 21 03 99 70 2D + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   177
   178 27B6			@exit
   179
   180 				; ------------------------------------------------------------
   181
   182 = 008A			VALUE	= :EDX
   183 = 008E			DIGITS	= :ECX
   184 = 2E4F			adr.RESULT	= [DATAORIGIN+$000B] .array [33]
   185 27B6			.var RESULT	= adr.RESULT .word
   186
   187 = 27B7			@VarData	= RESULT
   188 = 0021			@VarDataSize	= 33
   189
   190 27B6 60				rts						; ret
   191 = 27B7 4F 2E		RESULT
   191 				.endl
   192
   193 				; ------------------------------------------------------------
   194
   195 = 0101			__PORTB_BANKS	= $0101
   196 = 0648			M_PI_2	= $0648
   197 = 0192			D_PI_2	= $0192
   198 = 0004			D_PI_180	= $04
   199 = 0000			MGTIA	= $00
   200 = 0080			MVBXE	= $80
   201 = 0000			VBXE_XDLADR	= $00
   202 = 00E0			VBXE_BCBTMP	= $E0
   203 = 0100			VBXE_BCBADR	= $0100
   204 = 1000			VBXE_MAPADR	= $1000
   205 = 1000			VBXE_CHBASE	= $1000
   206 = 5000			VBXE_OVRADR	= $5000
   207 = B000			VBXE_WINDOW	= $B000
   208 = 0000			IDLI	= $00
   209 = 0001			IVBL	= $01
   210 = 0002			ITIM1	= $02
   211 = 0003			ITIM2	= $03
   212 = 0004			ITIM4	= $04
   213 = 00FE			CH_DELCHR	= $FE
   214 = 009B			CH_ENTER	= $9B
   215 = 001B			CH_ESC	= $1B
   216 = 001C			CH_CURS_UP	= $1C
   217 = 001D			CH_CURS_DOWN	= $1D
   218 = 001E			CH_CURS_LEFT	= $1E
   219 = 001F			CH_CURS_RIGHT	= $1F
   220 = 007F			CH_TAB	= $7F
   221 = 009B			CH_EOL	= $9B
   222 = 007D			CH_CLR	= $7D
   223 = 00FD			CH_BELL	= $FD
   224 = 007E			CH_DEL	= $7E
   225 = 009C			CH_DELLINE	= $9C
   226 = 009D			CH_INSLINE	= $9D
   227 = 0000			PAL_PMCOLOR0	= $00
   228 = 0001			PAL_PMCOLOR1	= $01
   229 = 0002			PAL_PMCOLOR2	= $02
   230 = 0003			PAL_PMCOLOR3	= $03
   231 = 0004			PAL_COLOR0	= $04
   232 = 0005			PAL_COLOR1	= $05
   233 = 0006			PAL_COLOR2	= $06
   234 = 0007			PAL_COLOR3	= $07
   235 = 0008			PAL_COLBAK	= $08
   236 = 0000			COLOR_BLACK	= $00
   237 = 000E			COLOR_WHITE	= $0E
   238 = 0032			COLOR_RED	= $32
   239 = 0096			COLOR_CYAN	= $96
   240 = 0068			COLOR_VIOLET	= $68
   241 = 00C4			COLOR_GREEN	= $C4
   242 = 0074			COLOR_BLUE	= $74
   243 = 00EE			COLOR_YELLOW	= $EE
   244 = 0028			COLOR_ORANGE	= $28
   245 = 00E4			COLOR_BROWN	= $E4
   246 = 003C			COLOR_LIGHTRED	= $3C
   247 = 0004			COLOR_GRAY1	= $04
   248 = 0006			COLOR_GRAY2	= $06
   249 = 000A			COLOR_GRAY3	= $0A
   250 = 00CC			COLOR_LIGHTGREEN	= $CC
   251 = 007C			COLOR_LIGHTBLUE	= $7C
   252 = 0004			FMOPENREAD	= $04
   253 = 0008			FMOPENWRITE	= $08
   254 = 0009			FMOPENAPPEND	= $09
   255 = 000C			FMOPENREADWRITE	= $0C
   256 = 2E44			SCREENWIDTH	= DATAORIGIN+$0000
   257 = 2E46			SCREENHEIGHT	= DATAORIGIN+$0002
   258 = 2E48			DATESEPARATOR	= DATAORIGIN+$0004
   259 = D20A			RND	= $D20A
   260 = 02C0			adr.PALETTE	= $02C0
   261 27B9			.var PALETTE	= adr.PALETTE .word
   262 = D012			adr.HPALETTE	= $D012
   263 27B9			.var HPALETTE	= adr.HPALETTE .word
   264 = 2E49			FILEMODE	= DATAORIGIN+$0005
   265 = 2E4A			GRAPHMODE	= DATAORIGIN+$0006
   266 = 2E4B			IORESULT	= DATAORIGIN+$0007
   267 = 2E4C			EOLN	= DATAORIGIN+$0008
   268 = 2E4D			RNDSEED	= DATAORIGIN+$0009
   269
   270 = 27B9 C0 02		PALETTE
   270 = 27BB 12 D0		HPALETTE
   270 				.endl							; UNIT SYSTEM
   271
   272 				; ------------------------------------------------------------
   273
   274 27BD			.local	ATARI						; UNIT
   275
   276 				; ------------------------------------------------------------
   277
   278 = 0010			IRQENS	= $10
   279 = 0012			RTCLOK	= $12
   280 = 0012			RTCLOK1	= $12
   281 = 0013			RTCLOK2	= $13
   282 = 0014			RTCLOK3	= $14
   283 = 004D			ATRACT	= $4D
   284 = 0052			LMARGIN	= $52
   285 = 0053			RMARGIN	= $53
   286 = 0054			ROWCRS	= $54
   287 = 0055			COLCRS	= $55
   288 = 0057			DINDEX	= $57
   289 = 0058			SAVMSC	= $58
   290 = 0062			PALNTS	= $62
   291 = 006A			RAMTOP	= $6A
   292 = 0200			VDSLST	= $0200
   293 = 0230			SDLSTL	= $0230
   294 = 0290			TXTROW	= $0290
   295 = 0291			TXTCOL	= $0291
   296 = 0293			TINDEX	= $0293
   297 = 0294			TXTMSC	= $0294
   298 = 022F			SDMCTL	= $022F
   299 = 026F			GPRIOR	= $026F
   300 = 02F0			CRSINH	= $02F0
   301 = 02F3			CHACT	= $02F3
   302 = 02F4			CHBAS	= $02F4
   303 = 02FC			CH	= $02FC
   304 = 02C0			PCOLR0	= $02C0
   305 = 02C1			PCOLR1	= $02C1
   306 = 02C2			PCOLR2	= $02C2
   307 = 02C3			PCOLR3	= $02C3
   308 = 02C4			COLOR0	= $02C4
   309 = 02C5			COLOR1	= $02C5
   310 = 02C6			COLOR2	= $02C6
   311 = 02C7			COLOR3	= $02C7
   312 = 02C8			COLOR4	= $02C8
   313 = 02C8			COLBAKS	= $02C8
   314 = D000			HPOSP0	= $D000
   315 = D001			HPOSP1	= $D001
   316 = D002			HPOSP2	= $D002
   317 = D003			HPOSP3	= $D003
   318 = D004			HPOSM0	= $D004
   319 = D005			HPOSM1	= $D005
   320 = D006			HPOSM2	= $D006
   321 = D007			HPOSM3	= $D007
   322 = D008			SIZEP0	= $D008
   323 = D009			SIZEP1	= $D009
   324 = D00A			SIZEP2	= $D00A
   325 = D00B			SIZEP3	= $D00B
   326 = D00C			SIZEM	= $D00C
   327 = D00D			GRAFP0	= $D00D
   328 = D00E			GRAFP1	= $D00E
   329 = D00F			GRAFP2	= $D00F
   330 = D010			GRAFP3	= $D010
   331 = D011			GRAFM	= $D011
   332 = D004			P0PF	= $D004
   333 = D014			PAL	= $D014
   334 = D012			COLPM0	= $D012
   335 = D013			COLPM1	= $D013
   336 = D014			COLPM2	= $D014
   337 = D015			COLPM3	= $D015
   338 = D016			COLPF0	= $D016
   339 = D017			COLPF1	= $D017
   340 = D018			COLPF2	= $D018
   341 = D019			COLPF3	= $D019
   342 = D01A			COLBK	= $D01A
   343 = D01B			PRIOR	= $D01B
   344 = D01D			GRACTL	= $D01D
   345 = D01E			HITCLR	= $D01E
   346 = D01F			CONSOL	= $D01F
   347 = D200			AUDF1	= $D200
   348 = D201			AUDC1	= $D201
   349 = D202			AUDF2	= $D202
   350 = D203			AUDC2	= $D203
   351 = D204			AUDF3	= $D204
   352 = D205			AUDC3	= $D205
   353 = D206			AUDF4	= $D206
   354 = D207			AUDC4	= $D207
   355 = D208			AUDCTL	= $D208
   356 = D209			KBCODE	= $D209
   357 = D20E			IRQEN	= $D20E
   358 = D20F			SKSTAT	= $D20F
   359 = D300			PORTA	= $D300
   360 = D301			PORTB	= $D301
   361 = D400			DMACTL	= $D400
   362 = D401			CHACTL	= $D401
   363 = D402			DLISTL	= $D402
   364 = D404			HSCROL	= $D404
   365 = D405			VSCROL	= $D405
   366 = D407			PMBASE	= $D407
   367 = D409			CHBASE	= $D409
   368 = D40A			WSYNC	= $D40A
   369 = D40B			VCOUNT	= $D40B
   370 = D40C			PENH	= $D40C
   371 = D40D			PENV	= $D40D
   372 = D40E			NMIEN	= $D40E
   373 = FFFA			NMIVEC	= $FFFA
   374 = FFFC			RESETVEC	= $FFFC
   375 = FFFE			IRQVEC	= $FFFE
   376
   377 				.endl							; UNIT ATARI
   378
   379 				; ------------------------------------------------------------
   380
   381 27BD			.local	CRT						; UNIT
   382
   383 27BD			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   384
   385 				; -------------------  ASM Block 00000054  -------------------
   386
   387 27BD A0 00			ldy #$00	; false
   388 27BF AD FC 02			lda kbcodes
   389 27C2 C9 FF			cmp #$ff
   390 27C4 F0 01			seq
   391 27C6 C8				iny		; true
   392 27C7 8C 71 2E			sty Result
   393
   394 27CA			@exit
   395
   396 				; ------------------------------------------------------------
   397
   398 = 2E71			RESULT	= DATAORIGIN+$002D
   399 27CA 60				rts						; ret
   400 				.endl
   401
   402 				; ------------------------------------------------------------
   403
   404 = 2E70			TEXTATTR	= DATAORIGIN+$002C
   405 = D01F			CONSOL	= $D01F
   406 = 0000			CN_START_SELECT_OPTION	= $00
   407 = 0001			CN_SELECT_OPTION	= $01
   408 = 0002			CN_START_OPTION	= $02
   409 = 0003			CN_OPTION	= $03
   410 = 0004			CN_START_SELECT	= $04
   411 = 0005			CN_SELECT	= $05
   412 = 0006			CN_START	= $06
   413 = 0007			CN_NONE	= $07
   414 = 0000			BW40	= $00
   415 = 0001			CO40	= $01
   416 = 0002			BW80	= $02
   417 = 0003			CO80	= $03
   418 = 0007			MONO	= $07
   419 = 0001			C40	= $01
   420 = 0003			C80	= $03
   421 = 0000			BLACK	= $00
   422 = 000F			WHITE	= $0F
   423 = 0026			RED	= $26
   424 = 00AC			CYAN	= $AC
   425 = 0048			PURPLE	= $48
   426 = 00B6			GREEN	= $B6
   427 = 0086			BLUE	= $86
   428 = 00DC			YELLOW	= $DC
   429 = 0018			ORANGE	= $18
   430 = 00F4			BROWN	= $F4
   431 = 002A			LIGHT_RED	= $2A
   432 = 0004			DARK_GREY	= $04
   433 = 0008			GREY	= $08
   434 = 00BC			LIGHT_GREEN	= $BC
   435 = 009A			LIGHT_BLUE	= $9A
   436 = 000C			LIGHT_GREY	= $0C
   437 = 0080			BLINK	= $80
   438
   439 				.endl							; UNIT CRT
   440
   441 				; ------------------------------------------------------------
   442
   443 27CB			.local	MISC						; UNIT
   444
   445 27CB			.local	DETECTANTIC					; FUNCTION | ASSEMBLER
   446
   447 				; -------------------  ASM Block 00000061  -------------------
   448
   449
   450 				// ANTIC PAL Test for Atari 8-bits
   451 				// (C) 2019 Guillermo Fuenzalida
   452
   453 27CB			antic_loop1
   454 27CB AD 0B D4			lda vcount
   455 27CE C9 64			cmp #100
   456 27D0 90 F9			bcc antic_loop1		// wait till scanline 200
   457 27D2 8D E9 27			sta scanline
   458 27D5			antic_loop2
   459 27D5 AD 0B D4			lda vcount
   460 27D8 C9 0A			cmp #10
   461 27DA 30 0A			bmi antic_loop2_fin
   462 27DC CD E9 27			cmp scanline
   463 27DF 30 F4			bmi antic_loop2
   464 27E1 8D E9 27			sta scanline
   465 27E4 10 EF			bpl antic_loop2
   466
   467 27E6			antic_loop2_fin
   468 27E6 A0 00			ldy #$00
   469 27E8 A9 00			lda #0
   470 = 27E9			scanline equ *-1
   471 27EA C9 87			cmp #135
   472 27EC 30 01			bmi ntsc
   473 27EE C8				iny
   474 27EF			ntsc
   475 27EF 8C 72 2E			sty Result
   476
   477
   478 27F2			@exit
   479
   480 				; ------------------------------------------------------------
   481
   482 = 2E72			RESULT	= DATAORIGIN+$002E
   483 27F2 60				rts						; ret
   484 				.endl
   485
   486 27F3			.local	DETECTHIGHMEM					; FUNCTION
   487
   488 				; optimize OK (MISC), line = 115
   489
   490 27F3 A9 00			lda #$00
   491 27F5 8D 73 2E			sta RESULT
   492 27F8 8D 74 2E			sta RESULT+1
   493
   494 				; optimize FAIL ('DETECTCPU', MISC), line = 117
   495
   496 27FB 20 A7 28			jsr DETECTCPU
   497 27FE A9 7F			lda #$7F
   498 2800 CD 76 2E			cmp DETECTCPU.RESULT
   499 2803 B0 63			jcs l_0235
   500 				@
   501
   502 				; -------------------  ASM Block 00000062  -------------------
   503
   504
   505 = 0086			adr	= eax
   506 = 2E73			bcnt	= Result
   507 = 2E74			bfirst	= Result+1
   508
   509 					opt c+
   510
   511 2805 8E 67 28			stx @sp
   512
   513 2808 78				sei
   514 2809 EE 0E D4			inc nmien
   515
   516 280C 64 86		ramsize	stz adr
   517 280E 64 87			stz adr+1
   518 2810 A9 01			lda #$01
   519 2812 85 88			sta adr+2
   520
   521 2814 9C 74 2E			stz bfirst
   522 2817 9C 73 2E			stz bcnt
   523
   524 281A 9C 00 00		?lp0	stz.w $0000
   525
   526 281D A7 86			lda [adr]
   527 281F 49 FF			eor #$ff
   528 2821 87 86			sta [adr]
   529 2823 C7 86			cmp [adr]
   530 2825 D0 0B			bne ?nx
   531 2827 AE 00 00			ldx.w $0000
   532 282A D0 06			bne ?nx
   533 282C 49 FF			eor #$ff
   534 282E 87 86			sta [adr]
   535 2830 80 06			bra ?fnd
   536
   537 2832 E6 88		?nx	inc adr+2
   538 2834 D0 E4			bne ?lp0
   539
   540 2836 80 2A			bra ?abt
   541
   542 2838 A5 88		?fnd	lda adr+2
   543 283A 8D 74 2E			sta bfirst
   544
   545 283D E6 88			inc adr+2
   546 283F EE 73 2E			inc bcnt
   547
   548 2842 9C 00 00		?lp1	stz.w $0000
   549
   550 2845 A7 86			lda [adr]
   551 2847 49 FF			eor #$ff
   552 2849 87 86			sta [adr]
   553 284B C7 86			cmp [adr]
   554 284D D0 13			bne ?abt
   555 284F AE 00 00			ldx.w $0000
   556 2852 D0 0E			bne ?abt
   557 2854 49 FF			eor #$ff
   558 2856 87 86			sta [adr]
   559 2858 EE 73 2E			inc bcnt
   560 285B E6 88			inc adr+2
   561 285D D0 E3			bne ?lp1
   562
   563 285F CE 73 2E		        dec bcnt
   564
   565 2862			?abt
   566 2862 CE 0E D4			dec nmien
   567 2865 58				cli
   568
   569 2866 A2 00			ldx #0
   570 = 2867			@sp	equ *-1
   571
   572 					opt c-
   573
   574 2868			l_0235
   575 2868			@exit
   576
   577 				; ------------------------------------------------------------
   578
   579 = 2E73			RESULT	= DATAORIGIN+$002F
   580 2868 60				rts						; ret
   581 				.endl
   582
   583 2869			.local	DETECTVBXE					; FUNCTION | ASSEMBLER | REGISTER
   584
   585 				; -------------------  ASM Block 00000063  -------------------
   586
   587 2869 8A 48			txa:pha
   588
   589 286B 20 B6 21			jsr @vbxe_detect
   590
   591 286E A0 00			ldy #0		; core
   592 2870 91 8A			sta (p),y
   593
   594 2872 A5 81			lda fxptr+1
   595 2874 85 92			sta Result
   596
   597 2876 C8				iny		; page
   598 2877 91 8A			sta (p),y
   599
   600 2879 68 AA			pla:tax
   601
   602
   603 287B			@exit
   604
   605 				; ------------------------------------------------------------
   606
   607 = 008A			P	= :EDX
   608 = 0092			RESULT	= :STACKORIGIN-4
   609 287B 60				rts						; ret
   610 				.endl
   611
   612 287C			.local	DETECTSTEREO					; FUNCTION | ASSEMBLER
   613
   614 				; -------------------  ASM Block 00000065  -------------------
   615
   616 287C 8A 48			txa:pha
   617
   618 287E A2 00			ldx #$00
   619 2880 8E 0F D2			stx $d20f	;halt pokey 0
   620 2883 8E 1F D2			stx $d21f	;halt pokey 1
   621 2886 A0 03			ldy #$03
   622 2888 8C 1F D2			sty $d21f	;release pokey 1
   623
   624 288B 8D 0A D4			sta $d40a	;delay necessary for
   625 288E 8D 0A D4			sta $d40a	;accelerator boards
   626
   627 2891 A9 FF			lda #$ff
   628 2893 2D 0A D2		loop	and $d20a	;see if pokey 0 is halted ($d20a = $ff)
   629 2896 E8				inx
   630 2897 D0 FA			bne loop
   631
   632 2899 8C 0F D2			sty $d20f
   633
   634 289C C9 FF			cmp #$ff
   635 289E D0 01			bne mono
   636
   637 28A0 E8				inx
   638 28A1			mono
   639 28A1 8E 75 2E			stx Result
   640
   641 28A4 68 AA			pla:tax
   642
   643 28A6			@exit
   644
   645 				; ------------------------------------------------------------
   646
   647 = 2E75			RESULT	= DATAORIGIN+$0031
   648 28A6 60				rts						; ret
   649 				.endl
   650
   651 28A7			.local	DETECTCPU					; FUNCTION | ASSEMBLER
   652
   653 				; -------------------  ASM Block 00000066  -------------------
   654
   655 28A7 8A 48			txa:pha
   656
   657 					opt c+
   658
   659 				;detekcja zainstalowanego procesora
   660 28A9 A9 99			lda #$99
   661 28AB 18				clc
   662 28AC F8				sed
   663 28AD 69 01			adc #$01
   664 28AF D8				cld
   665 28B0 F0 05			beq DetectCPU_CMOS
   666
   667 28B2			DetectCPU_02
   668 28B2 A9 00			lda #0
   669 28B4 4C C4 28			jmp stop
   670
   671 28B7			DetectCPU_CMOS
   672 28B7 A9 00			lda #0
   673 28B9 C2 02			rep #%00000010		;wyzerowanie bitu Z
   674 28BB D0 05			bne DetectCPU_C816
   675
   676 28BD			DetectCPU_C02
   677 28BD A9 01			lda #1
   678 28BF 4C C4 28			jmp stop
   679
   680 28C2			DetectCPU_C816
   681 28C2 A9 80			lda #$80
   682
   683 28C4 8D 76 2E		stop	sta Result
   684
   685 					opt c-
   686
   687 28C7 68 AA			pla:tax
   688
   689
   690 28C9			@exit
   691
   692 				; ------------------------------------------------------------
   693
   694 = 2E76			RESULT	= DATAORIGIN+$0032
   695 28C9 60				rts						; ret
   696 				.endl
   697
   698 28CA			.local	DETECTCPUSPEED					; FUNCTION
   699
   700 				; -------------------  ASM Block 00000067  -------------------
   701
   702 28CA 8E 2F 29			stx @sp
   703
   704 28CD BA				tsx
   705 28CE 8E 1C 29			stx	stk
   706
   707 28D1 AD 22 02			lda	vvblki
   708 28D4 8D 1F 29			sta	lvbl
   709
   710 28D7 AD 23 02			lda	vvblki+1
   711 28DA 8D 24 29			sta	hvbl
   712
   713 28DD AD 01 D3			lda	portb
   714 28E0 8D 29 29			sta	oldp
   715
   716 28E3 A9 FF			lda	#$ff
   717 28E5 8D 01 D3			sta	portb
   718
   719 28E8 78				sei
   720
   721 28E9 A2 0F			ldx	<stop2
   722 28EB A0 29			ldy	>stop2
   723
   724 28ED AD 0B D4		bogo2	lda	vcount
   725 28F0 C9 70			cmp	#112
   726 28F2 D0 F9			bne	bogo2
   727
   728 28F4 8E 22 02			stx	vvblki
   729 28F7 8C 23 02			sty	vvblki+1
   730
   731 28FA A9 00			lda	#$00
   732 28FC 8D 7E 2E			sta	fr0+1
   733 28FF AA				tax
   734 2900 A8				tay
   735
   736 2901 8D 0A D4			sta	wsync
   737
   738 2904 C8			loop2	iny
   739 2905 D0 FD			bne	loop2
   740 2907 E8				inx
   741 2908 D0 FA			bne	loop2
   742 290A 18				clc
   743 290B 69 01			adc	#$01
   744 290D D0 F5			bne	loop2
   745
   746 290F			stop2
   747 290F 68				pla
   748 2910 8D 7B 2E			sta	clkm
   749 2913 68				pla
   750 2914 8D 7C 2E			sta	clkm+1
   751 2917 68				pla
   752 				;	sta	clkm+2
   753 2918 8D 7D 2E			sta	fr0
   754
   755 291B A2 00			ldx	#0
   756 = 291C			stk	equ *-1
   757 291D 9A				txs
   758
   759 291E A9 00			lda	#0
   760 = 291F			lvbl	equ *-1
   761 2920 8D 22 02			sta vvblki
   762
   763 2923 A9 00			lda	#0
   764 = 2924			hvbl	equ *-1
   765 2925 8D 23 02			sta vvblki+1
   766
   767 2928 A9 00			lda	#0
   768 = 2929			oldp	equ *-1
   769 292A 8D 01 D3			sta	portb
   770
   771 292D 58				cli
   772
   773 292E A2 00			ldx #0
   774 = 292F			@sp	equ *-1
   775
   776
   777 				; optimize FAIL ('divmulINT.REAL', MISC), line = 501
   778
   779 2930 E8				inx
   780 2931 A9 00 95 96			mva #$00 :STACKORIGIN,x
   781 2935 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
   782 2939 AD 7D 2E 95 B6		mva FR0 :STACKORIGIN+STACKWIDTH*2,x
   783 293E AD 7E 2E 95 C6		mva FR0+1 :STACKORIGIN+STACKWIDTH*3,x
   784 2943 E8				inx
   785 2944 AD 7B 2E 95 96		mva CLKM :STACKORIGIN,x
   786 2949 AD 7C 2E 95 A6		mva CLKM+1 :STACKORIGIN+STACKWIDTH,x
   787 294E A9 00 95 B6			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
   788 2952 A9 00 95 C6			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
   789 2956 20 0C 22			jsr addEAX_ECX
   790 2959 A9 00 95 96			mva #$00 :STACKORIGIN,x
   791 295D A9 E7 95 A6			mva #$E7 :STACKORIGIN+STACKWIDTH,x
   792 2961 A9 01 95 B6			mva #$01 :STACKORIGIN+STACKWIDTH*2,x
   793 2965 A9 00 95 C6			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
   794 2969 20 9B 22			jsr @expandToREAL1
   795 296C 20 30 23			jsr divmulINT.REAL
   796 296F A9 C6			lda #$C6
   797 2971 85 8E			sta @REAL_MUL.B
   798 2973 A9 01			lda #$01
   799 2975 85 8F			sta @REAL_MUL.B+1
   800 2977 A9 00			lda #$00
   801 2979 85 90			sta @REAL_MUL.B+2
   802 297B A9 00			lda #$00
   803 297D 85 91			sta @REAL_MUL.B+3
   804 297F B5 95			lda :STACKORIGIN-1,x
   805 2981 85 86			sta @REAL_MUL.A
   806 2983 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
   807 2985 85 87			sta @REAL_MUL.A+1
   808 2987 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
   809 2989 85 88			sta @REAL_MUL.A+2
   810 298B B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
   811 298D 85 89			sta @REAL_MUL.A+3
   812 298F 20 56 24			jsr @REAL_MUL
   813 2992 CA				dex
   814 2993 A5 86			lda @REAL_MUL.RESULT
   815 2995 8D 77 2E			sta RESULT
   816 2998 A5 87			lda @REAL_MUL.RESULT+1
   817 299A 8D 78 2E			sta RESULT+1
   818 299D A5 88			lda @REAL_MUL.RESULT+2
   819 299F 8D 79 2E			sta RESULT+2
   820 29A2 A5 89			lda @REAL_MUL.RESULT+3
   821 29A4 8D 7A 2E			sta RESULT+3
   822 29A7 CA				dex
   823 29A8			@exit
   824
   825 				; ------------------------------------------------------------
   826
   827 = 2E77			RESULT	= DATAORIGIN+$0033
   828 = 2E7B			CLKM	= DATAORIGIN+$0037
   829 = 2E7D			FR0	= DATAORIGIN+$0039
   830
   831 = 2E7B			@VarData	= CLKM
   832 = 0004			@VarDataSize	= 4
   833
   834 29A8 60				rts						; ret
   835 				.endl
   836
   837 29A9			.local	DETECTMEM					; FUNCTION | ASSEMBLER
   838
   839 				; -------------------  ASM Block 00000068  -------------------
   840
   841 29A9 8A 48			txa:pha
   842
   843 = 0400			bsav	= @buf
   844
   845 = 4000			ext_b	= $4000		;cokolwiek z zakresu $4000-$7FFF
   846
   847 29AB A0 00			ldy #0
   848 29AD B9 BE 29 99 00 06	mov	mva copy,y detect,y
   849 29B3 C8				iny
   850 29B4 C0 8C			cpy #.sizeof(detect)
   851 29B6 D0 F5			bne mov
   852
   853 29B8 20 00 06			jsr detect
   854
   855 29BB 4C 4A 2A			jmp stop
   856
   857 29BE			copy
   858
   859 0600			.local	detect,$0600
   860
   861 0600 AD 01 D3			lda portb
   862 0603 48				pha
   863
   864 0604 AD 0B D4 D0 FB		lda:rne vcount
   865
   866 				;	lda #$ff
   867 				;	sta portb
   868
   869 0609 AD 00 40			lda ext_b
   870 060C 48				pha
   871
   872 060D A2 0F			ldx #$0f	;zapamiętanie bajtów ext (z 16 bloków po 64k)
   873 060F 20 7F 06		_p0	jsr setpb
   874 0612 AD 00 40			lda ext_b
   875 0615 9D 00 04			sta bsav,x
   876 0618 CA				dex
   877 0619 10 F4			bpl _p0
   878
   879 061B A2 0F			ldx #$0f	;wyzerowanie ich (w oddzielnej pętli, bo nie wiadomo
   880 061D 20 7F 06		_p1	jsr setpb	;które kombinacje bitów PORTB wybierają te same banki)
   881 0620 A9 00			lda #$00
   882 0622 8D 00 40			sta ext_b
   883 0625 CA				dex
   884 0626 10 F5			bpl _p1
   885
   886 0628 8E 01 D3			stx portb	;eliminacja pamięci podstawowej
   887 062B 8E 00 40			stx ext_b
   888 062E 86 00			stx $00		;niezbędne dla niektórych rozszerzeń do 256k
   889
   890 0630 A0 00			ldy #$00	;pętla zliczająca bloki 64k
   891 0632 A2 0F			ldx #$0f
   892 0634 20 7F 06		_p2	jsr setpb
   893 0637 AD 00 40			lda ext_b	;jeśli ext_b jest różne od zera, blok 64k już zliczony
   894 063A D0 23			bne _n2
   895
   896 063C CE 00 40			dec ext_b	;w przeciwnym wypadku zaznacz jako zliczony
   897
   898 063F AD 00 40			lda ext_b	;sprawdz, czy sie zaznaczyl; jesli nie -> cos nie tak ze sprzetem
   899 0642 10 1B			bpl _n2
   900
   901 0644 AD 01 D3			lda portb	;wpisz wartość PORTB do tablicy dla banku 0
   902
   903 0647 29 FE			and #$fe
   904
   905 0649 99 01 01			sta adr.banks,y
   906 064C 49 04			eor #%00000100	;uzupełnij wartości dla banków 1, 2, 3
   907 064E 99 02 01			sta adr.banks+1,y
   908 0651 49 0C			eor #%00001100
   909 0653 99 03 01			sta adr.banks+2,y
   910 0656 49 04			eor #%00000100
   911 0658 99 04 01			sta adr.banks+3,y
   912 065B C8				iny
   913 065C C8				iny
   914 065D C8				iny
   915 065E C8				iny
   916
   917 065F CA			_n2	dex
   918 0660 10 D2			bpl _p2
   919
   920 0662 A2 0F			ldx #$0f	;przywrócenie zawartości ext
   921 0664 20 7F 06		_p3	jsr setpb
   922 0667 BD 00 04			lda bsav,x
   923 066A 8D 00 40			sta ext_b
   924 066D CA				dex
   925 066E 10 F4			bpl _p3
   926
   927 0670 8E 01 D3			stx portb	;X=$FF
   928
   929 0673 68				pla
   930 0674 8D 00 40			sta ext_b
   931
   932 0677 68				pla
   933 0678 8D 01 D3			sta portb
   934
   935 067B 8C 7F 2E			sty Result
   936
   937 067E 60				rts
   938
   939 				; podprogramy
   940 067F 8A			setpb	txa		;zmiana kolejności bitów: %0000dcba -> %cba000d0
   941 0680 4A				lsr
   942 0681 6A				ror
   943 0682 6A				ror
   944 0683 6A				ror
   945 0684 69 01			adc #$01	;ustawienie bitu nr 1 w zaleznosci od stanu C
   946 0686 09 01			ora #$01	;ustawienie bitu sterującego OS ROM na wartosc domyslna
   947 0688 8D 01 D3			sta portb
   948 068B 60				rts
   949
   950 				.endl
   951
   952 2A4A 68 AA		stop	pla:tax
   953
   954
   955 2A4C			@exit
   956
   957 				; ------------------------------------------------------------
   958
   959 = 2E7F			RESULT	= DATAORIGIN+$003B
   960 2A4C 60				rts						; ret
   961 				.endl
   962
   963 2A4D			.local	DETECTMAPRAM					; FUNCTION | ASSEMBLER
   964
   965 				; -------------------  ASM Block 00000069  -------------------
   966
   967
   968 = 008A			bsav	= DX
   969 = 5000			ext_b	= $5000		;cokolwiek z zakresu $5000-$57FF
   970
   971 2A4D 8A 48			txa:pha
   972
   973 2A4F A0 59			ldy #.sizeof(detect)-1
   974 2A51 B9 60 2A 99 00 04 + 	mva:rpl copy,y detect,y-
   975
   976 2A5A 20 00 04			jsr detect
   977
   978 2A5D 4C BA 2A			jmp stop
   979
   980 2A60			copy
   981
   982 0400			.local	detect,@buf
   983
   984 0400 78				sei
   985 0401 EE 0E D4			inc nmien
   986
   987 0404 A9 00 8D 80 2E		mva #FALSE Result
   988
   989 0409 AD 01 D3			lda portb
   990 040C 48				pha
   991
   992 040D A9 FF			lda #$ff
   993 040F 8D 01 D3			sta portb
   994
   995 0412 AD 00 50			lda ext_b
   996 0415 48				pha
   997
   998 0416 20 4F 04		_p0	jsr setb
   999 0419 AD 00 50			lda ext_b
  1000 041C 85 8A			sta bsav
  1001
  1002 041E A9 00			lda #$00
  1003 0420 8D 00 50			sta ext_b
  1004
  1005 0423 A9 FF			lda #$ff
  1006 0425 8D 01 D3			sta portb	;eliminacja pamięci podstawowej
  1007 0428 8D 00 50			sta ext_b
  1008
  1009 042B 20 4F 04		_p2	jsr setb
  1010
  1011 042E EE 00 50			inc ext_b
  1012 0431 F0 05			beq _p3
  1013
  1014 0433 A9 01 8D 80 2E		mva #TRUE Result
  1015
  1016 0438 A5 8A		_p3	lda bsav
  1017 043A 8D 00 50			sta ext_b
  1018
  1019 043D A9 FF			lda #$ff
  1020 043F 8D 01 D3			sta portb
  1021
  1022 0442 68				pla
  1023 0443 8D 00 50			sta ext_b
  1024
  1025 0446 68				pla
  1026 0447 8D 01 D3			sta portb
  1027
  1028 044A CE 0E D4			dec nmien
  1029 044D 58				cli
  1030
  1031 044E 60				rts
  1032
  1033 044F AD 01 D3		setb	lda portb
  1034 0452 29 4E			and #%01001110	; !!!
  1035 0454 09 30			ora #%00110000  ; MAPRAM ON
  1036 0456 8D 01 D3			sta portb
  1037 0459 60				rts
  1038
  1039 				.endl
  1040
  1041 2ABA 68 AA		stop	pla:tax
  1042
  1043
  1044 2ABC			@exit
  1045
  1046 				; ------------------------------------------------------------
  1047
  1048 = 2E80			RESULT	= DATAORIGIN+$003C
  1049 2ABC 60				rts						; ret
  1050 				.endl
  1051
  1052 2ABD			.local	DETECTBASIC					; FUNCTION | ASSEMBLER
  1053
  1054 				; -------------------  ASM Block 00000070  -------------------
  1055
  1056
  1057 = A8E2			BASROM	= $a8e2
  1058
  1059 2ABD AD 01 D3			lda PORTB
  1060 2AC0 8D D3 2A			sta old
  1061
  1062 2AC3 29 01			and #1
  1063 2AC5 F0 08			beq stop
  1064
  1065 2AC7 A9 FD			lda #$fd
  1066 2AC9 8D 01 D3			sta PORTB
  1067
  1068 2ACC AD E2 A8			lda BASROM
  1069 2ACF 8D 81 2E		stop	sta Result
  1070
  1071 2AD2 A9 FF			lda #$ff
  1072 = 2AD3			old	equ *-1
  1073 2AD4 8D 01 D3			sta PORTB
  1074
  1075
  1076 2AD7			@exit
  1077
  1078 				; ------------------------------------------------------------
  1079
  1080 = 2E81			RESULT	= DATAORIGIN+$003D
  1081 2AD7 60				rts						; ret
  1082 				.endl
  1083
  1084 				; ------------------------------------------------------------
  1085
  1086 = 0101			adr.BANKS	= $0101
  1087 2AD8			.var BANKS	= adr.BANKS .word
  1088 = FFF7			DETECTOS	= $FFF7
  1089
  1090 = 2AD8 01 01		BANKS
  1090 				.endl							; UNIT MISC
  1091 2ADA			l_01AA
  1092
  1093 				; optimize OK (detect.pas), line = 14
  1094
  1095 2ADA A9 01			lda #$01
  1096 2ADC 85 52			sta ATARI.LMARGIN
  1097
  1098 				; optimize FAIL ('@print', detect.pas), line = 16
  1099
  1100 2ADE 20 B2 25			@printEOL
  1101
  1102 				; optimize FAIL ('@print', detect.pas), line = 22
  1103
  1104 					@printSTRING #CODEORIGIN+$0000
  1104 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  1104 2AE1 A0 20		 LDY> CODEORIGIN+$0000
  1104 2AE3 A9 00		 LDA< CODEORIGIN+$0000
  1104 2AE5 20 C0 25		 JSR @PRINTSTRING
  1105
  1106 				; optimize FAIL ('MISC.DETECTCPU', detect.pas), line = 24
  1107
  1108 2AE8 20 A7 28			jsr MISC.DETECTCPU
  1109 2AEB AD 76 2E			lda MISC.DETECTCPU.RESULT
  1110 2AEE 8D 87 2E			sta CPU
  1111
  1112 				; optimize OK (detect.pas), line = 26
  1113
  1114 2AF1 8D 88 2E			sta @CASETMP_0003
  1115 2AF4 C9 00			cmp #$00
  1116 2AF6 D0 0A			jne l_0272
  1117 				@
  1118
  1119 				; optimize FAIL ('@print', detect.pas), line = 27
  1120
  1121 					@printSTRING #CODEORIGIN+$000B
  1121 				 LDY> CODEORIGIN+$000B\ LDA< CODEORIGIN+$000B\ JSR @PRINTSTRING
  1121 2AF8 A0 20		 LDY> CODEORIGIN+$000B
  1121 2AFA A9 0B		 LDA< CODEORIGIN+$000B
  1121 2AFC 20 C0 25		 JSR @PRINTSTRING
  1122
  1123 2AFF 4C 17 2B			jmp a_0003
  1124 2B02			l_0272
  1125 2B02 C9 01			cmp #$01
  1126 2B04 D0 0A			jne l_027E
  1127 				@
  1128
  1129 				; optimize FAIL ('@print', detect.pas), line = 28
  1130
  1131 					@printSTRING #CODEORIGIN+$0011
  1131 				 LDY> CODEORIGIN+$0011\ LDA< CODEORIGIN+$0011\ JSR @PRINTSTRING
  1131 2B06 A0 20		 LDY> CODEORIGIN+$0011
  1131 2B08 A9 11		 LDA< CODEORIGIN+$0011
  1131 2B0A 20 C0 25		 JSR @PRINTSTRING
  1132
  1133 2B0D 4C 17 2B			jmp a_0003
  1134 2B10			l_027E
  1135
  1136 				; optimize FAIL ('@print', detect.pas), line = 30
  1137
  1138 					@printSTRING #CODEORIGIN+$0018
  1138 				 LDY> CODEORIGIN+$0018\ LDA< CODEORIGIN+$0018\ JSR @PRINTSTRING
  1138 2B10 A0 20		 LDY> CODEORIGIN+$0018
  1138 2B12 A9 18		 LDA< CODEORIGIN+$0018
  1138 2B14 20 C0 25		 JSR @PRINTSTRING
  1139 2B17			a_0003
  1140
  1141 				; optimize FAIL ('@print', detect.pas), line = 33
  1142
  1143 					@print #$20
  1143 				 LDY# $20\ JSR @PRINT
  1143 2B17 A0 20		 LDY# $20
  1143 2B19 20 B7 25		 JSR @PRINT
  1144 2B1C 20 CA 28			jsr MISC.DETECTCPUSPEED
  1145 2B1F E8				inx
  1146 2B20 AD 77 2E 95 96		mva MISC.DETECTCPUSPEED.RESULT :STACKORIGIN,x
  1147 2B25 AD 78 2E 95 A6		mva MISC.DETECTCPUSPEED.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  1148 2B2A AD 79 2E 95 B6		mva MISC.DETECTCPUSPEED.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  1149 2B2F AD 7A 2E 95 C6		mva MISC.DETECTCPUSPEED.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  1150 2B34 20 BE 26			jsr @printREAL
  1151 2B37 CA				dex
  1152 					@printSTRING #CODEORIGIN+$001F
  1152 				 LDY> CODEORIGIN+$001F\ LDA< CODEORIGIN+$001F\ JSR @PRINTSTRING
  1152 2B38 A0 20		 LDY> CODEORIGIN+$001F
  1152 2B3A A9 1F		 LDA< CODEORIGIN+$001F
  1152 2B3C 20 C0 25		 JSR @PRINTSTRING
  1153 2B3F 20 B2 25			@printEOL
  1154
  1155 				; optimize OK (detect.pas), line = 47
  1156
  1157 2B42 A9 85			lda <P
  1158 2B44 85 8A			sta MISC.DETECTVBXE.P
  1159 2B46 A9 2E			lda >P
  1160 2B48 85 8B			sta MISC.DETECTVBXE.P+1
  1161 2B4A 20 69 28			jsr MISC.DETECTVBXE
  1162 2B4D A5 92			lda MISC.DETECTVBXE.RESULT
  1163 2B4F 8D 84 2E			sta A
  1164
  1165 				; optimize FAIL ('@print', detect.pas), line = 49
  1166
  1167 					@printSTRING #CODEORIGIN+$0025
  1167 				 LDY> CODEORIGIN+$0025\ LDA< CODEORIGIN+$0025\ JSR @PRINTSTRING
  1167 2B52 A0 20		 LDY> CODEORIGIN+$0025
  1167 2B54 A9 25		 LDA< CODEORIGIN+$0025
  1167 2B56 20 C0 25		 JSR @PRINTSTRING
  1168 2B59 E8				inx
  1169 2B5A AD 84 2E 95 96		mva A :STACKORIGIN,x
  1170 2B5F 20 EF 25			jsr @printBOOLEAN
  1171 2B62 CA				dex
  1172
  1173 				; optimize OK (detect.pas), line = 50
  1174
  1175 2B63 AD 84 2E			lda A
  1176 2B66 F0 56			jeq l_02AF
  1177
  1178 				; optimize FAIL ('@print', detect.pas), line = 51
  1179
  1180 					@printSTRING #CODEORIGIN+$0030
  1180 				 LDY> CODEORIGIN+$0030\ LDA< CODEORIGIN+$0030\ JSR @PRINTSTRING
  1180 2B68 A0 20		 LDY> CODEORIGIN+$0030
  1180 2B6A A9 30		 LDA< CODEORIGIN+$0030
  1180 2B6C 20 C0 25		 JSR @PRINTSTRING
  1181 2B6F AD 86 2E			lda P+1
  1182 2B72 85 8A			sta SYSTEM.HEXSTR.VALUE
  1183 2B74 A9 00			lda #$00
  1184 2B76 85 8B			sta SYSTEM.HEXSTR.VALUE+1
  1185 2B78 85 8C			sta SYSTEM.HEXSTR.VALUE+2
  1186 2B7A 85 8D			sta SYSTEM.HEXSTR.VALUE+3
  1187 2B7C A9 02			lda #$02
  1188 2B7E 85 8E			sta SYSTEM.HEXSTR.DIGITS
  1189 2B80 20 A8 27			jsr SYSTEM.HEXSTR
  1190 					@printSTRING SYSTEM.HEXSTR.RESULT
  1190 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  1190 2B83 AC B8 27		 LDY SYSTEM.HEXSTR.RESULT+1
  1190 2B86 AD B7 27		 LDA SYSTEM.HEXSTR.RESULT
  1190 2B89 20 C0 25		 JSR @PRINTSTRING
  1191 					@printSTRING #CODEORIGIN+$0035
  1191 				 LDY> CODEORIGIN+$0035\ LDA< CODEORIGIN+$0035\ JSR @PRINTSTRING
  1191 2B8C A0 20		 LDY> CODEORIGIN+$0035
  1191 2B8E A9 35		 LDA< CODEORIGIN+$0035
  1191 2B90 20 C0 25		 JSR @PRINTSTRING
  1192 2B93 AD 85 2E			lda P
  1193 2B96 29 7F			and #$7F
  1194 2B98 85 8A			sta SYSTEM.HEXSTR.VALUE
  1195 2B9A A9 00			lda #$00
  1196 2B9C 85 8B			sta SYSTEM.HEXSTR.VALUE+1
  1197 2B9E 85 8C			sta SYSTEM.HEXSTR.VALUE+2
  1198 2BA0 85 8D			sta SYSTEM.HEXSTR.VALUE+3
  1199 2BA2 A9 02			lda #$02
  1200 2BA4 85 8E			sta SYSTEM.HEXSTR.DIGITS
  1201 2BA6 20 A8 27			jsr SYSTEM.HEXSTR
  1202 					@printSTRING SYSTEM.HEXSTR.RESULT
  1202 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  1202 2BA9 AC B8 27		 LDY SYSTEM.HEXSTR.RESULT+1
  1202 2BAC AD B7 27		 LDA SYSTEM.HEXSTR.RESULT
  1202 2BAF 20 C0 25		 JSR @PRINTSTRING
  1203
  1204 				; optimize OK (detect.pas), line = 52
  1205
  1206 2BB2 AD 85 2E			lda P
  1207 2BB5 10 07			jpl l_02E3
  1208 					@printSTRING #CODEORIGIN+$0043
  1208 				 LDY> CODEORIGIN+$0043\ LDA< CODEORIGIN+$0043\ JSR @PRINTSTRING
  1208 2BB7 A0 20		 LDY> CODEORIGIN+$0043
  1208 2BB9 A9 43		 LDA< CODEORIGIN+$0043
  1208 2BBB 20 C0 25		 JSR @PRINTSTRING
  1209 2BBE			l_02E3
  1210 2BBE			l_02AF
  1211
  1212 				; optimize FAIL ('@print', detect.pas), line = 54
  1213
  1214 2BBE 20 B2 25			@printEOL
  1215
  1216 				; optimize FAIL ('@print', detect.pas), line = 75
  1217
  1218 					@printSTRING #CODEORIGIN+$004B
  1218 				 LDY> CODEORIGIN+$004B\ LDA< CODEORIGIN+$004B\ JSR @PRINTSTRING
  1218 2BC1 A0 20		 LDY> CODEORIGIN+$004B
  1218 2BC3 A9 4B		 LDA< CODEORIGIN+$004B
  1218 2BC5 20 C0 25		 JSR @PRINTSTRING
  1219
  1220 				; optimize FAIL ('MISC.DETECTANTIC', detect.pas), line = 77
  1221
  1222 2BC8 20 CB 27			jsr MISC.DETECTANTIC
  1223 2BCB AD 72 2E			lda MISC.DETECTANTIC.RESULT
  1224 2BCE 8D 89 2E			sta @CASETMP_0004
  1225 2BD1 C9 01			cmp #$01
  1226 2BD3 D0 0D			jne l_02F7
  1227 				@
  1228
  1229 				; optimize FAIL ('@print', detect.pas), line = 78
  1230
  1231 					@printSTRING #CODEORIGIN+$0056
  1231 				 LDY> CODEORIGIN+$0056\ LDA< CODEORIGIN+$0056\ JSR @PRINTSTRING
  1231 2BD5 A0 20		 LDY> CODEORIGIN+$0056
  1231 2BD7 A9 56		 LDA< CODEORIGIN+$0056
  1231 2BD9 20 C0 25		 JSR @PRINTSTRING
  1232 2BDC 20 B2 25			@printEOL
  1233
  1234 2BDF 4C F0 2B			jmp a_0004
  1235 2BE2			l_02F7
  1236 2BE2 C9 00			cmp #$00
  1237 2BE4 D0 0A			jne l_0303
  1238 				@
  1239
  1240 				; optimize FAIL ('@print', detect.pas), line = 79
  1241
  1242 					@printSTRING #CODEORIGIN+$005B
  1242 				 LDY> CODEORIGIN+$005B\ LDA< CODEORIGIN+$005B\ JSR @PRINTSTRING
  1242 2BE6 A0 20		 LDY> CODEORIGIN+$005B
  1242 2BE8 A9 5B		 LDA< CODEORIGIN+$005B
  1242 2BEA 20 C0 25		 JSR @PRINTSTRING
  1243 2BED 20 B2 25			@printEOL
  1244
  1245 2BF0			l_0303
  1246 2BF0			a_0004
  1247
  1248 				; optimize FAIL ('@print', detect.pas), line = 87
  1249
  1250 					@printSTRING #CODEORIGIN+$0061
  1250 				 LDY> CODEORIGIN+$0061\ LDA< CODEORIGIN+$0061\ JSR @PRINTSTRING
  1250 2BF0 A0 20		 LDY> CODEORIGIN+$0061
  1250 2BF2 A9 61		 LDA< CODEORIGIN+$0061
  1250 2BF4 20 C0 25		 JSR @PRINTSTRING
  1251
  1252 				; optimize FAIL ('MISC.DETECTBASIC', detect.pas), line = 89
  1253
  1254 2BF7 20 BD 2A			jsr MISC.DETECTBASIC
  1255 2BFA AD 81 2E			lda MISC.DETECTBASIC.RESULT
  1256 2BFD 8D 8A 2E			sta @CASETMP_0005
  1257 2C00 C9 00			cmp #$00
  1258 2C02 D0 0D			jne l_0318
  1259 				@
  1260
  1261 				; optimize FAIL ('@print', detect.pas), line = 90
  1262
  1263 					@printSTRING #CODEORIGIN+$006C
  1263 				 LDY> CODEORIGIN+$006C\ LDA< CODEORIGIN+$006C\ JSR @PRINTSTRING
  1263 2C04 A0 20		 LDY> CODEORIGIN+$006C
  1263 2C06 A9 6C		 LDA< CODEORIGIN+$006C
  1263 2C08 20 C0 25		 JSR @PRINTSTRING
  1264 2C0B 20 B2 25			@printEOL
  1265
  1266 2C0E 4C 4E 2C			jmp a_0005
  1267 2C11			l_0318
  1268 2C11 C9 A2			cmp #$A2
  1269 2C13 D0 0D			jne l_0324
  1270 				@
  1271
  1272 				; optimize FAIL ('@print', detect.pas), line = 91
  1273
  1274 					@printSTRING #CODEORIGIN+$0075
  1274 				 LDY> CODEORIGIN+$0075\ LDA< CODEORIGIN+$0075\ JSR @PRINTSTRING
  1274 2C15 A0 20		 LDY> CODEORIGIN+$0075
  1274 2C17 A9 75		 LDA< CODEORIGIN+$0075
  1274 2C19 20 C0 25		 JSR @PRINTSTRING
  1275 2C1C 20 B2 25			@printEOL
  1276
  1277 2C1F 4C 4E 2C			jmp a_0005
  1278 2C22			l_0324
  1279 2C22 C9 60			cmp #$60
  1280 2C24 D0 0D			jne l_0330
  1281 				@
  1282
  1283 				; optimize FAIL ('@print', detect.pas), line = 92
  1284
  1285 					@printSTRING #CODEORIGIN+$0088
  1285 				 LDY> CODEORIGIN+$0088\ LDA< CODEORIGIN+$0088\ JSR @PRINTSTRING
  1285 2C26 A0 20		 LDY> CODEORIGIN+$0088
  1285 2C28 A9 88		 LDA< CODEORIGIN+$0088
  1285 2C2A 20 C0 25		 JSR @PRINTSTRING
  1286 2C2D 20 B2 25			@printEOL
  1287
  1288 2C30 4C 4E 2C			jmp a_0005
  1289 2C33			l_0330
  1290 2C33 C9 EA			cmp #$EA
  1291 2C35 D0 0D			jne l_033C
  1292 				@
  1293
  1294 				; optimize FAIL ('@print', detect.pas), line = 93
  1295
  1296 					@printSTRING #CODEORIGIN+$009B
  1296 				 LDY> CODEORIGIN+$009B\ LDA< CODEORIGIN+$009B\ JSR @PRINTSTRING
  1296 2C37 A0 20		 LDY> CODEORIGIN+$009B
  1296 2C39 A9 9B		 LDA< CODEORIGIN+$009B
  1296 2C3B 20 C0 25		 JSR @PRINTSTRING
  1297 2C3E 20 B2 25			@printEOL
  1298
  1299 2C41 4C 4E 2C			jmp a_0005
  1300 2C44			l_033C
  1301
  1302 				; optimize FAIL ('@print', detect.pas), line = 95
  1303
  1304 					@printSTRING #CODEORIGIN+$00AE
  1304 				 LDY> CODEORIGIN+$00AE\ LDA< CODEORIGIN+$00AE\ JSR @PRINTSTRING
  1304 2C44 A0 20		 LDY> CODEORIGIN+$00AE
  1304 2C46 A9 AE		 LDA< CODEORIGIN+$00AE
  1304 2C48 20 C0 25		 JSR @PRINTSTRING
  1305 2C4B 20 B2 25			@printEOL
  1306 2C4E			a_0005
  1307
  1308 				; optimize FAIL ('@print', detect.pas), line = 103
  1309
  1310 					@printSTRING #CODEORIGIN+$00B7
  1310 				 LDY> CODEORIGIN+$00B7\ LDA< CODEORIGIN+$00B7\ JSR @PRINTSTRING
  1310 2C4E A0 20		 LDY> CODEORIGIN+$00B7
  1310 2C50 A9 B7		 LDA< CODEORIGIN+$00B7
  1310 2C52 20 C0 25		 JSR @PRINTSTRING
  1311
  1312 				; optimize OK (detect.pas), line = 105
  1313
  1314 2C55 AD F7 FF			lda MISC.DETECTOS
  1315 2C58 8D 8B 2E			sta @CASETMP_0006
  1316 2C5B C9 01			cmp #$01
  1317 2C5D D0 0D			jne l_0358
  1318 				@
  1319
  1320 				; optimize FAIL ('@print', detect.pas), line = 106
  1321
  1322 					@printSTRING #CODEORIGIN+$00C2
  1322 				 LDY> CODEORIGIN+$00C2\ LDA< CODEORIGIN+$00C2\ JSR @PRINTSTRING
  1322 2C5F A0 20		 LDY> CODEORIGIN+$00C2
  1322 2C61 A9 C2		 LDA< CODEORIGIN+$00C2
  1322 2C63 20 C0 25		 JSR @PRINTSTRING
  1323 2C66 20 B2 25			@printEOL
  1324
  1325 2C69 4C 12 2D			jmp a_0006
  1326 2C6C			l_0358
  1327 2C6C C9 02			cmp #$02
  1328 2C6E D0 0D			jne l_0364
  1329 				@
  1330
  1331 				; optimize FAIL ('@print', detect.pas), line = 107
  1332
  1333 					@printSTRING #CODEORIGIN+$00D2
  1333 				 LDY> CODEORIGIN+$00D2\ LDA< CODEORIGIN+$00D2\ JSR @PRINTSTRING
  1333 2C70 A0 20		 LDY> CODEORIGIN+$00D2
  1333 2C72 A9 D2		 LDA< CODEORIGIN+$00D2
  1333 2C74 20 C0 25		 JSR @PRINTSTRING
  1334 2C77 20 B2 25			@printEOL
  1335
  1336 2C7A 4C 12 2D			jmp a_0006
  1337 2C7D			l_0364
  1338 2C7D C9 03			cmp #$03
  1339 2C7F D0 0D			jne l_0370
  1340 				@
  1341
  1342 				; optimize FAIL ('@print', detect.pas), line = 108
  1343
  1344 					@printSTRING #CODEORIGIN+$00E2
  1344 				 LDY> CODEORIGIN+$00E2\ LDA< CODEORIGIN+$00E2\ JSR @PRINTSTRING
  1344 2C81 A0 20		 LDY> CODEORIGIN+$00E2
  1344 2C83 A9 E2		 LDA< CODEORIGIN+$00E2
  1344 2C85 20 C0 25		 JSR @PRINTSTRING
  1345 2C88 20 B2 25			@printEOL
  1346
  1347 2C8B 4C 12 2D			jmp a_0006
  1348 2C8E			l_0370
  1349 2C8E C9 04			cmp #$04
  1350 2C90 D0 0D			jne l_037C
  1351 				@
  1352
  1353 				; optimize FAIL ('@print', detect.pas), line = 109
  1354
  1355 					@printSTRING #CODEORIGIN+$00F2
  1355 				 LDY> CODEORIGIN+$00F2\ LDA< CODEORIGIN+$00F2\ JSR @PRINTSTRING
  1355 2C92 A0 20		 LDY> CODEORIGIN+$00F2
  1355 2C94 A9 F2		 LDA< CODEORIGIN+$00F2
  1355 2C96 20 C0 25		 JSR @PRINTSTRING
  1356 2C99 20 B2 25			@printEOL
  1357
  1358 2C9C 4C 12 2D			jmp a_0006
  1359 2C9F			l_037C
  1360 2C9F C9 0A			cmp #$0A
  1361 2CA1 D0 0D			jne l_0388
  1362 				@
  1363
  1364 				; optimize FAIL ('@print', detect.pas), line = 110
  1365
  1366 					@printSTRING #CODEORIGIN+$0107
  1366 				 LDY> CODEORIGIN+$0107\ LDA< CODEORIGIN+$0107\ JSR @PRINTSTRING
  1366 2CA3 A0 21		 LDY> CODEORIGIN+$0107
  1366 2CA5 A9 07		 LDA< CODEORIGIN+$0107
  1366 2CA7 20 C0 25		 JSR @PRINTSTRING
  1367 2CAA 20 B2 25			@printEOL
  1368
  1369 2CAD 4C 12 2D			jmp a_0006
  1370 2CB0			l_0388
  1371 2CB0 C9 0B			cmp #$0B
  1372 2CB2 D0 0D			jne l_0394
  1373 				@
  1374
  1375 				; optimize FAIL ('@print', detect.pas), line = 111
  1376
  1377 					@printSTRING #CODEORIGIN+$0118
  1377 				 LDY> CODEORIGIN+$0118\ LDA< CODEORIGIN+$0118\ JSR @PRINTSTRING
  1377 2CB4 A0 21		 LDY> CODEORIGIN+$0118
  1377 2CB6 A9 18		 LDA< CODEORIGIN+$0118
  1377 2CB8 20 C0 25		 JSR @PRINTSTRING
  1378 2CBB 20 B2 25			@printEOL
  1379
  1380 2CBE 4C 12 2D			jmp a_0006
  1381 2CC1			l_0394
  1382 2CC1 C9 3B			cmp #$3B
  1383 2CC3 D0 0D			jne l_03A0
  1384 				@
  1385
  1386 				; optimize FAIL ('@print', detect.pas), line = 112
  1387
  1388 					@printSTRING #CODEORIGIN+$0129
  1388 				 LDY> CODEORIGIN+$0129\ LDA< CODEORIGIN+$0129\ JSR @PRINTSTRING
  1388 2CC5 A0 21		 LDY> CODEORIGIN+$0129
  1388 2CC7 A9 29		 LDA< CODEORIGIN+$0129
  1388 2CC9 20 C0 25		 JSR @PRINTSTRING
  1389 2CCC 20 B2 25			@printEOL
  1390
  1391 2CCF 4C 12 2D			jmp a_0006
  1392 2CD2			l_03A0
  1393 2CD2 C9 40			cmp #$40
  1394 2CD4 D0 0D			jne l_03AC
  1395 				@
  1396
  1397 				; optimize FAIL ('@print', detect.pas), line = 113
  1398
  1399 					@printSTRING #CODEORIGIN+$013A
  1399 				 LDY> CODEORIGIN+$013A\ LDA< CODEORIGIN+$013A\ JSR @PRINTSTRING
  1399 2CD6 A0 21		 LDY> CODEORIGIN+$013A
  1399 2CD8 A9 3A		 LDA< CODEORIGIN+$013A
  1399 2CDA 20 C0 25		 JSR @PRINTSTRING
  1400 2CDD 20 B2 25			@printEOL
  1401
  1402 2CE0 4C 12 2D			jmp a_0006
  1403 2CE3			l_03AC
  1404 2CE3 C9 FD			cmp #$FD
  1405 2CE5 D0 0D			jne l_03B8
  1406 				@
  1407
  1408 				; optimize FAIL ('@print', detect.pas), line = 114
  1409
  1410 					@printSTRING #CODEORIGIN+$0148
  1410 				 LDY> CODEORIGIN+$0148\ LDA< CODEORIGIN+$0148\ JSR @PRINTSTRING
  1410 2CE7 A0 21		 LDY> CODEORIGIN+$0148
  1410 2CE9 A9 48		 LDA< CODEORIGIN+$0148
  1410 2CEB 20 C0 25		 JSR @PRINTSTRING
  1411 2CEE 20 B2 25			@printEOL
  1412
  1413 2CF1 4C 12 2D			jmp a_0006
  1414 2CF4			l_03B8
  1415
  1416 				; optimize OK (detect.pas), line = 116
  1417
  1418 2CF4 AD 01 D3			lda ATARI.PORTB
  1419 2CF7 29 01			and #$01
  1420 2CF9 D0 0D			jne l_03D5
  1421
  1422 				; optimize FAIL ('@print', detect.pas), line = 117
  1423
  1424 					@printSTRING #CODEORIGIN+$006C
  1424 				 LDY> CODEORIGIN+$006C\ LDA< CODEORIGIN+$006C\ JSR @PRINTSTRING
  1424 2CFB A0 20		 LDY> CODEORIGIN+$006C
  1424 2CFD A9 6C		 LDA< CODEORIGIN+$006C
  1424 2CFF 20 C0 25		 JSR @PRINTSTRING
  1425 2D02 20 B2 25			@printEOL
  1426 2D05 4C 12 2D			jmp l_03E2
  1427 2D08			l_03D5
  1428
  1429 				; optimize FAIL ('@print', detect.pas), line = 119
  1430
  1431 					@printSTRING #CODEORIGIN+$00AE
  1431 				 LDY> CODEORIGIN+$00AE\ LDA< CODEORIGIN+$00AE\ JSR @PRINTSTRING
  1431 2D08 A0 20		 LDY> CODEORIGIN+$00AE
  1431 2D0A A9 AE		 LDA< CODEORIGIN+$00AE
  1431 2D0C 20 C0 25		 JSR @PRINTSTRING
  1432 2D0F 20 B2 25			@printEOL
  1433 2D12			l_03E2
  1434 2D12			a_0006
  1435
  1436 				; optimize FAIL ('@print', detect.pas), line = 127
  1437
  1438 					@printSTRING #CODEORIGIN+$0156
  1438 				 LDY> CODEORIGIN+$0156\ LDA< CODEORIGIN+$0156\ JSR @PRINTSTRING
  1438 2D12 A0 21		 LDY> CODEORIGIN+$0156
  1438 2D14 A9 56		 LDA< CODEORIGIN+$0156
  1438 2D16 20 C0 25		 JSR @PRINTSTRING
  1439 2D19 20 7C 28			jsr MISC.DETECTSTEREO
  1440 2D1C E8				inx
  1441 2D1D AD 75 2E 95 96		mva MISC.DETECTSTEREO.RESULT :STACKORIGIN,x
  1442 2D22 20 EF 25			jsr @printBOOLEAN
  1443 2D25 CA				dex
  1444 2D26 20 B2 25			@printEOL
  1445
  1446 				; optimize FAIL ('@print', detect.pas), line = 134
  1447
  1448 					@printSTRING #CODEORIGIN+$0161
  1448 				 LDY> CODEORIGIN+$0161\ LDA< CODEORIGIN+$0161\ JSR @PRINTSTRING
  1448 2D29 A0 21		 LDY> CODEORIGIN+$0161
  1448 2D2B A9 61		 LDA< CODEORIGIN+$0161
  1448 2D2D 20 C0 25		 JSR @PRINTSTRING
  1449 2D30 20 4D 2A			jsr MISC.DETECTMAPRAM
  1450 2D33 E8				inx
  1451 2D34 AD 80 2E 95 96		mva MISC.DETECTMAPRAM.RESULT :STACKORIGIN,x
  1452 2D39 20 EF 25			jsr @printBOOLEAN
  1453 2D3C CA				dex
  1454 2D3D 20 B2 25			@printEOL
  1455
  1456 				; optimize OK (detect.pas), line = 141
  1457
  1458 2D40 AD 87 2E			lda CPU
  1459 2D43 10 3E			jpl l_0412
  1460
  1461 				; optimize FAIL ('@print', detect.pas), line = 142
  1462
  1463 					@printSTRING #CODEORIGIN+$016C
  1463 				 LDY> CODEORIGIN+$016C\ LDA< CODEORIGIN+$016C\ JSR @PRINTSTRING
  1463 2D45 A0 21		 LDY> CODEORIGIN+$016C
  1463 2D47 A9 6C		 LDA< CODEORIGIN+$016C
  1463 2D49 20 C0 25		 JSR @PRINTSTRING
  1464 2D4C 20 F3 27			jsr MISC.DETECTHIGHMEM
  1465 2D4F E8				inx
  1466 2D50 AD 73 2E 95 96		mva MISC.DETECTHIGHMEM.RESULT :STACKORIGIN,x
  1467 2D55 AD 74 2E 95 A6		mva MISC.DETECTHIGHMEM.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  1468 2D5A E8				inx
  1469 2D5B A9 FF 95 96			mva #$FF :STACKORIGIN,x
  1470 2D5F A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1471 2D63 20 8E 22			jsr andAX_CX
  1472 2D66 A9 40 95 96			mva #$40 :STACKORIGIN,x
  1473 2D6A A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1474 2D6E 20 E5 23			jsr imulWORD
  1475 2D71 20 CD 22			jsr movaBX_EAX
  1476 2D74 CA				dex
  1477 2D75 20 25 26			jsr @printCARD
  1478 2D78 CA				dex
  1479 					@printSTRING #CODEORIGIN+$0177
  1479 				 LDY> CODEORIGIN+$0177\ LDA< CODEORIGIN+$0177\ JSR @PRINTSTRING
  1479 2D79 A0 21		 LDY> CODEORIGIN+$0177
  1479 2D7B A9 77		 LDA< CODEORIGIN+$0177
  1479 2D7D 20 C0 25		 JSR @PRINTSTRING
  1480 2D80 20 B2 25			@printEOL
  1481 2D83			l_0412
  1482
  1483 				; optimize FAIL ('MISC.DETECTMEM', detect.pas), line = 149
  1484
  1485 2D83 20 A9 29			jsr MISC.DETECTMEM
  1486 2D86 AD 7F 2E			lda MISC.DETECTMEM.RESULT
  1487 2D89 8D 83 2E			sta BNK
  1488
  1489 				; optimize FAIL ('@print', detect.pas), line = 150
  1490
  1491 					@printSTRING #CODEORIGIN+$017B
  1491 				 LDY> CODEORIGIN+$017B\ LDA< CODEORIGIN+$017B\ JSR @PRINTSTRING
  1491 2D8C A0 21		 LDY> CODEORIGIN+$017B
  1491 2D8E A9 7B		 LDA< CODEORIGIN+$017B
  1491 2D90 20 C0 25		 JSR @PRINTSTRING
  1492 2D93 E8				inx
  1493 2D94 AD 83 2E 95 96		mva BNK :STACKORIGIN,x
  1494 2D99 20 0C 26			jsr @printSHORTINT
  1495 2D9C CA				dex
  1496 					@printSTRING #CODEORIGIN+$0186
  1496 				 LDY> CODEORIGIN+$0186\ LDA< CODEORIGIN+$0186\ JSR @PRINTSTRING
  1496 2D9D A0 21		 LDY> CODEORIGIN+$0186
  1496 2D9F A9 86		 LDA< CODEORIGIN+$0186
  1496 2DA1 20 C0 25		 JSR @PRINTSTRING
  1497 2DA4 20 B2 25			@printEOL
  1498
  1499 				; optimize OK (detect.pas), line = 152
  1500
  1501 2DA7 A9 00			lda #$00
  1502 2DA9 8D 82 2E			sta I
  1503 2DAC AC 83 2E			ldy BNK
  1504 2DAF 88				dey
  1505 2DB0 8C B8 2D			sty @FORTMP_0447_0
  1506
  1507 2DB3			l_044A
  1508 				; --- ForToDoCondition
  1509 2DB3 AD 82 2E			lda I
  1510 2DB6 38 E9 00			sub @FORTMP_0447_0:#$00
  1511 2DB9 50 02			svc
  1512 2DBB 49 80			eor #$80
  1513 2DBD 30 05			bmi *+7
  1514 2DBF F0 03			beq *+5
  1515 2DC1 4C 11 2E			jmp l_0458
  1516
  1517 				; optimize FAIL ('divmulSHORTINT.MOD', detect.pas), line = 154
  1518
  1519 2DC4 E8				inx
  1520 2DC5 AD 82 2E 95 96		mva I :STACKORIGIN,x
  1521 2DCA E8				inx
  1522 2DCB A9 08 95 96			mva #$08 :STACKORIGIN,x
  1523 2DCF 20 EF 22			jsr divmulSHORTINT.MOD
  1524 2DD2 CA				dex
  1525 2DD3 CA				dex
  1526 2DD4 B5 97			lda :STACKORIGIN+1,x
  1527 2DD6 D0 0A			jne l_0473
  1528 				@
  1529 2DD8 20 B2 25			@printEOL
  1530 					@printSTRING #CODEORIGIN+$018E
  1530 				 LDY> CODEORIGIN+$018E\ LDA< CODEORIGIN+$018E\ JSR @PRINTSTRING
  1530 2DDB A0 21		 LDY> CODEORIGIN+$018E
  1530 2DDD A9 8E		 LDA< CODEORIGIN+$018E
  1530 2DDF 20 C0 25		 JSR @PRINTSTRING
  1531 2DE2			l_0473
  1532
  1533 				; optimize OK (detect.pas), line = 156
  1534
  1535 2DE2 AC 82 2E			ldy I
  1536 2DE5 B9 01 01			lda MISC.adr.BANKS,y
  1537 2DE8 85 8A			sta SYSTEM.HEXSTR.VALUE
  1538 2DEA A9 00			lda #$00
  1539 2DEC 85 8B			sta SYSTEM.HEXSTR.VALUE+1
  1540 2DEE 85 8C			sta SYSTEM.HEXSTR.VALUE+2
  1541 2DF0 85 8D			sta SYSTEM.HEXSTR.VALUE+3
  1542 2DF2 A9 02			lda #$02
  1543 2DF4 85 8E			sta SYSTEM.HEXSTR.DIGITS
  1544 2DF6 20 A8 27			jsr SYSTEM.HEXSTR
  1545 					@printSTRING SYSTEM.HEXSTR.RESULT
  1545 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  1545 2DF9 AC B8 27		 LDY SYSTEM.HEXSTR.RESULT+1
  1545 2DFC AD B7 27		 LDA SYSTEM.HEXSTR.RESULT
  1545 2DFF 20 C0 25		 JSR @PRINTSTRING
  1546 					@print #$20
  1546 				 LDY# $20\ JSR @PRINT
  1546 2E02 A0 20		 LDY# $20
  1546 2E04 20 B7 25		 JSR @PRINT
  1547
  1548 				; --- ForToDoEpilog
  1549 2E07 EE 82 2E			inc I
  1550 2E0A AD 82 2E			lda I
  1551 2E0D C9 80			cmp #$80
  1552 2E0F D0 A2			jne l_044A
  1553 2E11			l_0458
  1554
  1555 				; optimize FAIL ('@print', detect.pas), line = 160
  1556
  1557 					@print #$9B
  1557 				 LDY# $9B\ JSR @PRINT
  1557 2E11 A0 9B		 LDY# $9B
  1557 2E13 20 B7 25		 JSR @PRINT
  1558 2E16 20 B2 25			@printEOL
  1559
  1560 				; optimize FAIL ('@print', detect.pas), line = 161
  1561
  1562 					@printSTRING #CODEORIGIN+$0194
  1562 				 LDY> CODEORIGIN+$0194\ LDA< CODEORIGIN+$0194\ JSR @PRINTSTRING
  1562 2E19 A0 21		 LDY> CODEORIGIN+$0194
  1562 2E1B A9 94		 LDA< CODEORIGIN+$0194
  1562 2E1D 20 C0 25		 JSR @PRINTSTRING
  1563 2E20 20 B2 25			@printEOL
  1564
  1565 				; --- RepeatUntilProlog
  1566 2E23			l_048E
  1567
  1568 				; optimize FAIL ('CRT.KEYPRESSED', detect.pas), line = 163
  1569
  1570 2E23 20 BD 27			jsr CRT.KEYPRESSED
  1571 2E26 AD 71 2E			lda CRT.KEYPRESSED.RESULT
  1572 2E29 F0 F8			jeq l_048E
  1573
  1574 				; ------------------------------------------------------------
  1575
  1576 = 2E82			I	= DATAORIGIN+$003E
  1577 = 2E83			BNK	= DATAORIGIN+$003F
  1578 = 2E84			A	= DATAORIGIN+$0040
  1579 = 2E85			P	= DATAORIGIN+$0041
  1580 = 2E87			CPU	= DATAORIGIN+$0043
  1581 = 2E88			@CASETMP_0003	= DATAORIGIN+$0044
  1582 = 2E89			@CASETMP_0004	= DATAORIGIN+$0045
  1583 = 2E8A			@CASETMP_0005	= DATAORIGIN+$0046
  1584 = 2E8B			@CASETMP_0006	= DATAORIGIN+$0047
  1585 2E2B			@exit
  1586
  1587 2E2B A2 00		@halt	ldx #$00
  1588 2E2D 9A				txs
  1589 					.ifdef MAIN.@DEFINES.ROMOFF
  1590 					inc portb
  1591 					.fi
  1592
  1593 2E2E A0 01			ldy #$01
  1594
  1595 2E30 60				rts
  1596
  1597 				; ------------------------------------------------------------
  1598
  1599 2E31 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1600
  1601 				; ------------------------------------------------------------
  1602
  1603 2E41			.local	@DEFINES
  1604 2E41			ATARI
  1605 				.endl
  1606
  1607 2E41			.local	@RESOURCE
  1608 				.endl
  1609
  1610 				.endl							; MAIN
  1611
  1612 				; ------------------------------------------------------------
  1613 				; ------------------------------------------------------------
  1614
  1615 				.macro	UNITINITIALIZATION
  1616 				
  1617 					.ifdef MAIN.SYSTEM.@UnitInit
  1618 					jsr MAIN.SYSTEM.@UnitInit
  1619 					.fi
  1620 				
  1621 					.ifdef MAIN.ATARI.@UnitInit
  1622 					jsr MAIN.ATARI.@UnitInit
  1623 					.fi
  1624 				
  1625 					.ifdef MAIN.CRT.@UnitInit
  1626 					jsr MAIN.CRT.@UnitInit
  1627 					.fi
  1628 				
  1629 					.ifdef MAIN.MISC.@UnitInit
  1630 					jsr MAIN.MISC.@UnitInit
  1631 					.fi
  1632 				.endm
  1633
  1634 				; ------------------------------------------------------------
  1635
  1636 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1637 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1637 				SYSTEM: $27A8..$27BC
  1638 					eif
  1639
  1640 					ift .SIZEOF(MAIN.ATARI) > 0
  1641 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1642 					eif
  1643
  1644 					ift .SIZEOF(MAIN.CRT) > 0
  1645 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1645 				CRT: $27BD..$27CA
  1646 					eif
  1647
  1648 					ift .SIZEOF(MAIN.MISC) > 0
  1649 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  1649 				MISC: $27CB..$2AD9
  1650 					eif
  1651
  1652 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1652 				CODE: $2000..$2E40
  1653
  1654 				; ------------------------------------------------------------
  1655
  1656 2E41				.align $0004
  1657
  1658 2E44			DATAORIGIN
  1659 2E44-2E49> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1660
  1661 = 0006			VARINITSIZE	= *-DATAORIGIN
  1662 = 0049			VARDATASIZE	= 73
  1663
  1664 = 2E8D			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1665
  1666 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1666 				DATA: $2E44..$2E8D
  1667
  1668 02E0-02E1> 80 27			run START
  1669
  1670 				; ------------------------------------------------------------
  1671
  1672 				.macro	STATICDATA
  1673 				.by  $09 $20 $20 $20 $20 $43 $50 $55  $3A $20 $00 $04 $36 $35 $30 $32  $00 $05 $36 $35 $63 $30 $32 $00
  1674 				.by  $05 $36 $35 $38 $31 $36 $00 $04  $20 $4D $48 $7A $00 $09 $20 $20  $20 $56 $42 $58 $45 $3A $20 $00
  1675 				.by  $03 $20 $28 $24 $00 $0C $30 $30  $29 $2C $20 $43 $4F $52 $45 $20  $31 $2E $00 $06 $20 $52 $41 $4D
  1676 				.by  $42 $4F $00 $09 $20 $20 $41 $4E  $54 $49 $43 $3A $20 $00 $03 $50  $41 $4C $00 $04 $4E $54 $53 $43
  1677 				.by  $00 $09 $20 $20 $42 $61 $73 $69  $63 $3A $20 $00 $07 $52 $4F $4D  $20 $4F $46 $46 $00 $11 $41 $74
  1678 				.by  $61 $72 $69 $20 $42 $61 $73 $69  $63 $20 $52 $65 $76 $2E $41 $00  $11 $41 $74 $61 $72 $69 $20 $42
  1679 				.by  $61 $73 $69 $63 $20 $52 $65 $76  $2E $42 $00 $11 $41 $74 $61 $72  $69 $20 $42 $61 $73 $69 $63 $20
  1680 				.by  $52 $65 $76 $2E $43 $00 $07 $55  $4E $4B $4E $4F $57 $4E $00 $09  $20 $53 $79 $73 $74 $65 $6D $3A
  1681 				.by  $20 $00 $0E $58 $4C $2F $58 $45  $20 $4F $53 $20 $52 $65 $76 $2E  $31 $00 $0E $58 $4C $2F $58 $45
  1682 				.by  $20 $4F $53 $20 $52 $65 $76 $2E  $32 $00 $0E $58 $4C $2F $58 $45  $20 $4F $53 $20 $52 $65 $76 $2E
  1683 				.by  $33 $00 $13 $58 $4C $2F $58 $45  $2F $58 $45 $47 $53 $20 $4F $53  $20 $52 $65 $76 $2E $34 $00 $0F
  1684 				.by  $58 $4C $2F $58 $45 $20 $4F $53  $20 $52 $65 $76 $2E $31 $30 $00  $0F $58 $4C $2F $58 $45 $20 $4F
  1685 				.by  $53 $20 $52 $65 $76 $2E $31 $31  $00 $0F $58 $4C $2F $58 $45 $20  $4F $53 $20 $52 $65 $76 $2E $33
  1686 				.by  $42 $00 $0C $51 $4D $45 $47 $2B  $4F $53 $20 $34 $2E $30 $34 $00  $0C $51 $4D $45 $47 $2B $4F $53
  1687 				.by  $20 $52 $43 $30 $31 $00 $09 $20  $53 $74 $65 $72 $65 $6F $3A $20  $00 $09 $20 $4D $61 $70 $52 $61
  1688 				.by  $6D $3A $20 $00 $09 $48 $69 $67  $68 $4D $65 $6D $3A $20 $00 $02  $4B $42 $00 $09 $20 $45 $78 $74
  1689 				.by  $4D $65 $6D $3A $20 $00 $06 $20  $62 $61 $6E $6B $73 $00 $04 $7F  $1F $1F $1F $00 $0D $50 $72 $65
  1690 				.by  $73 $73 $20 $61 $6E $79 $20 $6B  $65 $79 $00
  1691 				.endm
  1692
  1693 					end
