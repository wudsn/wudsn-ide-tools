; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/04/11] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCASM 'data\captions.asm' CORE.CAPTIONS_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'data\faraon.gr15' CORE.IMAGE_1_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'data\font.fnt' CORE.FONT_ADDR 0 0 0 0 0 0 0 0
	RCDATA 'data\splash.gr8' CORE.SPLASH_ADDR 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0014

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000018  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLCHAR_0057					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000021  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	MOVE_0058					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000028  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	RANDOMIZE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000038  -------------------


  mva $d20a RndSeed
  mva #$00  RndSeed+1


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_0078					; FUNCTION | ASSEMBLER | OVERLOAD
	sta RANGE

; -------------------  ASM Block 00000042  -------------------


;BYTE FUNC Rand(BYTE range)
; returns random number between 0 and
; range-1.  If range=0, then a random
; number between 0 and 255 is returned

  ldy $d20a   ; RANDOM

  lda range
  beq stop

  sta :ecx
  sty :eax

  jsr imulCL
  tay

stop  sty Result


@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000C

@VarData	= RANGE
@VarDataSize	= 1

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	CORE						; UNIT

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize OK (CORE), line = 91

	lda #$01
	sta PAUSESCROLL

; optimize OK (CORE), line = 92

	sta RESETSCROLL

; optimize OK (CORE), line = 93

	lda PALNTS
	cmp #$0F
	jne l_009E

; optimize OK (CORE), line = 95

	lda #$44
	sta REDCOLOR

; optimize OK (CORE), line = 96

	lda #$B4
	sta GREENCOLOR
	jmp l_00B0
l_009E

; optimize OK (CORE), line = 99

	lda #$22
	sta REDCOLOR

; optimize OK (CORE), line = 100

	lda #$A4
	sta GREENCOLOR
l_00B0

	rts

; ------------------------------------------------------------

FONT_ADDR	= $6400
IMAGE_1_ADDR	= $6800
PM_ADDR	= $8000
PM_P0_ADDR	= $8400
PM_P1_ADDR	= $8500
PM_P2_ADDR	= $8600
PM_P3_ADDR	= $8700
IMAGE_ADDR	= $8800
DISPLAY_LIST_ADDR	= $8000
TABLE_SIZE	= $A0
MAX_INDEX	= $9F
LINE_STEP	= $20
IMAGE_SIZE	= $1400
SPLASH_LINES	= $78
SPLASH_ADDR	= $8800
TEXT_LINE_STEP	= $28
TEXT_LINE_COUNT	= $02
TEXT_ADDR	= $9C00
TEXT_LINE_1_ADDR	= $9C00
TEXT_LINE_2_ADDR	= $9C28
SCROLL_LINE_ADDR	= $9C50
SCROLL_LINE_LENGTH	= $0200
TEXT_SIZE	= $0250
CAPTIONS_COUNT	= $24
CAPTIONS_ADDR	= $9E50
CAPTIONS_LENGTHS_ADDR	= $9E98
MAX_INDEX_DELAYS	= $07
adr.SET_VALUE_DELAYS	= CODEORIGIN+$000D
.var SET_VALUE_DELAYS	= adr.SET_VALUE_DELAYS .word
PAUSE_SCROLL_ADDR	= $E8
RESET_SCROLL_ADDR	= $E9
SCROLL_END_ADDR_ADDR	= $EA
PAUSESCROLL	= $E8
RESETSCROLL	= $E9
SCROLLENDADDR	= $EA
RTCLOK	= $14
SDMCTL	= $022F
SDLSTL	= $0230
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
CHBAS	= $02F4
CH	= $02FC
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
PALNTS	= $D014
COLPF1	= $D017
COLPF2	= $D018
GRACTL	= $D01D
DMACTL	= $D400
HSCROL	= $D404
PMBASE	= $D407
NMIEN	= $D40E
adr.IMAGELINELOADDR	= [DATAORIGIN+$000D] .array [160]
.var IMAGELINELOADDR	= adr.IMAGELINELOADDR .word
adr.IMAGELINEHIADDR	= [DATAORIGIN+$00AD] .array [160]
.var IMAGELINEHIADDR	= adr.IMAGELINEHIADDR .word
adr.DISPLAYLISTLINEADDR	= [DATAORIGIN+$014D] .array [160] .word
.var DISPLAYLISTLINEADDR	= adr.DISPLAYLISTLINEADDR .word
adr.TABLE	= [DATAORIGIN+$028D] .array [160]
.var TABLE	= adr.TABLE .word
ACCESSDELAY	= DATAORIGIN+$032D
REDCOLOR	= DATAORIGIN+$032E
GREENCOLOR	= DATAORIGIN+$032F

.endl							; UNIT CORE

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	DELAY						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000055  -------------------

	txa:pha

	ldx #0
	ldy #0

loop	cpy count
	bne @+
	cpx count+1
	beq stop

@	:8 lda:cmp:req vcount

	iny
	sne
	inx

	bne loop

stop	pla:tax

; ------------------------------------------------------------

COUNT	= DATAORIGIN+$0331

@VarData	= COUNT
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000056  -------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	seq
	iny		; true
	sty Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0333
	rts						; ret
.endl

.local	NOSOUND						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000061  -------------------

	lda #0
	sta $d208
	sta $d218

	ldy #3
	sty $d20f
	sty $d21f

	ldy #8
lp	sta $d200,y
	sta $d210,y
	dey
	bpl lp

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SOUND						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000062  -------------------

	lda Chan
	and #7

	ldy #$10
	cmp #4
	scs
	ldy #$00
	sty npokey

	and #3

	asl @
	add #0
npokey	equ *-1
	tay

	lda #$00
	sta audctl
	lda #$03
	sta skctl

	lda Freq
	sta audf1,y

	lda Vol
	and #$0F
	sta _t

	lda Dist	; -> bit 7-6-5
	:4 asl @
	ora #0
_t	equ *-1
	sta audc1,y

; ------------------------------------------------------------

CHAN	= DATAORIGIN+$0334
FREQ	= DATAORIGIN+$0335
DIST	= DATAORIGIN+$0336
VOL	= DATAORIGIN+$0337

@VarData	= CHAN
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$0330
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	CAPTION						; UNIT

; ------------------------------------------------------------

adr.CAPTIONS	= $9E50
.var CAPTIONS	= adr.CAPTIONS .word
adr.CAPTIONS_LENGTHS	= $9E98
.var CAPTIONS_LENGTHS	= adr.CAPTIONS_LENGTHS .word

.endl							; UNIT CAPTION

; ------------------------------------------------------------

.local	KEYBOARD					; UNIT

.local	GETKEY						; FUNCTION

; --- RepeatUntilProlog
l_00C0

; optimize OK (KEYBOARD), line = 56

	lda CORE.CH
	sta RESULT

; optimize OK (KEYBOARD), line = 57

	cmp #$FF
	jeq l_00C0

; optimize OK (KEYBOARD), line = 59

	lda #$FF
	sta CORE.CH
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0338
	rts						; ret
.endl

; ------------------------------------------------------------

KEY_ESC	= $1C
KEY_TAB	= $2C
KEY_RETURN	= $0C
KEY_SPACE	= $21
KEY_MINUS	= $0E
KEY_PLUS	= $06
KEY_0	= $32
KEY_1	= $1F
KEY_2	= $1E
KEY_3	= $1A
KEY_4	= $18
KEY_5	= $1D
KEY_6	= $1B
KEY_9	= $30
KEY_A	= $3F
KEY_B	= $15
KEY_C	= $12
KEY_D	= $3A
KEY_E	= $2A
KEY_G	= $3D
KEY_H	= $39
KEY_I	= $0D
KEY_L	= $00
KEY_M	= $25
KEY_N	= $23
KEY_O	= $08
KEY_P	= $0A
KEY_Q	= $2F
KEY_R	= $28
KEY_S	= $3E
KEY_T	= $2D
KEY_U	= $0B
KEY_V	= $10
KEY_Y	= $2B
KEY_Z	= $17
NO_KEY	= $FF

.endl							; UNIT KEYBOARD

; ------------------------------------------------------------

.local	OPERATION					; UNIT

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize OK (OPERATION), line = 136

	lda #$00
	sta WORKINGMODE

; optimize OK (OPERATION), line = 137

	sta DEMO

; optimize OK (OPERATION), line = 138

	sta ABORTED

; optimize OK (OPERATION), line = 139

	sta QUIT

	rts

; ------------------------------------------------------------

OPERATION_COUNT	= $16
MAX_OPERATION	= $15
adr.OPERATION_CAPTIONS	= CODEORIGIN+$0015
.var OPERATION_CAPTIONS	= adr.OPERATION_CAPTIONS .word
adr.OPERATION_SHORTCUTS	= CODEORIGIN+$002B
.var OPERATION_SHORTCUTS	= adr.OPERATION_SHORTCUTS .word
adr.OPERATION_SHORTCUT_TEXTS	= CODEORIGIN+$0041
.var OPERATION_SHORTCUT_TEXTS	= adr.OPERATION_SHORTCUT_TEXTS .word
WORKINGMODE	= DATAORIGIN+$0339
DEMO	= DATAORIGIN+$033A
OPERATIONCOUNT	= DATAORIGIN+$033B
OPERATIONINDEX	= DATAORIGIN+$033C
OPERATIONKIND	= DATAORIGIN+$033D
DEMOSHUFFLEMETHOD	= DATAORIGIN+$033E
ABORTED	= DATAORIGIN+$033F
QUIT	= DATAORIGIN+$0340

.endl							; UNIT OPERATION

; ------------------------------------------------------------

.local	STATUS						; UNIT

.local	PUTBYTETOTEXTBUFFER				; PROCEDURE
	sta VALUE

; optimize OK (STATUS), line = 41

	cmp #$64
	jcc l_00FD

; optimize OK (STATUS), line = 43

	lda TEXTPTR
	add #$03
	sta TEXTPTR
	scc
	inc TEXTPTR+1

; optimize OK (STATUS), line = 44

	lda TEXTLEN
	add #$03
	sta TEXTLEN
	jmp l_0109
l_00FD

; optimize OK (STATUS), line = 46

	lda VALUE
	cmp #$0A
	jcc l_011B

; optimize OK (STATUS), line = 48

	lda TEXTPTR
	add #$02
	sta TEXTPTR
	scc
	inc TEXTPTR+1

; optimize OK (STATUS), line = 49

	lda TEXTLEN
	add #$02
	sta TEXTLEN
	jmp l_0127
l_011B

; optimize FAIL (0, STATUS), line = 52

	inc TEXTPTR
	sne
	inc TEXTPTR+1

; optimize FAIL (0, STATUS), line = 53

	inc TEXTLEN
l_0127
l_0109

; optimize OK (STATUS), line = 56

	lda TEXTPTR
	sta PTR
	lda TEXTPTR+1
	sta PTR+1

; --- RepeatUntilProlog
l_0135

; optimize FAIL (0, STATUS), line = 59

	lda PTR
	bne @+
	dec PTR+1
@
	dec PTR

; optimize OK (STATUS), line = 60

	lda VALUE
	sta :al
	lda #$0A
	sta :cl
	jsr idivAL_CL.MOD
	lda :ztmp8
	sta TMP

; optimize OK (STATUS), line = 61

	add #$10
	sta TMP

; optimize OK (STATUS), line = 62

	mwy PTR :bp2
	ldy #$00
	sta (:bp2),y

; optimize OK (STATUS), line = 63

	lda VALUE
	lsr @
	sta :eax
	lsr @
	adc :eax
	ror @
	lsr @
	lsr @
	adc :eax
	ror @
	adc :eax
	ror @
	lsr @
	lsr @
	sta VALUE

; optimize OK (STATUS), line = 64

	jne l_0135

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$037C
TMP	= DATAORIGIN+$037D
PTR	= DATAORIGIN+$037E

@VarData	= VALUE
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTCAPTION					; PROCEDURE
	sta CAPTION

; optimize OK (STATUS), line = 71

	ldy CAPTION
	lda CAPTION.adr.CAPTIONS_LENGTHS,y
	sta LEN

; optimize OK (STATUS), line = 72

	tya
	asl @
	tay
	lda CAPTION.adr.CAPTIONS,y
	sta SYSTEM.MOVE_0058.SOURCE
	lda CAPTION.adr.CAPTIONS+1,y
	sta SYSTEM.MOVE_0058.SOURCE+1
	lda TEXTPTR
	sta SYSTEM.MOVE_0058.DEST
	lda TEXTPTR+1
	sta SYSTEM.MOVE_0058.DEST+1
	lda LEN
	sta SYSTEM.MOVE_0058.COUNT
	lda #$00
	sta SYSTEM.MOVE_0058.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0058
	m@INLINE
	.endl

; optimize OK (STATUS), line = 73

	lda TEXTPTR
	add LEN
	sta TEXTPTR
	scc
	inc TEXTPTR+1

; optimize OK (STATUS), line = 74

	lda TEXTLEN
	add LEN
	sta TEXTLEN

; ------------------------------------------------------------

CAPTION	= DATAORIGIN+$0380
LEN	= DATAORIGIN+$0381

@VarData	= CAPTION
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTCHARTOTEXTBUFFER				; PROCEDURE
	sta C

; optimize OK (STATUS), line = 79

	mwy TEXTPTR :bp2
	ldy #$00
	lda C
	sta (:bp2),y

; optimize FAIL (0, STATUS), line = 80

	inc TEXTPTR
	sne
	inc TEXTPTR+1

; optimize FAIL (0, STATUS), line = 81

	inc TEXTLEN

; ------------------------------------------------------------

C	= DATAORIGIN+$0382

@VarData	= C
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATEOPERATIONCAPTION				; PROCEDURE

; optimize OK (STATUS), line = 91

	lda #$00
	sta TEXTLEN

; optimize OK (STATUS), line = 92

	lda <adr.TEXTBUF
	sta TEXTPTR
	lda >adr.TEXTBUF
	sta TEXTPTR+1

; optimize OK (STATUS), line = 94

	lda OPERATION.WORKINGMODE
	jne l_01B6

; optimize OK (STATUS), line = 96

	lda #$1B
	jsr PUTCAPTION
	jmp l_01C2
l_01B6

; optimize OK (STATUS), line = 98

	lda OPERATION.WORKINGMODE
	cmp #$01
	jne l_01D4

; optimize OK (STATUS), line = 100

	lda #$1C
	jsr PUTCAPTION
	jmp l_01E0
l_01D4

; optimize OK (STATUS), line = 102

	lda OPERATION.WORKINGMODE
	cmp #$03
	jne l_01F2

; optimize OK (STATUS), line = 104

	lda #$1D
	jsr PUTCAPTION
	jmp l_01FE
l_01F2

; optimize OK (STATUS), line = 106

	lda OPERATION.WORKINGMODE
	cmp #$04
	jne l_0210

; optimize OK (STATUS), line = 108

	lda #$1E
	jsr PUTCAPTION
	jmp l_021C
l_0210

; optimize OK (STATUS), line = 110

	lda OPERATION.WORKINGMODE
	cmp #$02
	jne l_022E

; optimize OK (STATUS), line = 112

	lda OPERATION.DEMO
	jeq l_023B

; optimize OK (STATUS), line = 114

	lda #$00
	jsr PUTCAPTION

; optimize OK (STATUS), line = 116

	lda OPERATION.OPERATIONINDEX
	jsr PUTBYTETOTEXTBUFFER

; optimize OK (STATUS), line = 117

	lda #$0F
	jsr PUTCHARTOTEXTBUFFER

; optimize OK (STATUS), line = 118

	lda OPERATION.OPERATIONCOUNT
	jsr PUTBYTETOTEXTBUFFER

; optimize OK (STATUS), line = 120

	lda #$01
	jsr PUTCAPTION
l_023B

; optimize OK (STATUS), line = 122

	ldy OPERATION.OPERATIONKIND
	lda OPERATION.adr.OPERATION_CAPTIONS,y
	jsr PUTCAPTION
l_022E
l_021C
l_01FE
l_01E0
l_01C2

; optimize OK (STATUS), line = 125

	lda #$00
	ldy #$27
	sta:rpl $9C00,y-

; optimize OK (STATUS), line = 126

	lda #$28
	sub TEXTLEN
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta POS

; optimize OK (STATUS), line = 127

	sta SYSTEM.MOVE_0058.DEST
	lda #$9C
	sta SYSTEM.MOVE_0058.DEST+1
	lda <adr.TEXTBUF
	sta SYSTEM.MOVE_0058.SOURCE
	lda >adr.TEXTBUF
	sta SYSTEM.MOVE_0058.SOURCE+1
	lda TEXTLEN
	sta SYSTEM.MOVE_0058.COUNT
	lda #$00
	sta SYSTEM.MOVE_0058.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0058
	m@INLINE
	.endl

; ------------------------------------------------------------

POS	= DATAORIGIN+$0383
DEMO_1_STR_LEN	= $06
DEMO_2_STR_LEN	= $04

@VarData	= POS
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARNUMBER					; PROCEDURE

; optimize OK (STATUS), line = 132

	lda NUMBERPTR
	sta :bp2
	lda NUMBERPTR+1
	sta :bp2+1
	lda #$00
	ldy #$04
	sta:rpl (:bp2),y-
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INCNUMBER					; PROCEDURE

; optimize OK (STATUS), line = 139

	lda #$04
	sta I

; optimize OK (STATUS), line = 140

	lda NUMBERPTR
	add I
	sta NUMBERPTR
	scc
	inc NUMBERPTR+1

; --- WhileProlog
	jmp l_0289
l_028A

; optimize OK (STATUS), line = 143

	mvy NUMBERPTR+1 :bp+1
	ldy NUMBERPTR
	lda (:bp),y
	cmp #$09
	jne l_029C

; optimize OK (STATUS), line = 145

	mwy NUMBERPTR :bp2
	ldy #$00
	tya
	sta (:bp2),y

; optimize OK (STATUS), line = 146

	lda I
	jeq l_02B3

; optimize FAIL (0, STATUS), line = 148

	dec I

; optimize FAIL (0, STATUS), line = 149

	lda NUMBERPTR
	bne @+
	dec NUMBERPTR+1
@
	dec NUMBERPTR
	jmp l_02C5
l_02B3
	jmp b_028A					; break
l_02C5
	jmp l_02CE
l_029C

; optimize OK (STATUS), line = 154

	mwy NUMBERPTR :bp2
	ldy #$00
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	jmp b_028A					; break
l_02CE
l_0289

; optimize OK (STATUS), line = 141

	jmp l_028A
b_028A

; ------------------------------------------------------------

I	= DATAORIGIN+$0384

@VarData	= I
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INCREADCOUNT					; PROCEDURE

; optimize OK (STATUS), line = 162

	lda <adr.READCOUNT
	sta NUMBERPTR
	lda >adr.READCOUNT
	sta NUMBERPTR+1

; optimize OK (STATUS), line = 163

	lda #$01
	sta READCHANGED

; optimize FAIL ('INCNUMBER', STATUS), line = 164

	jsr INCNUMBER
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INCWRITECOUNT					; PROCEDURE

; optimize OK (STATUS), line = 169

	lda <adr.WRITECOUNT
	sta NUMBERPTR
	lda >adr.WRITECOUNT
	sta NUMBERPTR+1

; optimize OK (STATUS), line = 170

	lda #$01
	sta WRITECHANGED

; optimize FAIL ('INCNUMBER', STATUS), line = 171

	jsr INCNUMBER
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITENUMBER					; PROCEDURE

; optimize OK (STATUS), line = 179

	lda #$00
	sta I

l_02FA
; --- ForToDoCondition
	lda I
	cmp #$05
	jcs l_0308

; optimize OK (STATUS), line = 181

	mwy NUMBERPTR :bp2
	ldy #$00
	lda (:bp2),y
	sta TMP

; optimize OK (STATUS), line = 182

	add #$10
	sta TMP

; optimize OK (STATUS), line = 183

	mwy TEXTPTR :bp2
	ldy #$00
	sta (:bp2),y

; optimize FAIL (0, STATUS), line = 184

	inc NUMBERPTR
	sne
	inc NUMBERPTR+1

; optimize FAIL (0, STATUS), line = 185

	inc TEXTPTR
	sne
	inc TEXTPTR+1

; --- ForToDoEpilog
	inc I
	jne l_02FA
l_0308

; ------------------------------------------------------------

I	= DATAORIGIN+$0385
TMP	= DATAORIGIN+$0386
PTR	= DATAORIGIN+$0387

@VarData	= I
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATESTATISTICS				; PROCEDURE

; optimize OK (STATUS), line = 194

	lda ACCESSRTCLOCK
	cmp CORE.RTCLOK
	jeq l_033A

; optimize OK (STATUS), line = 196

	lda CORE.RTCLOK
	sta ACCESSRTCLOCK

; optimize OK (STATUS), line = 197

	lda READCHANGED
	jeq l_034D

; optimize OK (STATUS), line = 199

	lda #$30
	sta TEXTPTR
	lda #$9C
	sta TEXTPTR+1

; optimize OK (STATUS), line = 200

	lda <adr.READCOUNT
	sta NUMBERPTR
	lda >adr.READCOUNT
	sta NUMBERPTR+1

; optimize FAIL ('WRITENUMBER', STATUS), line = 201

	jsr WRITENUMBER

; optimize OK (STATUS), line = 202

	lda #$00
	sta READCHANGED
l_034D

; optimize OK (STATUS), line = 205

	lda WRITECHANGED
	jeq l_0369

; optimize OK (STATUS), line = 207

	lda #$3F
	sta TEXTPTR
	lda #$9C
	sta TEXTPTR+1

; optimize OK (STATUS), line = 208

	lda <adr.WRITECOUNT
	sta NUMBERPTR
	lda >adr.WRITECOUNT
	sta NUMBERPTR+1

; optimize FAIL ('WRITENUMBER', STATUS), line = 209

	jsr WRITENUMBER

; optimize OK (STATUS), line = 210

	lda #$00
	sta WRITECHANGED
l_0369
l_033A

; ------------------------------------------------------------

READS_ADDR	= $9C30
WRITES_ADDR	= $9C3F
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FORCEUPDATESTATISTICS				; PROCEDURE

; optimize OK (STATUS), line = 220

	lda CORE.RTCLOK
	sta ACCESSRTCLOCK

; optimize OK (STATUS), line = 221

	lda #$30
	sta TEXTPTR
	lda #$9C
	sta TEXTPTR+1

; optimize OK (STATUS), line = 222

	lda <adr.READCOUNT
	sta NUMBERPTR
	lda >adr.READCOUNT
	sta NUMBERPTR+1

; optimize FAIL ('WRITENUMBER', STATUS), line = 223

	jsr WRITENUMBER

; optimize OK (STATUS), line = 224

	lda #$00
	sta READCHANGED

; optimize OK (STATUS), line = 226

	lda #$3F
	sta TEXTPTR
	lda #$9C
	sta TEXTPTR+1

; optimize OK (STATUS), line = 227

	lda <adr.WRITECOUNT
	sta NUMBERPTR
	lda >adr.WRITECOUNT
	sta NUMBERPTR+1

; optimize FAIL ('WRITENUMBER', STATUS), line = 228

	jsr WRITENUMBER

; optimize OK (STATUS), line = 229

	lda #$00
	sta WRITECHANGED

; ------------------------------------------------------------

READS_ADDR	= $9C30
WRITES_ADDR	= $9C3F
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATEDELAY					; PROCEDURE

; optimize OK (STATUS), line = 236

	lda #$4D
	sta TEXTPTR
	lda #$9C
	sta TEXTPTR+1

; optimize OK (STATUS), line = 237

	lda CORE.ACCESSDELAY
	jsr PUTBYTETOTEXTBUFFER

; optimize OK (STATUS), line = 238

	lda CORE.ACCESSDELAY
	cmp #$64
	jcs l_03BD

; optimize OK (STATUS), line = 239

	lda #$00
	jsr PUTCHARTOTEXTBUFFER
l_03BD

; ------------------------------------------------------------

ADDR	= $9C4D
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RESETSTATISTICS					; PROCEDURE

; optimize OK (STATUS), line = 248

	lda #$00
	sta OPERATION.ABORTED

; optimize OK (STATUS), line = 250

	lda #$00
	ldy #$1F
	sta:rpl $9C28,y-

; optimize OK (STATUS), line = 252

	lda #$2A
	sta TEXTPTR
	lda #$9C
	sta TEXTPTR+1

; optimize OK (STATUS), line = 253

	lda #$02
	jsr PUTCAPTION

; optimize OK (STATUS), line = 254

	lda #$38
	sta TEXTPTR
	lda #$9C
	sta TEXTPTR+1

; optimize OK (STATUS), line = 255

	lda #$03
	jsr PUTCAPTION

; optimize OK (STATUS), line = 256

	lda #$47
	sta TEXTPTR
	lda #$9C
	sta TEXTPTR+1

; optimize OK (STATUS), line = 257

	lda #$04
	jsr PUTCAPTION

; optimize FAIL ('UPDATEDELAY', STATUS), line = 259

	jsr UPDATEDELAY

; optimize OK (STATUS), line = 261

	lda <adr.READCOUNT
	sta NUMBERPTR
	lda >adr.READCOUNT
	sta NUMBERPTR+1

; optimize OK (STATUS), line = 262

	lda #$01
	sta READCHANGED

; optimize FAIL ('CLEARNUMBER', STATUS), line = 263

	jsr CLEARNUMBER

; optimize OK (STATUS), line = 264

	lda <adr.WRITECOUNT
	sta NUMBERPTR
	lda >adr.WRITECOUNT
	sta NUMBERPTR+1

; optimize OK (STATUS), line = 265

	lda #$01
	sta WRITECHANGED

; optimize FAIL ('CLEARNUMBER', STATUS), line = 266

	jsr CLEARNUMBER

; optimize FAIL ('FORCEUPDATESTATISTICS', STATUS), line = 268

	jsr FORCEUPDATESTATISTICS

; ------------------------------------------------------------

READS_ADDR	= $9C2A
WRITES_ADDR	= $9C38
DELAY_ADDR	= $9C47
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATESTATUS					; PROCEDURE

; optimize FAIL ('UPDATEOPERATIONCAPTION', STATUS), line = 280

	jsr UPDATEOPERATIONCAPTION

; optimize OK (STATUS), line = 282

	lda #$01
	sta CORE.PAUSESCROLL

; optimize OK (STATUS), line = 283

	lda #$50
	sta TEXTPTR
	lda #$9C
	sta TEXTPTR+1

; optimize OK (STATUS), line = 284

	lda #$00
	sta TEXTLEN

; optimize OK (STATUS), line = 285

	lda TEXTPTR
	sta SYSTEM.FILLCHAR_0057.A
	lda TEXTPTR+1
	sta SYSTEM.FILLCHAR_0057.A+1
	lda #$00
	sta SYSTEM.FILLCHAR_0057.COUNT
	lda #$02
	sta SYSTEM.FILLCHAR_0057.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_0057.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_0057
	m@INLINE
	.endl

; optimize OK (STATUS), line = 287

	ldy #1
	lda OPERATION.WORKINGMODE
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda OPERATION.WORKINGMODE
	cmp #$01
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+9
	sta SCROLLACTIVE

; optimize OK (STATUS), line = 289

	jeq l_042E

; optimize OK (STATUS), line = 290

	lda TEXTPTR
	add #$28
	sta TEXTPTR
	scc
	inc TEXTPTR+1
l_042E

; optimize OK (STATUS), line = 292

	lda OPERATION.WORKINGMODE
	jeq l_0450x
	cmp #$01
	jne l_0450
l_0450x

; optimize OK (STATUS), line = 294

	lda OPERATION.WORKINGMODE
	cmp #$01
	jne l_0463

; optimize OK (STATUS), line = 296

	lda #$20
	jsr PUTCAPTION

; optimize OK (STATUS), line = 297

	lda #$05
	sta LAST
	jmp l_0473
l_0463

; optimize OK (STATUS), line = 300

	lda #$1F
	jsr PUTCAPTION

; optimize OK (STATUS), line = 301

	lda #$15
	sta LAST
l_0473

; optimize OK (STATUS), line = 304

	lda #$00
	sta I

l_0484
; --- ForToDoCondition
	lda I
	cmp LAST
	scc
	jne l_0492

; optimize OK (STATUS), line = 306

	lda #$00
	jsr PUTCHARTOTEXTBUFFER

; optimize OK (STATUS), line = 307

	lda #$40
	jsr PUTCHARTOTEXTBUFFER

; optimize OK (STATUS), line = 308

	ldy I
	lda OPERATION.adr.OPERATION_SHORTCUT_TEXTS,y
	jsr PUTCHARTOTEXTBUFFER

; optimize OK (STATUS), line = 309

	lda #$41
	jsr PUTCHARTOTEXTBUFFER

; optimize OK (STATUS), line = 310

	ldy I
	lda OPERATION.adr.OPERATION_CAPTIONS,y
	jsr PUTCAPTION

; --- ForToDoEpilog
	inc I
	jne l_0484
l_0492
	jmp l_04B4
l_0450

; optimize OK (STATUS), line = 313

	lda OPERATION.WORKINGMODE
	cmp #$03
	jne l_04C6

; optimize OK (STATUS), line = 315

	lda TEXTPTR
	add #$07
	sta TEXTPTR
	scc
	inc TEXTPTR+1

; optimize OK (STATUS), line = 316

	lda #$22
	jsr PUTCAPTION
	jmp l_04D3
l_04C6

; optimize OK (STATUS), line = 318

	lda OPERATION.WORKINGMODE
	cmp #$02
	jne l_04E5

; optimize OK (STATUS), line = 320

	lda TEXTPTR
	add #$03
	sta TEXTPTR
	scc
	inc TEXTPTR+1

; optimize OK (STATUS), line = 321

	lda #$21
	jsr PUTCAPTION
	jmp l_04F2
l_04E5

; optimize OK (STATUS), line = 323

	lda OPERATION.WORKINGMODE
	cmp #$04
	jne l_0504

; optimize OK (STATUS), line = 325

	lda TEXTPTR
	add #$0C
	sta TEXTPTR
	scc
	inc TEXTPTR+1

; optimize OK (STATUS), line = 326

	lda #$23
	jsr PUTCAPTION
	jmp l_0511
l_0504
	jmp @exit					; exit
l_0511
l_04F2
l_04D3
l_04B4

; optimize OK (STATUS), line = 330

	lda SCROLLACTIVE
	jeq l_051D

; optimize OK (STATUS), line = 333

	lda TEXTLEN
	sta LEN

; --- WhileProlog
	jmp l_0526
l_0527

; optimize OK (STATUS), line = 336

	lda #$78
	sta SYSTEM.MOVE_0058.SOURCE
	lda #$9C
	sta SYSTEM.MOVE_0058.SOURCE+1
	lda TEXTPTR
	sta SYSTEM.MOVE_0058.DEST
	lda TEXTPTR+1
	sta SYSTEM.MOVE_0058.DEST+1
	lda LEN
	sta SYSTEM.MOVE_0058.COUNT
	lda #$00
	sta SYSTEM.MOVE_0058.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0058
	m@INLINE
	.endl

; optimize OK (STATUS), line = 337

	lda TEXTLEN
	add LEN
	sta TEXTLEN

; optimize OK (STATUS), line = 338

	lda TEXTPTR
	add LEN
	sta TEXTPTR
	scc
	inc TEXTPTR+1
l_0526

; optimize OK (STATUS), line = 334

	lda TEXTLEN
	cmp #$28
	jcc l_0527

; optimize OK (STATUS), line = 342

	lda #$78
	sta SYSTEM.MOVE_0058.SOURCE
	lda #$9C
	sta SYSTEM.MOVE_0058.SOURCE+1
	lda TEXTPTR
	sta SYSTEM.MOVE_0058.DEST
	lda TEXTPTR+1
	sta SYSTEM.MOVE_0058.DEST+1
	lda #$28
	sta SYSTEM.MOVE_0058.COUNT
	lda #$00
	sta SYSTEM.MOVE_0058.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0058
	m@INLINE
	.endl

; optimize OK (STATUS), line = 343

	lda TEXTPTR
	sta CORE.SCROLLENDADDR
	lda TEXTPTR+1
	sta CORE.SCROLLENDADDR+1

; optimize OK (STATUS), line = 344

	lda #$00
	sta CORE.PAUSESCROLL
l_051D

; optimize OK (STATUS), line = 347

	lda #$01
	sta CORE.RESETSCROLL

; ------------------------------------------------------------

RESTART_ADDR	= $9C78
LEN	= DATAORIGIN+$0389
I	= DATAORIGIN+$038A
LAST	= DATAORIGIN+$038B
SCROLLACTIVE	= DATAORIGIN+$038C

@VarData	= LEN
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

DIGIT_COUNT	= $05
MAX_DIGIT	= $04
adr.READCOUNT	= [DATAORIGIN+$0341] .array [5]
.var READCOUNT	= adr.READCOUNT .word
adr.WRITECOUNT	= [DATAORIGIN+$0346] .array [5]
.var WRITECOUNT	= adr.WRITECOUNT .word
READCHANGED	= DATAORIGIN+$034B
WRITECHANGED	= DATAORIGIN+$034C
ACCESSRTCLOCK	= DATAORIGIN+$034D
NUMBERPTR	= DATAORIGIN+$034E
TEXTPTR	= DATAORIGIN+$0350
adr.TEXTBUF	= [DATAORIGIN+$0352] .array [41]
.var TEXTBUF	= adr.TEXTBUF .word
TEXTLEN	= DATAORIGIN+$037B

.endl							; UNIT STATUS

; ------------------------------------------------------------

.local	DISPLAYLIST					; UNIT

.local	DLI						; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000063  -------------------


  pha
  lda #%00111001
  sta DMACTL
  lda color0Value
  sta COLPF0
  lda color1Value
  sta COLPF1
  lda color2Value
  sta COLPF2
  lda #32
  sta HPOSP0
  sta HPOSP1
  pla

	rti						; ret
.endl

.local	VBL						; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000064  -------------------


  lda #138
  sta HPOSP0
  lda #78
  sta HPOSP1

  ; check if reset scroll
  lda RESET_SCROLL
  beq after_reset

  lda #2
  sta scrollDelay
  lda #0
  sta RESET_SCROLL  
  lda #15
  sta HSCROL
  sta horScroll
  lda #.lo(START_ADDR)
  sta ADDR
  lda #.hi(START_ADDR)
  sta ADDR+1

after_reset

  ; check if pause scroll
  lda PAUSE_SCROLL
  bne after_scroll

  ; slow down the scroll
  ;dec scrollDelay
  ;bne after_scroll
  ;lda #2
  ;sta scrollDelay

  ; perform fine scroll
  ldx horScroll
  dex
  stx HSCROL
  stx horScroll
  cpx #11
  bne after_scroll

  ; perform coarse scroll
  ldx #15
  stx HSCROL
  stx horScroll

  inc ADDR
  sne
  inc ADDR+1
  
  lda ADDR
  cmp END_ADDR
  bne after_scroll
  lda ADDR+1
  cmp END_ADDR+1
  bne after_scroll

  lda #.lo(RESTART_ADDR)
  sta ADDR
  lda #.hi(RESTART_ADDR)
  sta ADDR+1

after_scroll
  
  jmp xitvbv

; ------------------------------------------------------------

ADDR	= $8008
START_ADDR	= $9C50
RESTART_ADDR	= $9C78
PAUSE_SCROLL	= $E8
RESET_SCROLL	= $E9
END_ADDR	= $EA
	rti						; ret
.endl

.local	FILLIMAGELINEADDRESSES				; PROCEDURE

; optimize OK (DISPLAYLIST), line = 153

	lda #$00
	sta ADDR
	lda #$88
	sta ADDR+1

; optimize OK (DISPLAYLIST), line = 154

	lda #$00
	tay

l_0567
; --- ForToDoCondition
	cpy #$A0
	jcs l_0575

; optimize OK (DISPLAYLIST), line = 156

	lda ADDR
	sta CORE.adr.IMAGELINELOADDR,y

; optimize OK (DISPLAYLIST), line = 157

	lda ADDR+1
	sta CORE.adr.IMAGELINEHIADDR,y

; optimize OK (DISPLAYLIST), line = 158

	lda ADDR
	add #$20
	sta ADDR
	scc
	inc ADDR+1

; --- ForToDoEpilog
	iny
	jne l_0567
l_0575
	sty I

; ------------------------------------------------------------

ADDR	= DATAORIGIN+$039C
I	= DATAORIGIN+$039E

@VarData	= ADDR
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLDISPLAYLISTLINEADDRESSES			; PROCEDURE

; optimize OK (DISPLAYLIST), line = 167

	lda #$10
	sta ADDR
	lda #$80
	sta ADDR+1

; optimize OK (DISPLAYLIST), line = 168

	lda #$00
	sta I

l_059C
; --- ForToDoCondition
	lda I
	cmp #$A0
	jcs l_05AA

; optimize OK (DISPLAYLIST), line = 170

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda I
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add CORE.DISPLAYLISTLINEADDR
	sta :bp2
	lda CORE.DISPLAYLISTLINEADDR+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda ADDR
	sta (:bp2),y
	iny
	lda ADDR+1
	sta (:bp2),y

; optimize OK (DISPLAYLIST), line = 171

	lda ADDR
	add #$03
	sta ADDR
	scc
	inc ADDR+1

; --- ForToDoEpilog
	inc I
	jne l_059C
l_05AA

; ------------------------------------------------------------

ADDR	= DATAORIGIN+$039F
I	= DATAORIGIN+$03A1

@VarData	= ADDR
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLDISPLAYLIST					; PROCEDURE

	jmp l_05BC

.local	INSERTEMPTY3					; PROCEDURE

; optimize OK (DISPLAYLIST), line = 181

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$20
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 182

	inc ADDR
	sne
	inc ADDR+1
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INSERTEMPTY3DLI					; PROCEDURE

; optimize OK (DISPLAYLIST), line = 187

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$A0
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 188

	inc ADDR
	sne
	inc ADDR+1
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INSERTEMPTY8					; PROCEDURE

; optimize OK (DISPLAYLIST), line = 193

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$70
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 194

	inc ADDR
	sne
	inc ADDR+1
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INSERTLINE					; PROCEDURE
	sta LINE

; optimize OK (DISPLAYLIST), line = 199

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$4F
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 200

	inc ADDR
	sne
	inc ADDR+1

; optimize OK (DISPLAYLIST), line = 201

	ldy LINE
	lda CORE.adr.IMAGELINELOADDR,y
	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 202

	inc ADDR
	sne
	inc ADDR+1

; optimize OK (DISPLAYLIST), line = 203

	ldy LINE
	lda CORE.adr.IMAGELINEHIADDR,y
	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 204

	inc ADDR
	sne
	inc ADDR+1

; ------------------------------------------------------------

LINE	= DATAORIGIN+$03A4

@VarData	= LINE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INSERTTEXTFIELD					; PROCEDURE

; optimize OK (DISPLAYLIST), line = 209

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$42
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 210

	inc ADDR
	sne
	inc ADDR+1

; optimize OK (DISPLAYLIST), line = 211

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$00
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 212

	inc ADDR
	sne
	inc ADDR+1

; optimize OK (DISPLAYLIST), line = 213

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$9C
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 214

	inc ADDR
	sne
	inc ADDR+1

; optimize FAIL ('INSERTEMPTY3', DISPLAYLIST), line = 215

	jsr INSERTEMPTY3

; optimize OK (DISPLAYLIST), line = 216

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$52
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 217

	inc ADDR
	sne
	inc ADDR+1

; optimize OK (DISPLAYLIST), line = 218

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$50
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 219

	inc ADDR
	sne
	inc ADDR+1

; optimize OK (DISPLAYLIST), line = 220

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$9C
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 221

	inc ADDR
	sne
	inc ADDR+1

; optimize FAIL ('INSERTEMPTY3', DISPLAYLIST), line = 222

	jsr INSERTEMPTY3

; optimize OK (DISPLAYLIST), line = 223

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$42
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 224

	inc ADDR
	sne
	inc ADDR+1

; optimize OK (DISPLAYLIST), line = 225

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$28
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 226

	inc ADDR
	sne
	inc ADDR+1

; optimize OK (DISPLAYLIST), line = 227

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$9C
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 228

	inc ADDR
	sne
	inc ADDR+1
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INSERTJVB					; PROCEDURE

; optimize OK (DISPLAYLIST), line = 233

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$41
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 234

	inc ADDR
	sne
	inc ADDR+1

; optimize OK (DISPLAYLIST), line = 235

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$00
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 236

	inc ADDR
	sne
	inc ADDR+1

; optimize OK (DISPLAYLIST), line = 237

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda #$80
	sta (:bp),y

; optimize FAIL (0, DISPLAYLIST), line = 238

	inc ADDR
	sne
	inc ADDR+1
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_05BC

; optimize FAIL ('FILLDISPLAYLISTLINEADDRESSES', DISPLAYLIST), line = 244

	jsr FILLDISPLAYLISTLINEADDRESSES

; optimize FAIL ('FILLIMAGELINEADDRESSES', DISPLAYLIST), line = 245

	jsr FILLIMAGELINEADDRESSES

; optimize OK (DISPLAYLIST), line = 247

	lda #$00
	sta ADDR
	lda #$80
	sta ADDR+1

; optimize FAIL ('INSERTEMPTY8', DISPLAYLIST), line = 248

	jsr INSERTEMPTY8

; optimize FAIL ('INSERTEMPTY8', DISPLAYLIST), line = 249

	jsr INSERTEMPTY8

; optimize FAIL ('INSERTEMPTY8', DISPLAYLIST), line = 250

	jsr INSERTEMPTY8

; optimize FAIL ('INSERTTEXTFIELD', DISPLAYLIST), line = 251

	jsr INSERTTEXTFIELD

; optimize FAIL ('INSERTEMPTY3DLI', DISPLAYLIST), line = 252

	jsr INSERTEMPTY3DLI

; optimize OK (DISPLAYLIST), line = 253

	lda #$00
	sta I

l_0684
; --- ForToDoCondition
	lda I
	cmp #$A0
	jcs l_0692

; optimize OK (DISPLAYLIST), line = 255

	jsr INSERTLINE

; --- ForToDoEpilog
	inc I
	jne l_0684
l_0692

; optimize FAIL ('INSERTJVB', DISPLAYLIST), line = 257

	jsr INSERTJVB

; ------------------------------------------------------------

ADDR	= DATAORIGIN+$03A2
I	= DATAORIGIN+$03A5

@VarData	= ADDR
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHANGETOMODE					; PROCEDURE
	sta MODE

; optimize OK (DISPLAYLIST), line = 267

	and #$0F
	sta MODE

; optimize OK (DISPLAYLIST), line = 268

	ora #$40
	sta MODE

; optimize OK (DISPLAYLIST), line = 269

	lda #$0F
	sta ADDR
	lda #$80
	sta ADDR+1

; optimize OK (DISPLAYLIST), line = 270

	lda #$00
	sta I

l_06C1
; --- ForToDoCondition
	lda I
	cmp #$A0
	jcs l_06CF

; optimize OK (DISPLAYLIST), line = 272

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda MODE
	sta (:bp),y

; optimize OK (DISPLAYLIST), line = 273

	tya
	add #$03
	sta ADDR
	scc
	inc ADDR+1

; --- ForToDoEpilog
	inc I
	jne l_06C1
l_06CF

; ------------------------------------------------------------

MODE	= DATAORIGIN+$03A6
FIRST_ADDR	= $800F
I	= DATAORIGIN+$03A7
ADDR	= DATAORIGIN+$03A8

@VarData	= MODE
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITPM						; PROCEDURE

; optimize OK (DISPLAYLIST), line = 283

	lda #$00
	sta SYSTEM.FILLCHAR_0057.A
	lda #$84
	sta SYSTEM.FILLCHAR_0057.A+1
	lda #$00
	sta SYSTEM.FILLCHAR_0057.COUNT
	lda #$04
	sta SYSTEM.FILLCHAR_0057.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_0057.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_0057
	m@INLINE
	.endl

; optimize OK (DISPLAYLIST), line = 284

	lda #$FC
	ldy #$07
	sta:rpl $8436,y-

; optimize OK (DISPLAYLIST), line = 285

	lda #$FC
	ldy #$07
	sta:rpl $8536,y-

; ------------------------------------------------------------

OFFSET	= $36
P0_ADDR	= $8436
P1_ADDR	= $8536
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSCREEN					; PROCEDURE

; optimize OK (DISPLAYLIST), line = 290

	lda CORE.SDMCTL
	sta OLDSDMCTL

; optimize OK (DISPLAYLIST), line = 291

	lda #$00
	sta CORE.SDMCTL

; optimize FAIL ('FILLDISPLAYLIST', DISPLAYLIST), line = 293

	jsr FILLDISPLAYLIST

; optimize OK (DISPLAYLIST), line = 295

	lda CORE.SDLSTL
	sta OLDSDLSTL

; optimize OK (DISPLAYLIST), line = 296

	lda #$00
	sta CORE.SDLSTL
	lda #$80
	sta CORE.SDLSTL+1

; optimize OK (DISPLAYLIST), line = 298

	lda CORE.CHBAS
	sta OLDCHBASE

; optimize OK (DISPLAYLIST), line = 299

	lda #$64
	sta CORE.CHBAS

; optimize OK (DISPLAYLIST), line = 301

	lda CORE.PMBASE
	sta OLDPMBASE

; optimize OK (DISPLAYLIST), line = 302

	lda #$80
	sta CORE.PMBASE

; optimize FAIL ('INITPM', DISPLAYLIST), line = 303

	jsr INITPM

; optimize OK (DISPLAYLIST), line = 305

	lda #$03
	sta CORE.GRACTL

; optimize OK (DISPLAYLIST), line = 307

	sta CORE.SIZEP0

; optimize OK (DISPLAYLIST), line = 308

	lda #$20
	sta CORE.HPOSP0

; optimize OK (DISPLAYLIST), line = 309

	lda #$00
	sta CORE.PCOLR0

; optimize OK (DISPLAYLIST), line = 311

	lda #$03
	sta CORE.SIZEP1

; optimize OK (DISPLAYLIST), line = 312

	lda #$20
	sta CORE.HPOSP1

; optimize OK (DISPLAYLIST), line = 313

	lda #$00
	sta CORE.PCOLR1

; optimize OK (DISPLAYLIST), line = 315

	lda #$03
	sta CORE.SIZEP2

; optimize OK (DISPLAYLIST), line = 316

	lda #$C0
	sta CORE.HPOSP2

; optimize OK (DISPLAYLIST), line = 317

	lda #$00
	sta CORE.PCOLR2

; optimize OK (DISPLAYLIST), line = 319

	lda #$03
	sta CORE.SIZEP3

; optimize OK (DISPLAYLIST), line = 320

	lda #$C0
	sta CORE.HPOSP3

; optimize OK (DISPLAYLIST), line = 321

	lda #$00
	sta CORE.PCOLR3

; optimize OK (DISPLAYLIST), line = 323

	lda #$0C
	sta CORE.COLOR1

; optimize OK (DISPLAYLIST), line = 324

	lda #$00
	sta CORE.COLOR2

; optimize OK (DISPLAYLIST), line = 326

	sta OLDDLI
	sta OLDDLI+1

	lda VDSLST
	sta OLDDLI
	lda VDSLST+1
	sta OLDDLI+1

; optimize OK (DISPLAYLIST), line = 328

	mva <DLI VDSLST
	mva >DLI VDSLST+1

; optimize OK (DISPLAYLIST), line = 330

	lda #$00
	sta OLDVBL
	sta OLDVBL+1

	lda VVBLKD
	sta OLDVBL
	lda VVBLKD+1
	sta OLDVBL+1

; optimize OK (DISPLAYLIST), line = 332

	lda <VBL
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda >VBL
	sta VVBLKD+1

; optimize OK (DISPLAYLIST), line = 334

	lda #$C0
	sta CORE.NMIEN

; optimize OK (DISPLAYLIST), line = 336

	lda #$3A
	sta CORE.SDMCTL
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLOSESCREEN					; PROCEDURE

; optimize OK (DISPLAYLIST), line = 341

	lda #$00
	sta CORE.NMIEN

; optimize OK (DISPLAYLIST), line = 342

	lda OLDVBL
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda OLDVBL+1
	sta VVBLKD+1

; optimize OK (DISPLAYLIST), line = 343

	mva OLDDLI VDSLST
	mva OLDDLI+1 VDSLST+1

; optimize OK (DISPLAYLIST), line = 345

	lda #$00
	sta CORE.HPOSP0

; optimize OK (DISPLAYLIST), line = 346

	sta CORE.HPOSP1

; optimize OK (DISPLAYLIST), line = 347

	sta CORE.HPOSP2

; optimize OK (DISPLAYLIST), line = 348

	sta CORE.HPOSP3

; optimize OK (DISPLAYLIST), line = 350

	lda OLDSDLSTL
	sta CORE.SDLSTL
	lda #$00
	sta CORE.SDLSTL+1

; optimize OK (DISPLAYLIST), line = 351

	lda OLDSDMCTL
	sta CORE.SDMCTL

; optimize OK (DISPLAYLIST), line = 352

	lda OLDPMBASE
	sta CORE.PMBASE

; optimize OK (DISPLAYLIST), line = 353

	lda OLDCHBASE
	sta CORE.CHBAS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITCOLORS					; PROCEDURE

; optimize OK (DISPLAYLIST), line = 358

	lda CORE.REDCOLOR
	sta CORE.PCOLR0

; optimize OK (DISPLAYLIST), line = 359

	lda CORE.GREENCOLOR
	sta CORE.PCOLR1

; optimize OK (DISPLAYLIST), line = 360

	lda CORE.REDCOLOR
	sta CORE.PCOLR2

; optimize OK (DISPLAYLIST), line = 361

	lda CORE.GREENCOLOR
	sta CORE.PCOLR3
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize OK (DISPLAYLIST), line = 366

	lda #$02
	sta SCROLLDELAY

; optimize OK (DISPLAYLIST), line = 367

	lda #$0F
	sta HORSCROLL

	rts

; ------------------------------------------------------------

COLOR0VALUE	= DATAORIGIN+$038D
COLOR1VALUE	= DATAORIGIN+$038E
COLOR2VALUE	= DATAORIGIN+$038F
ANTIC_EMPTY_3	= $20
ANTIC_EMPTY_8	= $70
ANTIC_MODE_2	= $02
ANTIC_MODE_E	= $0E
ANTIC_MODE_F	= $0F
ANTIC_HS	= $10
ANTIC_LMS	= $40
ANTIC_DLI	= $80
ANTIC_EMPTY_3_DLI	= $A0
ANTIC_MODE_2_LMS	= $42
ANTIC_MODE_2_LMS_HS	= $52
ANTIC_MODE_F_LMS	= $4F
ANTIC_MODE_E_LMS	= $4E
ANTIC_JVB	= $41
OLDSDMCTL	= DATAORIGIN+$0390
OLDSDLSTL	= DATAORIGIN+$0391
OLDPMBASE	= DATAORIGIN+$0392
OLDCHBASE	= DATAORIGIN+$0393
OLDDLI	= DATAORIGIN+$0394
OLDVBL	= DATAORIGIN+$0396
SCROLLDELAY	= DATAORIGIN+$0398
HORSCROLL	= DATAORIGIN+$0399
HORSCROLLADDR	= DATAORIGIN+$039A

.endl							; UNIT DISPLAYLIST

; ------------------------------------------------------------

.local	IMAGEMANAGER					; UNIT

.local	CLEARIMAGE					; PROCEDURE

; optimize OK (IMAGEMANAGER), line = 23

	lda #$00
	sta DISPLAYLIST.COLOR0VALUE

; optimize OK (IMAGEMANAGER), line = 24

	sta DISPLAYLIST.COLOR1VALUE

; optimize OK (IMAGEMANAGER), line = 25

	sta DISPLAYLIST.COLOR2VALUE

; optimize OK (IMAGEMANAGER), line = 26

	sta SYSTEM.FILLCHAR_0057.A
	lda #$88
	sta SYSTEM.FILLCHAR_0057.A+1
	lda #$00
	sta SYSTEM.FILLCHAR_0057.COUNT
	lda #$14
	sta SYSTEM.FILLCHAR_0057.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_0057.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_0057
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PREPARESPLASHSCREEN				; PROCEDURE

; optimize OK (IMAGEMANAGER), line = 34

	lda #$00
	sta SYSTEM.FILLCHAR_0057.A
	lda #$97
	sta SYSTEM.FILLCHAR_0057.A+1
	lda #$00
	sta SYSTEM.FILLCHAR_0057.COUNT
	lda #$05
	sta SYSTEM.FILLCHAR_0057.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_0057.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_0057
	m@INLINE
	.endl

; ------------------------------------------------------------

SIZE	= $0500
ADDR	= $9700
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COPYIMAGE					; PROCEDURE

; optimize OK (IMAGEMANAGER), line = 39

	lda #$0E
	jsr DISPLAYLIST.CHANGETOMODE

; optimize OK (IMAGEMANAGER), line = 41

	lda #$00
	sta SYSTEM.MOVE_0058.SOURCE
	lda #$68
	sta SYSTEM.MOVE_0058.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_0058.DEST
	lda #$88
	sta SYSTEM.MOVE_0058.DEST+1
	lda #$00
	sta SYSTEM.MOVE_0058.COUNT
	lda #$14
	sta SYSTEM.MOVE_0058.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0058
	m@INLINE
	.endl

; optimize OK (IMAGEMANAGER), line = 43

	lda CORE.PALNTS
	cmp #$0F
	jne l_07FC

; optimize OK (IMAGEMANAGER), line = 45

	lda #$34
	sta DISPLAYLIST.COLOR0VALUE

; optimize OK (IMAGEMANAGER), line = 46

	lda #$36
	sta DISPLAYLIST.COLOR1VALUE

; optimize OK (IMAGEMANAGER), line = 47

	lda #$3A
	sta DISPLAYLIST.COLOR2VALUE
	jmp l_0812
l_07FC

; optimize OK (IMAGEMANAGER), line = 50

	lda #$14
	sta DISPLAYLIST.COLOR0VALUE

; optimize OK (IMAGEMANAGER), line = 51

	lda #$16
	sta DISPLAYLIST.COLOR1VALUE

; optimize OK (IMAGEMANAGER), line = 52

	lda #$1A
	sta DISPLAYLIST.COLOR2VALUE
l_0812

; optimize OK (IMAGEMANAGER), line = 55

	lda #$02
	sta IMAGEKIND
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	IMAGEPREPARETRIANGLE				; PROCEDURE

; optimize OK (IMAGEMANAGER), line = 74

	lda #$0F
	jsr DISPLAYLIST.CHANGETOMODE

; optimize OK (IMAGEMANAGER), line = 76

	lda #$00
	sta I

l_0831
; --- ForToDoCondition
	ldy I
	cpy #$A0
	jcs l_083F

; optimize OK (IMAGEMANAGER), line = 78

	lda CORE.adr.IMAGELINELOADDR,y
	sta :STACKORIGIN+9
	lda CORE.adr.IMAGELINEHIADDR,y
	sta :ecx
	lda #$00
	sta :ecx+1
	sta :eax
	lda #$01
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :STACKORIGIN+9
	add :eax
	sta ADDR
	lda #$00
	adc :eax+1
	sta ADDR+1

; optimize OK (IMAGEMANAGER), line = 79

	lda I
	lsr @
	lsr @
	lsr @
	sta K

; optimize OK (IMAGEMANAGER), line = 80

	jeq l_0873

; optimize OK (IMAGEMANAGER), line = 82

	lda #$00
	sta J
	ldy K
	dey
	sty @FORTMP_0880_0

l_0883
; --- ForToDoCondition
	lda @FORTMP_0880_0:#$00
	cmp J
	jcc l_0891

; optimize OK (IMAGEMANAGER), line = 84

	mwy ADDR :bp2
	ldy J
	lda #$FF
	sta (:bp2),y

; --- ForToDoEpilog
	inc J
	jne l_0883
l_0891
l_0873

; optimize OK (IMAGEMANAGER), line = 87

	lda ADDR
	add K
	sta ADDR
	scc
	inc ADDR+1

; optimize OK (IMAGEMANAGER), line = 88

	lda I
	and #$07
	tay
	lda adr.VALUES,y
	sta VAL

; optimize OK (IMAGEMANAGER), line = 89

	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	lda VAL
	sta (:bp),y

; --- ForToDoEpilog
	inc I
	jne l_0831
l_083F

; optimize OK (IMAGEMANAGER), line = 92

	lda CORE.PALNTS
	cmp #$0F
	jne l_08D4

; optimize OK (IMAGEMANAGER), line = 94

	lda #$9C
	sta DISPLAYLIST.COLOR1VALUE

; optimize OK (IMAGEMANAGER), line = 95

	lda #$90
	sta DISPLAYLIST.COLOR2VALUE
	jmp l_08E6
l_08D4

; optimize OK (IMAGEMANAGER), line = 98

	lda #$7C
	sta DISPLAYLIST.COLOR1VALUE

; optimize OK (IMAGEMANAGER), line = 99

	lda #$70
	sta DISPLAYLIST.COLOR2VALUE
l_08E6

; optimize OK (IMAGEMANAGER), line = 102

	lda #$01
	sta IMAGEKIND

; ------------------------------------------------------------

I	= DATAORIGIN+$03AB
J	= DATAORIGIN+$03AC
K	= DATAORIGIN+$03AD
ADDR	= DATAORIGIN+$03AE
VAL	= DATAORIGIN+$03B0
adr.VALUES	= CODEORIGIN+$0057
.var VALUES	= adr.VALUES .word

@VarData	= I
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NEXTIMAGE					; PROCEDURE

; optimize FAIL ('CLEARIMAGE', IMAGEMANAGER), line = 107

	jsr CLEARIMAGE

; optimize OK (IMAGEMANAGER), line = 109

	lda IMAGEKIND
	sta @CASETMP_0003
	cmp #$00
	beq @+
	cmp #$02
	jne l_0904
@

; optimize FAIL ('IMAGEPREPARETRIANGLE', IMAGEMANAGER), line = 110

	jsr IMAGEPREPARETRIANGLE
	jmp a_0003
l_0904
	cmp #$01
	jne l_090E
@

; optimize FAIL ('COPYIMAGE', IMAGEMANAGER), line = 111

	jsr COPYIMAGE
l_090E
a_0003

; ------------------------------------------------------------

@CASETMP_0003	= DATAORIGIN+$03B2

@VarData	= @CASETMP_0003
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize OK (IMAGEMANAGER), line = 117

	lda #$00
	sta DISPLAYLIST.COLOR0VALUE

; optimize OK (IMAGEMANAGER), line = 118

	sta DISPLAYLIST.COLOR1VALUE

; optimize OK (IMAGEMANAGER), line = 119

	sta DISPLAYLIST.COLOR2VALUE

; optimize FAIL ('PREPARESPLASHSCREEN', IMAGEMANAGER), line = 120

	jsr PREPARESPLASHSCREEN

; optimize OK (IMAGEMANAGER), line = 121

	lda #$00
	sta IMAGEKIND

	rts

; ------------------------------------------------------------

IMAGEKIND	= DATAORIGIN+$03AA

.endl							; UNIT IMAGEMANAGER

; ------------------------------------------------------------

.local	ARRAYACCESS					; UNIT

.local	CLEAR						; PROCEDURE

; optimize FAIL ('CRT.NOSOUND', ARRAYACCESS), line = 43

	jsr CRT.NOSOUND

; optimize OK (ARRAYACCESS), line = 44

	lda #$00
	ldy #256-160
	sta:rne $8441+160-256,y+

; optimize OK (ARRAYACCESS), line = 45

	lda #$00
	ldy #256-160
	sta:rne $8541+160-256,y+

; optimize OK (ARRAYACCESS), line = 46

	lda #$00
	ldy #256-160
	sta:rne $8641+160-256,y+

; optimize OK (ARRAYACCESS), line = 47

	lda #$00
	ldy #256-160
	sta:rne $8741+160-256,y+

; optimize OK (ARRAYACCESS), line = 48

	lda <adr.MARKERS
	sta :bp2
	lda >adr.MARKERS
	sta :bp2+1
	lda #$00
	ldy #$09
	sta:rpl (:bp2),y-

; optimize OK (ARRAYACCESS), line = 49

	lda #$00
	sta MARKERINDEX

; ------------------------------------------------------------

P0_ADDR	= $8441
P1_ADDR	= $8541
P2_ADDR	= $8641
P3_ADDR	= $8741
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ABORTPROCESSING					; PROCEDURE

; optimize FAIL ('CRT.NOSOUND', ARRAYACCESS), line = 54

	jsr CRT.NOSOUND

; optimize OK (ARRAYACCESS), line = 55

	lda #$01
	sta OPERATION.ABORTED
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAUSEPROCESSING					; PROCEDURE

; optimize FAIL ('CRT.NOSOUND', ARRAYACCESS), line = 62

	jsr CRT.NOSOUND

; optimize OK (ARRAYACCESS), line = 63

	lda #$03
	sta OPERATION.WORKINGMODE

; optimize FAIL ('STATUS.UPDATESTATUS', ARRAYACCESS), line = 64

	jsr STATUS.UPDATESTATUS

; --- WhileProlog
	jmp l_0958
l_0959

; optimize FAIL ('KEYBOARD.GETKEY', ARRAYACCESS), line = 68

	jsr KEYBOARD.GETKEY
	lda KEYBOARD.GETKEY.RESULT
	sta KEY

; optimize OK (ARRAYACCESS), line = 69

	cmp #$1C
	jne l_096F

; optimize FAIL ('ABORTPROCESSING', ARRAYACCESS), line = 71

	jsr ABORTPROCESSING
	jmp b_0959					; break
l_096F

; optimize OK (ARRAYACCESS), line = 74

	lda KEY
	cmp #$21
	jne l_098C
	jmp b_0959					; break
l_098C
l_097A
l_0958

; optimize OK (ARRAYACCESS), line = 66

	jmp l_0959
b_0959

; optimize OK (ARRAYACCESS), line = 80

	lda #$02
	sta OPERATION.WORKINGMODE

; optimize FAIL ('STATUS.UPDATESTATUS', ARRAYACCESS), line = 81

	jsr STATUS.UPDATESTATUS

; ------------------------------------------------------------

KEY	= DATAORIGIN+$03CA

@VarData	= KEY
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKKEYBOARD					; PROCEDURE

; optimize FAIL ('CRT.KEYPRESSED', ARRAYACCESS), line = 88

	jsr CRT.KEYPRESSED
	lda CRT.KEYPRESSED.RESULT
	jeq l_09A6

; optimize FAIL ('KEYBOARD.GETKEY', ARRAYACCESS), line = 90

	jsr KEYBOARD.GETKEY
	lda KEYBOARD.GETKEY.RESULT
	sta KEY

; optimize OK (ARRAYACCESS), line = 91

	sta @CASETMP_0004
	cmp #$0E
	jne l_09B6
@

; optimize FAIL ('DECREASEDELAY', ARRAYACCESS), line = 92

	jsr DECREASEDELAY
	jmp a_0004
l_09B6
	cmp #$06
	jne l_09C0
@

; optimize FAIL ('INCREASEDELAY', ARRAYACCESS), line = 93

	jsr INCREASEDELAY
	jmp a_0004
l_09C0
	cmp #$21
	jne l_09CA
@

; optimize FAIL ('PAUSEPROCESSING', ARRAYACCESS), line = 94

	jsr PAUSEPROCESSING
	jmp a_0004
l_09CA
	cmp #$2C
	jne l_09D4
@

; optimize FAIL ('CRT.NOSOUND', ARRAYACCESS), line = 97

	jsr CRT.NOSOUND

; optimize FAIL ('IMAGEMANAGER.NEXTIMAGE', ARRAYACCESS), line = 98

	jsr IMAGEMANAGER.NEXTIMAGE

l_09D4
a_0004
l_09A6

; ------------------------------------------------------------

KEY	= DATAORIGIN+$03CB
@CASETMP_0004	= DATAORIGIN+$03CC

@VarData	= KEY
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATEMARKER					; PROCEDURE

; optimize FAIL (0, ARRAYACCESS), line = 129

	inc MARKERINDEX

; optimize OK (ARRAYACCESS), line = 130

	lda MARKERINDEX
	cmp #$0A
	jne l_09FA

; optimize OK (ARRAYACCESS), line = 132

	lda #$00
	sta MARKERINDEX
l_09FA

; optimize OK (ARRAYACCESS), line = 134

	ldy MARKERINDEX
	lda adr.MARKERKINDS,y
	sta MARKERKIND

; optimize OK (ARRAYACCESS), line = 135

	lda adr.MARKERS,y
	sta POS

; optimize OK (ARRAYACCESS), line = 137

	lda MARKERKIND
	cmp #$01
	jne l_0A25

; optimize OK (ARRAYACCESS), line = 139

	ldy POS
	lda #$00
	sta $8541,y

; optimize OK (ARRAYACCESS), line = 140

	sta $8741,y
	jmp l_0A41
l_0A25

; optimize OK (ARRAYACCESS), line = 142

	lda MARKERKIND
	cmp #$02
	jne l_0A53

; optimize OK (ARRAYACCESS), line = 144

	ldy POS
	lda #$00
	sta $8441,y

; optimize OK (ARRAYACCESS), line = 145

	sta $8641,y
l_0A53
l_0A41

; optimize OK (ARRAYACCESS), line = 148

	ldy MARKERINDEX
	lda INDEX
	sta adr.MARKERS,y

; optimize OK (ARRAYACCESS), line = 149

	lda NEWMARKERKIND
	sta adr.MARKERKINDS,y

; optimize OK (ARRAYACCESS), line = 151

	cmp #$01
	jne l_0A8C

; optimize OK (ARRAYACCESS), line = 153

	ldy INDEX
	lda #$FF
	sta $8541,y

; optimize OK (ARRAYACCESS), line = 154

	sta $8741,y
	jmp l_0AA8
l_0A8C

; optimize OK (ARRAYACCESS), line = 156

	lda NEWMARKERKIND
	cmp #$02
	jne l_0ABA

; optimize OK (ARRAYACCESS), line = 158

	ldy INDEX
	lda #$FF
	sta $8441,y

; optimize OK (ARRAYACCESS), line = 159

	sta $8641,y
l_0ABA
l_0AA8

; optimize OK (ARRAYACCESS), line = 162

	ldy INDEX
	lda SOUNDCHANNEL
	sta CRT.SOUND.CHAN
	lda adr.SOUNDS,y
	sta CRT.SOUND.FREQ
	lda #$0A
	sta CRT.SOUND.DIST
	sta CRT.SOUND.VOL
	jsr CRT.SOUND

; optimize FAIL (0, ARRAYACCESS), line = 163

	inc SOUNDCHANNEL

; optimize OK (ARRAYACCESS), line = 164

	lda SOUNDCHANNEL
	cmp #$04
	jne l_0AF1
	lda #$00
	sta SOUNDCHANNEL
l_0AF1

; optimize FAIL ('STATUS.UPDATESTATISTICS', ARRAYACCESS), line = 166

	jsr STATUS.UPDATESTATISTICS

; optimize FAIL ('CHECKKEYBOARD', ARRAYACCESS), line = 167

	jsr CHECKKEYBOARD

; optimize OK (ARRAYACCESS), line = 169

	lda ACCESSDELAYINDEX
	jeq l_0B0C

; optimize OK (ARRAYACCESS), line = 171

	lda CORE.ACCESSDELAY
	sta CRT.DELAY.COUNT
	lda #$00
	sta CRT.DELAY.COUNT+1
	jsr CRT.DELAY
l_0B0C

; ------------------------------------------------------------

INDEX	= DATAORIGIN+$03CD
NEWMARKERKIND	= DATAORIGIN+$03CE
P0_ADDR	= $8441
P1_ADDR	= $8541
P2_ADDR	= $8641
P3_ADDR	= $8741
MK_READ	= $01
MK_WRITE	= $02
adr.SOUNDS	= CODEORIGIN+$005F
.var SOUNDS	= adr.SOUNDS .word
ADDR	= DATAORIGIN+$03CF
POS	= DATAORIGIN+$03D1
MARKERKIND	= DATAORIGIN+$03D2

@VarData	= INDEX
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETVALUE					; FUNCTION
	sta INDEX

; optimize OK (ARRAYACCESS), line = 177

	ldy INDEX
	lda CORE.adr.TABLE,y
	sta RESULT

; optimize FAIL ('STATUS.INCREADCOUNT', ARRAYACCESS), line = 178

	jsr STATUS.INCREADCOUNT

; optimize OK (ARRAYACCESS), line = 179

	lda INDEX
	sta UPDATEMARKER.INDEX
	lda #$01
	sta UPDATEMARKER.NEWMARKERKIND
	jsr UPDATEMARKER
@exit

; ------------------------------------------------------------

INDEX	= DATAORIGIN+$03D3
RESULT	= DATAORIGIN+$03D4

@VarData	= INDEX
@VarDataSize	= 1

	rts						; ret
.endl

.local	GETVALUESILENT					; FUNCTION
	sta INDEX

; optimize OK (ARRAYACCESS), line = 184

	ldy INDEX
	lda CORE.adr.TABLE,y
	sta RESULT
@exit

; ------------------------------------------------------------

INDEX	= DATAORIGIN+$03D5
RESULT	= DATAORIGIN+$03D6

@VarData	= INDEX
@VarDataSize	= 1

	rts						; ret
.endl

.local	SETVALUE					; PROCEDURE

; optimize OK (ARRAYACCESS), line = 191

	ldy INDEX
	lda VALUE
	sta CORE.adr.TABLE,y

; optimize OK (ARRAYACCESS), line = 193

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda INDEX
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add CORE.DISPLAYLISTLINEADDR
	sta :bp2
	lda CORE.DISPLAYLISTLINEADDR+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta ADDR
	iny
	lda (:bp2),y
	sta ADDR+1

; optimize OK (ARRAYACCESS), line = 194

	ldy VALUE
	lda CORE.adr.IMAGELINELOADDR,y
	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	sta (:bp),y

; optimize FAIL (0, ARRAYACCESS), line = 195

	inc ADDR
	sne
	inc ADDR+1

; optimize OK (ARRAYACCESS), line = 196

	ldy VALUE
	lda CORE.adr.IMAGELINEHIADDR,y
	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	sta (:bp),y

; optimize FAIL ('STATUS.INCWRITECOUNT', ARRAYACCESS), line = 198

	jsr STATUS.INCWRITECOUNT

; optimize OK (ARRAYACCESS), line = 199

	lda INDEX
	sta UPDATEMARKER.INDEX
	lda #$02
	sta UPDATEMARKER.NEWMARKERKIND
	jsr UPDATEMARKER

; ------------------------------------------------------------

INDEX	= DATAORIGIN+$03D7
VALUE	= DATAORIGIN+$03D8
ADDR	= DATAORIGIN+$03D9

@VarData	= INDEX
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETVALUESILENT					; PROCEDURE

; optimize OK (ARRAYACCESS), line = 206

	ldy INDEX
	lda VALUE
	sta CORE.adr.TABLE,y

; optimize OK (ARRAYACCESS), line = 208

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda INDEX
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add CORE.DISPLAYLISTLINEADDR
	sta :bp2
	lda CORE.DISPLAYLISTLINEADDR+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta ADDR
	iny
	lda (:bp2),y
	sta ADDR+1

; optimize OK (ARRAYACCESS), line = 209

	ldy VALUE
	lda CORE.adr.IMAGELINELOADDR,y
	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	sta (:bp),y

; optimize FAIL (0, ARRAYACCESS), line = 210

	inc ADDR
	sne
	inc ADDR+1

; optimize OK (ARRAYACCESS), line = 211

	ldy VALUE
	lda CORE.adr.IMAGELINEHIADDR,y
	ldy ADDR+1
	sty :bp+1
	ldy ADDR
	sta (:bp),y

; ------------------------------------------------------------

INDEX	= DATAORIGIN+$03DB
VALUE	= DATAORIGIN+$03DC
ADDR	= DATAORIGIN+$03DD

@VarData	= INDEX
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SWAPVALUES					; PROCEDURE

; optimize OK (ARRAYACCESS), line = 218

	lda INDEX1
	jsr GETVALUE
	lda GETVALUE.RESULT
	sta V1

; optimize OK (ARRAYACCESS), line = 219

	lda INDEX2
	jsr GETVALUE
	lda GETVALUE.RESULT
	sta V2

; optimize OK (ARRAYACCESS), line = 220

	lda INDEX1
	sta SETVALUE.INDEX
	lda V2
	sta SETVALUE.VALUE
	jsr SETVALUE

; optimize OK (ARRAYACCESS), line = 221

	lda INDEX2
	sta SETVALUE.INDEX
	lda V1
	sta SETVALUE.VALUE
	jsr SETVALUE

; ------------------------------------------------------------

INDEX1	= DATAORIGIN+$03DF
INDEX2	= DATAORIGIN+$03E0
V1	= DATAORIGIN+$03E1
V2	= DATAORIGIN+$03E2

@VarData	= INDEX1
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SWAPVALUESSILENT				; PROCEDURE

; optimize OK (ARRAYACCESS), line = 228

	lda INDEX1
	jsr GETVALUESILENT
	lda GETVALUESILENT.RESULT
	sta V1

; optimize OK (ARRAYACCESS), line = 229

	lda INDEX2
	jsr GETVALUESILENT
	lda GETVALUESILENT.RESULT
	sta V2

; optimize OK (ARRAYACCESS), line = 230

	lda INDEX1
	sta SETVALUESILENT.INDEX
	lda V2
	sta SETVALUESILENT.VALUE
	jsr SETVALUESILENT

; optimize OK (ARRAYACCESS), line = 231

	lda INDEX2
	sta SETVALUESILENT.INDEX
	lda V1
	sta SETVALUESILENT.VALUE
	jsr SETVALUESILENT

; ------------------------------------------------------------

INDEX1	= DATAORIGIN+$03E3
INDEX2	= DATAORIGIN+$03E4
V1	= DATAORIGIN+$03E5
V2	= DATAORIGIN+$03E6

@VarData	= INDEX1
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DECREASEDELAY					; PROCEDURE

; optimize OK (ARRAYACCESS), line = 236

	lda ACCESSDELAYINDEX
	jeq l_0BE5

; optimize FAIL (0, ARRAYACCESS), line = 238

	dec ACCESSDELAYINDEX

; optimize OK (ARRAYACCESS), line = 239

	ldy ACCESSDELAYINDEX
	lda CORE.adr.SET_VALUE_DELAYS,y
	sta CORE.ACCESSDELAY

; optimize FAIL ('STATUS.UPDATEDELAY', ARRAYACCESS), line = 240

	jsr STATUS.UPDATEDELAY
l_0BE5
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INCREASEDELAY					; PROCEDURE

; optimize OK (ARRAYACCESS), line = 246

	lda ACCESSDELAYINDEX
	cmp #$07
	jcs l_0C0C

; optimize FAIL (0, ARRAYACCESS), line = 248

	inc ACCESSDELAYINDEX

; optimize OK (ARRAYACCESS), line = 249

	ldy ACCESSDELAYINDEX
	lda CORE.adr.SET_VALUE_DELAYS,y
	sta CORE.ACCESSDELAY

; optimize FAIL ('STATUS.UPDATEDELAY', ARRAYACCESS), line = 250

	jsr STATUS.UPDATEDELAY
l_0C0C
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize OK (ARRAYACCESS), line = 255

	lda #$00
	sta ACCESSDELAYINDEX

; optimize OK (ARRAYACCESS), line = 256

	sta CORE.ACCESSDELAY

; optimize OK (ARRAYACCESS), line = 257

	sta SOUNDCHANNEL

; optimize OK (ARRAYACCESS), line = 258

	sta MARKERINDEX

	rts

; ------------------------------------------------------------

MARKER_COUNT	= $0A
MAX_MARKER	= $09
PM_OFFSET	= $41
SOUNDCHANNEL	= DATAORIGIN+$03B3
ACCESSDELAYINDEX	= DATAORIGIN+$03B4
adr.MARKERS	= [DATAORIGIN+$03B5] .array [10]
.var MARKERS	= adr.MARKERS .word
adr.MARKERKINDS	= [DATAORIGIN+$03BF] .array [10]
.var MARKERKINDS	= adr.MARKERKINDS .word
MARKERINDEX	= DATAORIGIN+$03C9

.endl							; UNIT ARRAYACCESS

; ------------------------------------------------------------

.local	SHUFFLEALGORITHMS				; UNIT

.local	FILLASCENDING					; PROCEDURE

; optimize OK (SHUFFLEALGORITHMS), line = 21

	lda #$00
	sta I

l_0C3A
; --- ForToDoCondition
	lda I
	cmp #$A0
	jcs l_0C48

; optimize OK (SHUFFLEALGORITHMS), line = 23

	sta ARRAYACCESS.SETVALUE.INDEX
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; --- ForToDoEpilog
	inc I
	jne l_0C3A
l_0C48

; ------------------------------------------------------------

I	= DATAORIGIN+$03E7

@VarData	= I
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLDESCENDING					; PROCEDURE

; optimize OK (SHUFFLEALGORITHMS), line = 31

	lda #$00
	sta I

l_0C61
; --- ForToDoCondition
	lda I
	cmp #$A0
	jcs l_0C6F

; optimize OK (SHUFFLEALGORITHMS), line = 33

	lda #$9F
	sub I
	sta ARRAYACCESS.SETVALUE.VALUE
	lda I
	sta ARRAYACCESS.SETVALUE.INDEX
	jsr ARRAYACCESS.SETVALUE

; --- ForToDoEpilog
	inc I
	jne l_0C61
l_0C6F

; ------------------------------------------------------------

I	= DATAORIGIN+$03E8

@VarData	= I
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLPYRAMID					; PROCEDURE

; optimize OK (SHUFFLEALGORITHMS), line = 42

	lda #$4F
	sta MID

; optimize OK (SHUFFLEALGORITHMS), line = 44

	lda #$00
	sta I

l_0C92
; --- ForToDoCondition
	lda I
	cmp MID
	scc
	jne l_0CA0

; optimize OK (SHUFFLEALGORITHMS), line = 46

	asl @
	sta ARRAYACCESS.SETVALUE.VALUE
	lda I
	sta ARRAYACCESS.SETVALUE.INDEX
	jsr ARRAYACCESS.SETVALUE

; --- ForToDoEpilog
	inc I
	jne l_0C92
l_0CA0

; optimize OK (SHUFFLEALGORITHMS), line = 49

	ldy MID
	iny
	sty I

l_0CBF
; --- ForToDoCondition
	lda I
	cmp #$A0
	jcs l_0CCD

; optimize OK (SHUFFLEALGORITHMS), line = 51

	sub MID
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sub #$01
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	rol :STACKORIGIN+STACKWIDTH*2+10
	rol :STACKORIGIN+STACKWIDTH*3+10
	lda #$9F
	sub :STACKORIGIN+10
	sta ARRAYACCESS.SETVALUE.VALUE
	lda I
	sta ARRAYACCESS.SETVALUE.INDEX
	jsr ARRAYACCESS.SETVALUE

; --- ForToDoEpilog
	inc I
	jne l_0CBF
l_0CCD

; ------------------------------------------------------------

I	= DATAORIGIN+$03E9
MID	= DATAORIGIN+$03EA

@VarData	= I
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLINTERLACED					; PROCEDURE

; optimize OK (SHUFFLEALGORITHMS), line = 59

	lda #$00
	sta MIN

; optimize OK (SHUFFLEALGORITHMS), line = 60

	lda #$9F
	sta MAX

; optimize OK (SHUFFLEALGORITHMS), line = 61

	lda #$00
	sta I

l_0D00
; --- ForToDoCondition
	lda I
	cmp #$A0
	jcs l_0D0E

; optimize OK (SHUFFLEALGORITHMS), line = 63

	and #$01
	jne l_0D24

; optimize OK (SHUFFLEALGORITHMS), line = 65

	lda I
	sta ARRAYACCESS.SETVALUE.INDEX
	lda MIN
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize FAIL (0, SHUFFLEALGORITHMS), line = 66

	inc MIN
	jmp l_0D39
l_0D24

; optimize OK (SHUFFLEALGORITHMS), line = 69

	lda I
	sta ARRAYACCESS.SETVALUE.INDEX
	lda MAX
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize FAIL (0, SHUFFLEALGORITHMS), line = 70

	dec MAX
l_0D39

; --- ForToDoEpilog
	inc I
	jne l_0D00
l_0D0E

; ------------------------------------------------------------

I	= DATAORIGIN+$03EB
MIN	= DATAORIGIN+$03EC
MAX	= DATAORIGIN+$03ED

@VarData	= I
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	KNUTHSHUFFLE					; PROCEDURE

; optimize OK (SHUFFLEALGORITHMS), line = 79

	lda #$00
	sta I

l_0D56
; --- ForToDoCondition
	lda I
	cmp #$9F
	jcs l_0D64

; optimize OK (SHUFFLEALGORITHMS), line = 81

	lda OPERATION.ABORTED
	jeq l_0D70
	jmp @exit					; exit
l_0D70

; optimize OK (SHUFFLEALGORITHMS), line = 82

	lda #$9F
	sub I
	jsr SYSTEM.RANDOM_0078
	inx
	lda SYSTEM.RANDOM_0078.RESULT
	add I
	sta :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	lda :STACKORIGIN-1,x
	add :STACKORIGIN,x
	sta J
	dex
	dex

; optimize OK (SHUFFLEALGORITHMS), line = 83

	lda I
	sta ARRAYACCESS.SWAPVALUES.INDEX1
	lda J
	sta ARRAYACCESS.SWAPVALUES.INDEX2
	jsr ARRAYACCESS.SWAPVALUES

; --- ForToDoEpilog
	inc I
	jne l_0D56
l_0D64

; ------------------------------------------------------------

I	= DATAORIGIN+$03EE
J	= DATAORIGIN+$03EF

@VarData	= I
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOCALSHUFFLE					; PROCEDURE

; optimize OK (SHUFFLEALGORITHMS), line = 93

	lda #$00
	sta I

l_0DA1
; --- ForToDoCondition
	lda I
	cmp #$9F
	jcs l_0DAF

; optimize OK (SHUFFLEALGORITHMS), line = 95

	lda OPERATION.ABORTED
	jeq l_0DBB
	jmp @exit					; exit
l_0DBB

; optimize OK (SHUFFLEALGORITHMS), line = 96

	lda #$05
	jsr SYSTEM.RANDOM_0078
	lda SYSTEM.RANDOM_0078.RESULT
	add #$01
	sta DIST

; optimize OK (SHUFFLEALGORITHMS), line = 97

	lda I
	add DIST
	cmp #$9F
	jcc l_0DDF
	jeq l_0DDF

; optimize OK (SHUFFLEALGORITHMS), line = 99

	lda #$9F
	sub I
	sub #$01
	sta DIST
l_0DDF

; optimize OK (SHUFFLEALGORITHMS), line = 101

	lda I
	add DIST
	sta J

; optimize OK (SHUFFLEALGORITHMS), line = 102

	lda I
	sta ARRAYACCESS.SWAPVALUES.INDEX1
	lda J
	sta ARRAYACCESS.SWAPVALUES.INDEX2
	jsr ARRAYACCESS.SWAPVALUES

; --- ForToDoEpilog
	inc I
	jne l_0DA1
l_0DAF

; ------------------------------------------------------------

MAX_DISTANCE	= $05
I	= DATAORIGIN+$03F0
J	= DATAORIGIN+$03F1
DIST	= DATAORIGIN+$03F2

@VarData	= I
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLASCENDINGWITHSHUFFLE			; PROCEDURE

; optimize FAIL ('FILLASCENDING', SHUFFLEALGORITHMS), line = 108

	jsr FILLASCENDING

; optimize FAIL ('LOCALSHUFFLE', SHUFFLEALGORITHMS), line = 109

	jsr LOCALSHUFFLE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLASHSCREENSHUFFLE				; PROCEDURE

; optimize OK (SHUFFLEALGORITHMS), line = 118

	lda #$00
	sta I

l_0E1B
; --- ForToDoCondition
	lda I
	cmp #$A0
	jcs l_0E29

; optimize OK (SHUFFLEALGORITHMS), line = 120

	sta ARRAYACCESS.SETVALUESILENT.INDEX
	sta ARRAYACCESS.SETVALUESILENT.VALUE
	jsr ARRAYACCESS.SETVALUESILENT

; --- ForToDoEpilog
	inc I
	jne l_0E1B
l_0E29

; optimize OK (SHUFFLEALGORITHMS), line = 123

	lda #$00
	sta I

l_0E3E
; --- ForToDoCondition
	lda I
	cmp #$77
	jcs l_0E4C

; optimize OK (SHUFFLEALGORITHMS), line = 125

	lda OPERATION.ABORTED
	jeq l_0E58
	jmp @exit					; exit
l_0E58

; optimize OK (SHUFFLEALGORITHMS), line = 126

	lda #$77
	sub I
	jsr SYSTEM.RANDOM_0078
	inx
	lda SYSTEM.RANDOM_0078.RESULT
	add I
	sta :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	lda :STACKORIGIN-1,x
	add :STACKORIGIN,x
	sta J
	dex
	dex

; optimize OK (SHUFFLEALGORITHMS), line = 127

	lda I
	sta ARRAYACCESS.SWAPVALUESSILENT.INDEX1
	lda J
	sta ARRAYACCESS.SWAPVALUESSILENT.INDEX2
	jsr ARRAYACCESS.SWAPVALUESSILENT

; --- ForToDoEpilog
	inc I
	jne l_0E3E
l_0E4C

; ------------------------------------------------------------

MAX_LINE	= $77
I	= DATAORIGIN+$03F3
J	= DATAORIGIN+$03F4

@VarData	= I
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

.endl							; UNIT SHUFFLEALGORITHMS

; ------------------------------------------------------------

.local	SORTINGALGORITHMS				; UNIT

.local	BUBBLESORT					; PROCEDURE

; optimize OK (SORTINGALGORITHMS), line = 33

	lda #$9E
	sta LAST

; optimize OK (SORTINGALGORITHMS), line = 34

	lda #$00
	sta I

l_0E8D
; --- ForToDoCondition
	lda I
	cmp #$9F
	jcs l_0E9B

; optimize OK (SORTINGALGORITHMS), line = 36

	lda #$00
	sta J

l_0EA6
; --- ForToDoCondition
	lda J
	cmp LAST
	scc
	jne l_0EB4

; optimize OK (SORTINGALGORITHMS), line = 38

	lda OPERATION.ABORTED
	jeq l_0EC0
	jmp @exit					; exit
l_0EC0

; optimize OK (SORTINGALGORITHMS), line = 40

	ldy J
	iny
	sty K

; optimize OK (SORTINGALGORITHMS), line = 41

	lda J
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 42

	lda K
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 43

	cmp V1
	jcs l_0EEF

; optimize OK (SORTINGALGORITHMS), line = 45

	lda J
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 46

	lda K
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE
l_0EEF

; --- ForToDoEpilog
	inc J
	jne l_0EA6
l_0EB4

; optimize FAIL (0, SORTINGALGORITHMS), line = 49

	dec LAST

; --- ForToDoEpilog
	inc I
	jne l_0E8D
l_0E9B

; ------------------------------------------------------------

LAST	= DATAORIGIN+$03F5
I	= DATAORIGIN+$03F6
J	= DATAORIGIN+$03F7
K	= DATAORIGIN+$03F8
V1	= DATAORIGIN+$03F9
V2	= DATAORIGIN+$03FA

@VarData	= LAST
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INSERTIONSORT					; PROCEDURE

; optimize OK (SORTINGALGORITHMS), line = 58

	lda #$01
	sta I

l_0F1B
; --- ForToDoCondition
	lda I
	cmp #$A0
	jcs l_0F29

; optimize OK (SORTINGALGORITHMS), line = 60

	lda OPERATION.ABORTED
	jeq l_0F35
	jmp @exit					; exit
l_0F35

; optimize OK (SORTINGALGORITHMS), line = 61

	lda I
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta TMP

; optimize OK (SORTINGALGORITHMS), line = 62

	lda I
	sta J

; --- WhileProlog
	jmp l_0F47
l_0F48

; optimize OK (SORTINGALGORITHMS), line = 65

	ldy J
	dey
	tya
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta VAL

; optimize OK (SORTINGALGORITHMS), line = 66

	lda TMP
	cmp VAL
	jcc l_0F67
	jmp b_0F48					; break
l_0F67

; optimize OK (SORTINGALGORITHMS), line = 68

	lda J
	sta ARRAYACCESS.SETVALUE.INDEX
	lda VAL
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize FAIL (0, SORTINGALGORITHMS), line = 69

	dec J
l_0F47

; optimize OK (SORTINGALGORITHMS), line = 63

	jne l_0F48
b_0F48

; optimize OK (SORTINGALGORITHMS), line = 71

	lda J
	sta ARRAYACCESS.SETVALUE.INDEX
	lda TMP
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; --- ForToDoEpilog
	inc I
	jne l_0F1B
l_0F29

; ------------------------------------------------------------

I	= DATAORIGIN+$03FB
J	= DATAORIGIN+$03FC
TMP	= DATAORIGIN+$03FD
VAL	= DATAORIGIN+$03FE

@VarData	= I
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SELECTIONSORT					; PROCEDURE

; optimize OK (SORTINGALGORITHMS), line = 80

	lda #$00
	sta I

l_0F9A
; --- ForToDoCondition
	lda I
	cmp #$9F
	jcs l_0FA8

; optimize OK (SORTINGALGORITHMS), line = 82

	sta TMP

; optimize OK (SORTINGALGORITHMS), line = 83

	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta VAL

; optimize OK (SORTINGALGORITHMS), line = 84

	ldy I
	iny
	sty J

l_0FC4
; --- ForToDoCondition
	lda J
	cmp #$A0
	jcs l_0FD2

; optimize OK (SORTINGALGORITHMS), line = 86

	lda OPERATION.ABORTED
	jeq l_0FDE
	jmp @exit					; exit
l_0FDE

; optimize OK (SORTINGALGORITHMS), line = 87

	lda J
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	cmp VAL
	jcs l_0FF6
@

; optimize OK (SORTINGALGORITHMS), line = 89

	lda J
	sta TMP

; optimize OK (SORTINGALGORITHMS), line = 90

	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta VAL
l_0FF6

; --- ForToDoEpilog
	inc J
	jne l_0FC4
l_0FD2

; optimize OK (SORTINGALGORITHMS), line = 93

	lda I
	sta ARRAYACCESS.SWAPVALUES.INDEX1
	lda TMP
	sta ARRAYACCESS.SWAPVALUES.INDEX2
	jsr ARRAYACCESS.SWAPVALUES

; --- ForToDoEpilog
	inc I
	jne l_0F9A
l_0FA8

; ------------------------------------------------------------

I	= DATAORIGIN+$03FF
J	= DATAORIGIN+$0400
TMP	= DATAORIGIN+$0401
VAL	= DATAORIGIN+$0402

@VarData	= I
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	QUICKSORT					; PROCEDURE

	jmp l_101B

.local	INTERNALQUICKSORT				; PROCEDURE
	.ifdef @VarData
@new	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jsr @AllocMem
	eif

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta LEFT
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta RIGHT
	dex
@main

; optimize OK (SORTINGALGORITHMS), line = 104

	lda LEFT
	sta I

; optimize OK (SORTINGALGORITHMS), line = 105

	lda RIGHT
	sta J

; optimize OK (SORTINGALGORITHMS), line = 106

	sub LEFT
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda LEFT
	add :STACKORIGIN+10
	sta MID

; optimize OK (SORTINGALGORITHMS), line = 107

	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta PIVOT

; --- RepeatUntilProlog
l_104E

; optimize OK (SORTINGALGORITHMS), line = 109

	lda OPERATION.ABORTED
	jeq l_105A
	jmp @exit					; exit
l_105A

; --- WhileProlog
	jmp l_105F
l_1060

; optimize OK (SORTINGALGORITHMS), line = 112

	lda I
	cmp #$9F
	jne l_1072
	jmp b_1060					; break
l_1072

; optimize FAIL (0, SORTINGALGORITHMS), line = 113

	inc I
l_105F

; optimize FAIL (1, SORTINGALGORITHMS), line = 110

	inx
	mva PIVOT :STACKORIGIN,x
	lda I
	jsr ARRAYACCESS.GETVALUE
	dex
	lda ARRAYACCESS.GETVALUE.RESULT
	cmp :STACKORIGIN+1,x
	jcc l_1060
b_1060

; --- WhileProlog
	jmp l_108A
l_108B

; optimize OK (SORTINGALGORITHMS), line = 118

	lda J
	jne l_109D
	jmp b_108B					; break
l_109D

; optimize FAIL (0, SORTINGALGORITHMS), line = 119

	dec J
l_108A

; optimize FAIL (1, SORTINGALGORITHMS), line = 116

	inx
	mva PIVOT :STACKORIGIN,x
	lda J
	jsr ARRAYACCESS.GETVALUE
	dex
	lda :STACKORIGIN+1,x
	cmp ARRAYACCESS.GETVALUE.RESULT
	jcc l_108B
b_108B

; optimize OK (SORTINGALGORITHMS), line = 122

	lda J
	cmp I
	jcc l_10C7

; optimize OK (SORTINGALGORITHMS), line = 124

	lda I
	sta ARRAYACCESS.SWAPVALUES.INDEX1
	lda J
	sta ARRAYACCESS.SWAPVALUES.INDEX2
	jsr ARRAYACCESS.SWAPVALUES

; optimize OK (SORTINGALGORITHMS), line = 125

	lda I
	cmp #$9F
	jne l_10E1
	jmp b_104E					; break
l_10E1

; optimize FAIL (0, SORTINGALGORITHMS), line = 126

	inc I

; optimize OK (SORTINGALGORITHMS), line = 127

	lda J
	jne l_10FA
	jmp b_104E					; break
l_10FA

; optimize FAIL (0, SORTINGALGORITHMS), line = 128

	dec J
l_10C7

; optimize OK (SORTINGALGORITHMS), line = 130

	lda J
	cmp I
	jcs l_104E
b_104E

; optimize OK (SORTINGALGORITHMS), line = 132

	lda LEFT
	cmp J
	jcs l_1126

; optimize FAIL ('INTERNALQUICKSORT', SORTINGALGORITHMS), line = 134

	inx
	mva J :STACKORIGIN,x
	inx
	mva LEFT :STACKORIGIN,x
	jsr INTERNALQUICKSORT
l_1126

; optimize OK (SORTINGALGORITHMS), line = 136

	lda I
	cmp RIGHT
	jcs l_1144

; optimize FAIL ('INTERNALQUICKSORT', SORTINGALGORITHMS), line = 138

	inx
	mva RIGHT :STACKORIGIN,x
	inx
	mva I :STACKORIGIN,x
	jsr INTERNALQUICKSORT
l_1144

; ------------------------------------------------------------

LEFT	= DATAORIGIN+$0403
RIGHT	= DATAORIGIN+$0404
I	= DATAORIGIN+$0405
J	= DATAORIGIN+$0406
MID	= DATAORIGIN+$0407
PIVOT	= DATAORIGIN+$0408

@VarData	= LEFT
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_101B

; optimize FAIL ('INTERNALQUICKSORT', SORTINGALGORITHMS), line = 143

	inx
	mva #$9F :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	jsr INTERNALQUICKSORT

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MERGESORT					; PROCEDURE

	jmp l_1156

.local	MERGE						; PROCEDURE

; optimize OK (SORTINGALGORITHMS), line = 152

	ldy MID
	iny
	sty LEFT2

; optimize OK (SORTINGALGORITHMS), line = 153

	lda MID
	jsr ARRAYACCESS.GETVALUE
	inx
	mva ARRAYACCESS.GETVALUE.RESULT :STACKORIGIN,x
	lda LEFT2
	jsr ARRAYACCESS.GETVALUE
	dex
	lda ARRAYACCESS.GETVALUE.RESULT
	cmp :STACKORIGIN+1,x
	jcc l_1179
@
	jmp @exit					; exit
l_1179

; --- WhileProlog
	jmp l_117E
l_117F

; optimize OK (SORTINGALGORITHMS), line = 157

	lda OPERATION.ABORTED
	jeq l_118B
	jmp @exit					; exit
l_118B

; optimize OK (SORTINGALGORITHMS), line = 158

	lda LEFT2
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta VAL

; optimize OK (SORTINGALGORITHMS), line = 159

	lda LEFT
	jsr ARRAYACCESS.GETVALUE
	lda VAL
	cmp ARRAYACCESS.GETVALUE.RESULT
	jcc l_11AA
@

; optimize FAIL (0, SORTINGALGORITHMS), line = 161

	inc LEFT
	jmp l_11B8
l_11AA

; optimize OK (SORTINGALGORITHMS), line = 164

	lda LEFT2
	sta IND

; --- WhileProlog
	jmp l_11C0
l_11C1

; optimize OK (SORTINGALGORITHMS), line = 168

	ldy IND
	dey
	tya
	jsr ARRAYACCESS.GETVALUE
	lda IND
	sta ARRAYACCESS.SETVALUE.INDEX
	lda ARRAYACCESS.GETVALUE.RESULT
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize FAIL (0, SORTINGALGORITHMS), line = 169

	dec IND
l_11C0

; optimize OK (SORTINGALGORITHMS), line = 166

	lda IND
	cmp LEFT
	jne l_11C1

; optimize OK (SORTINGALGORITHMS), line = 171

	lda LEFT
	sta ARRAYACCESS.SETVALUE.INDEX
	lda VAL
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize FAIL (0, SORTINGALGORITHMS), line = 173

	inc LEFT

; optimize FAIL (0, SORTINGALGORITHMS), line = 174

	inc MID

; optimize FAIL (0, SORTINGALGORITHMS), line = 175

	inc LEFT2
l_11B8
l_117E

; optimize OK (SORTINGALGORITHMS), line = 155

	lda LEFT
	cmp MID
	bcc @+
	jne l_117Fw
@
	lda RIGHT
	cmp LEFT2
	jcs l_117F
l_117Fw

; ------------------------------------------------------------

LEFT	= DATAORIGIN+$0409
MID	= DATAORIGIN+$040A
RIGHT	= DATAORIGIN+$040B
LEFT2	= DATAORIGIN+$040C
VAL	= DATAORIGIN+$040D
IND	= DATAORIGIN+$040E

@VarData	= LEFT
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INTERNALMERGESORT				; PROCEDURE
	.ifdef @VarData
@new	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jsr @AllocMem
	eif

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta LEFT
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta RIGHT
	dex
@main

; optimize OK (SORTINGALGORITHMS), line = 184

	lda OPERATION.ABORTED
	jeq l_1224
	jmp @exit					; exit
l_1224

; optimize OK (SORTINGALGORITHMS), line = 185

	lda LEFT
	cmp RIGHT
	jcs l_123B

; optimize OK (SORTINGALGORITHMS), line = 187

	lda RIGHT
	sub LEFT
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda LEFT
	add :STACKORIGIN+10
	sta MID

; optimize FAIL ('INTERNALMERGESORT', SORTINGALGORITHMS), line = 188

	inx
	mva MID :STACKORIGIN,x
	inx
	mva LEFT :STACKORIGIN,x
	jsr INTERNALMERGESORT

; optimize FAIL ('INTERNALMERGESORT', SORTINGALGORITHMS), line = 189

	inx
	mva RIGHT :STACKORIGIN,x
	inx
	lda MID
	add #$01
	sta :STACKORIGIN,x
	jsr INTERNALMERGESORT

; optimize OK (SORTINGALGORITHMS), line = 190

	lda LEFT
	sta MERGE.LEFT
	lda MID
	sta MERGE.MID
	lda RIGHT
	sta MERGE.RIGHT
	jsr MERGE
l_123B

; ------------------------------------------------------------

LEFT	= DATAORIGIN+$040F
RIGHT	= DATAORIGIN+$0410
MID	= DATAORIGIN+$0411

@VarData	= LEFT
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_1156

; optimize FAIL ('INTERNALMERGESORT', SORTINGALGORITHMS), line = 195

	inx
	mva #$9F :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	jsr INTERNALMERGESORT

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COCTAILSORT					; PROCEDURE

; optimize OK (SORTINGALGORITHMS), line = 204

	lda #$00
	sta LEFT

; optimize OK (SORTINGALGORITHMS), line = 205

	lda #$9F
	sta RIGHT

; --- RepeatUntilProlog
l_1281

; optimize OK (SORTINGALGORITHMS), line = 209

	lda #$00
	sta SWAPPED

; optimize OK (SORTINGALGORITHMS), line = 211

	lda LEFT
	sta I
	ldy RIGHT
	dey
	sty @FORTMP_1293_0

l_1296
; --- ForToDoCondition
	lda @FORTMP_1293_0:#$00
	cmp I
	jcc l_12A4

; optimize OK (SORTINGALGORITHMS), line = 213

	lda OPERATION.ABORTED
	jeq l_12B0
	jmp @exit					; exit
l_12B0

; optimize OK (SORTINGALGORITHMS), line = 214

	ldy I
	iny
	sty J

; optimize OK (SORTINGALGORITHMS), line = 215

	lda I
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 216

	lda J
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 217

	cmp V1
	jcs l_12DF

; optimize OK (SORTINGALGORITHMS), line = 219

	lda I
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 220

	lda J
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 221

	lda #$01
	sta SWAPPED
l_12DF

; --- ForToDoEpilog
	inc I
	jne l_1296
l_12A4

; optimize OK (SORTINGALGORITHMS), line = 225

	lda SWAPPED
	jne l_1308
	jmp b_1281					; break
l_1308

; optimize OK (SORTINGALGORITHMS), line = 227

	lda #$00
	sta SWAPPED

; optimize FAIL (0, SORTINGALGORITHMS), line = 228

	dec RIGHT

; optimize OK (SORTINGALGORITHMS), line = 230

	ldy RIGHT
	dey
	sty I

l_1324
; --- ForToDoCondition
	lda I
	cmp LEFT
	jcc l_1332

; optimize OK (SORTINGALGORITHMS), line = 232

	lda OPERATION.ABORTED
	jeq l_133E
	jmp @exit					; exit
l_133E

; optimize OK (SORTINGALGORITHMS), line = 233

	ldy I
	iny
	sty J

; optimize OK (SORTINGALGORITHMS), line = 234

	lda I
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 235

	lda J
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 236

	cmp V1
	jcs l_136D

; optimize OK (SORTINGALGORITHMS), line = 238

	lda I
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 239

	lda J
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 240

	lda #$01
	sta SWAPPED
l_136D

; --- ForToDoEpilog
	lda I
	beq l_1332
	dec I
	jmp l_1324
l_1332

; optimize FAIL (0, SORTINGALGORITHMS), line = 244

	inc LEFT

; optimize OK (SORTINGALGORITHMS), line = 246

	lda SWAPPED
	jne l_1281
b_1281

; ------------------------------------------------------------

SWAPPED	= DATAORIGIN+$0412
I	= DATAORIGIN+$0413
J	= DATAORIGIN+$0414
V1	= DATAORIGIN+$0415
V2	= DATAORIGIN+$0416
LEFT	= DATAORIGIN+$0417
RIGHT	= DATAORIGIN+$0418

@VarData	= SWAPPED
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GNOMESORT					; PROCEDURE

; optimize OK (SORTINGALGORITHMS), line = 254

	lda #$01
	sta I

; optimize OK (SORTINGALGORITHMS), line = 255

	lda #$02
	sta J

; --- WhileProlog
	jmp l_13A3
l_13A4

; optimize OK (SORTINGALGORITHMS), line = 258

	lda OPERATION.ABORTED
	jeq l_13B0
	jmp @exit					; exit
l_13B0

; optimize OK (SORTINGALGORITHMS), line = 259

	ldy I
	dey
	tya
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 260

	lda I
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 261

	cmp V1
	jcc l_13D9

; optimize OK (SORTINGALGORITHMS), line = 263

	lda J
	sta I

; optimize FAIL (0, SORTINGALGORITHMS), line = 264

	inc J
	jmp l_13ED
l_13D9

; optimize OK (SORTINGALGORITHMS), line = 267

	lda I
	sub #$01
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 268

	lda I
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize FAIL (0, SORTINGALGORITHMS), line = 269

	dec I

; optimize OK (SORTINGALGORITHMS), line = 270

	jne l_1415

; optimize OK (SORTINGALGORITHMS), line = 272

	lda J
	sta I

; optimize FAIL (0, SORTINGALGORITHMS), line = 273

	inc J
l_1415
l_13ED
l_13A3

; optimize OK (SORTINGALGORITHMS), line = 256

	lda I
	cmp #$A0
	jcc l_13A4

; ------------------------------------------------------------

I	= DATAORIGIN+$041A
J	= DATAORIGIN+$041B
V1	= DATAORIGIN+$041C
V2	= DATAORIGIN+$041D

@VarData	= I
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CIRCLESORT					; PROCEDURE

	jmp l_1432

.local	CIRCLESORTINTERNAL				; PROCEDURE
	.ifdef @VarData
@new	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jsr @AllocMem
	eif

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta LEFT
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta RIGHT
	dex
@main

; optimize OK (SORTINGALGORITHMS), line = 288

	lda LEFT
	cmp RIGHT
	jcs l_144F

; optimize OK (SORTINGALGORITHMS), line = 290

	sta L

; optimize OK (SORTINGALGORITHMS), line = 291

	lda RIGHT
	sta R

; --- WhileProlog
	jmp l_145E
l_145F

; optimize OK (SORTINGALGORITHMS), line = 295

	lda OPERATION.ABORTED
	jeq l_146B
	jmp @exit					; exit
l_146B

; optimize OK (SORTINGALGORITHMS), line = 296

	lda R
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 297

	lda L
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 298

	lda V1
	cmp V2
	jcs l_1490

; optimize OK (SORTINGALGORITHMS), line = 300

	lda R
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 301

	lda L
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize FAIL (0, SORTINGALGORITHMS), line = 302

	ind SWAPS
l_1490

; optimize FAIL (0, SORTINGALGORITHMS), line = 304

	inc L

; optimize FAIL (0, SORTINGALGORITHMS), line = 305

	dec R
l_145E

; optimize OK (SORTINGALGORITHMS), line = 293

	lda L
	cmp R
	jcc l_145F

; optimize OK (SORTINGALGORITHMS), line = 308

	cmp R
	jne l_14D0

; optimize OK (SORTINGALGORITHMS), line = 310

	ldy L
	iny
	tya
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 311

	lda L
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 312

	lda V1
	cmp V2
	jcs l_14F7

; optimize OK (SORTINGALGORITHMS), line = 314

	lda L
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 315

	lda L
	add #$01
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize FAIL (0, SORTINGALGORITHMS), line = 316

	ind SWAPS
l_14F7
l_14D0

; optimize OK (SORTINGALGORITHMS), line = 320

	lda L
	add R
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta MID

; optimize FAIL ('CIRCLESORTINTERNAL', SORTINGALGORITHMS), line = 322

	inx
	mva MID :STACKORIGIN,x
	inx
	mva LEFT :STACKORIGIN,x
	jsr CIRCLESORTINTERNAL

; optimize FAIL ('CIRCLESORTINTERNAL', SORTINGALGORITHMS), line = 323

	inx
	mva RIGHT :STACKORIGIN,x
	inx
	lda MID
	add #$01
	sta :STACKORIGIN,x
	jsr CIRCLESORTINTERNAL
l_144F

; ------------------------------------------------------------

LEFT	= DATAORIGIN+$0422
RIGHT	= DATAORIGIN+$0423
L	= DATAORIGIN+$0424
R	= DATAORIGIN+$0425
MID	= DATAORIGIN+$0426
V1	= DATAORIGIN+$0427
V2	= DATAORIGIN+$0428

@VarData	= LEFT
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_1432

; optimize OK (SORTINGALGORITHMS), line = 328

	lda #$01
	sta SWAPS
	lda #$00
	sta SWAPS+1
	sta SWAPS+2
	sta SWAPS+3

; --- WhileProlog
	jmp l_153E
l_153F

; optimize OK (SORTINGALGORITHMS), line = 331

	lda OPERATION.ABORTED
	jeq l_154B
	jmp @exit					; exit
l_154B

; optimize OK (SORTINGALGORITHMS), line = 332

	lda #$00
	sta SWAPS
	sta SWAPS+1
	sta SWAPS+2
	sta SWAPS+3

; optimize FAIL ('CIRCLESORTINTERNAL', SORTINGALGORITHMS), line = 333

	inx
	mva #$9F :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	jsr CIRCLESORTINTERNAL
l_153E

; optimize OK (SORTINGALGORITHMS), line = 329

	lda SWAPS+3
	bmi @+
	ora SWAPS+2
	ora SWAPS+1
	ora SWAPS
	jne l_153F
@

; ------------------------------------------------------------

SWAPS	= DATAORIGIN+$041E

@VarData	= SWAPS
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COMBSORT					; PROCEDURE

; optimize OK (SORTINGALGORITHMS), line = 343

	lda #$A0
	sta GAP

; optimize OK (SORTINGALGORITHMS), line = 344

	lda #$01
	sta SWAPPED

; --- WhileProlog
	jmp l_156D
l_156E

; optimize FAIL ('divmulINT.REAL', SORTINGALGORITHMS), line = 348

	inx
	mva GAP :STACKORIGIN,x
	inx
	mva #$4D :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @expandToREAL1
	jsr divmulINT.REAL
	dex
	lda :STACKORIGIN,x
	sta @REAL_TRUNC.A
	lda :STACKORIGIN+STACKWIDTH,x
	sta @REAL_TRUNC.A+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta @REAL_TRUNC.A+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta @REAL_TRUNC.A+3
	jsr @REAL_TRUNC
	lda @REAL_TRUNC.RESULT
	sta :STACKORIGIN,x
	lda @REAL_TRUNC.RESULT+1
	sta :STACKORIGIN+STACKWIDTH,x
	lda @REAL_TRUNC.RESULT+2
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda @REAL_TRUNC.RESULT+3
	sta :STACKORIGIN+STACKWIDTH*3,x
	lda :STACKORIGIN,x
	sta GAP
	dex

; optimize OK (SORTINGALGORITHMS), line = 349

	lda GAP
	cmp #$01
	jcs l_158D

; optimize OK (SORTINGALGORITHMS), line = 351

	lda #$01
	sta GAP
l_158D

; optimize OK (SORTINGALGORITHMS), line = 354

	lda #$00
	sta SWAPPED

; optimize OK (SORTINGALGORITHMS), line = 355

	sta I
	lda #$9F
	sub GAP
	sta @FORTMP_15A4_0

l_15A7
; --- ForToDoCondition
	lda @FORTMP_15A4_0:#$00
	cmp I
	jcc l_15B5

; optimize OK (SORTINGALGORITHMS), line = 357

	lda OPERATION.ABORTED
	jeq l_15C1
	jmp @exit					; exit
l_15C1

; optimize OK (SORTINGALGORITHMS), line = 358

	lda I
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 359

	lda I
	add GAP
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 360

	cmp V1
	jcs l_15EC

; optimize OK (SORTINGALGORITHMS), line = 362

	lda I
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 363

	lda I
	add GAP
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 364

	lda #$01
	sta SWAPPED
l_15EC

; --- ForToDoEpilog
	inc I
	jne l_15A7
l_15B5
l_156D

; optimize OK (SORTINGALGORITHMS), line = 346

	ldy #1
	lda GAP
	cmp #$02
	bcs @+
	dey
@
	tya
	ora SWAPPED
	jne l_156E

; ------------------------------------------------------------

I	= DATAORIGIN+$0429
GAP	= DATAORIGIN+$042A
SWAPPED	= DATAORIGIN+$042B
V1	= DATAORIGIN+$042C
V2	= DATAORIGIN+$042D

@VarData	= I
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PANCAKESORT					; PROCEDURE

	jmp l_1622

.local	FLIP						; PROCEDURE
	sta LAST

; optimize OK (SORTINGALGORITHMS), line = 376

	sub #$01
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta H

; optimize OK (SORTINGALGORITHMS), line = 377

	lda #$00
	sta I

l_163E
; --- ForToDoCondition
	lda I
	cmp H
	scc
	jne l_164C

; optimize OK (SORTINGALGORITHMS), line = 379

	lda OPERATION.ABORTED
	jeq l_1658
	jmp @exit					; exit
l_1658

; optimize OK (SORTINGALGORITHMS), line = 380

	lda LAST
	sub I
	sta ARRAYACCESS.SWAPVALUES.INDEX2
	lda I
	sta ARRAYACCESS.SWAPVALUES.INDEX1
	jsr ARRAYACCESS.SWAPVALUES

; --- ForToDoEpilog
	inc I
	jne l_163E
l_164C

; ------------------------------------------------------------

LAST	= DATAORIGIN+$042F
I	= DATAORIGIN+$0430
H	= DATAORIGIN+$0431

@VarData	= LAST
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_1622

; optimize OK (SORTINGALGORITHMS), line = 387

	lda #$A0
	sta I

l_1677
; --- ForToDoCondition
	lda I
	cmp #$01
	jcc l_1685

; optimize OK (SORTINGALGORITHMS), line = 389

	lda #$00
	sta MAXPOS

; optimize OK (SORTINGALGORITHMS), line = 390

	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta VAL

; optimize OK (SORTINGALGORITHMS), line = 391

	lda #$00
	sta J
	ldy I
	dey
	sty @FORTMP_169C_0

l_169F
; --- ForToDoCondition
	lda @FORTMP_169C_0:#$00
	cmp J
	jcc l_16AD

; optimize OK (SORTINGALGORITHMS), line = 393

	lda OPERATION.ABORTED
	jeq l_16B9
	jmp @exit					; exit
l_16B9

; optimize OK (SORTINGALGORITHMS), line = 394

	lda J
	jsr ARRAYACCESS.GETVALUE
	lda VAL
	cmp ARRAYACCESS.GETVALUE.RESULT
	jcs l_16D1
@

; optimize OK (SORTINGALGORITHMS), line = 396

	lda J
	sta MAXPOS

; optimize OK (SORTINGALGORITHMS), line = 397

	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta VAL
l_16D1

; --- ForToDoEpilog
	inc J
	jne l_169F
l_16AD

; optimize OK (SORTINGALGORITHMS), line = 401

	lda I
	sub #$01
	cmp MAXPOS
	jne l_16FE
	jmp c_1677					; continue
l_16FE

; optimize OK (SORTINGALGORITHMS), line = 406

	lda MAXPOS
	jeq l_1713

; optimize OK (SORTINGALGORITHMS), line = 407

	jsr FLIP
l_1713

; optimize OK (SORTINGALGORITHMS), line = 409

	ldy I
	dey
	tya
	jsr FLIP

; --- ForToDoEpilog
c_1677
	dec I
	jne l_1677
l_1685

; ------------------------------------------------------------

I	= DATAORIGIN+$0432
J	= DATAORIGIN+$0433
MAXPOS	= DATAORIGIN+$0434
VAL	= DATAORIGIN+$0435

@VarData	= I
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHELLSORT					; PROCEDURE

; optimize OK (SORTINGALGORITHMS), line = 417

	lda #$50
	sta STEP

; --- WhileProlog
	jmp l_1731
l_1732

; optimize OK (SORTINGALGORITHMS), line = 421

	lda STEP
	sta I

l_173D
; --- ForToDoCondition
	lda I
	cmp #$A0
	jcs l_174B

; optimize OK (SORTINGALGORITHMS), line = 423

	lda OPERATION.ABORTED
	jeq l_1757
	jmp @exit					; exit
l_1757

; optimize OK (SORTINGALGORITHMS), line = 424

	lda I
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta TMP

; optimize OK (SORTINGALGORITHMS), line = 425

	lda I

; --- WhileProlog
	jmp l_1769
l_176A

; optimize OK (SORTINGALGORITHMS), line = 429

	lda J
	sub STEP
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta VAL

; optimize OK (SORTINGALGORITHMS), line = 430

	lda TMP
	cmp VAL
	jcc l_178B
	jmp b_176A					; break
l_178B

; optimize OK (SORTINGALGORITHMS), line = 432

	lda J
	jsr ARRAYACCESS.GETVALUE
	inx
	mva ARRAYACCESS.GETVALUE.RESULT :STACKORIGIN,x
	lda J
	sub STEP
	sta ARRAYACCESS.SETVALUE.INDEX
	lda :STACKORIGIN,x
	sta ARRAYACCESS.SETVALUE.VALUE
	dex
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 433

	lda J
	sta ARRAYACCESS.SETVALUE.INDEX
	lda VAL
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 434

	lda J
	sub STEP
l_1769
	sta J

; optimize OK (SORTINGALGORITHMS), line = 427

	cmp STEP
	jcs l_176A
b_176A

; optimize OK (SORTINGALGORITHMS), line = 437

	lda J
	sta ARRAYACCESS.SETVALUE.INDEX
	lda TMP
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; --- ForToDoEpilog
	inc I
	jne l_173D
l_174B

; optimize OK (SORTINGALGORITHMS), line = 440

	lsr STEP
l_1731

; optimize OK (SORTINGALGORITHMS), line = 419

	lda STEP
	jne l_1732

; ------------------------------------------------------------

I	= DATAORIGIN+$0437
J	= DATAORIGIN+$0438
STEP	= DATAORIGIN+$0439
TMP	= DATAORIGIN+$043A
VAL	= DATAORIGIN+$043B

@VarData	= I
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ODDEVENSORT					; PROCEDURE

; optimize OK (SORTINGALGORITHMS), line = 449

	lda #$00
	sta SORTED

; --- WhileProlog
	jmp l_17E0
l_17E1

; optimize OK (SORTINGALGORITHMS), line = 453

	lda #$01
	sta SORTED

; optimize OK (SORTINGALGORITHMS), line = 455

; --- WhileProlog
	jmp l_17EB
l_17EC

; optimize OK (SORTINGALGORITHMS), line = 458

	lda OPERATION.ABORTED
	jeq l_17F8
	jmp @exit					; exit
l_17F8

; optimize OK (SORTINGALGORITHMS), line = 459

	lda I
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 460

	ldy I
	iny
	tya
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 461

	cmp V1
	jcs l_1821

; optimize OK (SORTINGALGORITHMS), line = 463

	lda I
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 464

	lda I
	add #$01
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 465

	lda #$00
	sta SORTED
l_1821

; optimize OK (SORTINGALGORITHMS), line = 467

	lda I
	add #$02
l_17EB
	sta I

; optimize OK (SORTINGALGORITHMS), line = 456

	cmp #$9F
	jcc l_17EC

; optimize OK (SORTINGALGORITHMS), line = 470

	lda #$00

; --- WhileProlog
	jmp l_184D
l_184E

; optimize OK (SORTINGALGORITHMS), line = 473

	lda OPERATION.ABORTED
	jeq l_185A
	jmp @exit					; exit
l_185A

; optimize OK (SORTINGALGORITHMS), line = 474

	lda I
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 475

	ldy I
	iny
	tya
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 476

	cmp V1
	jcs l_1883

; optimize OK (SORTINGALGORITHMS), line = 478

	lda I
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 479

	lda I
	add #$01
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 480

	lda #$00
	sta SORTED
l_1883

; optimize OK (SORTINGALGORITHMS), line = 482

	lda I
	add #$02
l_184D
	sta I

; optimize OK (SORTINGALGORITHMS), line = 471

	cmp #$9F
	jcc l_184E
l_17E0

; optimize OK (SORTINGALGORITHMS), line = 451

	lda SORTED
	jeq l_17E1

; ------------------------------------------------------------

I	= DATAORIGIN+$043C
V1	= DATAORIGIN+$043D
V2	= DATAORIGIN+$043E
SORTED	= DATAORIGIN+$043F

@VarData	= I
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BITONICSORT					; PROCEDURE

	jmp l_18B6

.local	GETHALFASPOWEROFTWO				; FUNCTION
	sta SIZE

; optimize OK (SORTINGALGORITHMS), line = 491

	lda #$01
	sta RESULT
	lda #$00
	sta RESULT+1

; --- WhileProlog
	jmp l_18BF
l_18C0

; optimize OK (SORTINGALGORITHMS), line = 494

	asl RESULT
	rol RESULT+1
l_18BF

; optimize OK (SORTINGALGORITHMS), line = 492

	lda RESULT+1
	bne @+
	lda RESULT
	cmp SIZE
	jcc l_18C0
@

; optimize OK (SORTINGALGORITHMS), line = 497

	lsr RESULT+1
	ror RESULT
@exit

; ------------------------------------------------------------

SIZE	= DATAORIGIN+$0440
RESULT	= DATAORIGIN+$0441

@VarData	= SIZE
@VarDataSize	= 1

	rts						; ret
.endl

.local	BITONICMERGE					; PROCEDURE
	.ifdef @VarData
@new	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jsr @AllocMem
	eif

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta LEFT
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta SIZE
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta DIR
	dex
@main

; optimize OK (SORTINGALGORITHMS), line = 505

	lda SIZE
	cmp #$02
	jcc l_18FE

; optimize OK (SORTINGALGORITHMS), line = 507

	jsr GETHALFASPOWEROFTWO
	lda GETHALFASPOWEROFTWO.RESULT
	sta HALF

; optimize OK (SORTINGALGORITHMS), line = 508

	lda SIZE
	sub #$01
	sub HALF
	add LEFT
	sta RIGHT

; optimize OK (SORTINGALGORITHMS), line = 509

	lda LEFT
	sta I

l_1929
; --- ForToDoCondition
	lda I
	cmp RIGHT
	scc
	jne l_1937

; optimize OK (SORTINGALGORITHMS), line = 511

	lda OPERATION.ABORTED
	jeq l_1943
	jmp @exit					; exit
l_1943

; optimize OK (SORTINGALGORITHMS), line = 512

	lda I
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 513

	lda I
	add HALF
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 514

	ldy #1
	lda V2
	cmp V1
	bcc @+
	dey
@
	sty :STACKORIGIN+10
	lda DIR
	cmp :STACKORIGIN+10
	jne l_1976

; optimize OK (SORTINGALGORITHMS), line = 516

	lda I
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 517

	lda I
	add HALF
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE
l_1976

; --- ForToDoEpilog
	inc I
	jne l_1929
l_1937

; optimize FAIL ('BITONICMERGE', SORTINGALGORITHMS), line = 521

	inx
	mva DIR :STACKORIGIN,x
	inx
	mva HALF :STACKORIGIN,x
	inx
	mva LEFT :STACKORIGIN,x
	jsr BITONICMERGE

; optimize FAIL ('BITONICMERGE', SORTINGALGORITHMS), line = 522

	inx
	mva DIR :STACKORIGIN,x
	inx
	lda SIZE
	sub HALF
	sta :STACKORIGIN,x
	inx
	lda LEFT
	add HALF
	sta :STACKORIGIN,x
	jsr BITONICMERGE
l_18FE

; ------------------------------------------------------------

LEFT	= DATAORIGIN+$0443
SIZE	= DATAORIGIN+$0444
DIR	= DATAORIGIN+$0445
HALF	= DATAORIGIN+$0446
I	= DATAORIGIN+$0447
RIGHT	= DATAORIGIN+$0448
V1	= DATAORIGIN+$0449
V2	= DATAORIGIN+$044A

@VarData	= LEFT
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BITONICSORTINTERNAL				; PROCEDURE
	.ifdef @VarData
@new	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jsr @AllocMem
	eif

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta LEFT
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta SIZE
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta DIR
	dex
@main

; optimize OK (SORTINGALGORITHMS), line = 530

	lda OPERATION.ABORTED
	jeq l_19CD
	jmp @exit					; exit
l_19CD

; optimize OK (SORTINGALGORITHMS), line = 531

	lda SIZE
	cmp #$02
	jcc l_19E2

; optimize OK (SORTINGALGORITHMS), line = 533

	lsr @
	sta HALF

; optimize FAIL ('BITONICSORTINTERNAL', SORTINGALGORITHMS), line = 534

	inx
	mva DIR :STACKORIGIN,x
	jsr notBOOLEAN
	inx
	mva HALF :STACKORIGIN,x
	inx
	mva LEFT :STACKORIGIN,x
	jsr BITONICSORTINTERNAL

; optimize FAIL ('BITONICSORTINTERNAL', SORTINGALGORITHMS), line = 535

	inx
	mva DIR :STACKORIGIN,x
	inx
	lda SIZE
	sub HALF
	sta :STACKORIGIN,x
	inx
	lda LEFT
	add HALF
	sta :STACKORIGIN,x
	jsr BITONICSORTINTERNAL

; optimize FAIL ('BITONICMERGE', SORTINGALGORITHMS), line = 536

	inx
	mva DIR :STACKORIGIN,x
	inx
	mva SIZE :STACKORIGIN,x
	inx
	mva LEFT :STACKORIGIN,x
	jsr BITONICMERGE
l_19E2

; ------------------------------------------------------------

LEFT	= DATAORIGIN+$044B
SIZE	= DATAORIGIN+$044C
DIR	= DATAORIGIN+$044D
HALF	= DATAORIGIN+$044E

@VarData	= LEFT
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_18B6

; optimize FAIL ('BITONICSORTINTERNAL', SORTINGALGORITHMS), line = 541

	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$A0 :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	jsr BITONICSORTINTERNAL

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RADIXSORT					; PROCEDURE

	jmp l_1A25

.local	RADIXSORTINTERNAL				; PROCEDURE
	.ifdef @VarData
@new	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jsr @AllocMem
	eif

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta MASK
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta FIRST
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta LAST
	dex
@main

; optimize OK (SORTINGALGORITHMS), line = 551

	lda FIRST
	cmp LAST
	jcc l_1A45
	jmp @exit					; exit
l_1A45

; optimize OK (SORTINGALGORITHMS), line = 553

	lda FIRST
	sta I

; optimize OK (SORTINGALGORITHMS), line = 554

	lda LAST
	sta J

; --- WhileProlog
	jmp l_1A56
l_1A57

; optimize OK (SORTINGALGORITHMS), line = 557

	lda OPERATION.ABORTED
	jeq l_1A63
	jmp @exit					; exit
l_1A63

; optimize OK (SORTINGALGORITHMS), line = 558

	lda I
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 559

	and MASK
	jne l_1A85

; optimize FAIL (0, SORTINGALGORITHMS), line = 561

	inc I
	jmp l_1A93
l_1A85

; optimize OK (SORTINGALGORITHMS), line = 564

	lda J
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 565

	lda I
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 566

	lda J
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize FAIL (0, SORTINGALGORITHMS), line = 567

	dec J
l_1A93
l_1A56

; optimize OK (SORTINGALGORITHMS), line = 555

	lda I
	cmp J
	jcc l_1A57

; optimize OK (SORTINGALGORITHMS), line = 571

	lda MASK
	cmp #$01
	jne l_1ACC
	jmp @exit					; exit
l_1ACC

; optimize OK (SORTINGALGORITHMS), line = 573

	lda I
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 574

	and MASK
	jne l_1AEE
	inc J
	jmp l_1AFC
l_1AEE

; optimize FAIL (0, SORTINGALGORITHMS), line = 575

	dec I
l_1AFC

; optimize OK (SORTINGALGORITHMS), line = 577

	lsr MASK

; optimize FAIL ('RADIXSORTINTERNAL', SORTINGALGORITHMS), line = 579

	inx
	mva I :STACKORIGIN,x
	inx
	mva FIRST :STACKORIGIN,x
	inx
	mva MASK :STACKORIGIN,x
	jsr RADIXSORTINTERNAL

; optimize FAIL ('RADIXSORTINTERNAL', SORTINGALGORITHMS), line = 580

	inx
	mva LAST :STACKORIGIN,x
	inx
	mva J :STACKORIGIN,x
	inx
	mva MASK :STACKORIGIN,x
	jsr RADIXSORTINTERNAL

; ------------------------------------------------------------

MASK	= DATAORIGIN+$044F
FIRST	= DATAORIGIN+$0450
LAST	= DATAORIGIN+$0451
V1	= DATAORIGIN+$0452
V2	= DATAORIGIN+$0453
I	= DATAORIGIN+$0454
J	= DATAORIGIN+$0455

@VarData	= MASK
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_1A25

; optimize FAIL ('RADIXSORTINTERNAL', SORTINGALGORITHMS), line = 584

	inx
	mva #$9F :STACKORIGIN,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$80 :STACKORIGIN,x
	jsr RADIXSORTINTERNAL

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	HEAPSORT					; PROCEDURE

	jmp l_1B27

.local	BUILDHEAP					; PROCEDURE

; optimize OK (SORTINGALGORITHMS), line = 594

	lda #$01
	sta I

l_1B33
; --- ForToDoCondition
	lda I
	cmp #$A0
	jcs l_1B41

; optimize OK (SORTINGALGORITHMS), line = 596

	sub #$01
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta K

; optimize OK (SORTINGALGORITHMS), line = 597

	lda I
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 598

	lda K
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 599

	cmp V1
	jcs l_1B71

; optimize OK (SORTINGALGORITHMS), line = 601

	lda I
	sta J

; --- WhileProlog
	jmp l_1B7A
l_1B7B

; optimize OK (SORTINGALGORITHMS), line = 604

	lda OPERATION.ABORTED
	jeq l_1B87
	jmp @exit					; exit
l_1B87

; optimize OK (SORTINGALGORITHMS), line = 606

	lda K
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 607

	lda J
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 609

	lda K
	jne l_1BAA
	jmp b_1B7B					; break
l_1BAA

; optimize OK (SORTINGALGORITHMS), line = 611

	lda K
	sta J

; optimize OK (SORTINGALGORITHMS), line = 612

	sub #$01
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta K

; optimize OK (SORTINGALGORITHMS), line = 614

	lda J
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 615

	lda K
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2
l_1B7A

; optimize OK (SORTINGALGORITHMS), line = 602

	lda V2
	cmp V1
	jcc l_1B7B
b_1B7B
l_1B71

; --- ForToDoEpilog
	inc I
	jne l_1B33
l_1B41

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_1B27

; optimize FAIL ('BUILDHEAP', SORTINGALGORITHMS), line = 622

	jsr BUILDHEAP

; optimize OK (SORTINGALGORITHMS), line = 623

	lda OPERATION.ABORTED
	jeq l_1BF2
	jmp @exit					; exit
l_1BF2

; optimize OK (SORTINGALGORITHMS), line = 625

	lda #$9F
	sta I

l_1BFE
; --- ForToDoCondition
	lda I
	cmp #$01
	jcc l_1C0C

; optimize OK (SORTINGALGORITHMS), line = 627

	lda #$00
	sta ARRAYACCESS.SWAPVALUES.INDEX1
	lda I
	sta ARRAYACCESS.SWAPVALUES.INDEX2
	jsr ARRAYACCESS.SWAPVALUES

; optimize OK (SORTINGALGORITHMS), line = 628

	lda #$00
	sta J

; --- WhileProlog
	jmp l_1C17
l_1C18

; optimize OK (SORTINGALGORITHMS), line = 632

	lda OPERATION.ABORTED
	jeq l_1C24
	jmp @exit					; exit
l_1C24

; optimize OK (SORTINGALGORITHMS), line = 634

	lda J
	cmp #$7F
	jcc l_1C39
	jmp b_1C18					; break
l_1C39

; optimize OK (SORTINGALGORITHMS), line = 635

	lda J
	asl @
	add #$01
	sta K

; optimize OK (SORTINGALGORITHMS), line = 636

	add #$01
	cmp I
	jcs l_1C62

; optimize OK (SORTINGALGORITHMS), line = 638

	lda K
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 639

	ldy K
	iny
	tya
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 640

	lda V1
	cmp V2
	jcs l_1C89

; optimize FAIL (0, SORTINGALGORITHMS), line = 642

	inc K
l_1C89
l_1C62

; optimize OK (SORTINGALGORITHMS), line = 646

	lda K
	cmp I
	jcs l_1CA6

; optimize OK (SORTINGALGORITHMS), line = 648

	lda J
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 649

	lda K
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 650

	lda V1
	cmp V2
	jcs l_1CC9

; optimize OK (SORTINGALGORITHMS), line = 652

	lda J
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE

; optimize OK (SORTINGALGORITHMS), line = 653

	lda K
	sta ARRAYACCESS.SETVALUE.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUE.VALUE
	jsr ARRAYACCESS.SETVALUE
l_1CC9
l_1CA6

; optimize OK (SORTINGALGORITHMS), line = 657

	lda K
	sta J

; optimize OK (SORTINGALGORITHMS), line = 658

	cmp I
	jcc l_1CF6
	jmp b_1C18					; break
l_1CF6
l_1C17

; optimize OK (SORTINGALGORITHMS), line = 630

	jmp l_1C18
b_1C18

; --- ForToDoEpilog
	dec I
	jne l_1BFE
l_1C0C

; ------------------------------------------------------------

I	= DATAORIGIN+$0456
J	= DATAORIGIN+$0457
K	= DATAORIGIN+$0458
V1	= DATAORIGIN+$0459
V2	= DATAORIGIN+$045A

@VarData	= I
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DOUBLESELECTIONSORT				; PROCEDURE

; optimize OK (SORTINGALGORITHMS), line = 670

	lda #$00
	sta LEFT

; optimize OK (SORTINGALGORITHMS), line = 671

	lda #$9F
	sta RIGHT

; --- WhileProlog
	jmp l_1D10
l_1D11

; optimize OK (SORTINGALGORITHMS), line = 675

	lda LEFT
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta LEFTVAL

; optimize OK (SORTINGALGORITHMS), line = 676

	lda RIGHT
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta RIGHTVAL

; optimize OK (SORTINGALGORITHMS), line = 678

	lda LEFT
	sta MININD

; optimize OK (SORTINGALGORITHMS), line = 679

	sta MAXIND

; optimize OK (SORTINGALGORITHMS), line = 680

	lda LEFTVAL
	sta MINVAL

; optimize OK (SORTINGALGORITHMS), line = 681

	sta MAXVAL

; optimize OK (SORTINGALGORITHMS), line = 683

	lda LEFT
	sta I

l_1D44
; --- ForToDoCondition
	lda I
	cmp RIGHT
	scc
	jne l_1D52

; optimize OK (SORTINGALGORITHMS), line = 685

	lda OPERATION.ABORTED
	jeq l_1D5E
	jmp @exit					; exit
l_1D5E

; optimize OK (SORTINGALGORITHMS), line = 686

	lda I
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	sta VAL

; optimize OK (SORTINGALGORITHMS), line = 688

	lda MAXVAL
	cmp VAL
	jcs l_1D7C

; optimize OK (SORTINGALGORITHMS), line = 690

	lda I
	sta MAXIND

; optimize OK (SORTINGALGORITHMS), line = 691

	lda VAL
	sta MAXVAL
	jmp l_1D92
l_1D7C

; optimize OK (SORTINGALGORITHMS), line = 693

	lda VAL
	cmp MINVAL
	jcs l_1DA6

; optimize OK (SORTINGALGORITHMS), line = 695

	lda I
	sta MININD

; optimize OK (SORTINGALGORITHMS), line = 696

	lda VAL
	sta MINVAL
l_1DA6
l_1D92

; --- ForToDoEpilog
	inc I
	jne l_1D44
l_1D52

; optimize OK (SORTINGALGORITHMS), line = 700

	lda LEFT
	sta ARRAYACCESS.SWAPVALUES.INDEX1
	lda MININD
	sta ARRAYACCESS.SWAPVALUES.INDEX2
	jsr ARRAYACCESS.SWAPVALUES

; optimize OK (SORTINGALGORITHMS), line = 702

	lda MININD
	jsr ARRAYACCESS.GETVALUE
	lda ARRAYACCESS.GETVALUE.RESULT
	cmp MAXVAL
	jne l_1DD6
@

; optimize OK (SORTINGALGORITHMS), line = 704

	lda RIGHT
	sta ARRAYACCESS.SWAPVALUES.INDEX1
	lda MININD
	sta ARRAYACCESS.SWAPVALUES.INDEX2
	jsr ARRAYACCESS.SWAPVALUES
	jmp l_1DE7
l_1DD6

; optimize OK (SORTINGALGORITHMS), line = 707

	lda RIGHT
	sta ARRAYACCESS.SWAPVALUES.INDEX1
	lda MAXIND
	sta ARRAYACCESS.SWAPVALUES.INDEX2
	jsr ARRAYACCESS.SWAPVALUES
l_1DE7

; optimize FAIL (0, SORTINGALGORITHMS), line = 710

	inc LEFT

; optimize FAIL (0, SORTINGALGORITHMS), line = 711

	dec RIGHT
l_1D10

; optimize OK (SORTINGALGORITHMS), line = 673

	lda LEFT
	cmp RIGHT
	jcc l_1D11

; ------------------------------------------------------------

I	= DATAORIGIN+$045B
LEFT	= DATAORIGIN+$045C
RIGHT	= DATAORIGIN+$045D
VAL	= DATAORIGIN+$045E
MININD	= DATAORIGIN+$045F
MAXIND	= DATAORIGIN+$0460
MINVAL	= DATAORIGIN+$0461
MAXVAL	= DATAORIGIN+$0462
LEFTVAL	= DATAORIGIN+$0463
RIGHTVAL	= DATAORIGIN+$0464

@VarData	= I
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLASHSCREENSORT				; PROCEDURE

; optimize OK (SORTINGALGORITHMS), line = 723

	lda #$76
	sta LAST

; optimize OK (SORTINGALGORITHMS), line = 724

	lda #$00
	sta I

l_1E15
; --- ForToDoCondition
	lda I
	cmp #$77
	jcs l_1E23

; optimize OK (SORTINGALGORITHMS), line = 726

	lda #$00
	sta J

l_1E2E
; --- ForToDoCondition
	lda J
	cmp LAST
	scc
	jne l_1E3C

; optimize OK (SORTINGALGORITHMS), line = 728

	ldy J
	iny
	sty K

; optimize OK (SORTINGALGORITHMS), line = 729

	jsr ARRAYACCESS.GETVALUESILENT
	lda ARRAYACCESS.GETVALUESILENT.RESULT
	sta V1

; optimize OK (SORTINGALGORITHMS), line = 730

	lda K
	jsr ARRAYACCESS.GETVALUESILENT
	lda ARRAYACCESS.GETVALUESILENT.RESULT
	sta V2

; optimize OK (SORTINGALGORITHMS), line = 731

	cmp V1
	jcs l_1E68

; optimize OK (SORTINGALGORITHMS), line = 733

	lda J
	sta ARRAYACCESS.SETVALUESILENT.INDEX
	lda V2
	sta ARRAYACCESS.SETVALUESILENT.VALUE
	jsr ARRAYACCESS.SETVALUESILENT

; optimize OK (SORTINGALGORITHMS), line = 734

	lda K
	sta ARRAYACCESS.SETVALUESILENT.INDEX
	lda V1
	sta ARRAYACCESS.SETVALUESILENT.VALUE
	jsr ARRAYACCESS.SETVALUESILENT
l_1E68

; --- ForToDoEpilog
	inc J
	jne l_1E2E
l_1E3C

; optimize FAIL (0, SORTINGALGORITHMS), line = 737

	dec LAST

; --- ForToDoEpilog
	inc I
	jne l_1E15
l_1E23

; ------------------------------------------------------------

MAX_LINE	= $77
LAST	= DATAORIGIN+$0465
I	= DATAORIGIN+$0466
J	= DATAORIGIN+$0467
K	= DATAORIGIN+$0468
V1	= DATAORIGIN+$0469
V2	= DATAORIGIN+$046A

@VarData	= LAST
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

.endl							; UNIT SORTINGALGORITHMS

; ------------------------------------------------------------

.local	DOS						; UNIT

; ------------------------------------------------------------

PALNTSC	= $D014

.endl							; UNIT DOS

; ------------------------------------------------------------

.local	STRUTILS					; UNIT

; ------------------------------------------------------------

.endl							; UNIT STRUTILS

; ------------------------------------------------------------

.local	SYSUTILS					; UNIT

; ------------------------------------------------------------

FAREADONLY	= $01
FAHIDDEN	= $02
FASYSFILE	= $04
FAVOLUMEID	= $08
FADIRECTORY	= $10
FAARCHIVE	= $20
FAANYFILE	= $3F

.endl							; UNIT SYSUTILS

.local	RUNOPERATION					; PROCEDURE

; optimize FAIL ('STATUS.UPDATEOPERATIONCAPTION', SortViz.pas), line = 14

	jsr STATUS.UPDATEOPERATIONCAPTION

; optimize FAIL ('STATUS.RESETSTATISTICS', SortViz.pas), line = 15

	jsr STATUS.RESETSTATISTICS

; optimize OK (SortViz.pas), line = 17

	lda OPERATION.OPERATIONKIND
	sta @CASETMP_0007
	cmp #$02
	jne l_1ECA
@

; optimize FAIL ('SHUFFLEALGORITHMS.FILLASCENDING', SortViz.pas), line = 18

	jsr SHUFFLEALGORITHMS.FILLASCENDING
	jmp a_0007
l_1ECA
	cmp #$03
	jne l_1ED4
@

; optimize FAIL ('SHUFFLEALGORITHMS.FILLDESCENDING', SortViz.pas), line = 19

	jsr SHUFFLEALGORITHMS.FILLDESCENDING
	jmp a_0007
l_1ED4
	cmp #$04
	jne l_1EDE
@

; optimize FAIL ('SHUFFLEALGORITHMS.FILLPYRAMID', SortViz.pas), line = 20

	jsr SHUFFLEALGORITHMS.FILLPYRAMID
	jmp a_0007
l_1EDE
	cmp #$05
	jne l_1EE8
@

; optimize FAIL ('SHUFFLEALGORITHMS.FILLINTERLACED', SortViz.pas), line = 21

	jsr SHUFFLEALGORITHMS.FILLINTERLACED
	jmp a_0007
l_1EE8
	cmp #$00
	jne l_1EF2
@

; optimize FAIL ('SHUFFLEALGORITHMS.KNUTHSHUFFLE', SortViz.pas), line = 22

	jsr SHUFFLEALGORITHMS.KNUTHSHUFFLE
	jmp a_0007
l_1EF2
	cmp #$01
	jne l_1EFC
@

; optimize FAIL ('SHUFFLEALGORITHMS.FILLASCENDINGWITHSHUFFLE', SortViz.pas), line = 23

	jsr SHUFFLEALGORITHMS.FILLASCENDINGWITHSHUFFLE
	jmp a_0007
l_1EFC
	cmp #$06
	jne l_1F06
@

; optimize FAIL ('SORTINGALGORITHMS.INSERTIONSORT', SortViz.pas), line = 24

	jsr SORTINGALGORITHMS.INSERTIONSORT
	jmp a_0007
l_1F06
	cmp #$07
	jne l_1F10
@

; optimize FAIL ('SORTINGALGORITHMS.SELECTIONSORT', SortViz.pas), line = 25

	jsr SORTINGALGORITHMS.SELECTIONSORT
	jmp a_0007
l_1F10
	cmp #$08
	jne l_1F1A
@

; optimize FAIL ('SORTINGALGORITHMS.QUICKSORT', SortViz.pas), line = 26

	jsr SORTINGALGORITHMS.QUICKSORT
	jmp a_0007
l_1F1A
	cmp #$09
	jne l_1F24
@

; optimize FAIL ('SORTINGALGORITHMS.MERGESORT', SortViz.pas), line = 27

	jsr SORTINGALGORITHMS.MERGESORT
	jmp a_0007
l_1F24
	cmp #$0A
	jne l_1F2E
@

; optimize FAIL ('SORTINGALGORITHMS.BUBBLESORT', SortViz.pas), line = 28

	jsr SORTINGALGORITHMS.BUBBLESORT
	jmp a_0007
l_1F2E
	cmp #$0B
	jne l_1F38
@

; optimize FAIL ('SORTINGALGORITHMS.COCTAILSORT', SortViz.pas), line = 29

	jsr SORTINGALGORITHMS.COCTAILSORT
	jmp a_0007
l_1F38
	cmp #$0C
	jne l_1F42
@

; optimize FAIL ('SORTINGALGORITHMS.GNOMESORT', SortViz.pas), line = 30

	jsr SORTINGALGORITHMS.GNOMESORT
	jmp a_0007
l_1F42
	cmp #$0D
	jne l_1F4C
@

; optimize FAIL ('SORTINGALGORITHMS.CIRCLESORT', SortViz.pas), line = 31

	jsr SORTINGALGORITHMS.CIRCLESORT
	jmp a_0007
l_1F4C
	cmp #$0E
	jne l_1F56
@

; optimize FAIL ('SORTINGALGORITHMS.COMBSORT', SortViz.pas), line = 32

	jsr SORTINGALGORITHMS.COMBSORT
	jmp a_0007
l_1F56
	cmp #$0F
	jne l_1F60
@

; optimize FAIL ('SORTINGALGORITHMS.PANCAKESORT', SortViz.pas), line = 33

	jsr SORTINGALGORITHMS.PANCAKESORT
	jmp a_0007
l_1F60
	cmp #$10
	jne l_1F6A
@

; optimize FAIL ('SORTINGALGORITHMS.SHELLSORT', SortViz.pas), line = 34

	jsr SORTINGALGORITHMS.SHELLSORT
	jmp a_0007
l_1F6A
	cmp #$11
	jne l_1F74
@

; optimize FAIL ('SORTINGALGORITHMS.ODDEVENSORT', SortViz.pas), line = 35

	jsr SORTINGALGORITHMS.ODDEVENSORT
	jmp a_0007
l_1F74
	cmp #$12
	jne l_1F7E
@

; optimize FAIL ('SORTINGALGORITHMS.BITONICSORT', SortViz.pas), line = 36

	jsr SORTINGALGORITHMS.BITONICSORT
	jmp a_0007
l_1F7E
	cmp #$13
	jne l_1F88
@

; optimize FAIL ('SORTINGALGORITHMS.RADIXSORT', SortViz.pas), line = 37

	jsr SORTINGALGORITHMS.RADIXSORT
	jmp a_0007
l_1F88
	cmp #$14
	jne l_1F92
@

; optimize FAIL ('SORTINGALGORITHMS.HEAPSORT', SortViz.pas), line = 38

	jsr SORTINGALGORITHMS.HEAPSORT
	jmp a_0007
l_1F92
	cmp #$15
	jne l_1F9C
@

; optimize FAIL ('SORTINGALGORITHMS.DOUBLESELECTIONSORT', SortViz.pas), line = 39

	jsr SORTINGALGORITHMS.DOUBLESELECTIONSORT
l_1F9C
a_0007

; optimize FAIL ('STATUS.FORCEUPDATESTATISTICS', SortViz.pas), line = 42

	jsr STATUS.FORCEUPDATESTATISTICS

; optimize FAIL ('ARRAYACCESS.CLEAR', SortViz.pas), line = 43

	jsr ARRAYACCESS.CLEAR

; ------------------------------------------------------------

@CASETMP_0007	= DATAORIGIN+$046C

@VarData	= @CASETMP_0007
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TRYRUNOPERATION					; FUNCTION

; optimize OK (SortViz.pas), line = 50

	lda #$00
	sta I

l_1FC6
; --- ForToDoCondition
	ldy I
	cpy #$16
	jcs l_1FD4

; optimize OK (SortViz.pas), line = 52

	lda OPERATION.adr.OPERATION_SHORTCUTS,y
	cmp KEY
	jne l_1FEB

; optimize OK (SortViz.pas), line = 54

	lda I
	sta OPERATION.OPERATIONKIND

; optimize OK (SortViz.pas), line = 55

	lda #$00
	sta OPERATION.DEMO

; optimize OK (SortViz.pas), line = 56

	lda #$02
	sta OPERATION.WORKINGMODE

; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 57

	jsr STATUS.UPDATESTATUS

; optimize FAIL ('RUNOPERATION', SortViz.pas), line = 59

	jsr RUNOPERATION

; optimize OK (SortViz.pas), line = 61

	lda #$00
	sta OPERATION.WORKINGMODE

; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 62

	jsr STATUS.UPDATESTATUS

; optimize OK (SortViz.pas), line = 63

	lda #$01
	sta RESULT
	jmp @exit					; exit
l_1FEB

; --- ForToDoEpilog
	inc I
	jne l_1FC6
l_1FD4

; optimize OK (SortViz.pas), line = 68

	lda #$00
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$046D
I	= DATAORIGIN+$046E

@VarData	= I
@VarDataSize	= 1

	rts						; ret
.endl

.local	CHOOSEDEMOMETHOD				; FUNCTION

; optimize OK (SortViz.pas), line = 75

	lda #$01
	sta OPERATION.WORKINGMODE

; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 76

	jsr STATUS.UPDATESTATUS

; --- WhileProlog
	jmp l_201B
l_201C

; optimize FAIL ('KEYBOARD.GETKEY', SortViz.pas), line = 80

	jsr KEYBOARD.GETKEY
	lda KEYBOARD.GETKEY.RESULT
	sta KEY

; optimize OK (SortViz.pas), line = 81

	lda #$00
	sta I

l_2029
; --- ForToDoCondition
	ldy I
	cpy #$06
	jcs l_2037

; optimize OK (SortViz.pas), line = 83

	lda OPERATION.adr.OPERATION_SHORTCUTS,y
	cmp KEY
	jne l_204E

; optimize OK (SortViz.pas), line = 85

	lda I
	sta OPERATION.DEMOSHUFFLEMETHOD

; optimize OK (SortViz.pas), line = 86

	lda #$01
	sta RESULT
	jmp @exit					; exit
l_204E

; optimize OK (SortViz.pas), line = 89

	lda KEY
	cmp #$1C
	jne l_206D

; optimize OK (SortViz.pas), line = 91

	lda #$00
	sta RESULT
	jmp @exit					; exit
l_206D

; --- ForToDoEpilog
	inc I
	jne l_2029
l_2037
l_201B

; optimize OK (SortViz.pas), line = 78

	jmp l_201C
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$046F
I	= DATAORIGIN+$0470

@VarData	= I
@VarDataSize	= 1

	rts						; ret
.endl

.local	RUNDEMO						; PROCEDURE

; optimize FAIL ('CHOOSEDEMOMETHOD', SortViz.pas), line = 102

	jsr CHOOSEDEMOMETHOD
	lda CHOOSEDEMOMETHOD.RESULT
	jeq l_208B

; optimize OK (SortViz.pas), line = 104

	lda #$01
	sta OPERATION.DEMO

; optimize OK (SortViz.pas), line = 105

	lda #$02
	sta OPERATION.WORKINGMODE

; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 106

	jsr STATUS.UPDATESTATUS

; optimize OK (SortViz.pas), line = 108

	lda #$10
	sta OPERATION.OPERATIONCOUNT

; optimize OK (SortViz.pas), line = 109

	lda #$01
	sta OPERATION.OPERATIONINDEX

; optimize OK (SortViz.pas), line = 110

	lda #$06
	sta I

l_20A6
; --- ForToDoCondition
	lda I
	cmp #$16
	jcs l_20B4

; optimize OK (SortViz.pas), line = 112

	lda OPERATION.DEMOSHUFFLEMETHOD
	sta OPERATION.OPERATIONKIND

; optimize FAIL ('RUNOPERATION', SortViz.pas), line = 113

	jsr RUNOPERATION

; optimize OK (SortViz.pas), line = 114

	lda OPERATION.ABORTED
	jeq l_20C7
	jmp b_20A6					; break
l_20C7

; optimize OK (SortViz.pas), line = 115

	lda #$C8
	sta CRT.DELAY.COUNT
	lda #$00
	sta CRT.DELAY.COUNT+1
	jsr CRT.DELAY

; optimize OK (SortViz.pas), line = 116

	lda I
	sta OPERATION.OPERATIONKIND

; optimize FAIL ('RUNOPERATION', SortViz.pas), line = 117

	jsr RUNOPERATION

; optimize OK (SortViz.pas), line = 118

	lda OPERATION.ABORTED
	jeq l_20DF
	jmp b_20A6					; break
l_20DF

; optimize OK (SortViz.pas), line = 119

	lda #$E8
	sta CRT.DELAY.COUNT
	lda #$03
	sta CRT.DELAY.COUNT+1
	jsr CRT.DELAY

; optimize FAIL (0, SortViz.pas), line = 120

	inc OPERATION.OPERATIONINDEX

; --- ForToDoEpilog
	inc I
	jne l_20A6
l_20B4
b_20A6
l_208B

; optimize OK (SortViz.pas), line = 124

	lda #$00
	sta OPERATION.WORKINGMODE

; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 125

	jsr STATUS.UPDATESTATUS

; ------------------------------------------------------------

I	= DATAORIGIN+$0471

@VarData	= I
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PROCESSQUITQUERY				; PROCEDURE

; optimize FAIL ('CRT.NOSOUND', SortViz.pas), line = 132

	jsr CRT.NOSOUND

; optimize OK (SortViz.pas), line = 133

	lda #$04
	sta OPERATION.WORKINGMODE

; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 134

	jsr STATUS.UPDATESTATUS

; --- WhileProlog
	jmp l_2100
l_2101

; optimize FAIL ('KEYBOARD.GETKEY', SortViz.pas), line = 138

	jsr KEYBOARD.GETKEY
	lda KEYBOARD.GETKEY.RESULT
	sta KEY

; optimize OK (SortViz.pas), line = 139

	cmp #$2B
	jne l_2117

; optimize OK (SortViz.pas), line = 141

	lda #$01
	sta OPERATION.QUIT
	jmp b_2101					; break
l_2117

; optimize OK (SortViz.pas), line = 144

	lda KEY
	cmp #$23
	jne l_2137
	jmp b_2101					; break
l_2137
l_2125
l_2100

; optimize OK (SortViz.pas), line = 136

	jmp l_2101
b_2101

; optimize OK (SortViz.pas), line = 150

	lda #$00
	sta OPERATION.WORKINGMODE

; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 151

	jsr STATUS.UPDATESTATUS

; ------------------------------------------------------------

KEY	= DATAORIGIN+$0472

@VarData	= KEY
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLASHSCREEN					; PROCEDURE

; optimize FAIL ('SHUFFLEALGORITHMS.SPLASHSCREENSHUFFLE', SortViz.pas), line = 163

	jsr SHUFFLEALGORITHMS.SPLASHSCREENSHUFFLE

; optimize OK (SortViz.pas), line = 165

	lda #$00
	sta I

l_2151
; --- ForToDoCondition
	lda I
	cmp #$10
	jcs l_215F

; optimize OK (SortViz.pas), line = 167

	sta DISPLAYLIST.COLOR1VALUE

; optimize OK (SortViz.pas), line = 168

	lda #$28
	sta CRT.DELAY.COUNT
	lda #$00
	sta CRT.DELAY.COUNT+1
	jsr CRT.DELAY

; --- ForToDoEpilog
	inc I
	jne l_2151
l_215F

; optimize FAIL ('SORTINGALGORITHMS.SPLASHSCREENSORT', SortViz.pas), line = 171

	jsr SORTINGALGORITHMS.SPLASHSCREENSORT

; optimize OK (SortViz.pas), line = 172

	lda #$D0
	sta CRT.DELAY.COUNT
	lda #$07
	sta CRT.DELAY.COUNT+1
	jsr CRT.DELAY

; optimize OK (SortViz.pas), line = 174

	lda #$0F
	sta I

l_2178
; --- ForToDoCondition

; optimize OK (SortViz.pas), line = 176

	lda I
	sta DISPLAYLIST.COLOR1VALUE

; optimize OK (SortViz.pas), line = 177

	lda #$28
	sta CRT.DELAY.COUNT
	lda #$00
	sta CRT.DELAY.COUNT+1
	jsr CRT.DELAY

; --- ForToDoEpilog
	dec I
	jpl l_2178
l_2186

; optimize OK (SortViz.pas), line = 180

	lda #$F4
	sta CRT.DELAY.COUNT
	lda #$01
	sta CRT.DELAY.COUNT+1
	jsr CRT.DELAY

; ------------------------------------------------------------

MAX_LUMINANCE	= $0F
FADE_DELAY	= $28
SPLASH_DELAY	= $07D0
DELAY_AFTER	= $01F4
I	= DATAORIGIN+$0473

@VarData	= I
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0014

; optimize FAIL ('SYSTEM.RANDOMIZE', SortViz.pas), line = 184

	jsr SYSTEM.RANDOMIZE

; optimize FAIL ('DISPLAYLIST.INITSCREEN', SortViz.pas), line = 186

	jsr DISPLAYLIST.INITSCREEN

; optimize FAIL ('SPLASHSCREEN', SortViz.pas), line = 187

	jsr SPLASHSCREEN

; optimize FAIL ('IMAGEMANAGER.NEXTIMAGE', SortViz.pas), line = 188

	jsr IMAGEMANAGER.NEXTIMAGE

; optimize FAIL ('DISPLAYLIST.INITCOLORS', SortViz.pas), line = 189

	jsr DISPLAYLIST.INITCOLORS

; optimize OK (SortViz.pas), line = 191

	lda #$02
	sta OPERATION.OPERATIONKIND

; optimize FAIL ('RUNOPERATION', SortViz.pas), line = 192

	jsr RUNOPERATION

; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 193

	jsr STATUS.UPDATESTATUS

; --- RepeatUntilProlog
l_21A2

; optimize FAIL ('KEYBOARD.GETKEY', SortViz.pas), line = 196

	jsr KEYBOARD.GETKEY
	lda KEYBOARD.GETKEY.RESULT
	sta KEY

; optimize FAIL ('TRYRUNOPERATION', SortViz.pas), line = 197

	jsr TRYRUNOPERATION
	lda TRYRUNOPERATION.RESULT
	jne l_21B3

; optimize OK (SortViz.pas), line = 199

	lda KEY
	sta @CASETMP_0008
	cmp #$2C
	jne l_21BF
@

; optimize FAIL ('IMAGEMANAGER.NEXTIMAGE', SortViz.pas), line = 200

	jsr IMAGEMANAGER.NEXTIMAGE
	jmp a_0008
l_21BF
	cmp #$0E
	jne l_21C9
@

; optimize FAIL ('ARRAYACCESS.DECREASEDELAY', SortViz.pas), line = 201

	jsr ARRAYACCESS.DECREASEDELAY
	jmp a_0008
l_21C9
	cmp #$06
	jne l_21D3
@

; optimize FAIL ('ARRAYACCESS.INCREASEDELAY', SortViz.pas), line = 202

	jsr ARRAYACCESS.INCREASEDELAY
	jmp a_0008
l_21D3
	cmp #$0C
	jne l_21DD
@

; optimize FAIL ('RUNDEMO', SortViz.pas), line = 203

	jsr RUNDEMO
	jmp a_0008
l_21DD
	cmp #$1C
	jne l_21E7
@

; optimize FAIL ('PROCESSQUITQUERY', SortViz.pas), line = 204

	jsr PROCESSQUITQUERY
l_21E7
a_0008
l_21B3

; optimize OK (SortViz.pas), line = 207

	lda OPERATION.QUIT
	jeq l_21A2

; optimize FAIL ('DISPLAYLIST.CLOSESCREEN', SortViz.pas), line = 209

	jsr DISPLAYLIST.CLOSESCREEN

; ------------------------------------------------------------

KEY	= DATAORIGIN+$046B
@CASETMP_0008	= DATAORIGIN+$0474
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.CORE.@UnitInit
	jsr MAIN.CORE.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.CAPTION.@UnitInit
	jsr MAIN.CAPTION.@UnitInit
	.fi

	.ifdef MAIN.KEYBOARD.@UnitInit
	jsr MAIN.KEYBOARD.@UnitInit
	.fi

	.ifdef MAIN.OPERATION.@UnitInit
	jsr MAIN.OPERATION.@UnitInit
	.fi

	.ifdef MAIN.STATUS.@UnitInit
	jsr MAIN.STATUS.@UnitInit
	.fi

	.ifdef MAIN.DISPLAYLIST.@UnitInit
	jsr MAIN.DISPLAYLIST.@UnitInit
	.fi

	.ifdef MAIN.IMAGEMANAGER.@UnitInit
	jsr MAIN.IMAGEMANAGER.@UnitInit
	.fi

	.ifdef MAIN.ARRAYACCESS.@UnitInit
	jsr MAIN.ARRAYACCESS.@UnitInit
	.fi

	.ifdef MAIN.SHUFFLEALGORITHMS.@UnitInit
	jsr MAIN.SHUFFLEALGORITHMS.@UnitInit
	.fi

	.ifdef MAIN.SORTINGALGORITHMS.@UnitInit
	jsr MAIN.SORTINGALGORITHMS.@UnitInit
	.fi

	.ifdef MAIN.DOS.@UnitInit
	jsr MAIN.DOS.@UnitInit
	.fi

	.ifdef MAIN.STRUTILS.@UnitInit
	jsr MAIN.STRUTILS.@UnitInit
	.fi

	.ifdef MAIN.SYSUTILS.@UnitInit
	jsr MAIN.SYSUTILS.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.CORE) > 0
	.print 'CORE: ',MAIN.CORE,'..',MAIN.CORE+.SIZEOF(MAIN.CORE)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.CAPTION) > 0
	.print 'CAPTION: ',MAIN.CAPTION,'..',MAIN.CAPTION+.SIZEOF(MAIN.CAPTION)-1
	eif

	ift .SIZEOF(MAIN.KEYBOARD) > 0
	.print 'KEYBOARD: ',MAIN.KEYBOARD,'..',MAIN.KEYBOARD+.SIZEOF(MAIN.KEYBOARD)-1
	eif

	ift .SIZEOF(MAIN.OPERATION) > 0
	.print 'OPERATION: ',MAIN.OPERATION,'..',MAIN.OPERATION+.SIZEOF(MAIN.OPERATION)-1
	eif

	ift .SIZEOF(MAIN.STATUS) > 0
	.print 'STATUS: ',MAIN.STATUS,'..',MAIN.STATUS+.SIZEOF(MAIN.STATUS)-1
	eif

	ift .SIZEOF(MAIN.DISPLAYLIST) > 0
	.print 'DISPLAYLIST: ',MAIN.DISPLAYLIST,'..',MAIN.DISPLAYLIST+.SIZEOF(MAIN.DISPLAYLIST)-1
	eif

	ift .SIZEOF(MAIN.IMAGEMANAGER) > 0
	.print 'IMAGEMANAGER: ',MAIN.IMAGEMANAGER,'..',MAIN.IMAGEMANAGER+.SIZEOF(MAIN.IMAGEMANAGER)-1
	eif

	ift .SIZEOF(MAIN.ARRAYACCESS) > 0
	.print 'ARRAYACCESS: ',MAIN.ARRAYACCESS,'..',MAIN.ARRAYACCESS+.SIZEOF(MAIN.ARRAYACCESS)-1
	eif

	ift .SIZEOF(MAIN.SHUFFLEALGORITHMS) > 0
	.print 'SHUFFLEALGORITHMS: ',MAIN.SHUFFLEALGORITHMS,'..',MAIN.SHUFFLEALGORITHMS+.SIZEOF(MAIN.SHUFFLEALGORITHMS)-1
	eif

	ift .SIZEOF(MAIN.SORTINGALGORITHMS) > 0
	.print 'SORTINGALGORITHMS: ',MAIN.SORTINGALGORITHMS,'..',MAIN.SORTINGALGORITHMS+.SIZEOF(MAIN.SORTINGALGORITHMS)-1
	eif

	ift .SIZEOF(MAIN.DOS) > 0
	.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
	eif

	ift .SIZEOF(MAIN.STRUTILS) > 0
	.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
	eif

	ift .SIZEOF(MAIN.SYSUTILS) > 0
	.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 1141

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $01 $02  $05 $0A $14 $32 $64 $09 $0A $05
.by  $06 $07 $08 $0B $0C $0D $0E $0F  $10 $11 $12 $13 $14 $15 $16 $17  $18 $19 $1A $1F $1E $1A $18 $1D
.by  $1B $0D $3E $2F $25 $15 $12 $3D  $00 $08 $0A $2A $10 $2D $28 $39  $3A $91 $92 $93 $94 $95 $96 $A9
.by  $B3 $B1 $AD $A2 $A3 $A7 $AC $AF  $B0 $A5 $B6 $B4 $B2 $A8 $A4 $80  $C0 $E0 $F0 $F8 $FC $FE $FF $00
.by  $02 $03 $05 $06 $08 $0A $0B $0D  $0E $10 $12 $13 $15 $16 $18 $1A  $1B $1D $1E $20 $22 $23 $25 $26
.by  $28 $2A $2B $2D $2F $30 $32 $33  $35 $37 $38 $3A $3B $3D $3F $40  $42 $43 $45 $47 $48 $4A $4B $4D
.by  $4F $50 $52 $53 $55 $57 $58 $5A  $5B $5D $5F $60 $62 $63 $65 $67  $68 $6A $6B $6D $6F $70 $72 $73
.by  $75 $77 $78 $7A $7B $7D $7F $80  $82 $84 $85 $87 $88 $8A $8C $8D  $8F $90 $92 $94 $95 $97 $98 $9A
.by  $9C $9D $9F $A0 $A2 $A4 $A5 $A7  $A8 $AA $AC $AD $AF $B0 $B2 $B4  $B5 $B7 $B8 $BA $BC $BD $BF $C0
.by  $C2 $C4 $C5 $C7 $C8 $CA $CC $CD  $CF $D0 $D2 $D4 $D5 $D7 $D9 $DA  $DC $DD $DF $E1 $E2 $E4 $E5 $E7
.by  $E9 $EA $EC $ED $EF $F1 $F2 $F4  $F5 $F7 $F9 $FA $FC $FD $FF
.endm

	end
