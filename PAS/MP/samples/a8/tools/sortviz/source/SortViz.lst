mads 2.1.5 build 4 (1 Apr 22)
Source: SortViz.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/04/11] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 = 0080			psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0082			bp	.ds 2
    26 = 0084			bp2	.ds 2
    27
    28 = 0086			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 008A			edx	.ds 4
    30 = 008E			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0092			ztmp8	.ds 1
    35 = 0093			ztmp9	.ds 1
    36 = 0094			ztmp10	.ds 1
    37 = 0095			ztmp11	.ds 1
    38
    39 = 0096			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0086			ax	= eax
    45 = 0086			al	= eax
    46 = 0087			ah	= eax+1
    47
    48 = 008E			cx	= ecx
    49 = 008E			cl	= ecx
    50 = 008F			ch	= ecx+1
    51
    52 = 008A			dx	= edx
    53 = 008A			dl	= edx
    54 = 008B			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0086			FP1MAN0	.ds 1
    59 = 0087			FP1MAN1	.ds 1
    60 = 0088			FP1MAN2	.ds 1
    61 = 0089			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0092			FP1SGN	.ds 1
    66 = 0093			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 008A			FP2MAN0	.ds 1
    71 = 008B			FP2MAN1	.ds 1
    72 = 008C			FP2MAN2	.ds 1
    73 = 008D			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0094			FP2SGN	.ds 1
    78 = 0095			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008E			FPMAN0	.ds 1
    83 = 008F			FPMAN1	.ds 1
    84 = 0090			FPMAN2	.ds 1
    85 = 0091			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0084			FPSGN	.ds 1
    90 = 0085			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				.local	RESOURCE
   105 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1142 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 2075				RCASM 'data\captions.asm' CORE.CAPTIONS_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 2075				org RESORIGIN
     4 = 024D			len = .sizeof(_CORE.CAPTIONS_ADDR)
     6 				mcpy	ift main.CORE.CAPTIONS_ADDR+len >= $bc20
    11 2075 20 41 20			jsr sys.off
    13 2078 A9 96 85 8A A9 20 +  MWA #DATA EDX
    13 2080 A9 50 85 8E A9 9E +  MWA #MAIN.CORE.CAPTIONS_ADDR ECX
    13 2088 A9 4D 85 86 A9 02 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: captions.asm
     1 9E50			CAPTION_LIST
     3 9E50 BC 9E		    dta a(demo1)
     4 9E52 C2 9E		    dta a(demo2)
     5 9E54 C6 9E		    dta a(reads)
     6 9E56 CB 9E		    dta a(writes)
     7 9E58 D1 9E		    dta a(delay)
     8 9E5A D6 9E		    dta a(fill_ascending)
     9 9E5C E4 9E		    dta a(fill_descending)
    10 9E5E F3 9E		    dta a(fill_pyramid)
    11 9E60 FF 9E		    dta a(fill_interlaced)
    12 9E62 0E 9F		    dta a(knuth_shuffle)
    13 9E64 1B 9F		    dta a(fill_ascending_with_shuffle)
    14 9E66 36 9F		    dta a(insertion_sort)
    15 9E68 44 9F		    dta a(selection_sort)
    16 9E6A 52 9F		    dta a(quick_sort)
    17 9E6C 5C 9F		    dta a(merge_sort)
    18 9E6E 66 9F		    dta a(bubble_sort)
    19 9E70 71 9F		    dta a(coctail_sort)
    20 9E72 7D 9F		    dta a(gnome_sort)
    21 9E74 87 9F		    dta a(circle_sort)
    22 9E76 92 9F		    dta a(comb_sort)
    23 9E78 9B 9F		    dta a(pancake_sort)
    24 9E7A A7 9F		    dta a(shell_sort)
    25 9E7C B1 9F		    dta a(odd_even_sort)
    26 9E7E BE 9F		    dta a(bitonic_sort)
    27 9E80 CA 9F		    dta a(radix_sort)
    28 9E82 D4 9F		    dta a(heap_sort)
    29 9E84 DD 9F		    dta a(double_selection_sort)
    30 9E86 F2 9F		    dta a(main_menu_caption)
    31 9E88 F9 9F		    dta a(demo_method_caption)
    32 9E8A 16 A0		    dta a(paused_caption)
    33 9E8C 1C A0		    dta a(quit_caption)
    34 9E8E 21 A0		    dta a(main_menu_keys)
    35 9E90 4A A0		    dta a(demo_method_keys)
    36 9E92 56 A0		    dta a(processing_keys)
    37 9E94 77 A0		    dta a(paused_keys)
    38 9E96 90 A0		    dta a(quit_keys)
    40 9E98			CAPTIONS_LENGTH
    42 9E98 06			    dta 6   ;Demo (
    43 9E99 04			    dta 4   ;) - 
    44 9E9A 05			    dta 5   ;Reads
    45 9E9B 06			    dta 6   ;Writes
    46 9E9C 05			    dta 5   ;Delay
    47 9E9D 0E			    dta 14  ;Fill ascending
    48 9E9E 0F			    dta 15  ;Fill descending
    49 9E9F 0C			    dta 12  ;Fill pyramid
    50 9EA0 0F			    dta 15  ;Fill interlaced
    51 9EA1 0D			    dta 13  ;Knuth shuffle
    52 9EA2 1B			    dta 27  ;Fill ascending with shuffle
    53 9EA3 0E			    dta 14  ;Insertion sort
    54 9EA4 0E			    dta 14  ;Selection sort
    55 9EA5 0A			    dta 10  ;Quick sort
    56 9EA6 0A			    dta 10  ;Merge sort
    57 9EA7 0B			    dta 11  ;Bubble sort
    58 9EA8 0C			    dta 12  ;Coctail sort
    59 9EA9 0A			    dta 10  ;Gnome sort
    60 9EAA 0B			    dta 11  ;Circle sort
    61 9EAB 09			    dta 9   ;Comb sort
    62 9EAC 0C			    dta 12  ;Pancake sort
    63 9EAD 0A			    dta 10  ;Shell sort
    64 9EAE 0D			    dta 13  ;Odd-Even sort
    65 9EAF 0C			    dta 12  ;Bitonic sort
    66 9EB0 0A			    dta 10  ;Radix sort
    67 9EB1 09			    dta 9   ;Heap sort
    68 9EB2 15			    dta 21  ;Double selection sort
    69 9EB3 07			    dta 7   ;SortViz
    70 9EB4 1D			    dta 29  ;Choose shuffle metod for demo
    71 9EB5 06			    dta 6   ;Paused
    72 9EB6 05			    dta 5   ;Quit?
    73 9EB7 29			    dta 41  ;  Esc Exit  TAB Change image  Return Demo
    74 9EB8 0C			    dta 12  ;  Esc Cancel
    75 9EB9 21			    dta 33  ;  Space Pause  - Faster  + Slower
    76 9EBA 19			    dta 25  ;  Space Resume  Esc Abort
    77 9EBB 0D			    dta 13  ;  Y Yes  N No
    79 9EBC			CAPTIONS
    81 9EBC 24 65 6D 6F 00 08	demo1                   dta d'Demo ('
    82 9EC2 09 00 0D 00		demo2                   dta d') - '
    83 9EC6 32 65 61 64 73	reads                   dta d'Reads'
    84 9ECB 37 72 69 74 65 73	writes                  dta d'Writes'
    85 9ED1 24 65 6C 61 79	delay                   dta d'Delay'
    86 9ED6 26 69 6C 6C 00 61 + fill_ascending          dta d'Fill ascending'
    87 9EE4 26 69 6C 6C 00 64 + fill_descending         dta d'Fill descending'
    88 9EF3 26 69 6C 6C 00 70 + fill_pyramid            dta d'Fill pyramid'
    89 9EFF 26 69 6C 6C 00 69 + fill_interlaced         dta d'Fill interlaced'
    90 9F0E 2B 6E 75 74 68 00 + knuth_shuffle           dta d'Knuth shuffle'
    91 9F1B 26 69 6C 6C 00 61 + fill_ascending_with_shuffle     dta d'Fill ascending with shuffle'
    92 9F36 29 6E 73 65 72 74 + insertion_sort          dta d'Insertion sort'
    93 9F44 33 65 6C 65 63 74 + selection_sort          dta d'Selection sort'
    94 9F52 31 75 69 63 6B 00 + quick_sort              dta d'Quick sort'
    95 9F5C 2D 65 72 67 65 00 + merge_sort              dta d'Merge sort'
    96 9F66 22 75 62 62 6C 65 + bubble_sort             dta d'Bubble sort'
    97 9F71 23 6F 63 74 61 69 + coctail_sort            dta d'Coctail sort'
    98 9F7D 27 6E 6F 6D 65 00 + gnome_sort              dta d'Gnome sort'
    99 9F87 23 69 72 63 6C 65 + circle_sort             dta d'Circle sort'
   100 9F92 23 6F 6D 62 00 73 + comb_sort               dta d'Comb sort'
   101 9F9B 30 61 6E 63 61 6B + pancake_sort            dta d'Pancake sort'
   102 9FA7 33 68 65 6C 6C 00 + shell_sort              dta d'Shell sort'
   103 9FB1 2F 64 64 0D 25 76 + odd_even_sort           dta d'Odd-Even sort'
   104 9FBE 22 69 74 6F 6E 69 + bitonic_sort            dta d'Bitonic sort'
   105 9FCA 32 61 64 69 78 00 + radix_sort              dta d'Radix sort'
   106 9FD4 28 65 61 70 00 73 + heap_sort               dta d'Heap sort'
   107 9FDD 24 6F 75 62 6C 65 + double_selection_sort   dta d'Double selection sort'
   108 9FF2 33 6F 72 74 36 69 + main_menu_caption       dta d'SortViz'
   109 9FF9 23 68 6F 6F 73 65 + demo_method_caption     dta d'Choose shuffle metod for demo'
   110 A016 30 61 75 73 65 64	paused_caption          dta d'Paused'
   111 A01C 31 75 69 74 1F	quit_caption            dta d'Quit?'
   112 A021 00 40 A5 F3 E3 41 + main_menu_keys          dta d' ', $40, d'Esc'*, $41, d'Exit ', $40, d'TAB'*, $41, d'Change image ', $40, d'Return'*, $41, d'Demo'
   113 A04A 00 40 A5 F3 E3 41 + demo_method_keys        dta d' ', $40, d'Esc'*, $41, d'Cancel'
   114 A056 00 40 B3 F0 E1 E3 + processing_keys         dta d' ', $40, d'Space'*, $41, d'Pause ', $40, $C2, $41, d'Faster ', $40, $C3, $41, d'Slower'
   115 A077 00 40 B3 F0 E1 E3 + paused_keys             dta d' ', $40, d'Space'*, $41, d'Resume ', $40, d'Esc'*, $41, d'Abort'
   116 A090 00 40 B9 41 39 65 + quit_keys               dta d' ', $40, d'Y'*, $41, d'Yes ', $40, d'N'*, $41, d'No'
    23 					.print '$R RCASM   ',main.CORE.CAPTIONS_ADDR,'..',main.CORE.CAPTIONS_ADDR+len-1," 'data\captions.asm'"
    23 				$R RCASM   $9E50..$A09C 'data\captions.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: SortViz.a65
   110 22E3				RCDATA 'data\faraon.gr15' CORE.IMAGE_1_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 1400			len = .filesize('data\faraon.gr15')-0
    28 22E3				org main.CORE.IMAGE_1_ADDR
    30 6800-7BFF> BF FE F1 15 + 	ins 'data\faraon.gr15',0
    32 					.print '$R RCDATA  ',main.CORE.IMAGE_1_ADDR,'..',*-1," 'data\faraon.gr15'"
    32 				$R RCDATA  $6800..$7BFF 'data\faraon.gr15'
Source: SortViz.a65
   111 7C00				RCDATA 'data\font.fnt' CORE.FONT_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0400			len = .filesize('data\font.fnt')-0
    28 7C00				org main.CORE.FONT_ADDR
    30 6400-67FF> 00 00 00 00 + 	ins 'data\font.fnt',0
    32 					.print '$R RCDATA  ',main.CORE.FONT_ADDR,'..',*-1," 'data\font.fnt'"
    32 				$R RCDATA  $6400..$67FF 'data\font.fnt'
Source: SortViz.a65
   112 6800				RCDATA 'data\splash.gr8' CORE.SPLASH_ADDR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0F00			len = .filesize('data\splash.gr8')-0
    28 6800				org main.CORE.SPLASH_ADDR
    30 8800-96FF> 00 00 00 00 + 	ins 'data\splash.gr8',0
    32 					.print '$R RCDATA  ',main.CORE.SPLASH_ADDR,'..',*-1," 'data\splash.gr8'"
    32 				$R RCDATA  $8800..$96FF 'data\splash.gr8'
Source: SortViz.a65
   113 				.endl
   114
   115 				; ------------------------------------------------------------
   116
   117 9700				org CODEORIGIN
   118
   119 2000				STATICDATA
Macro: STATICDATA [Source: SortViz.a65]
     1 2000-48CD> 04 54 52 55 + .by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $01 $02  $05 $0A $14 $32 $64 $09 $0A $05
     2 2018 06 07 08 0B 0C 0D + .by  $06 $07 $08 $0B $0C $0D $0E $0F  $10 $11 $12 $13 $14 $15 $16 $17  $18 $19 $1A $1F $1E $1A $18 $1D
     3 2030 1B 0D 3E 2F 25 15 + .by  $1B $0D $3E $2F $25 $15 $12 $3D  $00 $08 $0A $2A $10 $2D $28 $39  $3A $91 $92 $93 $94 $95 $96 $A9
     4 2048 B3 B1 AD A2 A3 A7 + .by  $B3 $B1 $AD $A2 $A3 $A7 $AC $AF  $B0 $A5 $B6 $B4 $B2 $A8 $A4 $80  $C0 $E0 $F0 $F8 $FC $FE $FF $00
     5 2060 02 03 05 06 08 0A + .by  $02 $03 $05 $06 $08 $0A $0B $0D  $0E $10 $12 $13 $15 $16 $18 $1A  $1B $1D $1E $20 $22 $23 $25 $26
     6 2078 28 2A 2B 2D 2F 30 + .by  $28 $2A $2B $2D $2F $30 $32 $33  $35 $37 $38 $3A $3B $3D $3F $40  $42 $43 $45 $47 $48 $4A $4B $4D
     7 2090 4F 50 52 53 55 57 + .by  $4F $50 $52 $53 $55 $57 $58 $5A  $5B $5D $5F $60 $62 $63 $65 $67  $68 $6A $6B $6D $6F $70 $72 $73
     8 20A8 75 77 78 7A 7B 7D + .by  $75 $77 $78 $7A $7B $7D $7F $80  $82 $84 $85 $87 $88 $8A $8C $8D  $8F $90 $92 $94 $95 $97 $98 $9A
     9 20C0 9C 9D 9F A0 A2 A4 + .by  $9C $9D $9F $A0 $A2 $A4 $A5 $A7  $A8 $AA $AC $AD $AF $B0 $B2 $B4  $B5 $B7 $B8 $BA $BC $BD $BF $C0
    10 20D8 C2 C4 C5 C7 C8 CA + .by  $C2 $C4 $C5 $C7 $C8 $CA $CC $CD  $CF $D0 $D2 $D4 $D5 $D7 $D9 $DA  $DC $DD $DF $E1 $E2 $E4 $E5 $E7
    11 20F0 E9 EA EC ED EF F1 + .by  $E9 $EA $EC $ED $EF $F1 $F2 $F4  $F5 $F7 $F9 $FA $FC $FD $FF
Source: SortViz.a65
   120
   121 				; ------------------------------------------------------------
   122
   123 20FF			RTLIB
   124 20FF				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   125
   126 				.print 'ZPAGE: ',zpage,'..',zpend-1
   126 				ZPAGE: $0080..$00D5
   127
   128 				.print 'RTLIB: ',RTLIB,'..',*-1
   128 				RTLIB: $20FF..$2454
   129
   130 				; ------------------------------------------------------------
   131
   132 2455			START
   133 2455 BA				tsx
   134 2456 8E B3 48			stx MAIN.@halt+1
   135
   136 					.ifdef fmulinit
   137 					fmulinit
   138 					.fi
   139
   140 = 046F			VLEN	= VARDATASIZE-VARINITSIZE
   141 = 48CE			VADR	= DATAORIGIN+VARINITSIZE
   142
   143 					ift VADR > $BFFF
   144 					ert 'Invalid memory address range ',VADR
   145 					eli (VLEN>0) && (VLEN<=256)
   146 					ldx #256-VLEN
   147 					lda #$00
   148 					sta:rne VADR+VLEN-256,x+
   149 					eli VLEN>256
   150 					@fill #VADR #VLEN #$00
   150 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   150 2459 A9 CE 85 8A A9 48 +  MWA #VADR @FILL.PTR1
   150 2461 A9 6F 85 8E A9 04 +  MWA #VLEN @FILL.PTR3
   150 2469 A9 00 85 86		 MVA #$00 @FILL.PTR2
   150 246D 20 0E 22		 JSR @FILL
   151 					eif
   152
   153 				.ifdef :psptr
   154 2470 A9 3D 85 80 A9 4D + 	mwa #PROGRAMSTACK :psptr
   155 				.fi
   156
   157 					.ifdef MAIN.@DEFINES.ROMOFF
   158 					icl 'atari\romoff.asm'
   159 					.fi
   160
   161 2478 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   162 247A BD 40 03 9D B8 48 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   163
   164 2483 E8				inx						; X = 0
   165 2484 86 82			stx bp						; BP = 0
   166
   167 2486 8E 0F D2			stx skctl					; reset POKEY
   168 2489 A9 03			lda #3
   169 248B 8D 0F D2			sta skctl
   170
   171 248E CA				dex						; X = 255
   172
   173 248F				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: SortViz.a65]
     7 248F 20 DF 24			jsr MAIN.CORE.@UnitInit
    27 2492 20 E1 25			jsr MAIN.OPERATION.@UnitInit
    35 2495 20 AE 2F			jsr MAIN.DISPLAYLIST.@UnitInit
    39 2498 20 23 31			jsr MAIN.IMAGEMANAGER.@UnitInit
    43 249B 20 35 34			jsr MAIN.ARRAYACCESS.@UnitInit
Source: SortViz.a65
   174
   175 249E			.local	MAIN						; PROCEDURE
   176
   177 249E 4C 4A 48			jmp l_0014
   178
   179 				; ------------------------------------------------------------
   180
   181 24A1			.local	SYSTEM						; UNIT
   182
   183 24A1			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   184
   185 				; ------------------------------------------------------------
   186
   187 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   188 				; as Pointer
   189 24A1 B5 96			lda :STACKORIGIN,x
   190 24A3 85 8A			sta A
   191 24A5 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   192 24A7 85 8B			sta A+1
   193 24A9 CA				dex
   194 24AA 30 05			jmi @main
   195
   196 				; ------------------------------------------------------------
   197
   198 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   199 				; as Pointer
   200 24AC B5 96			lda :STACKORIGIN,x
   201 24AE 85 8E			sta VALUE
   202 24B0 CA				dex
   203 24B1			@main
   204
   205 				; -------------------  ASM Block 00000018  -------------------
   206
   207 24B1 A0 00			ldy #0
   208 24B3 A5 8E 91 8A			mva value (:edx),y
   209
   210 				; ------------------------------------------------------------
   211
   212 = 008A			A	= :EDX
   213 = 008E			VALUE	= :ECX
   214 24B7			@exit
   215 					.ifdef @new
   216 					lda <@VarData
   217 					sta :ztmp
   218 					lda >@VarData
   219 					ldy #@VarDataSize-1
   220 					jmp @FreeMem
   221 					els
   222 24B7 60				rts						; ret
   223 					eif
   224 				.endl
   225
   226 24B8			.local	FILLCHAR_0057					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   227
   228 					.MACRO m@INLINE
   229 				
   230 				; -------------------  ASM Block 00000021  -------------------
   231 				
   232 					jsr @fill
   233 				
   234 					.ENDM
   235
   236 				; ------------------------------------------------------------
   237
   238 = 008A			A	= :EDX
   239 = 008E			COUNT	= :ECX
   240 = 0086			VALUE	= :EAX
   241 24B8			@exit
   242 				.endl
   243
   244 24B8			.local	MOVE_0058					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   245
   246 					.MACRO m@INLINE
   247 				
   248 				; -------------------  ASM Block 00000028  -------------------
   249 				
   250 					jsr @move
   251 				
   252 					.ENDM
   253
   254 				; ------------------------------------------------------------
   255
   256 = 008A			SOURCE	= :EDX
   257 = 008E			DEST	= :ECX
   258 = 0086			COUNT	= :EAX
   259 24B8			@exit
   260 				.endl
   261
   262 24B8			.local	RANDOMIZE					; PROCEDURE | ASSEMBLER
   263
   264 				; -------------------  ASM Block 00000038  -------------------
   265
   266
   267 24B8 AD 0A D2 8D D1 48	  mva $d20a RndSeed
   268 24BE A9 00 8D D2 48	  mva #$00  RndSeed+1
   269
   270
   271 24C3			@exit
   272 					.ifdef @new
   273 					lda <@VarData
   274 					sta :ztmp
   275 					lda >@VarData
   276 					ldy #@VarDataSize-1
   277 					jmp @FreeMem
   278 					els
   279 24C3 60				rts						; ret
   280 					eif
   281 				.endl
   282
   283 24C4			.local	RANDOM_0078					; FUNCTION | ASSEMBLER | OVERLOAD
   284 24C4 8D D3 48			sta RANGE
   285
   286 				; -------------------  ASM Block 00000042  -------------------
   287
   288
   289 				;BYTE FUNC Rand(BYTE range)
   290 				; returns random number between 0 and
   291 				; range-1.  If range=0, then a random
   292 				; number between 0 and 255 is returned
   293
   294 24C7 AC 0A D2		  ldy $d20a   ; RANDOM
   295
   296 24CA AD D3 48		  lda range
   297 24CD F0 08		  beq stop
   298
   299 24CF 85 8E		  sta :ecx
   300 24D1 84 86		  sty :eax
   301
   302 24D3 20 9D 22		  jsr imulCL
   303 24D6 A8			  tay
   304
   305 24D7 8C D4 48		stop  sty Result
   306
   307
   308 24DA			@exit
   309
   310 				; ------------------------------------------------------------
   311
   312 = 48D3			RANGE	= DATAORIGIN+$000B
   313 = 48D4			RESULT	= DATAORIGIN+$000C
   314
   315 = 48D3			@VarData	= RANGE
   316 = 0001			@VarDataSize	= 1
   317
   318 24DA 60				rts						; ret
   319 				.endl
   320
   321 				; ------------------------------------------------------------
   322
   323 = 0101			__PORTB_BANKS	= $0101
   324 = 0648			M_PI_2	= $0648
   325 = 0192			D_PI_2	= $0192
   326 = 0004			D_PI_180	= $04
   327 = 0000			MGTIA	= $00
   328 = 0080			MVBXE	= $80
   329 = 0000			VBXE_XDLADR	= $00
   330 = 00E0			VBXE_BCBTMP	= $E0
   331 = 0100			VBXE_BCBADR	= $0100
   332 = 1000			VBXE_MAPADR	= $1000
   333 = 1000			VBXE_CHBASE	= $1000
   334 = 5000			VBXE_OVRADR	= $5000
   335 = B000			VBXE_WINDOW	= $B000
   336 = 0000			IDLI	= $00
   337 = 0001			IVBL	= $01
   338 = 0002			ITIM1	= $02
   339 = 0003			ITIM2	= $03
   340 = 0004			ITIM4	= $04
   341 = 00FE			CH_DELCHR	= $FE
   342 = 009B			CH_ENTER	= $9B
   343 = 001B			CH_ESC	= $1B
   344 = 001C			CH_CURS_UP	= $1C
   345 = 001D			CH_CURS_DOWN	= $1D
   346 = 001E			CH_CURS_LEFT	= $1E
   347 = 001F			CH_CURS_RIGHT	= $1F
   348 = 007F			CH_TAB	= $7F
   349 = 009B			CH_EOL	= $9B
   350 = 007D			CH_CLR	= $7D
   351 = 00FD			CH_BELL	= $FD
   352 = 007E			CH_DEL	= $7E
   353 = 009C			CH_DELLINE	= $9C
   354 = 009D			CH_INSLINE	= $9D
   355 = 0000			COLOR_BLACK	= $00
   356 = 000E			COLOR_WHITE	= $0E
   357 = 0032			COLOR_RED	= $32
   358 = 0096			COLOR_CYAN	= $96
   359 = 0068			COLOR_VIOLET	= $68
   360 = 00C4			COLOR_GREEN	= $C4
   361 = 0074			COLOR_BLUE	= $74
   362 = 00EE			COLOR_YELLOW	= $EE
   363 = 0028			COLOR_ORANGE	= $28
   364 = 00E4			COLOR_BROWN	= $E4
   365 = 003C			COLOR_LIGHTRED	= $3C
   366 = 0004			COLOR_GRAY1	= $04
   367 = 0006			COLOR_GRAY2	= $06
   368 = 000A			COLOR_GRAY3	= $0A
   369 = 00CC			COLOR_LIGHTGREEN	= $CC
   370 = 007C			COLOR_LIGHTBLUE	= $7C
   371 = 0004			FMOPENREAD	= $04
   372 = 0008			FMOPENWRITE	= $08
   373 = 0009			FMOPENAPPEND	= $09
   374 = 000C			FMOPENREADWRITE	= $0C
   375 = 48C8			SCREENWIDTH	= DATAORIGIN+$0000
   376 = 48CA			SCREENHEIGHT	= DATAORIGIN+$0002
   377 = 48CC			DATESEPARATOR	= DATAORIGIN+$0004
   378 = D20A			RND	= $D20A
   379 = 02C0			adr.PALETTE	= $02C0
   380 24DB			.var PALETTE	= adr.PALETTE .word
   381 = D012			adr.HPALETTE	= $D012
   382 24DB			.var HPALETTE	= adr.HPALETTE .word
   383 = 48CD			FILEMODE	= DATAORIGIN+$0005
   384 = 48CE			GRAPHMODE	= DATAORIGIN+$0006
   385 = 48CF			IORESULT	= DATAORIGIN+$0007
   386 = 48D0			EOLN	= DATAORIGIN+$0008
   387 = 48D1			RNDSEED	= DATAORIGIN+$0009
   388
   389 = 24DB C0 02		PALETTE
   389 = 24DD 12 D0		HPALETTE
   389 				.endl							; UNIT SYSTEM
   390
   391 				; ------------------------------------------------------------
   392
   393 24DF			.local	CORE						; UNIT
   394
   395 				; ------------------------------------------------------------
   396 				; ------------------------------------------------------------
   397 24DF			@UnitInit
   398
   399 				; optimize OK (CORE), line = 91
   400
   401 24DF A9 01			lda #$01
   402 24E1 85 E8			sta PAUSESCROLL
   403
   404 				; optimize OK (CORE), line = 92
   405
   406 24E3 85 E9			sta RESETSCROLL
   407
   408 				; optimize OK (CORE), line = 93
   409
   410 24E5 AD 14 D0			lda PALNTS
   411 24E8 C9 0F			cmp #$0F
   412 24EA D0 0D			jne l_009E
   413
   414 				; optimize OK (CORE), line = 95
   415
   416 24EC A9 44			lda #$44
   417 24EE 8D F6 4B			sta REDCOLOR
   418
   419 				; optimize OK (CORE), line = 96
   420
   421 24F1 A9 B4			lda #$B4
   422 24F3 8D F7 4B			sta GREENCOLOR
   423 24F6 4C 03 25			jmp l_00B0
   424 24F9			l_009E
   425
   426 				; optimize OK (CORE), line = 99
   427
   428 24F9 A9 22			lda #$22
   429 24FB 8D F6 4B			sta REDCOLOR
   430
   431 				; optimize OK (CORE), line = 100
   432
   433 24FE A9 A4			lda #$A4
   434 2500 8D F7 4B			sta GREENCOLOR
   435 2503			l_00B0
   436
   437 2503 60				rts
   438
   439 				; ------------------------------------------------------------
   440
   441 = 6400			FONT_ADDR	= $6400
   442 = 6800			IMAGE_1_ADDR	= $6800
   443 = 8000			PM_ADDR	= $8000
   444 = 8400			PM_P0_ADDR	= $8400
   445 = 8500			PM_P1_ADDR	= $8500
   446 = 8600			PM_P2_ADDR	= $8600
   447 = 8700			PM_P3_ADDR	= $8700
   448 = 8800			IMAGE_ADDR	= $8800
   449 = 8000			DISPLAY_LIST_ADDR	= $8000
   450 = 00A0			TABLE_SIZE	= $A0
   451 = 009F			MAX_INDEX	= $9F
   452 = 0020			LINE_STEP	= $20
   453 = 1400			IMAGE_SIZE	= $1400
   454 = 0078			SPLASH_LINES	= $78
   455 = 8800			SPLASH_ADDR	= $8800
   456 = 0028			TEXT_LINE_STEP	= $28
   457 = 0002			TEXT_LINE_COUNT	= $02
   458 = 9C00			TEXT_ADDR	= $9C00
   459 = 9C00			TEXT_LINE_1_ADDR	= $9C00
   460 = 9C28			TEXT_LINE_2_ADDR	= $9C28
   461 = 9C50			SCROLL_LINE_ADDR	= $9C50
   462 = 0200			SCROLL_LINE_LENGTH	= $0200
   463 = 0250			TEXT_SIZE	= $0250
   464 = 0024			CAPTIONS_COUNT	= $24
   465 = 9E50			CAPTIONS_ADDR	= $9E50
   466 = 9E98			CAPTIONS_LENGTHS_ADDR	= $9E98
   467 = 0007			MAX_INDEX_DELAYS	= $07
   468 = 200D			adr.SET_VALUE_DELAYS	= CODEORIGIN+$000D
   469 2504			.var SET_VALUE_DELAYS	= adr.SET_VALUE_DELAYS .word
   470 = 00E8			PAUSE_SCROLL_ADDR	= $E8
   471 = 00E9			RESET_SCROLL_ADDR	= $E9
   472 = 00EA			SCROLL_END_ADDR_ADDR	= $EA
   473 = 00E8			PAUSESCROLL	= $E8
   474 = 00E9			RESETSCROLL	= $E9
   475 = 00EA			SCROLLENDADDR	= $EA
   476 = 0014			RTCLOK	= $14
   477 = 022F			SDMCTL	= $022F
   478 = 0230			SDLSTL	= $0230
   479 = 02C0			PCOLR0	= $02C0
   480 = 02C1			PCOLR1	= $02C1
   481 = 02C2			PCOLR2	= $02C2
   482 = 02C3			PCOLR3	= $02C3
   483 = 02C4			COLOR0	= $02C4
   484 = 02C5			COLOR1	= $02C5
   485 = 02C6			COLOR2	= $02C6
   486 = 02F4			CHBAS	= $02F4
   487 = 02FC			CH	= $02FC
   488 = D000			HPOSP0	= $D000
   489 = D001			HPOSP1	= $D001
   490 = D002			HPOSP2	= $D002
   491 = D003			HPOSP3	= $D003
   492 = D008			SIZEP0	= $D008
   493 = D009			SIZEP1	= $D009
   494 = D00A			SIZEP2	= $D00A
   495 = D00B			SIZEP3	= $D00B
   496 = D014			PALNTS	= $D014
   497 = D017			COLPF1	= $D017
   498 = D018			COLPF2	= $D018
   499 = D01D			GRACTL	= $D01D
   500 = D400			DMACTL	= $D400
   501 = D404			HSCROL	= $D404
   502 = D407			PMBASE	= $D407
   503 = D40E			NMIEN	= $D40E
   504 = 48D5			adr.IMAGELINELOADDR	= [DATAORIGIN+$000D] .array [160]
   505 2504			.var IMAGELINELOADDR	= adr.IMAGELINELOADDR .word
   506 = 4975			adr.IMAGELINEHIADDR	= [DATAORIGIN+$00AD] .array [160]
   507 2504			.var IMAGELINEHIADDR	= adr.IMAGELINEHIADDR .word
   508 = 4A15			adr.DISPLAYLISTLINEADDR	= [DATAORIGIN+$014D] .array [160] .word
   509 2504			.var DISPLAYLISTLINEADDR	= adr.DISPLAYLISTLINEADDR .word
   510 = 4B55			adr.TABLE	= [DATAORIGIN+$028D] .array [160]
   511 2504			.var TABLE	= adr.TABLE .word
   512 = 4BF5			ACCESSDELAY	= DATAORIGIN+$032D
   513 = 4BF6			REDCOLOR	= DATAORIGIN+$032E
   514 = 4BF7			GREENCOLOR	= DATAORIGIN+$032F
   515
   516 = 2504 0D 20		SET_VALUE_DELAYS
   516 = 2506 D5 48		IMAGELINELOADDR
   516 = 2508 75 49		IMAGELINEHIADDR
   516 = 250A 15 4A		DISPLAYLISTLINEADDR
   516 = 250C 55 4B		TABLE
   516 				.endl							; UNIT CORE
   517
   518 				; ------------------------------------------------------------
   519
   520 250E			.local	ATARI						; UNIT
   521
   522 				; ------------------------------------------------------------
   523
   524 = 0010			IRQENS	= $10
   525 = 0012			RTCLOK	= $12
   526 = 0012			RTCLOK1	= $12
   527 = 0013			RTCLOK2	= $13
   528 = 0014			RTCLOK3	= $14
   529 = 004D			ATRACT	= $4D
   530 = 0052			LMARGIN	= $52
   531 = 0053			RMARGIN	= $53
   532 = 0054			ROWCRS	= $54
   533 = 0055			COLCRS	= $55
   534 = 0057			DINDEX	= $57
   535 = 0058			SAVMSC	= $58
   536 = 0062			PALNTS	= $62
   537 = 006A			RAMTOP	= $6A
   538 = 0200			VDSLST	= $0200
   539 = 0230			SDLSTL	= $0230
   540 = 0290			TXTROW	= $0290
   541 = 0291			TXTCOL	= $0291
   542 = 0293			TINDEX	= $0293
   543 = 0294			TXTMSC	= $0294
   544 = 022F			SDMCTL	= $022F
   545 = 026F			GPRIOR	= $026F
   546 = 02F0			CRSINH	= $02F0
   547 = 02F3			CHACT	= $02F3
   548 = 02F4			CHBAS	= $02F4
   549 = 02FC			CH	= $02FC
   550 = 02C0			PCOLR0	= $02C0
   551 = 02C1			PCOLR1	= $02C1
   552 = 02C2			PCOLR2	= $02C2
   553 = 02C3			PCOLR3	= $02C3
   554 = 02C4			COLOR0	= $02C4
   555 = 02C5			COLOR1	= $02C5
   556 = 02C6			COLOR2	= $02C6
   557 = 02C7			COLOR3	= $02C7
   558 = 02C8			COLOR4	= $02C8
   559 = 02C8			COLBAKS	= $02C8
   560 = D000			HPOSP0	= $D000
   561 = D001			HPOSP1	= $D001
   562 = D002			HPOSP2	= $D002
   563 = D003			HPOSP3	= $D003
   564 = D004			HPOSM0	= $D004
   565 = D005			HPOSM1	= $D005
   566 = D006			HPOSM2	= $D006
   567 = D007			HPOSM3	= $D007
   568 = D008			SIZEP0	= $D008
   569 = D009			SIZEP1	= $D009
   570 = D00A			SIZEP2	= $D00A
   571 = D00B			SIZEP3	= $D00B
   572 = D00C			SIZEM	= $D00C
   573 = D00D			GRAFP0	= $D00D
   574 = D00E			GRAFP1	= $D00E
   575 = D00F			GRAFP2	= $D00F
   576 = D010			GRAFP3	= $D010
   577 = D011			GRAFM	= $D011
   578 = D004			P0PF	= $D004
   579 = D014			PAL	= $D014
   580 = D012			COLPM0	= $D012
   581 = D013			COLPM1	= $D013
   582 = D014			COLPM2	= $D014
   583 = D015			COLPM3	= $D015
   584 = D016			COLPF0	= $D016
   585 = D017			COLPF1	= $D017
   586 = D018			COLPF2	= $D018
   587 = D019			COLPF3	= $D019
   588 = D01A			COLBK	= $D01A
   589 = D01B			PRIOR	= $D01B
   590 = D01D			GRACTL	= $D01D
   591 = D01E			HITCLR	= $D01E
   592 = D01F			CONSOL	= $D01F
   593 = D200			AUDF1	= $D200
   594 = D201			AUDC1	= $D201
   595 = D202			AUDF2	= $D202
   596 = D203			AUDC2	= $D203
   597 = D204			AUDF3	= $D204
   598 = D205			AUDC3	= $D205
   599 = D206			AUDF4	= $D206
   600 = D207			AUDC4	= $D207
   601 = D208			AUDCTL	= $D208
   602 = D209			KBCODE	= $D209
   603 = D20E			IRQEN	= $D20E
   604 = D20F			SKSTAT	= $D20F
   605 = D300			PORTA	= $D300
   606 = D301			PORTB	= $D301
   607 = D400			DMACTL	= $D400
   608 = D401			CHACTL	= $D401
   609 = D402			DLISTL	= $D402
   610 = D404			HSCROL	= $D404
   611 = D405			VSCROL	= $D405
   612 = D407			PMBASE	= $D407
   613 = D409			CHBASE	= $D409
   614 = D40A			WSYNC	= $D40A
   615 = D40B			VCOUNT	= $D40B
   616 = D40C			PENH	= $D40C
   617 = D40D			PENV	= $D40D
   618 = D40E			NMIEN	= $D40E
   619 = FFFA			NMIVEC	= $FFFA
   620 = FFFC			RESETVEC	= $FFFC
   621 = FFFE			IRQVEC	= $FFFE
   622
   623 				.endl							; UNIT ATARI
   624
   625 				; ------------------------------------------------------------
   626
   627 250E			.local	CRT						; UNIT
   628
   629 250E			.local	DELAY						; PROCEDURE | ASSEMBLER
   630
   631 				; -------------------  ASM Block 00000055  -------------------
   632
   633 250E 8A 48			txa:pha
   634
   635 2510 A2 00			ldx #0
   636 2512 A0 00			ldy #0
   637
   638 2514 CC F9 4B		loop	cpy count
   639 2517 D0 05			bne @+
   640 2519 EC FA 4B			cpx count+1
   641 251C F0 46			beq stop
   642
   643 251E AD 0B D4 CD 0B D4 + @	:8 lda:cmp:req vcount
   644
   645 255E C8				iny
   646 255F D0 01			sne
   647 2561 E8				inx
   648
   649 2562 D0 B0			bne loop
   650
   651 2564 68 AA		stop	pla:tax
   652
   653 				; ------------------------------------------------------------
   654
   655 = 4BF9			COUNT	= DATAORIGIN+$0331
   656
   657 = 4BF9			@VarData	= COUNT
   658 = 0002			@VarDataSize	= 2
   659
   660 2566			@exit
   661 					.ifdef @new
   662 					lda <@VarData
   663 					sta :ztmp
   664 					lda >@VarData
   665 					ldy #@VarDataSize-1
   666 					jmp @FreeMem
   667 					els
   668 2566 60				rts						; ret
   669 					eif
   670 				.endl
   671
   672 2567			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   673
   674 				; -------------------  ASM Block 00000056  -------------------
   675
   676 2567 A0 00			ldy #$00	; false
   677 2569 AD FC 02			lda kbcodes
   678 256C C9 FF			cmp #$ff
   679 256E F0 01			seq
   680 2570 C8				iny		; true
   681 2571 8C FB 4B			sty Result
   682
   683 2574			@exit
   684
   685 				; ------------------------------------------------------------
   686
   687 = 4BFB			RESULT	= DATAORIGIN+$0333
   688 2574 60				rts						; ret
   689 				.endl
   690
   691 2575			.local	NOSOUND						; PROCEDURE | ASSEMBLER
   692
   693 				; -------------------  ASM Block 00000061  -------------------
   694
   695 2575 A9 00			lda #0
   696 2577 8D 08 D2			sta $d208
   697 257A 8D 18 D2			sta $d218
   698
   699 257D A0 03			ldy #3
   700 257F 8C 0F D2			sty $d20f
   701 2582 8C 1F D2			sty $d21f
   702
   703 2585 A0 08			ldy #8
   704 2587 99 00 D2		lp	sta $d200,y
   705 258A 99 10 D2			sta $d210,y
   706 258D 88				dey
   707 258E 10 F7			bpl lp
   708
   709 2590			@exit
   710 					.ifdef @new
   711 					lda <@VarData
   712 					sta :ztmp
   713 					lda >@VarData
   714 					ldy #@VarDataSize-1
   715 					jmp @FreeMem
   716 					els
   717 2590 60				rts						; ret
   718 					eif
   719 				.endl
   720
   721 2591			.local	SOUND						; PROCEDURE | ASSEMBLER
   722
   723 				; -------------------  ASM Block 00000062  -------------------
   724
   725 2591 AD FC 4B			lda Chan
   726 2594 29 07			and #7
   727
   728 2596 A0 10			ldy #$10
   729 2598 C9 04			cmp #4
   730 259A B0 02			scs
   731 259C A0 00			ldy #$00
   732 259E 8C A6 25			sty npokey
   733
   734 25A1 29 03			and #3
   735
   736 25A3 0A				asl @
   737 25A4 18 69 00			add #0
   738 = 25A6			npokey	equ *-1
   739 25A7 A8				tay
   740
   741 25A8 A9 00			lda #$00
   742 25AA 8D 08 D2			sta audctl
   743 25AD A9 03			lda #$03
   744 25AF 8D 0F D2			sta skctl
   745
   746 25B2 AD FD 4B			lda Freq
   747 25B5 99 00 D2			sta audf1,y
   748
   749 25B8 AD FF 4B			lda Vol
   750 25BB 29 0F			and #$0F
   751 25BD 8D C8 25			sta _t
   752
   753 25C0 AD FE 4B			lda Dist	; -> bit 7-6-5
   754 25C3 0A 0A 0A 0A			:4 asl @
   755 25C7 09 00			ora #0
   756 = 25C8			_t	equ *-1
   757 25C9 99 01 D2			sta audc1,y
   758
   759 				; ------------------------------------------------------------
   760
   761 = 4BFC			CHAN	= DATAORIGIN+$0334
   762 = 4BFD			FREQ	= DATAORIGIN+$0335
   763 = 4BFE			DIST	= DATAORIGIN+$0336
   764 = 4BFF			VOL	= DATAORIGIN+$0337
   765
   766 = 4BFC			@VarData	= CHAN
   767 = 0004			@VarDataSize	= 4
   768
   769 25CC			@exit
   770 					.ifdef @new
   771 					lda <@VarData
   772 					sta :ztmp
   773 					lda >@VarData
   774 					ldy #@VarDataSize-1
   775 					jmp @FreeMem
   776 					els
   777 25CC 60				rts						; ret
   778 					eif
   779 				.endl
   780
   781 				; ------------------------------------------------------------
   782
   783 = 4BF8			TEXTATTR	= DATAORIGIN+$0330
   784 = D01F			CONSOL	= $D01F
   785 = 0000			CN_START_SELECT_OPTION	= $00
   786 = 0001			CN_SELECT_OPTION	= $01
   787 = 0002			CN_START_OPTION	= $02
   788 = 0003			CN_OPTION	= $03
   789 = 0004			CN_START_SELECT	= $04
   790 = 0005			CN_SELECT	= $05
   791 = 0006			CN_START	= $06
   792 = 0007			CN_NONE	= $07
   793 = 0000			BW40	= $00
   794 = 0001			CO40	= $01
   795 = 0002			BW80	= $02
   796 = 0003			CO80	= $03
   797 = 0007			MONO	= $07
   798 = 0001			C40	= $01
   799 = 0003			C80	= $03
   800 = 0000			BLACK	= $00
   801 = 000F			WHITE	= $0F
   802 = 0026			RED	= $26
   803 = 00AC			CYAN	= $AC
   804 = 0048			PURPLE	= $48
   805 = 00B6			GREEN	= $B6
   806 = 0086			BLUE	= $86
   807 = 00DC			YELLOW	= $DC
   808 = 0018			ORANGE	= $18
   809 = 00F4			BROWN	= $F4
   810 = 002A			LIGHT_RED	= $2A
   811 = 0004			DARK_GREY	= $04
   812 = 0008			GREY	= $08
   813 = 00BC			LIGHT_GREEN	= $BC
   814 = 009A			LIGHT_BLUE	= $9A
   815 = 000C			LIGHT_GREY	= $0C
   816 = 0080			BLINK	= $80
   817
   818 				.endl							; UNIT CRT
   819
   820 				; ------------------------------------------------------------
   821
   822 25CD			.local	CAPTION						; UNIT
   823
   824 				; ------------------------------------------------------------
   825
   826 = 9E50			adr.CAPTIONS	= $9E50
   827 25CD			.var CAPTIONS	= adr.CAPTIONS .word
   828 = 9E98			adr.CAPTIONS_LENGTHS	= $9E98
   829 25CD			.var CAPTIONS_LENGTHS	= adr.CAPTIONS_LENGTHS .word
   830
   831 = 25CD 50 9E		CAPTIONS
   831 = 25CF 98 9E		CAPTIONS_LENGTHS
   831 				.endl							; UNIT CAPTION
   832
   833 				; ------------------------------------------------------------
   834
   835 25D1			.local	KEYBOARD					; UNIT
   836
   837 25D1			.local	GETKEY						; FUNCTION
   838
   839 				; --- RepeatUntilProlog
   840 25D1			l_00C0
   841
   842 				; optimize OK (KEYBOARD), line = 56
   843
   844 25D1 AD FC 02			lda CORE.CH
   845 25D4 8D 00 4C			sta RESULT
   846
   847 				; optimize OK (KEYBOARD), line = 57
   848
   849 25D7 C9 FF			cmp #$FF
   850 25D9 F0 F6			jeq l_00C0
   851
   852 				; optimize OK (KEYBOARD), line = 59
   853
   854 25DB A9 FF			lda #$FF
   855 25DD 8D FC 02			sta CORE.CH
   856 25E0			@exit
   857
   858 				; ------------------------------------------------------------
   859
   860 = 4C00			RESULT	= DATAORIGIN+$0338
   861 25E0 60				rts						; ret
   862 				.endl
   863
   864 				; ------------------------------------------------------------
   865
   866 = 001C			KEY_ESC	= $1C
   867 = 002C			KEY_TAB	= $2C
   868 = 000C			KEY_RETURN	= $0C
   869 = 0021			KEY_SPACE	= $21
   870 = 000E			KEY_MINUS	= $0E
   871 = 0006			KEY_PLUS	= $06
   872 = 0032			KEY_0	= $32
   873 = 001F			KEY_1	= $1F
   874 = 001E			KEY_2	= $1E
   875 = 001A			KEY_3	= $1A
   876 = 0018			KEY_4	= $18
   877 = 001D			KEY_5	= $1D
   878 = 001B			KEY_6	= $1B
   879 = 0030			KEY_9	= $30
   880 = 003F			KEY_A	= $3F
   881 = 0015			KEY_B	= $15
   882 = 0012			KEY_C	= $12
   883 = 003A			KEY_D	= $3A
   884 = 002A			KEY_E	= $2A
   885 = 003D			KEY_G	= $3D
   886 = 0039			KEY_H	= $39
   887 = 000D			KEY_I	= $0D
   888 = 0000			KEY_L	= $00
   889 = 0025			KEY_M	= $25
   890 = 0023			KEY_N	= $23
   891 = 0008			KEY_O	= $08
   892 = 000A			KEY_P	= $0A
   893 = 002F			KEY_Q	= $2F
   894 = 0028			KEY_R	= $28
   895 = 003E			KEY_S	= $3E
   896 = 002D			KEY_T	= $2D
   897 = 000B			KEY_U	= $0B
   898 = 0010			KEY_V	= $10
   899 = 002B			KEY_Y	= $2B
   900 = 0017			KEY_Z	= $17
   901 = 00FF			NO_KEY	= $FF
   902
   903 				.endl							; UNIT KEYBOARD
   904
   905 				; ------------------------------------------------------------
   906
   907 25E1			.local	OPERATION					; UNIT
   908
   909 				; ------------------------------------------------------------
   910 				; ------------------------------------------------------------
   911 25E1			@UnitInit
   912
   913 				; optimize OK (OPERATION), line = 136
   914
   915 25E1 A9 00			lda #$00
   916 25E3 8D 01 4C			sta WORKINGMODE
   917
   918 				; optimize OK (OPERATION), line = 137
   919
   920 25E6 8D 02 4C			sta DEMO
   921
   922 				; optimize OK (OPERATION), line = 138
   923
   924 25E9 8D 07 4C			sta ABORTED
   925
   926 				; optimize OK (OPERATION), line = 139
   927
   928 25EC 8D 08 4C			sta QUIT
   929
   930 25EF 60				rts
   931
   932 				; ------------------------------------------------------------
   933
   934 = 0016			OPERATION_COUNT	= $16
   935 = 0015			MAX_OPERATION	= $15
   936 = 2015			adr.OPERATION_CAPTIONS	= CODEORIGIN+$0015
   937 25F0			.var OPERATION_CAPTIONS	= adr.OPERATION_CAPTIONS .word
   938 = 202B			adr.OPERATION_SHORTCUTS	= CODEORIGIN+$002B
   939 25F0			.var OPERATION_SHORTCUTS	= adr.OPERATION_SHORTCUTS .word
   940 = 2041			adr.OPERATION_SHORTCUT_TEXTS	= CODEORIGIN+$0041
   941 25F0			.var OPERATION_SHORTCUT_TEXTS	= adr.OPERATION_SHORTCUT_TEXTS .word
   942 = 4C01			WORKINGMODE	= DATAORIGIN+$0339
   943 = 4C02			DEMO	= DATAORIGIN+$033A
   944 = 4C03			OPERATIONCOUNT	= DATAORIGIN+$033B
   945 = 4C04			OPERATIONINDEX	= DATAORIGIN+$033C
   946 = 4C05			OPERATIONKIND	= DATAORIGIN+$033D
   947 = 4C06			DEMOSHUFFLEMETHOD	= DATAORIGIN+$033E
   948 = 4C07			ABORTED	= DATAORIGIN+$033F
   949 = 4C08			QUIT	= DATAORIGIN+$0340
   950
   951 = 25F0 15 20		OPERATION_CAPTIONS
   951 = 25F2 2B 20		OPERATION_SHORTCUTS
   951 = 25F4 41 20		OPERATION_SHORTCUT_TEXTS
   951 				.endl							; UNIT OPERATION
   952
   953 				; ------------------------------------------------------------
   954
   955 25F6			.local	STATUS						; UNIT
   956
   957 25F6			.local	PUTBYTETOTEXTBUFFER				; PROCEDURE
   958 25F6 8D 44 4C			sta VALUE
   959
   960 				; optimize OK (STATUS), line = 41
   961
   962 25F9 C9 64			cmp #$64
   963 25FB 90 1A			jcc l_00FD
   964
   965 				; optimize OK (STATUS), line = 43
   966
   967 25FD AD 18 4C			lda TEXTPTR
   968 2600 18 69 03			add #$03
   969 2603 8D 18 4C			sta TEXTPTR
   970 2606 90 03			scc
   971 2608 EE 19 4C			inc TEXTPTR+1
   972
   973 				; optimize OK (STATUS), line = 44
   974
   975 260B AD 43 4C			lda TEXTLEN
   976 260E 18 69 03			add #$03
   977 2611 8D 43 4C			sta TEXTLEN
   978 2614 4C 43 26			jmp l_0109
   979 2617			l_00FD
   980
   981 				; optimize OK (STATUS), line = 46
   982
   983 2617 AD 44 4C			lda VALUE
   984 261A C9 0A			cmp #$0A
   985 261C 90 1A			jcc l_011B
   986
   987 				; optimize OK (STATUS), line = 48
   988
   989 261E AD 18 4C			lda TEXTPTR
   990 2621 18 69 02			add #$02
   991 2624 8D 18 4C			sta TEXTPTR
   992 2627 90 03			scc
   993 2629 EE 19 4C			inc TEXTPTR+1
   994
   995 				; optimize OK (STATUS), line = 49
   996
   997 262C AD 43 4C			lda TEXTLEN
   998 262F 18 69 02			add #$02
   999 2632 8D 43 4C			sta TEXTLEN
  1000 2635 4C 43 26			jmp l_0127
  1001 2638			l_011B
  1002
  1003 				; optimize FAIL (0, STATUS), line = 52
  1004
  1005 2638 EE 18 4C			inc TEXTPTR
  1006 263B D0 03			sne
  1007 263D EE 19 4C			inc TEXTPTR+1
  1008
  1009 				; optimize FAIL (0, STATUS), line = 53
  1010
  1011 2640 EE 43 4C			inc TEXTLEN
  1012 2643			l_0127
  1013 2643			l_0109
  1014
  1015 				; optimize OK (STATUS), line = 56
  1016
  1017 2643 AD 18 4C			lda TEXTPTR
  1018 2646 8D 46 4C			sta PTR
  1019 2649 AD 19 4C			lda TEXTPTR+1
  1020 264C 8D 47 4C			sta PTR+1
  1021
  1022 				; --- RepeatUntilProlog
  1023 264F			l_0135
  1024
  1025 				; optimize FAIL (0, STATUS), line = 59
  1026
  1027 264F AD 46 4C			lda PTR
  1028 2652 D0 03			bne @+
  1029 2654 CE 47 4C			dec PTR+1
  1030 				@
  1031 2657 CE 46 4C			dec PTR
  1032
  1033 				; optimize OK (STATUS), line = 60
  1034
  1035 265A AD 44 4C			lda VALUE
  1036 265D 85 86			sta :al
  1037 265F A9 0A			lda #$0A
  1038 2661 85 8E			sta :cl
  1039 2663 20 B5 22			jsr idivAL_CL.MOD
  1040 2666 A5 92			lda :ztmp8
  1041 2668 8D 45 4C			sta TMP
  1042
  1043 				; optimize OK (STATUS), line = 61
  1044
  1045 266B 18 69 10			add #$10
  1046 266E 8D 45 4C			sta TMP
  1047
  1048 				; optimize OK (STATUS), line = 62
  1049
  1050 2671 AC 46 4C 84 84 AC + 	mwy PTR :bp2
  1051 267B A0 00			ldy #$00
  1052 267D 91 84			sta (:bp2),y
  1053
  1054 				; optimize OK (STATUS), line = 63
  1055
  1056 267F AD 44 4C			lda VALUE
  1057 2682 4A				lsr @
  1058 2683 85 86			sta :eax
  1059 2685 4A				lsr @
  1060 2686 65 86			adc :eax
  1061 2688 6A				ror @
  1062 2689 4A				lsr @
  1063 268A 4A				lsr @
  1064 268B 65 86			adc :eax
  1065 268D 6A				ror @
  1066 268E 65 86			adc :eax
  1067 2690 6A				ror @
  1068 2691 4A				lsr @
  1069 2692 4A				lsr @
  1070 2693 8D 44 4C			sta VALUE
  1071
  1072 				; optimize OK (STATUS), line = 64
  1073
  1074 2696 D0 B7			jne l_0135
  1075
  1076 				; ------------------------------------------------------------
  1077
  1078 = 4C44			VALUE	= DATAORIGIN+$037C
  1079 = 4C45			TMP	= DATAORIGIN+$037D
  1080 = 4C46			PTR	= DATAORIGIN+$037E
  1081
  1082 = 4C44			@VarData	= VALUE
  1083 = 0004			@VarDataSize	= 4
  1084
  1085 2698			@exit
  1086 					.ifdef @new
  1087 					lda <@VarData
  1088 					sta :ztmp
  1089 					lda >@VarData
  1090 					ldy #@VarDataSize-1
  1091 					jmp @FreeMem
  1092 					els
  1093 2698 60				rts						; ret
  1094 					eif
  1095 				.endl
  1096
  1097 2699			.local	PUTCAPTION					; PROCEDURE
  1098 2699 8D 48 4C			sta CAPTION
  1099
  1100 				; optimize OK (STATUS), line = 71
  1101
  1102 269C AC 48 4C			ldy CAPTION
  1103 269F B9 98 9E			lda CAPTION.adr.CAPTIONS_LENGTHS,y
  1104 26A2 8D 49 4C			sta LEN
  1105
  1106 				; optimize OK (STATUS), line = 72
  1107
  1108 26A5 98				tya
  1109 26A6 0A				asl @
  1110 26A7 A8				tay
  1111 26A8 B9 50 9E			lda CAPTION.adr.CAPTIONS,y
  1112 26AB 85 8A			sta SYSTEM.MOVE_0058.SOURCE
  1113 26AD B9 51 9E			lda CAPTION.adr.CAPTIONS+1,y
  1114 26B0 85 8B			sta SYSTEM.MOVE_0058.SOURCE+1
  1115 26B2 AD 18 4C			lda TEXTPTR
  1116 26B5 85 8E			sta SYSTEM.MOVE_0058.DEST
  1117 26B7 AD 19 4C			lda TEXTPTR+1
  1118 26BA 85 8F			sta SYSTEM.MOVE_0058.DEST+1
  1119 26BC AD 49 4C			lda LEN
  1120 26BF 85 86			sta SYSTEM.MOVE_0058.COUNT
  1121 26C1 A9 00			lda #$00
  1122 26C3 85 87			sta SYSTEM.MOVE_0058.COUNT+1
  1123 26C5				.local +MAIN.SYSTEM.MOVE_0058
  1124 26C5				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0058.M@INLINE [Source: SortViz.a65]
     4 26C5 20 B9 21			jsr @move
Source: SortViz.a65
  1125 					.endl
  1126
  1127 				; optimize OK (STATUS), line = 73
  1128
  1129 26C8 AD 18 4C			lda TEXTPTR
  1130 26CB 18 6D 49 4C			add LEN
  1131 26CF 8D 18 4C			sta TEXTPTR
  1132 26D2 90 03			scc
  1133 26D4 EE 19 4C			inc TEXTPTR+1
  1134
  1135 				; optimize OK (STATUS), line = 74
  1136
  1137 26D7 AD 43 4C			lda TEXTLEN
  1138 26DA 18 6D 49 4C			add LEN
  1139 26DE 8D 43 4C			sta TEXTLEN
  1140
  1141 				; ------------------------------------------------------------
  1142
  1143 = 4C48			CAPTION	= DATAORIGIN+$0380
  1144 = 4C49			LEN	= DATAORIGIN+$0381
  1145
  1146 = 4C48			@VarData	= CAPTION
  1147 = 0002			@VarDataSize	= 2
  1148
  1149 26E1			@exit
  1150 					.ifdef @new
  1151 					lda <@VarData
  1152 					sta :ztmp
  1153 					lda >@VarData
  1154 					ldy #@VarDataSize-1
  1155 					jmp @FreeMem
  1156 					els
  1157 26E1 60				rts						; ret
  1158 					eif
  1159 				.endl
  1160
  1161 26E2			.local	PUTCHARTOTEXTBUFFER				; PROCEDURE
  1162 26E2 8D 4A 4C			sta C
  1163
  1164 				; optimize OK (STATUS), line = 79
  1165
  1166 26E5 AC 18 4C 84 84 AC + 	mwy TEXTPTR :bp2
  1167 26EF A0 00			ldy #$00
  1168 26F1 AD 4A 4C			lda C
  1169 26F4 91 84			sta (:bp2),y
  1170
  1171 				; optimize FAIL (0, STATUS), line = 80
  1172
  1173 26F6 EE 18 4C			inc TEXTPTR
  1174 26F9 D0 03			sne
  1175 26FB EE 19 4C			inc TEXTPTR+1
  1176
  1177 				; optimize FAIL (0, STATUS), line = 81
  1178
  1179 26FE EE 43 4C			inc TEXTLEN
  1180
  1181 				; ------------------------------------------------------------
  1182
  1183 = 4C4A			C	= DATAORIGIN+$0382
  1184
  1185 = 4C4A			@VarData	= C
  1186 = 0001			@VarDataSize	= 1
  1187
  1188 2701			@exit
  1189 					.ifdef @new
  1190 					lda <@VarData
  1191 					sta :ztmp
  1192 					lda >@VarData
  1193 					ldy #@VarDataSize-1
  1194 					jmp @FreeMem
  1195 					els
  1196 2701 60				rts						; ret
  1197 					eif
  1198 				.endl
  1199
  1200 2702			.local	UPDATEOPERATIONCAPTION				; PROCEDURE
  1201
  1202 				; optimize OK (STATUS), line = 91
  1203
  1204 2702 A9 00			lda #$00
  1205 2704 8D 43 4C			sta TEXTLEN
  1206
  1207 				; optimize OK (STATUS), line = 92
  1208
  1209 2707 A9 1A			lda <adr.TEXTBUF
  1210 2709 8D 18 4C			sta TEXTPTR
  1211 270C A9 4C			lda >adr.TEXTBUF
  1212 270E 8D 19 4C			sta TEXTPTR+1
  1213
  1214 				; optimize OK (STATUS), line = 94
  1215
  1216 2711 AD 01 4C			lda OPERATION.WORKINGMODE
  1217 2714 D0 08			jne l_01B6
  1218
  1219 				; optimize OK (STATUS), line = 96
  1220
  1221 2716 A9 1B			lda #$1B
  1222 2718 20 99 26			jsr PUTCAPTION
  1223 271B 4C 7B 27			jmp l_01C2
  1224 271E			l_01B6
  1225
  1226 				; optimize OK (STATUS), line = 98
  1227
  1228 271E AD 01 4C			lda OPERATION.WORKINGMODE
  1229 2721 C9 01			cmp #$01
  1230 2723 D0 08			jne l_01D4
  1231
  1232 				; optimize OK (STATUS), line = 100
  1233
  1234 2725 A9 1C			lda #$1C
  1235 2727 20 99 26			jsr PUTCAPTION
  1236 272A 4C 7B 27			jmp l_01E0
  1237 272D			l_01D4
  1238
  1239 				; optimize OK (STATUS), line = 102
  1240
  1241 272D AD 01 4C			lda OPERATION.WORKINGMODE
  1242 2730 C9 03			cmp #$03
  1243 2732 D0 08			jne l_01F2
  1244
  1245 				; optimize OK (STATUS), line = 104
  1246
  1247 2734 A9 1D			lda #$1D
  1248 2736 20 99 26			jsr PUTCAPTION
  1249 2739 4C 7B 27			jmp l_01FE
  1250 273C			l_01F2
  1251
  1252 				; optimize OK (STATUS), line = 106
  1253
  1254 273C AD 01 4C			lda OPERATION.WORKINGMODE
  1255 273F C9 04			cmp #$04
  1256 2741 D0 08			jne l_0210
  1257
  1258 				; optimize OK (STATUS), line = 108
  1259
  1260 2743 A9 1E			lda #$1E
  1261 2745 20 99 26			jsr PUTCAPTION
  1262 2748 4C 7B 27			jmp l_021C
  1263 274B			l_0210
  1264
  1265 				; optimize OK (STATUS), line = 110
  1266
  1267 274B AD 01 4C			lda OPERATION.WORKINGMODE
  1268 274E C9 02			cmp #$02
  1269 2750 D0 29			jne l_022E
  1270
  1271 				; optimize OK (STATUS), line = 112
  1272
  1273 2752 AD 02 4C			lda OPERATION.DEMO
  1274 2755 F0 1B			jeq l_023B
  1275
  1276 				; optimize OK (STATUS), line = 114
  1277
  1278 2757 A9 00			lda #$00
  1279 2759 20 99 26			jsr PUTCAPTION
  1280
  1281 				; optimize OK (STATUS), line = 116
  1282
  1283 275C AD 04 4C			lda OPERATION.OPERATIONINDEX
  1284 275F 20 F6 25			jsr PUTBYTETOTEXTBUFFER
  1285
  1286 				; optimize OK (STATUS), line = 117
  1287
  1288 2762 A9 0F			lda #$0F
  1289 2764 20 E2 26			jsr PUTCHARTOTEXTBUFFER
  1290
  1291 				; optimize OK (STATUS), line = 118
  1292
  1293 2767 AD 03 4C			lda OPERATION.OPERATIONCOUNT
  1294 276A 20 F6 25			jsr PUTBYTETOTEXTBUFFER
  1295
  1296 				; optimize OK (STATUS), line = 120
  1297
  1298 276D A9 01			lda #$01
  1299 276F 20 99 26			jsr PUTCAPTION
  1300 2772			l_023B
  1301
  1302 				; optimize OK (STATUS), line = 122
  1303
  1304 2772 AC 05 4C			ldy OPERATION.OPERATIONKIND
  1305 2775 B9 15 20			lda OPERATION.adr.OPERATION_CAPTIONS,y
  1306 2778 20 99 26			jsr PUTCAPTION
  1307 277B			l_022E
  1308 277B			l_021C
  1309 277B			l_01FE
  1310 277B			l_01E0
  1311 277B			l_01C2
  1312
  1313 				; optimize OK (STATUS), line = 125
  1314
  1315 277B A9 00			lda #$00
  1316 277D A0 27			ldy #$27
  1317 277F 99 00 9C 88 10 FA		sta:rpl $9C00,y-
  1318
  1319 				; optimize OK (STATUS), line = 126
  1320
  1321 2785 A9 28			lda #$28
  1322 2787 38 ED 43 4C			sub TEXTLEN
  1323 278B 85 9F			sta :STACKORIGIN+9
  1324 278D A9 00			lda #$00
  1325 278F E9 00			sbc #$00
  1326 2791 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  1327 2793 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  1328 2795 66 9F			ror :STACKORIGIN+9
  1329 2797 A5 9F			lda :STACKORIGIN+9
  1330 2799 8D 4B 4C			sta POS
  1331
  1332 				; optimize OK (STATUS), line = 127
  1333
  1334 279C 85 8E			sta SYSTEM.MOVE_0058.DEST
  1335 279E A9 9C			lda #$9C
  1336 27A0 85 8F			sta SYSTEM.MOVE_0058.DEST+1
  1337 27A2 A9 1A			lda <adr.TEXTBUF
  1338 27A4 85 8A			sta SYSTEM.MOVE_0058.SOURCE
  1339 27A6 A9 4C			lda >adr.TEXTBUF
  1340 27A8 85 8B			sta SYSTEM.MOVE_0058.SOURCE+1
  1341 27AA AD 43 4C			lda TEXTLEN
  1342 27AD 85 86			sta SYSTEM.MOVE_0058.COUNT
  1343 27AF A9 00			lda #$00
  1344 27B1 85 87			sta SYSTEM.MOVE_0058.COUNT+1
  1345 27B3				.local +MAIN.SYSTEM.MOVE_0058
  1346 27B3				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0058.M@INLINE [Source: SortViz.a65]
     4 27B3 20 B9 21			jsr @move
Source: SortViz.a65
  1347 					.endl
  1348
  1349 				; ------------------------------------------------------------
  1350
  1351 = 4C4B			POS	= DATAORIGIN+$0383
  1352 = 0006			DEMO_1_STR_LEN	= $06
  1353 = 0004			DEMO_2_STR_LEN	= $04
  1354
  1355 = 4C4B			@VarData	= POS
  1356 = 0001			@VarDataSize	= 1
  1357
  1358 27B6			@exit
  1359 					.ifdef @new
  1360 					lda <@VarData
  1361 					sta :ztmp
  1362 					lda >@VarData
  1363 					ldy #@VarDataSize-1
  1364 					jmp @FreeMem
  1365 					els
  1366 27B6 60				rts						; ret
  1367 					eif
  1368 				.endl
  1369
  1370 27B7			.local	CLEARNUMBER					; PROCEDURE
  1371
  1372 				; optimize OK (STATUS), line = 132
  1373
  1374 27B7 AD 16 4C			lda NUMBERPTR
  1375 27BA 85 84			sta :bp2
  1376 27BC AD 17 4C			lda NUMBERPTR+1
  1377 27BF 85 85			sta :bp2+1
  1378 27C1 A9 00			lda #$00
  1379 27C3 A0 04			ldy #$04
  1380 27C5 91 84 88 10 FB		sta:rpl (:bp2),y-
  1381 27CA			@exit
  1382 					.ifdef @new
  1383 					lda <@VarData
  1384 					sta :ztmp
  1385 					lda >@VarData
  1386 					ldy #@VarDataSize-1
  1387 					jmp @FreeMem
  1388 					els
  1389 27CA 60				rts						; ret
  1390 					eif
  1391 				.endl
  1392
  1393 27CB			.local	INCNUMBER					; PROCEDURE
  1394
  1395 				; optimize OK (STATUS), line = 139
  1396
  1397 27CB A9 04			lda #$04
  1398 27CD 8D 4C 4C			sta I
  1399
  1400 				; optimize OK (STATUS), line = 140
  1401
  1402 27D0 AD 16 4C			lda NUMBERPTR
  1403 27D3 18 6D 4C 4C			add I
  1404 27D7 8D 16 4C			sta NUMBERPTR
  1405 27DA 90 03			scc
  1406 27DC EE 17 4C			inc NUMBERPTR+1
  1407
  1408 				; --- WhileProlog
  1409 27DF 4C 31 28			jmp l_0289
  1410 27E2			l_028A
  1411
  1412 				; optimize OK (STATUS), line = 143
  1413
  1414 27E2 AC 17 4C 84 83		mvy NUMBERPTR+1 :bp+1
  1415 27E7 AC 16 4C			ldy NUMBERPTR
  1416 27EA B1 82			lda (:bp),y
  1417 27EC C9 09			cmp #$09
  1418 27EE D0 2B			jne l_029C
  1419
  1420 				; optimize OK (STATUS), line = 145
  1421
  1422 27F0 AC 16 4C 84 84 AC + 	mwy NUMBERPTR :bp2
  1423 27FA A0 00			ldy #$00
  1424 27FC 98				tya
  1425 27FD 91 84			sta (:bp2),y
  1426
  1427 				; optimize OK (STATUS), line = 146
  1428
  1429 27FF AD 4C 4C			lda I
  1430 2802 F0 11			jeq l_02B3
  1431
  1432 				; optimize FAIL (0, STATUS), line = 148
  1433
  1434 2804 CE 4C 4C			dec I
  1435
  1436 				; optimize FAIL (0, STATUS), line = 149
  1437
  1438 2807 AD 16 4C			lda NUMBERPTR
  1439 280A D0 03			bne @+
  1440 280C CE 17 4C			dec NUMBERPTR+1
  1441 				@
  1442 280F CE 16 4C			dec NUMBERPTR
  1443 2812 4C 18 28			jmp l_02C5
  1444 2815			l_02B3
  1445 2815 4C 34 28			jmp b_028A					; break
  1446 2818			l_02C5
  1447 2818 4C 31 28			jmp l_02CE
  1448 281B			l_029C
  1449
  1450 				; optimize OK (STATUS), line = 154
  1451
  1452 281B AC 16 4C 84 84 AC + 	mwy NUMBERPTR :bp2
  1453 2825 A0 00			ldy #$00
  1454 2827 B1 84			lda (:bp2),y
  1455 2829 18 69 01			add #$01
  1456 282C 91 84			sta (:bp2),y
  1457 282E 4C 34 28			jmp b_028A					; break
  1458 2831			l_02CE
  1459 2831			l_0289
  1460
  1461 				; optimize OK (STATUS), line = 141
  1462
  1463 2831 4C E2 27			jmp l_028A
  1464 2834			b_028A
  1465
  1466 				; ------------------------------------------------------------
  1467
  1468 = 4C4C			I	= DATAORIGIN+$0384
  1469
  1470 = 4C4C			@VarData	= I
  1471 = 0001			@VarDataSize	= 1
  1472
  1473 2834			@exit
  1474 					.ifdef @new
  1475 					lda <@VarData
  1476 					sta :ztmp
  1477 					lda >@VarData
  1478 					ldy #@VarDataSize-1
  1479 					jmp @FreeMem
  1480 					els
  1481 2834 60				rts						; ret
  1482 					eif
  1483 				.endl
  1484
  1485 2835			.local	INCREADCOUNT					; PROCEDURE
  1486
  1487 				; optimize OK (STATUS), line = 162
  1488
  1489 2835 A9 09			lda <adr.READCOUNT
  1490 2837 8D 16 4C			sta NUMBERPTR
  1491 283A A9 4C			lda >adr.READCOUNT
  1492 283C 8D 17 4C			sta NUMBERPTR+1
  1493
  1494 				; optimize OK (STATUS), line = 163
  1495
  1496 283F A9 01			lda #$01
  1497 2841 8D 13 4C			sta READCHANGED
  1498
  1499 				; optimize FAIL ('INCNUMBER', STATUS), line = 164
  1500
  1501 2844 20 CB 27			jsr INCNUMBER
  1502 2847			@exit
  1503 					.ifdef @new
  1504 					lda <@VarData
  1505 					sta :ztmp
  1506 					lda >@VarData
  1507 					ldy #@VarDataSize-1
  1508 					jmp @FreeMem
  1509 					els
  1510 2847 60				rts						; ret
  1511 					eif
  1512 				.endl
  1513
  1514 2848			.local	INCWRITECOUNT					; PROCEDURE
  1515
  1516 				; optimize OK (STATUS), line = 169
  1517
  1518 2848 A9 0E			lda <adr.WRITECOUNT
  1519 284A 8D 16 4C			sta NUMBERPTR
  1520 284D A9 4C			lda >adr.WRITECOUNT
  1521 284F 8D 17 4C			sta NUMBERPTR+1
  1522
  1523 				; optimize OK (STATUS), line = 170
  1524
  1525 2852 A9 01			lda #$01
  1526 2854 8D 14 4C			sta WRITECHANGED
  1527
  1528 				; optimize FAIL ('INCNUMBER', STATUS), line = 171
  1529
  1530 2857 20 CB 27			jsr INCNUMBER
  1531 285A			@exit
  1532 					.ifdef @new
  1533 					lda <@VarData
  1534 					sta :ztmp
  1535 					lda >@VarData
  1536 					ldy #@VarDataSize-1
  1537 					jmp @FreeMem
  1538 					els
  1539 285A 60				rts						; ret
  1540 					eif
  1541 				.endl
  1542
  1543 285B			.local	WRITENUMBER					; PROCEDURE
  1544
  1545 				; optimize OK (STATUS), line = 179
  1546
  1547 285B A9 00			lda #$00
  1548 285D 8D 4D 4C			sta I
  1549
  1550 2860			l_02FA
  1551 				; --- ForToDoCondition
  1552 2860 AD 4D 4C			lda I
  1553 2863 C9 05			cmp #$05
  1554 2865 B0 3A			jcs l_0308
  1555
  1556 				; optimize OK (STATUS), line = 181
  1557
  1558 2867 AC 16 4C 84 84 AC + 	mwy NUMBERPTR :bp2
  1559 2871 A0 00			ldy #$00
  1560 2873 B1 84			lda (:bp2),y
  1561 2875 8D 4E 4C			sta TMP
  1562
  1563 				; optimize OK (STATUS), line = 182
  1564
  1565 2878 18 69 10			add #$10
  1566 287B 8D 4E 4C			sta TMP
  1567
  1568 				; optimize OK (STATUS), line = 183
  1569
  1570 287E AC 18 4C 84 84 AC + 	mwy TEXTPTR :bp2
  1571 2888 A0 00			ldy #$00
  1572 288A 91 84			sta (:bp2),y
  1573
  1574 				; optimize FAIL (0, STATUS), line = 184
  1575
  1576 288C EE 16 4C			inc NUMBERPTR
  1577 288F D0 03			sne
  1578 2891 EE 17 4C			inc NUMBERPTR+1
  1579
  1580 				; optimize FAIL (0, STATUS), line = 185
  1581
  1582 2894 EE 18 4C			inc TEXTPTR
  1583 2897 D0 03			sne
  1584 2899 EE 19 4C			inc TEXTPTR+1
  1585
  1586 				; --- ForToDoEpilog
  1587 289C EE 4D 4C			inc I
  1588 289F D0 BF			jne l_02FA
  1589 28A1			l_0308
  1590
  1591 				; ------------------------------------------------------------
  1592
  1593 = 4C4D			I	= DATAORIGIN+$0385
  1594 = 4C4E			TMP	= DATAORIGIN+$0386
  1595 = 4C4F			PTR	= DATAORIGIN+$0387
  1596
  1597 = 4C4D			@VarData	= I
  1598 = 0004			@VarDataSize	= 4
  1599
  1600 28A1			@exit
  1601 					.ifdef @new
  1602 					lda <@VarData
  1603 					sta :ztmp
  1604 					lda >@VarData
  1605 					ldy #@VarDataSize-1
  1606 					jmp @FreeMem
  1607 					els
  1608 28A1 60				rts						; ret
  1609 					eif
  1610 				.endl
  1611
  1612 28A2			.local	UPDATESTATISTICS				; PROCEDURE
  1613
  1614 				; optimize OK (STATUS), line = 194
  1615
  1616 28A2 AD 15 4C			lda ACCESSRTCLOCK
  1617 28A5 C5 14			cmp CORE.RTCLOK
  1618 28A7 F0 47			jeq l_033A
  1619
  1620 				; optimize OK (STATUS), line = 196
  1621
  1622 28A9 A5 14			lda CORE.RTCLOK
  1623 28AB 8D 15 4C			sta ACCESSRTCLOCK
  1624
  1625 				; optimize OK (STATUS), line = 197
  1626
  1627 28AE AD 13 4C			lda READCHANGED
  1628 28B1 F0 1C			jeq l_034D
  1629
  1630 				; optimize OK (STATUS), line = 199
  1631
  1632 28B3 A9 30			lda #$30
  1633 28B5 8D 18 4C			sta TEXTPTR
  1634 28B8 A9 9C			lda #$9C
  1635 28BA 8D 19 4C			sta TEXTPTR+1
  1636
  1637 				; optimize OK (STATUS), line = 200
  1638
  1639 28BD A9 09			lda <adr.READCOUNT
  1640 28BF 8D 16 4C			sta NUMBERPTR
  1641 28C2 A9 4C			lda >adr.READCOUNT
  1642 28C4 8D 17 4C			sta NUMBERPTR+1
  1643
  1644 				; optimize FAIL ('WRITENUMBER', STATUS), line = 201
  1645
  1646 28C7 20 5B 28			jsr WRITENUMBER
  1647
  1648 				; optimize OK (STATUS), line = 202
  1649
  1650 28CA A9 00			lda #$00
  1651 28CC 8D 13 4C			sta READCHANGED
  1652 28CF			l_034D
  1653
  1654 				; optimize OK (STATUS), line = 205
  1655
  1656 28CF AD 14 4C			lda WRITECHANGED
  1657 28D2 F0 1C			jeq l_0369
  1658
  1659 				; optimize OK (STATUS), line = 207
  1660
  1661 28D4 A9 3F			lda #$3F
  1662 28D6 8D 18 4C			sta TEXTPTR
  1663 28D9 A9 9C			lda #$9C
  1664 28DB 8D 19 4C			sta TEXTPTR+1
  1665
  1666 				; optimize OK (STATUS), line = 208
  1667
  1668 28DE A9 0E			lda <adr.WRITECOUNT
  1669 28E0 8D 16 4C			sta NUMBERPTR
  1670 28E3 A9 4C			lda >adr.WRITECOUNT
  1671 28E5 8D 17 4C			sta NUMBERPTR+1
  1672
  1673 				; optimize FAIL ('WRITENUMBER', STATUS), line = 209
  1674
  1675 28E8 20 5B 28			jsr WRITENUMBER
  1676
  1677 				; optimize OK (STATUS), line = 210
  1678
  1679 28EB A9 00			lda #$00
  1680 28ED 8D 14 4C			sta WRITECHANGED
  1681 28F0			l_0369
  1682 28F0			l_033A
  1683
  1684 				; ------------------------------------------------------------
  1685
  1686 = 9C30			READS_ADDR	= $9C30
  1687 = 9C3F			WRITES_ADDR	= $9C3F
  1688 28F0			@exit
  1689 					.ifdef @new
  1690 					lda <@VarData
  1691 					sta :ztmp
  1692 					lda >@VarData
  1693 					ldy #@VarDataSize-1
  1694 					jmp @FreeMem
  1695 					els
  1696 28F0 60				rts						; ret
  1697 					eif
  1698 				.endl
  1699
  1700 28F1			.local	FORCEUPDATESTATISTICS				; PROCEDURE
  1701
  1702 				; optimize OK (STATUS), line = 220
  1703
  1704 28F1 A5 14			lda CORE.RTCLOK
  1705 28F3 8D 15 4C			sta ACCESSRTCLOCK
  1706
  1707 				; optimize OK (STATUS), line = 221
  1708
  1709 28F6 A9 30			lda #$30
  1710 28F8 8D 18 4C			sta TEXTPTR
  1711 28FB A9 9C			lda #$9C
  1712 28FD 8D 19 4C			sta TEXTPTR+1
  1713
  1714 				; optimize OK (STATUS), line = 222
  1715
  1716 2900 A9 09			lda <adr.READCOUNT
  1717 2902 8D 16 4C			sta NUMBERPTR
  1718 2905 A9 4C			lda >adr.READCOUNT
  1719 2907 8D 17 4C			sta NUMBERPTR+1
  1720
  1721 				; optimize FAIL ('WRITENUMBER', STATUS), line = 223
  1722
  1723 290A 20 5B 28			jsr WRITENUMBER
  1724
  1725 				; optimize OK (STATUS), line = 224
  1726
  1727 290D A9 00			lda #$00
  1728 290F 8D 13 4C			sta READCHANGED
  1729
  1730 				; optimize OK (STATUS), line = 226
  1731
  1732 2912 A9 3F			lda #$3F
  1733 2914 8D 18 4C			sta TEXTPTR
  1734 2917 A9 9C			lda #$9C
  1735 2919 8D 19 4C			sta TEXTPTR+1
  1736
  1737 				; optimize OK (STATUS), line = 227
  1738
  1739 291C A9 0E			lda <adr.WRITECOUNT
  1740 291E 8D 16 4C			sta NUMBERPTR
  1741 2921 A9 4C			lda >adr.WRITECOUNT
  1742 2923 8D 17 4C			sta NUMBERPTR+1
  1743
  1744 				; optimize FAIL ('WRITENUMBER', STATUS), line = 228
  1745
  1746 2926 20 5B 28			jsr WRITENUMBER
  1747
  1748 				; optimize OK (STATUS), line = 229
  1749
  1750 2929 A9 00			lda #$00
  1751 292B 8D 14 4C			sta WRITECHANGED
  1752
  1753 				; ------------------------------------------------------------
  1754
  1755 = 9C30			READS_ADDR	= $9C30
  1756 = 9C3F			WRITES_ADDR	= $9C3F
  1757 292E			@exit
  1758 					.ifdef @new
  1759 					lda <@VarData
  1760 					sta :ztmp
  1761 					lda >@VarData
  1762 					ldy #@VarDataSize-1
  1763 					jmp @FreeMem
  1764 					els
  1765 292E 60				rts						; ret
  1766 					eif
  1767 				.endl
  1768
  1769 292F			.local	UPDATEDELAY					; PROCEDURE
  1770
  1771 				; optimize OK (STATUS), line = 236
  1772
  1773 292F A9 4D			lda #$4D
  1774 2931 8D 18 4C			sta TEXTPTR
  1775 2934 A9 9C			lda #$9C
  1776 2936 8D 19 4C			sta TEXTPTR+1
  1777
  1778 				; optimize OK (STATUS), line = 237
  1779
  1780 2939 AD F5 4B			lda CORE.ACCESSDELAY
  1781 293C 20 F6 25			jsr PUTBYTETOTEXTBUFFER
  1782
  1783 				; optimize OK (STATUS), line = 238
  1784
  1785 293F AD F5 4B			lda CORE.ACCESSDELAY
  1786 2942 C9 64			cmp #$64
  1787 2944 B0 05			jcs l_03BD
  1788
  1789 				; optimize OK (STATUS), line = 239
  1790
  1791 2946 A9 00			lda #$00
  1792 2948 20 E2 26			jsr PUTCHARTOTEXTBUFFER
  1793 294B			l_03BD
  1794
  1795 				; ------------------------------------------------------------
  1796
  1797 = 9C4D			ADDR	= $9C4D
  1798 294B			@exit
  1799 					.ifdef @new
  1800 					lda <@VarData
  1801 					sta :ztmp
  1802 					lda >@VarData
  1803 					ldy #@VarDataSize-1
  1804 					jmp @FreeMem
  1805 					els
  1806 294B 60				rts						; ret
  1807 					eif
  1808 				.endl
  1809
  1810 294C			.local	RESETSTATISTICS					; PROCEDURE
  1811
  1812 				; optimize OK (STATUS), line = 248
  1813
  1814 294C A9 00			lda #$00
  1815 294E 8D 07 4C			sta OPERATION.ABORTED
  1816
  1817 				; optimize OK (STATUS), line = 250
  1818
  1819 2951 A9 00			lda #$00
  1820 2953 A0 1F			ldy #$1F
  1821 2955 99 28 9C 88 10 FA		sta:rpl $9C28,y-
  1822
  1823 				; optimize OK (STATUS), line = 252
  1824
  1825 295B A9 2A			lda #$2A
  1826 295D 8D 18 4C			sta TEXTPTR
  1827 2960 A9 9C			lda #$9C
  1828 2962 8D 19 4C			sta TEXTPTR+1
  1829
  1830 				; optimize OK (STATUS), line = 253
  1831
  1832 2965 A9 02			lda #$02
  1833 2967 20 99 26			jsr PUTCAPTION
  1834
  1835 				; optimize OK (STATUS), line = 254
  1836
  1837 296A A9 38			lda #$38
  1838 296C 8D 18 4C			sta TEXTPTR
  1839 296F A9 9C			lda #$9C
  1840 2971 8D 19 4C			sta TEXTPTR+1
  1841
  1842 				; optimize OK (STATUS), line = 255
  1843
  1844 2974 A9 03			lda #$03
  1845 2976 20 99 26			jsr PUTCAPTION
  1846
  1847 				; optimize OK (STATUS), line = 256
  1848
  1849 2979 A9 47			lda #$47
  1850 297B 8D 18 4C			sta TEXTPTR
  1851 297E A9 9C			lda #$9C
  1852 2980 8D 19 4C			sta TEXTPTR+1
  1853
  1854 				; optimize OK (STATUS), line = 257
  1855
  1856 2983 A9 04			lda #$04
  1857 2985 20 99 26			jsr PUTCAPTION
  1858
  1859 				; optimize FAIL ('UPDATEDELAY', STATUS), line = 259
  1860
  1861 2988 20 2F 29			jsr UPDATEDELAY
  1862
  1863 				; optimize OK (STATUS), line = 261
  1864
  1865 298B A9 09			lda <adr.READCOUNT
  1866 298D 8D 16 4C			sta NUMBERPTR
  1867 2990 A9 4C			lda >adr.READCOUNT
  1868 2992 8D 17 4C			sta NUMBERPTR+1
  1869
  1870 				; optimize OK (STATUS), line = 262
  1871
  1872 2995 A9 01			lda #$01
  1873 2997 8D 13 4C			sta READCHANGED
  1874
  1875 				; optimize FAIL ('CLEARNUMBER', STATUS), line = 263
  1876
  1877 299A 20 B7 27			jsr CLEARNUMBER
  1878
  1879 				; optimize OK (STATUS), line = 264
  1880
  1881 299D A9 0E			lda <adr.WRITECOUNT
  1882 299F 8D 16 4C			sta NUMBERPTR
  1883 29A2 A9 4C			lda >adr.WRITECOUNT
  1884 29A4 8D 17 4C			sta NUMBERPTR+1
  1885
  1886 				; optimize OK (STATUS), line = 265
  1887
  1888 29A7 A9 01			lda #$01
  1889 29A9 8D 14 4C			sta WRITECHANGED
  1890
  1891 				; optimize FAIL ('CLEARNUMBER', STATUS), line = 266
  1892
  1893 29AC 20 B7 27			jsr CLEARNUMBER
  1894
  1895 				; optimize FAIL ('FORCEUPDATESTATISTICS', STATUS), line = 268
  1896
  1897 29AF 20 F1 28			jsr FORCEUPDATESTATISTICS
  1898
  1899 				; ------------------------------------------------------------
  1900
  1901 = 9C2A			READS_ADDR	= $9C2A
  1902 = 9C38			WRITES_ADDR	= $9C38
  1903 = 9C47			DELAY_ADDR	= $9C47
  1904 29B2			@exit
  1905 					.ifdef @new
  1906 					lda <@VarData
  1907 					sta :ztmp
  1908 					lda >@VarData
  1909 					ldy #@VarDataSize-1
  1910 					jmp @FreeMem
  1911 					els
  1912 29B2 60				rts						; ret
  1913 					eif
  1914 				.endl
  1915
  1916 29B3			.local	UPDATESTATUS					; PROCEDURE
  1917
  1918 				; optimize FAIL ('UPDATEOPERATIONCAPTION', STATUS), line = 280
  1919
  1920 29B3 20 02 27			jsr UPDATEOPERATIONCAPTION
  1921
  1922 				; optimize OK (STATUS), line = 282
  1923
  1924 29B6 A9 01			lda #$01
  1925 29B8 85 E8			sta CORE.PAUSESCROLL
  1926
  1927 				; optimize OK (STATUS), line = 283
  1928
  1929 29BA A9 50			lda #$50
  1930 29BC 8D 18 4C			sta TEXTPTR
  1931 29BF A9 9C			lda #$9C
  1932 29C1 8D 19 4C			sta TEXTPTR+1
  1933
  1934 				; optimize OK (STATUS), line = 284
  1935
  1936 29C4 A9 00			lda #$00
  1937 29C6 8D 43 4C			sta TEXTLEN
  1938
  1939 				; optimize OK (STATUS), line = 285
  1940
  1941 29C9 AD 18 4C			lda TEXTPTR
  1942 29CC 85 8A			sta SYSTEM.FILLCHAR_0057.A
  1943 29CE AD 19 4C			lda TEXTPTR+1
  1944 29D1 85 8B			sta SYSTEM.FILLCHAR_0057.A+1
  1945 29D3 A9 00			lda #$00
  1946 29D5 85 8E			sta SYSTEM.FILLCHAR_0057.COUNT
  1947 29D7 A9 02			lda #$02
  1948 29D9 85 8F			sta SYSTEM.FILLCHAR_0057.COUNT+1
  1949 29DB A9 00			lda #$00
  1950 29DD 85 86			sta SYSTEM.FILLCHAR_0057.VALUE
  1951 29DF				.local +MAIN.SYSTEM.FILLCHAR_0057
  1952 29DF				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0057.M@INLINE [Source: SortViz.a65]
     4 29DF 20 0E 22			jsr @fill
Source: SortViz.a65
  1953 					.endl
  1954
  1955 				; optimize OK (STATUS), line = 287
  1956
  1957 29E2 A0 01			ldy #1
  1958 29E4 AD 01 4C			lda OPERATION.WORKINGMODE
  1959 29E7 F0 01			beq @+
  1960 29E9 88				dey
  1961 				@
  1962 29EA 84 9F			sty :STACKORIGIN+9
  1963 29EC A0 01			ldy #1
  1964 29EE AD 01 4C			lda OPERATION.WORKINGMODE
  1965 29F1 C9 01			cmp #$01
  1966 29F3 F0 01			beq @+
  1967 29F5 88				dey
  1968 				@
  1969 29F6 98				tya
  1970 29F7 05 9F			ora :STACKORIGIN+9
  1971 29F9 8D 54 4C			sta SCROLLACTIVE
  1972
  1973 				; optimize OK (STATUS), line = 289
  1974
  1975 29FC F0 0E			jeq l_042E
  1976
  1977 				; optimize OK (STATUS), line = 290
  1978
  1979 29FE AD 18 4C			lda TEXTPTR
  1980 2A01 18 69 28			add #$28
  1981 2A04 8D 18 4C			sta TEXTPTR
  1982 2A07 90 03			scc
  1983 2A09 EE 19 4C			inc TEXTPTR+1
  1984 2A0C			l_042E
  1985
  1986 				; optimize OK (STATUS), line = 292
  1987
  1988 2A0C AD 01 4C			lda OPERATION.WORKINGMODE
  1989 2A0F F0 04			jeq l_0450x
  1990 2A11 C9 01			cmp #$01
  1991 2A13 D0 56			jne l_0450
  1992 2A15			l_0450x
  1993
  1994 				; optimize OK (STATUS), line = 294
  1995
  1996 2A15 AD 01 4C			lda OPERATION.WORKINGMODE
  1997 2A18 C9 01			cmp #$01
  1998 2A1A D0 0D			jne l_0463
  1999
  2000 				; optimize OK (STATUS), line = 296
  2001
  2002 2A1C A9 20			lda #$20
  2003 2A1E 20 99 26			jsr PUTCAPTION
  2004
  2005 				; optimize OK (STATUS), line = 297
  2006
  2007 2A21 A9 05			lda #$05
  2008 2A23 8D 53 4C			sta LAST
  2009 2A26 4C 33 2A			jmp l_0473
  2010 2A29			l_0463
  2011
  2012 				; optimize OK (STATUS), line = 300
  2013
  2014 2A29 A9 1F			lda #$1F
  2015 2A2B 20 99 26			jsr PUTCAPTION
  2016
  2017 				; optimize OK (STATUS), line = 301
  2018
  2019 2A2E A9 15			lda #$15
  2020 2A30 8D 53 4C			sta LAST
  2021 2A33			l_0473
  2022
  2023 				; optimize OK (STATUS), line = 304
  2024
  2025 2A33 A9 00			lda #$00
  2026 2A35 8D 52 4C			sta I
  2027
  2028 2A38			l_0484
  2029 				; --- ForToDoCondition
  2030 2A38 AD 52 4C			lda I
  2031 2A3B CD 53 4C			cmp LAST
  2032 2A3E 90 02			scc
  2033 2A40 D0 26			jne l_0492
  2034
  2035 				; optimize OK (STATUS), line = 306
  2036
  2037 2A42 A9 00			lda #$00
  2038 2A44 20 E2 26			jsr PUTCHARTOTEXTBUFFER
  2039
  2040 				; optimize OK (STATUS), line = 307
  2041
  2042 2A47 A9 40			lda #$40
  2043 2A49 20 E2 26			jsr PUTCHARTOTEXTBUFFER
  2044
  2045 				; optimize OK (STATUS), line = 308
  2046
  2047 2A4C AC 52 4C			ldy I
  2048 2A4F B9 41 20			lda OPERATION.adr.OPERATION_SHORTCUT_TEXTS,y
  2049 2A52 20 E2 26			jsr PUTCHARTOTEXTBUFFER
  2050
  2051 				; optimize OK (STATUS), line = 309
  2052
  2053 2A55 A9 41			lda #$41
  2054 2A57 20 E2 26			jsr PUTCHARTOTEXTBUFFER
  2055
  2056 				; optimize OK (STATUS), line = 310
  2057
  2058 2A5A AC 52 4C			ldy I
  2059 2A5D B9 15 20			lda OPERATION.adr.OPERATION_CAPTIONS,y
  2060 2A60 20 99 26			jsr PUTCAPTION
  2061
  2062 				; --- ForToDoEpilog
  2063 2A63 EE 52 4C			inc I
  2064 2A66 D0 D0			jne l_0484
  2065 2A68			l_0492
  2066 2A68 4C C5 2A			jmp l_04B4
  2067 2A6B			l_0450
  2068
  2069 				; optimize OK (STATUS), line = 313
  2070
  2071 2A6B AD 01 4C			lda OPERATION.WORKINGMODE
  2072 2A6E C9 03			cmp #$03
  2073 2A70 D0 16			jne l_04C6
  2074
  2075 				; optimize OK (STATUS), line = 315
  2076
  2077 2A72 AD 18 4C			lda TEXTPTR
  2078 2A75 18 69 07			add #$07
  2079 2A78 8D 18 4C			sta TEXTPTR
  2080 2A7B 90 03			scc
  2081 2A7D EE 19 4C			inc TEXTPTR+1
  2082
  2083 				; optimize OK (STATUS), line = 316
  2084
  2085 2A80 A9 22			lda #$22
  2086 2A82 20 99 26			jsr PUTCAPTION
  2087 2A85 4C C5 2A			jmp l_04D3
  2088 2A88			l_04C6
  2089
  2090 				; optimize OK (STATUS), line = 318
  2091
  2092 2A88 AD 01 4C			lda OPERATION.WORKINGMODE
  2093 2A8B C9 02			cmp #$02
  2094 2A8D D0 16			jne l_04E5
  2095
  2096 				; optimize OK (STATUS), line = 320
  2097
  2098 2A8F AD 18 4C			lda TEXTPTR
  2099 2A92 18 69 03			add #$03
  2100 2A95 8D 18 4C			sta TEXTPTR
  2101 2A98 90 03			scc
  2102 2A9A EE 19 4C			inc TEXTPTR+1
  2103
  2104 				; optimize OK (STATUS), line = 321
  2105
  2106 2A9D A9 21			lda #$21
  2107 2A9F 20 99 26			jsr PUTCAPTION
  2108 2AA2 4C C5 2A			jmp l_04F2
  2109 2AA5			l_04E5
  2110
  2111 				; optimize OK (STATUS), line = 323
  2112
  2113 2AA5 AD 01 4C			lda OPERATION.WORKINGMODE
  2114 2AA8 C9 04			cmp #$04
  2115 2AAA D0 16			jne l_0504
  2116
  2117 				; optimize OK (STATUS), line = 325
  2118
  2119 2AAC AD 18 4C			lda TEXTPTR
  2120 2AAF 18 69 0C			add #$0C
  2121 2AB2 8D 18 4C			sta TEXTPTR
  2122 2AB5 90 03			scc
  2123 2AB7 EE 19 4C			inc TEXTPTR+1
  2124
  2125 				; optimize OK (STATUS), line = 326
  2126
  2127 2ABA A9 23			lda #$23
  2128 2ABC 20 99 26			jsr PUTCAPTION
  2129 2ABF 4C C5 2A			jmp l_0511
  2130 2AC2			l_0504
  2131 2AC2 4C 40 2B			jmp @exit					; exit
  2132 2AC5			l_0511
  2133 2AC5			l_04F2
  2134 2AC5			l_04D3
  2135 2AC5			l_04B4
  2136
  2137 				; optimize OK (STATUS), line = 330
  2138
  2139 2AC5 AD 54 4C			lda SCROLLACTIVE
  2140 2AC8 F0 72			jeq l_051D
  2141
  2142 				; optimize OK (STATUS), line = 333
  2143
  2144 2ACA AD 43 4C			lda TEXTLEN
  2145 2ACD 8D 51 4C			sta LEN
  2146
  2147 				; --- WhileProlog
  2148 2AD0 4C 0A 2B			jmp l_0526
  2149 2AD3			l_0527
  2150
  2151 				; optimize OK (STATUS), line = 336
  2152
  2153 2AD3 A9 78			lda #$78
  2154 2AD5 85 8A			sta SYSTEM.MOVE_0058.SOURCE
  2155 2AD7 A9 9C			lda #$9C
  2156 2AD9 85 8B			sta SYSTEM.MOVE_0058.SOURCE+1
  2157 2ADB AD 18 4C			lda TEXTPTR
  2158 2ADE 85 8E			sta SYSTEM.MOVE_0058.DEST
  2159 2AE0 AD 19 4C			lda TEXTPTR+1
  2160 2AE3 85 8F			sta SYSTEM.MOVE_0058.DEST+1
  2161 2AE5 AD 51 4C			lda LEN
  2162 2AE8 85 86			sta SYSTEM.MOVE_0058.COUNT
  2163 2AEA A9 00			lda #$00
  2164 2AEC 85 87			sta SYSTEM.MOVE_0058.COUNT+1
  2165 2AEE				.local +MAIN.SYSTEM.MOVE_0058
  2166 2AEE				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0058.M@INLINE [Source: SortViz.a65]
     4 2AEE 20 B9 21			jsr @move
Source: SortViz.a65
  2167 					.endl
  2168
  2169 				; optimize OK (STATUS), line = 337
  2170
  2171 2AF1 AD 43 4C			lda TEXTLEN
  2172 2AF4 18 6D 51 4C			add LEN
  2173 2AF8 8D 43 4C			sta TEXTLEN
  2174
  2175 				; optimize OK (STATUS), line = 338
  2176
  2177 2AFB AD 18 4C			lda TEXTPTR
  2178 2AFE 18 6D 51 4C			add LEN
  2179 2B02 8D 18 4C			sta TEXTPTR
  2180 2B05 90 03			scc
  2181 2B07 EE 19 4C			inc TEXTPTR+1
  2182 2B0A			l_0526
  2183
  2184 				; optimize OK (STATUS), line = 334
  2185
  2186 2B0A AD 43 4C			lda TEXTLEN
  2187 2B0D C9 28			cmp #$28
  2188 2B0F 90 C2			jcc l_0527
  2189
  2190 				; optimize OK (STATUS), line = 342
  2191
  2192 2B11 A9 78			lda #$78
  2193 2B13 85 8A			sta SYSTEM.MOVE_0058.SOURCE
  2194 2B15 A9 9C			lda #$9C
  2195 2B17 85 8B			sta SYSTEM.MOVE_0058.SOURCE+1
  2196 2B19 AD 18 4C			lda TEXTPTR
  2197 2B1C 85 8E			sta SYSTEM.MOVE_0058.DEST
  2198 2B1E AD 19 4C			lda TEXTPTR+1
  2199 2B21 85 8F			sta SYSTEM.MOVE_0058.DEST+1
  2200 2B23 A9 28			lda #$28
  2201 2B25 85 86			sta SYSTEM.MOVE_0058.COUNT
  2202 2B27 A9 00			lda #$00
  2203 2B29 85 87			sta SYSTEM.MOVE_0058.COUNT+1
  2204 2B2B				.local +MAIN.SYSTEM.MOVE_0058
  2205 2B2B				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0058.M@INLINE [Source: SortViz.a65]
     4 2B2B 20 B9 21			jsr @move
Source: SortViz.a65
  2206 					.endl
  2207
  2208 				; optimize OK (STATUS), line = 343
  2209
  2210 2B2E AD 18 4C			lda TEXTPTR
  2211 2B31 85 EA			sta CORE.SCROLLENDADDR
  2212 2B33 AD 19 4C			lda TEXTPTR+1
  2213 2B36 85 EB			sta CORE.SCROLLENDADDR+1
  2214
  2215 				; optimize OK (STATUS), line = 344
  2216
  2217 2B38 A9 00			lda #$00
  2218 2B3A 85 E8			sta CORE.PAUSESCROLL
  2219 2B3C			l_051D
  2220
  2221 				; optimize OK (STATUS), line = 347
  2222
  2223 2B3C A9 01			lda #$01
  2224 2B3E 85 E9			sta CORE.RESETSCROLL
  2225
  2226 				; ------------------------------------------------------------
  2227
  2228 = 9C78			RESTART_ADDR	= $9C78
  2229 = 4C51			LEN	= DATAORIGIN+$0389
  2230 = 4C52			I	= DATAORIGIN+$038A
  2231 = 4C53			LAST	= DATAORIGIN+$038B
  2232 = 4C54			SCROLLACTIVE	= DATAORIGIN+$038C
  2233
  2234 = 4C51			@VarData	= LEN
  2235 = 0004			@VarDataSize	= 4
  2236
  2237 2B40			@exit
  2238 					.ifdef @new
  2239 					lda <@VarData
  2240 					sta :ztmp
  2241 					lda >@VarData
  2242 					ldy #@VarDataSize-1
  2243 					jmp @FreeMem
  2244 					els
  2245 2B40 60				rts						; ret
  2246 					eif
  2247 				.endl
  2248
  2249 				; ------------------------------------------------------------
  2250
  2251 = 0005			DIGIT_COUNT	= $05
  2252 = 0004			MAX_DIGIT	= $04
  2253 = 4C09			adr.READCOUNT	= [DATAORIGIN+$0341] .array [5]
  2254 2B41			.var READCOUNT	= adr.READCOUNT .word
  2255 = 4C0E			adr.WRITECOUNT	= [DATAORIGIN+$0346] .array [5]
  2256 2B41			.var WRITECOUNT	= adr.WRITECOUNT .word
  2257 = 4C13			READCHANGED	= DATAORIGIN+$034B
  2258 = 4C14			WRITECHANGED	= DATAORIGIN+$034C
  2259 = 4C15			ACCESSRTCLOCK	= DATAORIGIN+$034D
  2260 = 4C16			NUMBERPTR	= DATAORIGIN+$034E
  2261 = 4C18			TEXTPTR	= DATAORIGIN+$0350
  2262 = 4C1A			adr.TEXTBUF	= [DATAORIGIN+$0352] .array [41]
  2263 2B41			.var TEXTBUF	= adr.TEXTBUF .word
  2264 = 4C43			TEXTLEN	= DATAORIGIN+$037B
  2265
  2266 = 2B41 09 4C		READCOUNT
  2266 = 2B43 0E 4C		WRITECOUNT
  2266 = 2B45 1A 4C		TEXTBUF
  2266 				.endl							; UNIT STATUS
  2267
  2268 				; ------------------------------------------------------------
  2269
  2270 2B47			.local	DISPLAYLIST					; UNIT
  2271
  2272 2B47			.local	DLI						; PROCEDURE | ASSEMBLER | INTERRUPT
  2273
  2274 				; -------------------  ASM Block 00000063  -------------------
  2275
  2276
  2277 2B47 48			  pha
  2278 2B48 A9 39		  lda #%00111001
  2279 2B4A 8D 00 D4		  sta DMACTL
  2280 2B4D AD 55 4C		  lda color0Value
  2281 2B50 8D 16 D0		  sta COLPF0
  2282 2B53 AD 56 4C		  lda color1Value
  2283 2B56 8D 17 D0		  sta COLPF1
  2284 2B59 AD 57 4C		  lda color2Value
  2285 2B5C 8D 18 D0		  sta COLPF2
  2286 2B5F A9 20		  lda #32
  2287 2B61 8D 00 D0		  sta HPOSP0
  2288 2B64 8D 01 D0		  sta HPOSP1
  2289 2B67 68			  pla
  2290
  2291 2B68 40				rti						; ret
  2292 				.endl
  2293
  2294 2B69			.local	VBL						; PROCEDURE | ASSEMBLER | INTERRUPT
  2295
  2296 				; -------------------  ASM Block 00000064  -------------------
  2297
  2298
  2299 2B69 A9 8A		  lda #138
  2300 2B6B 8D 00 D0		  sta HPOSP0
  2301 2B6E A9 4E		  lda #78
  2302 2B70 8D 01 D0		  sta HPOSP1
  2303
  2304 				  ; check if reset scroll
  2305 2B73 A5 E9		  lda RESET_SCROLL
  2306 2B75 F0 1B		  beq after_reset
  2307
  2308 2B77 A9 02		  lda #2
  2309 2B79 8D 60 4C		  sta scrollDelay
  2310 2B7C A9 00		  lda #0
  2311 2B7E 85 E9		  sta RESET_SCROLL  
  2312 2B80 A9 0F		  lda #15
  2313 2B82 8D 04 D4		  sta HSCROL
  2314 2B85 8D 61 4C		  sta horScroll
  2315 2B88 A9 50		  lda #.lo(START_ADDR)
  2316 2B8A 8D 08 80		  sta ADDR
  2317 2B8D A9 9C		  lda #.hi(START_ADDR)
  2318 2B8F 8D 09 80		  sta ADDR+1
  2319
  2320 2B92			after_reset
  2321
  2322 				  ; check if pause scroll
  2323 2B92 A5 E8		  lda PAUSE_SCROLL
  2324 2B94 D0 36		  bne after_scroll
  2325
  2326 				  ; slow down the scroll
  2327 				  ;dec scrollDelay
  2328 				  ;bne after_scroll
  2329 				  ;lda #2
  2330 				  ;sta scrollDelay
  2331
  2332 				  ; perform fine scroll
  2333 2B96 AE 61 4C		  ldx horScroll
  2334 2B99 CA			  dex
  2335 2B9A 8E 04 D4		  stx HSCROL
  2336 2B9D 8E 61 4C		  stx horScroll
  2337 2BA0 E0 0B		  cpx #11
  2338 2BA2 D0 28		  bne after_scroll
  2339
  2340 				  ; perform coarse scroll
  2341 2BA4 A2 0F		  ldx #15
  2342 2BA6 8E 04 D4		  stx HSCROL
  2343 2BA9 8E 61 4C		  stx horScroll
  2344
  2345 2BAC EE 08 80		  inc ADDR
  2346 2BAF D0 03		  sne
  2347 2BB1 EE 09 80		  inc ADDR+1
  2348 				  
  2349 2BB4 AD 08 80		  lda ADDR
  2350 2BB7 C5 EA		  cmp END_ADDR
  2351 2BB9 D0 11		  bne after_scroll
  2352 2BBB AD 09 80		  lda ADDR+1
  2353 2BBE C5 EB		  cmp END_ADDR+1
  2354 2BC0 D0 0A		  bne after_scroll
  2355
  2356 2BC2 A9 78		  lda #.lo(RESTART_ADDR)
  2357 2BC4 8D 08 80		  sta ADDR
  2358 2BC7 A9 9C		  lda #.hi(RESTART_ADDR)
  2359 2BC9 8D 09 80		  sta ADDR+1
  2360
  2361 2BCC			after_scroll
  2362 				  
  2363 2BCC 4C 62 E4		  jmp xitvbv
  2364
  2365 				; ------------------------------------------------------------
  2366
  2367 = 8008			ADDR	= $8008
  2368 = 9C50			START_ADDR	= $9C50
  2369 = 9C78			RESTART_ADDR	= $9C78
  2370 = 00E8			PAUSE_SCROLL	= $E8
  2371 = 00E9			RESET_SCROLL	= $E9
  2372 = 00EA			END_ADDR	= $EA
  2373 2BCF 40				rti						; ret
  2374 				.endl
  2375
  2376 2BD0			.local	FILLIMAGELINEADDRESSES				; PROCEDURE
  2377
  2378 				; optimize OK (DISPLAYLIST), line = 153
  2379
  2380 2BD0 A9 00			lda #$00
  2381 2BD2 8D 64 4C			sta ADDR
  2382 2BD5 A9 88			lda #$88
  2383 2BD7 8D 65 4C			sta ADDR+1
  2384
  2385 				; optimize OK (DISPLAYLIST), line = 154
  2386
  2387 2BDA A9 00			lda #$00
  2388 2BDC A8				tay
  2389
  2390 2BDD			l_0567
  2391 				; --- ForToDoCondition
  2392 2BDD C0 A0			cpy #$A0
  2393 2BDF B0 1D			jcs l_0575
  2394
  2395 				; optimize OK (DISPLAYLIST), line = 156
  2396
  2397 2BE1 AD 64 4C			lda ADDR
  2398 2BE4 99 D5 48			sta CORE.adr.IMAGELINELOADDR,y
  2399
  2400 				; optimize OK (DISPLAYLIST), line = 157
  2401
  2402 2BE7 AD 65 4C			lda ADDR+1
  2403 2BEA 99 75 49			sta CORE.adr.IMAGELINEHIADDR,y
  2404
  2405 				; optimize OK (DISPLAYLIST), line = 158
  2406
  2407 2BED AD 64 4C			lda ADDR
  2408 2BF0 18 69 20			add #$20
  2409 2BF3 8D 64 4C			sta ADDR
  2410 2BF6 90 03			scc
  2411 2BF8 EE 65 4C			inc ADDR+1
  2412
  2413 				; --- ForToDoEpilog
  2414 2BFB C8				iny
  2415 2BFC D0 DF			jne l_0567
  2416 2BFE			l_0575
  2417 2BFE 8C 66 4C			sty I
  2418
  2419 				; ------------------------------------------------------------
  2420
  2421 = 4C64			ADDR	= DATAORIGIN+$039C
  2422 = 4C66			I	= DATAORIGIN+$039E
  2423
  2424 = 4C64			@VarData	= ADDR
  2425 = 0003			@VarDataSize	= 3
  2426
  2427 2C01			@exit
  2428 					.ifdef @new
  2429 					lda <@VarData
  2430 					sta :ztmp
  2431 					lda >@VarData
  2432 					ldy #@VarDataSize-1
  2433 					jmp @FreeMem
  2434 					els
  2435 2C01 60				rts						; ret
  2436 					eif
  2437 				.endl
  2438
  2439 2C02			.local	FILLDISPLAYLISTLINEADDRESSES			; PROCEDURE
  2440
  2441 				; optimize OK (DISPLAYLIST), line = 167
  2442
  2443 2C02 A9 10			lda #$10
  2444 2C04 8D 67 4C			sta ADDR
  2445 2C07 A9 80			lda #$80
  2446 2C09 8D 68 4C			sta ADDR+1
  2447
  2448 				; optimize OK (DISPLAYLIST), line = 168
  2449
  2450 2C0C A9 00			lda #$00
  2451 2C0E 8D 69 4C			sta I
  2452
  2453 2C11			l_059C
  2454 				; --- ForToDoCondition
  2455 2C11 AD 69 4C			lda I
  2456 2C14 C9 A0			cmp #$A0
  2457 2C16 B0 37			jcs l_05AA
  2458
  2459 				; optimize OK (DISPLAYLIST), line = 170
  2460
  2461 2C18 A9 00			lda #$00
  2462 2C1A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2463 2C1C AD 69 4C			lda I
  2464 2C1F 0A				asl @
  2465 2C20 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  2466 2C22 18 6D 0A 25			add CORE.DISPLAYLISTLINEADDR
  2467 2C26 85 84			sta :bp2
  2468 2C28 AD 0B 25			lda CORE.DISPLAYLISTLINEADDR+1
  2469 2C2B 65 AF			adc :STACKORIGIN+STACKWIDTH+9
  2470 2C2D 85 85			sta :bp2+1
  2471 2C2F A0 00			ldy #$00
  2472 2C31 AD 67 4C			lda ADDR
  2473 2C34 91 84			sta (:bp2),y
  2474 2C36 C8				iny
  2475 2C37 AD 68 4C			lda ADDR+1
  2476 2C3A 91 84			sta (:bp2),y
  2477
  2478 				; optimize OK (DISPLAYLIST), line = 171
  2479
  2480 2C3C AD 67 4C			lda ADDR
  2481 2C3F 18 69 03			add #$03
  2482 2C42 8D 67 4C			sta ADDR
  2483 2C45 90 03			scc
  2484 2C47 EE 68 4C			inc ADDR+1
  2485
  2486 				; --- ForToDoEpilog
  2487 2C4A EE 69 4C			inc I
  2488 2C4D D0 C2			jne l_059C
  2489 2C4F			l_05AA
  2490
  2491 				; ------------------------------------------------------------
  2492
  2493 = 4C67			ADDR	= DATAORIGIN+$039F
  2494 = 4C69			I	= DATAORIGIN+$03A1
  2495
  2496 = 4C67			@VarData	= ADDR
  2497 = 0003			@VarDataSize	= 3
  2498
  2499 2C4F			@exit
  2500 					.ifdef @new
  2501 					lda <@VarData
  2502 					sta :ztmp
  2503 					lda >@VarData
  2504 					ldy #@VarDataSize-1
  2505 					jmp @FreeMem
  2506 					els
  2507 2C4F 60				rts						; ret
  2508 					eif
  2509 				.endl
  2510
  2511 2C50			.local	FILLDISPLAYLIST					; PROCEDURE
  2512
  2513 2C50 4C D2 2D			jmp l_05BC
  2514
  2515 2C53			.local	INSERTEMPTY3					; PROCEDURE
  2516
  2517 				; optimize OK (DISPLAYLIST), line = 181
  2518
  2519 2C53 AC 6B 4C			ldy ADDR+1
  2520 2C56 84 83			sty :bp+1
  2521 2C58 AC 6A 4C			ldy ADDR
  2522 2C5B A9 20			lda #$20
  2523 2C5D 91 82			sta (:bp),y
  2524
  2525 				; optimize FAIL (0, DISPLAYLIST), line = 182
  2526
  2527 2C5F EE 6A 4C			inc ADDR
  2528 2C62 D0 03			sne
  2529 2C64 EE 6B 4C			inc ADDR+1
  2530 2C67			@exit
  2531 					.ifdef @new
  2532 					lda <@VarData
  2533 					sta :ztmp
  2534 					lda >@VarData
  2535 					ldy #@VarDataSize-1
  2536 					jmp @FreeMem
  2537 					els
  2538 2C67 60				rts						; ret
  2539 					eif
  2540 				.endl
  2541
  2542 2C68			.local	INSERTEMPTY3DLI					; PROCEDURE
  2543
  2544 				; optimize OK (DISPLAYLIST), line = 187
  2545
  2546 2C68 AC 6B 4C			ldy ADDR+1
  2547 2C6B 84 83			sty :bp+1
  2548 2C6D AC 6A 4C			ldy ADDR
  2549 2C70 A9 A0			lda #$A0
  2550 2C72 91 82			sta (:bp),y
  2551
  2552 				; optimize FAIL (0, DISPLAYLIST), line = 188
  2553
  2554 2C74 EE 6A 4C			inc ADDR
  2555 2C77 D0 03			sne
  2556 2C79 EE 6B 4C			inc ADDR+1
  2557 2C7C			@exit
  2558 					.ifdef @new
  2559 					lda <@VarData
  2560 					sta :ztmp
  2561 					lda >@VarData
  2562 					ldy #@VarDataSize-1
  2563 					jmp @FreeMem
  2564 					els
  2565 2C7C 60				rts						; ret
  2566 					eif
  2567 				.endl
  2568
  2569 2C7D			.local	INSERTEMPTY8					; PROCEDURE
  2570
  2571 				; optimize OK (DISPLAYLIST), line = 193
  2572
  2573 2C7D AC 6B 4C			ldy ADDR+1
  2574 2C80 84 83			sty :bp+1
  2575 2C82 AC 6A 4C			ldy ADDR
  2576 2C85 A9 70			lda #$70
  2577 2C87 91 82			sta (:bp),y
  2578
  2579 				; optimize FAIL (0, DISPLAYLIST), line = 194
  2580
  2581 2C89 EE 6A 4C			inc ADDR
  2582 2C8C D0 03			sne
  2583 2C8E EE 6B 4C			inc ADDR+1
  2584 2C91			@exit
  2585 					.ifdef @new
  2586 					lda <@VarData
  2587 					sta :ztmp
  2588 					lda >@VarData
  2589 					ldy #@VarDataSize-1
  2590 					jmp @FreeMem
  2591 					els
  2592 2C91 60				rts						; ret
  2593 					eif
  2594 				.endl
  2595
  2596 2C92			.local	INSERTLINE					; PROCEDURE
  2597 2C92 8D 6C 4C			sta LINE
  2598
  2599 				; optimize OK (DISPLAYLIST), line = 199
  2600
  2601 2C95 AC 6B 4C			ldy ADDR+1
  2602 2C98 84 83			sty :bp+1
  2603 2C9A AC 6A 4C			ldy ADDR
  2604 2C9D A9 4F			lda #$4F
  2605 2C9F 91 82			sta (:bp),y
  2606
  2607 				; optimize FAIL (0, DISPLAYLIST), line = 200
  2608
  2609 2CA1 EE 6A 4C			inc ADDR
  2610 2CA4 D0 03			sne
  2611 2CA6 EE 6B 4C			inc ADDR+1
  2612
  2613 				; optimize OK (DISPLAYLIST), line = 201
  2614
  2615 2CA9 AC 6C 4C			ldy LINE
  2616 2CAC B9 D5 48			lda CORE.adr.IMAGELINELOADDR,y
  2617 2CAF AC 6B 4C			ldy ADDR+1
  2618 2CB2 84 83			sty :bp+1
  2619 2CB4 AC 6A 4C			ldy ADDR
  2620 2CB7 91 82			sta (:bp),y
  2621
  2622 				; optimize FAIL (0, DISPLAYLIST), line = 202
  2623
  2624 2CB9 EE 6A 4C			inc ADDR
  2625 2CBC D0 03			sne
  2626 2CBE EE 6B 4C			inc ADDR+1
  2627
  2628 				; optimize OK (DISPLAYLIST), line = 203
  2629
  2630 2CC1 AC 6C 4C			ldy LINE
  2631 2CC4 B9 75 49			lda CORE.adr.IMAGELINEHIADDR,y
  2632 2CC7 AC 6B 4C			ldy ADDR+1
  2633 2CCA 84 83			sty :bp+1
  2634 2CCC AC 6A 4C			ldy ADDR
  2635 2CCF 91 82			sta (:bp),y
  2636
  2637 				; optimize FAIL (0, DISPLAYLIST), line = 204
  2638
  2639 2CD1 EE 6A 4C			inc ADDR
  2640 2CD4 D0 03			sne
  2641 2CD6 EE 6B 4C			inc ADDR+1
  2642
  2643 				; ------------------------------------------------------------
  2644
  2645 = 4C6C			LINE	= DATAORIGIN+$03A4
  2646
  2647 = 4C6C			@VarData	= LINE
  2648 = 0001			@VarDataSize	= 1
  2649
  2650 2CD9			@exit
  2651 					.ifdef @new
  2652 					lda <@VarData
  2653 					sta :ztmp
  2654 					lda >@VarData
  2655 					ldy #@VarDataSize-1
  2656 					jmp @FreeMem
  2657 					els
  2658 2CD9 60				rts						; ret
  2659 					eif
  2660 				.endl
  2661
  2662 2CDA			.local	INSERTTEXTFIELD					; PROCEDURE
  2663
  2664 				; optimize OK (DISPLAYLIST), line = 209
  2665
  2666 2CDA AC 6B 4C			ldy ADDR+1
  2667 2CDD 84 83			sty :bp+1
  2668 2CDF AC 6A 4C			ldy ADDR
  2669 2CE2 A9 42			lda #$42
  2670 2CE4 91 82			sta (:bp),y
  2671
  2672 				; optimize FAIL (0, DISPLAYLIST), line = 210
  2673
  2674 2CE6 EE 6A 4C			inc ADDR
  2675 2CE9 D0 03			sne
  2676 2CEB EE 6B 4C			inc ADDR+1
  2677
  2678 				; optimize OK (DISPLAYLIST), line = 211
  2679
  2680 2CEE AC 6B 4C			ldy ADDR+1
  2681 2CF1 84 83			sty :bp+1
  2682 2CF3 AC 6A 4C			ldy ADDR
  2683 2CF6 A9 00			lda #$00
  2684 2CF8 91 82			sta (:bp),y
  2685
  2686 				; optimize FAIL (0, DISPLAYLIST), line = 212
  2687
  2688 2CFA EE 6A 4C			inc ADDR
  2689 2CFD D0 03			sne
  2690 2CFF EE 6B 4C			inc ADDR+1
  2691
  2692 				; optimize OK (DISPLAYLIST), line = 213
  2693
  2694 2D02 AC 6B 4C			ldy ADDR+1
  2695 2D05 84 83			sty :bp+1
  2696 2D07 AC 6A 4C			ldy ADDR
  2697 2D0A A9 9C			lda #$9C
  2698 2D0C 91 82			sta (:bp),y
  2699
  2700 				; optimize FAIL (0, DISPLAYLIST), line = 214
  2701
  2702 2D0E EE 6A 4C			inc ADDR
  2703 2D11 D0 03			sne
  2704 2D13 EE 6B 4C			inc ADDR+1
  2705
  2706 				; optimize FAIL ('INSERTEMPTY3', DISPLAYLIST), line = 215
  2707
  2708 2D16 20 53 2C			jsr INSERTEMPTY3
  2709
  2710 				; optimize OK (DISPLAYLIST), line = 216
  2711
  2712 2D19 AC 6B 4C			ldy ADDR+1
  2713 2D1C 84 83			sty :bp+1
  2714 2D1E AC 6A 4C			ldy ADDR
  2715 2D21 A9 52			lda #$52
  2716 2D23 91 82			sta (:bp),y
  2717
  2718 				; optimize FAIL (0, DISPLAYLIST), line = 217
  2719
  2720 2D25 EE 6A 4C			inc ADDR
  2721 2D28 D0 03			sne
  2722 2D2A EE 6B 4C			inc ADDR+1
  2723
  2724 				; optimize OK (DISPLAYLIST), line = 218
  2725
  2726 2D2D AC 6B 4C			ldy ADDR+1
  2727 2D30 84 83			sty :bp+1
  2728 2D32 AC 6A 4C			ldy ADDR
  2729 2D35 A9 50			lda #$50
  2730 2D37 91 82			sta (:bp),y
  2731
  2732 				; optimize FAIL (0, DISPLAYLIST), line = 219
  2733
  2734 2D39 EE 6A 4C			inc ADDR
  2735 2D3C D0 03			sne
  2736 2D3E EE 6B 4C			inc ADDR+1
  2737
  2738 				; optimize OK (DISPLAYLIST), line = 220
  2739
  2740 2D41 AC 6B 4C			ldy ADDR+1
  2741 2D44 84 83			sty :bp+1
  2742 2D46 AC 6A 4C			ldy ADDR
  2743 2D49 A9 9C			lda #$9C
  2744 2D4B 91 82			sta (:bp),y
  2745
  2746 				; optimize FAIL (0, DISPLAYLIST), line = 221
  2747
  2748 2D4D EE 6A 4C			inc ADDR
  2749 2D50 D0 03			sne
  2750 2D52 EE 6B 4C			inc ADDR+1
  2751
  2752 				; optimize FAIL ('INSERTEMPTY3', DISPLAYLIST), line = 222
  2753
  2754 2D55 20 53 2C			jsr INSERTEMPTY3
  2755
  2756 				; optimize OK (DISPLAYLIST), line = 223
  2757
  2758 2D58 AC 6B 4C			ldy ADDR+1
  2759 2D5B 84 83			sty :bp+1
  2760 2D5D AC 6A 4C			ldy ADDR
  2761 2D60 A9 42			lda #$42
  2762 2D62 91 82			sta (:bp),y
  2763
  2764 				; optimize FAIL (0, DISPLAYLIST), line = 224
  2765
  2766 2D64 EE 6A 4C			inc ADDR
  2767 2D67 D0 03			sne
  2768 2D69 EE 6B 4C			inc ADDR+1
  2769
  2770 				; optimize OK (DISPLAYLIST), line = 225
  2771
  2772 2D6C AC 6B 4C			ldy ADDR+1
  2773 2D6F 84 83			sty :bp+1
  2774 2D71 AC 6A 4C			ldy ADDR
  2775 2D74 A9 28			lda #$28
  2776 2D76 91 82			sta (:bp),y
  2777
  2778 				; optimize FAIL (0, DISPLAYLIST), line = 226
  2779
  2780 2D78 EE 6A 4C			inc ADDR
  2781 2D7B D0 03			sne
  2782 2D7D EE 6B 4C			inc ADDR+1
  2783
  2784 				; optimize OK (DISPLAYLIST), line = 227
  2785
  2786 2D80 AC 6B 4C			ldy ADDR+1
  2787 2D83 84 83			sty :bp+1
  2788 2D85 AC 6A 4C			ldy ADDR
  2789 2D88 A9 9C			lda #$9C
  2790 2D8A 91 82			sta (:bp),y
  2791
  2792 				; optimize FAIL (0, DISPLAYLIST), line = 228
  2793
  2794 2D8C EE 6A 4C			inc ADDR
  2795 2D8F D0 03			sne
  2796 2D91 EE 6B 4C			inc ADDR+1
  2797 2D94			@exit
  2798 					.ifdef @new
  2799 					lda <@VarData
  2800 					sta :ztmp
  2801 					lda >@VarData
  2802 					ldy #@VarDataSize-1
  2803 					jmp @FreeMem
  2804 					els
  2805 2D94 60				rts						; ret
  2806 					eif
  2807 				.endl
  2808
  2809 2D95			.local	INSERTJVB					; PROCEDURE
  2810
  2811 				; optimize OK (DISPLAYLIST), line = 233
  2812
  2813 2D95 AC 6B 4C			ldy ADDR+1
  2814 2D98 84 83			sty :bp+1
  2815 2D9A AC 6A 4C			ldy ADDR
  2816 2D9D A9 41			lda #$41
  2817 2D9F 91 82			sta (:bp),y
  2818
  2819 				; optimize FAIL (0, DISPLAYLIST), line = 234
  2820
  2821 2DA1 EE 6A 4C			inc ADDR
  2822 2DA4 D0 03			sne
  2823 2DA6 EE 6B 4C			inc ADDR+1
  2824
  2825 				; optimize OK (DISPLAYLIST), line = 235
  2826
  2827 2DA9 AC 6B 4C			ldy ADDR+1
  2828 2DAC 84 83			sty :bp+1
  2829 2DAE AC 6A 4C			ldy ADDR
  2830 2DB1 A9 00			lda #$00
  2831 2DB3 91 82			sta (:bp),y
  2832
  2833 				; optimize FAIL (0, DISPLAYLIST), line = 236
  2834
  2835 2DB5 EE 6A 4C			inc ADDR
  2836 2DB8 D0 03			sne
  2837 2DBA EE 6B 4C			inc ADDR+1
  2838
  2839 				; optimize OK (DISPLAYLIST), line = 237
  2840
  2841 2DBD AC 6B 4C			ldy ADDR+1
  2842 2DC0 84 83			sty :bp+1
  2843 2DC2 AC 6A 4C			ldy ADDR
  2844 2DC5 A9 80			lda #$80
  2845 2DC7 91 82			sta (:bp),y
  2846
  2847 				; optimize FAIL (0, DISPLAYLIST), line = 238
  2848
  2849 2DC9 EE 6A 4C			inc ADDR
  2850 2DCC D0 03			sne
  2851 2DCE EE 6B 4C			inc ADDR+1
  2852 2DD1			@exit
  2853 					.ifdef @new
  2854 					lda <@VarData
  2855 					sta :ztmp
  2856 					lda >@VarData
  2857 					ldy #@VarDataSize-1
  2858 					jmp @FreeMem
  2859 					els
  2860 2DD1 60				rts						; ret
  2861 					eif
  2862 				.endl
  2863 2DD2			l_05BC
  2864
  2865 				; optimize FAIL ('FILLDISPLAYLISTLINEADDRESSES', DISPLAYLIST), line = 244
  2866
  2867 2DD2 20 02 2C			jsr FILLDISPLAYLISTLINEADDRESSES
  2868
  2869 				; optimize FAIL ('FILLIMAGELINEADDRESSES', DISPLAYLIST), line = 245
  2870
  2871 2DD5 20 D0 2B			jsr FILLIMAGELINEADDRESSES
  2872
  2873 				; optimize OK (DISPLAYLIST), line = 247
  2874
  2875 2DD8 A9 00			lda #$00
  2876 2DDA 8D 6A 4C			sta ADDR
  2877 2DDD A9 80			lda #$80
  2878 2DDF 8D 6B 4C			sta ADDR+1
  2879
  2880 				; optimize FAIL ('INSERTEMPTY8', DISPLAYLIST), line = 248
  2881
  2882 2DE2 20 7D 2C			jsr INSERTEMPTY8
  2883
  2884 				; optimize FAIL ('INSERTEMPTY8', DISPLAYLIST), line = 249
  2885
  2886 2DE5 20 7D 2C			jsr INSERTEMPTY8
  2887
  2888 				; optimize FAIL ('INSERTEMPTY8', DISPLAYLIST), line = 250
  2889
  2890 2DE8 20 7D 2C			jsr INSERTEMPTY8
  2891
  2892 				; optimize FAIL ('INSERTTEXTFIELD', DISPLAYLIST), line = 251
  2893
  2894 2DEB 20 DA 2C			jsr INSERTTEXTFIELD
  2895
  2896 				; optimize FAIL ('INSERTEMPTY3DLI', DISPLAYLIST), line = 252
  2897
  2898 2DEE 20 68 2C			jsr INSERTEMPTY3DLI
  2899
  2900 				; optimize OK (DISPLAYLIST), line = 253
  2901
  2902 2DF1 A9 00			lda #$00
  2903 2DF3 8D 6D 4C			sta I
  2904
  2905 2DF6			l_0684
  2906 				; --- ForToDoCondition
  2907 2DF6 AD 6D 4C			lda I
  2908 2DF9 C9 A0			cmp #$A0
  2909 2DFB B0 08			jcs l_0692
  2910
  2911 				; optimize OK (DISPLAYLIST), line = 255
  2912
  2913 2DFD 20 92 2C			jsr INSERTLINE
  2914
  2915 				; --- ForToDoEpilog
  2916 2E00 EE 6D 4C			inc I
  2917 2E03 D0 F1			jne l_0684
  2918 2E05			l_0692
  2919
  2920 				; optimize FAIL ('INSERTJVB', DISPLAYLIST), line = 257
  2921
  2922 2E05 20 95 2D			jsr INSERTJVB
  2923
  2924 				; ------------------------------------------------------------
  2925
  2926 = 4C6A			ADDR	= DATAORIGIN+$03A2
  2927 = 4C6D			I	= DATAORIGIN+$03A5
  2928
  2929 = 4C6A			@VarData	= ADDR
  2930 = 0003			@VarDataSize	= 3
  2931
  2932 2E08			@exit
  2933 					.ifdef @new
  2934 					lda <@VarData
  2935 					sta :ztmp
  2936 					lda >@VarData
  2937 					ldy #@VarDataSize-1
  2938 					jmp @FreeMem
  2939 					els
  2940 2E08 60				rts						; ret
  2941 					eif
  2942 				.endl
  2943
  2944 2E09			.local	CHANGETOMODE					; PROCEDURE
  2945 2E09 8D 6E 4C			sta MODE
  2946
  2947 				; optimize OK (DISPLAYLIST), line = 267
  2948
  2949 2E0C 29 0F			and #$0F
  2950 2E0E 8D 6E 4C			sta MODE
  2951
  2952 				; optimize OK (DISPLAYLIST), line = 268
  2953
  2954 2E11 09 40			ora #$40
  2955 2E13 8D 6E 4C			sta MODE
  2956
  2957 				; optimize OK (DISPLAYLIST), line = 269
  2958
  2959 2E16 A9 0F			lda #$0F
  2960 2E18 8D 70 4C			sta ADDR
  2961 2E1B A9 80			lda #$80
  2962 2E1D 8D 71 4C			sta ADDR+1
  2963
  2964 				; optimize OK (DISPLAYLIST), line = 270
  2965
  2966 2E20 A9 00			lda #$00
  2967 2E22 8D 6F 4C			sta I
  2968
  2969 2E25			l_06C1
  2970 				; --- ForToDoCondition
  2971 2E25 AD 6F 4C			lda I
  2972 2E28 C9 A0			cmp #$A0
  2973 2E2A B0 1E			jcs l_06CF
  2974
  2975 				; optimize OK (DISPLAYLIST), line = 272
  2976
  2977 2E2C AC 71 4C			ldy ADDR+1
  2978 2E2F 84 83			sty :bp+1
  2979 2E31 AC 70 4C			ldy ADDR
  2980 2E34 AD 6E 4C			lda MODE
  2981 2E37 91 82			sta (:bp),y
  2982
  2983 				; optimize OK (DISPLAYLIST), line = 273
  2984
  2985 2E39 98				tya
  2986 2E3A 18 69 03			add #$03
  2987 2E3D 8D 70 4C			sta ADDR
  2988 2E40 90 03			scc
  2989 2E42 EE 71 4C			inc ADDR+1
  2990
  2991 				; --- ForToDoEpilog
  2992 2E45 EE 6F 4C			inc I
  2993 2E48 D0 DB			jne l_06C1
  2994 2E4A			l_06CF
  2995
  2996 				; ------------------------------------------------------------
  2997
  2998 = 4C6E			MODE	= DATAORIGIN+$03A6
  2999 = 800F			FIRST_ADDR	= $800F
  3000 = 4C6F			I	= DATAORIGIN+$03A7
  3001 = 4C70			ADDR	= DATAORIGIN+$03A8
  3002
  3003 = 4C6E			@VarData	= MODE
  3004 = 0004			@VarDataSize	= 4
  3005
  3006 2E4A			@exit
  3007 					.ifdef @new
  3008 					lda <@VarData
  3009 					sta :ztmp
  3010 					lda >@VarData
  3011 					ldy #@VarDataSize-1
  3012 					jmp @FreeMem
  3013 					els
  3014 2E4A 60				rts						; ret
  3015 					eif
  3016 				.endl
  3017
  3018 2E4B			.local	INITPM						; PROCEDURE
  3019
  3020 				; optimize OK (DISPLAYLIST), line = 283
  3021
  3022 2E4B A9 00			lda #$00
  3023 2E4D 85 8A			sta SYSTEM.FILLCHAR_0057.A
  3024 2E4F A9 84			lda #$84
  3025 2E51 85 8B			sta SYSTEM.FILLCHAR_0057.A+1
  3026 2E53 A9 00			lda #$00
  3027 2E55 85 8E			sta SYSTEM.FILLCHAR_0057.COUNT
  3028 2E57 A9 04			lda #$04
  3029 2E59 85 8F			sta SYSTEM.FILLCHAR_0057.COUNT+1
  3030 2E5B A9 00			lda #$00
  3031 2E5D 85 86			sta SYSTEM.FILLCHAR_0057.VALUE
  3032 2E5F				.local +MAIN.SYSTEM.FILLCHAR_0057
  3033 2E5F				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0057.M@INLINE [Source: SortViz.a65]
     4 2E5F 20 0E 22			jsr @fill
Source: SortViz.a65
  3034 					.endl
  3035
  3036 				; optimize OK (DISPLAYLIST), line = 284
  3037
  3038 2E62 A9 FC			lda #$FC
  3039 2E64 A0 07			ldy #$07
  3040 2E66 99 36 84 88 10 FA		sta:rpl $8436,y-
  3041
  3042 				; optimize OK (DISPLAYLIST), line = 285
  3043
  3044 2E6C A9 FC			lda #$FC
  3045 2E6E A0 07			ldy #$07
  3046 2E70 99 36 85 88 10 FA		sta:rpl $8536,y-
  3047
  3048 				; ------------------------------------------------------------
  3049
  3050 = 0036			OFFSET	= $36
  3051 = 8436			P0_ADDR	= $8436
  3052 = 8536			P1_ADDR	= $8536
  3053 2E76			@exit
  3054 					.ifdef @new
  3055 					lda <@VarData
  3056 					sta :ztmp
  3057 					lda >@VarData
  3058 					ldy #@VarDataSize-1
  3059 					jmp @FreeMem
  3060 					els
  3061 2E76 60				rts						; ret
  3062 					eif
  3063 				.endl
  3064
  3065 2E77			.local	INITSCREEN					; PROCEDURE
  3066
  3067 				; optimize OK (DISPLAYLIST), line = 290
  3068
  3069 2E77 AD 2F 02			lda CORE.SDMCTL
  3070 2E7A 8D 58 4C			sta OLDSDMCTL
  3071
  3072 				; optimize OK (DISPLAYLIST), line = 291
  3073
  3074 2E7D A9 00			lda #$00
  3075 2E7F 8D 2F 02			sta CORE.SDMCTL
  3076
  3077 				; optimize FAIL ('FILLDISPLAYLIST', DISPLAYLIST), line = 293
  3078
  3079 2E82 20 50 2C			jsr FILLDISPLAYLIST
  3080
  3081 				; optimize OK (DISPLAYLIST), line = 295
  3082
  3083 2E85 AD 30 02			lda CORE.SDLSTL
  3084 2E88 8D 59 4C			sta OLDSDLSTL
  3085
  3086 				; optimize OK (DISPLAYLIST), line = 296
  3087
  3088 2E8B A9 00			lda #$00
  3089 2E8D 8D 30 02			sta CORE.SDLSTL
  3090 2E90 A9 80			lda #$80
  3091 2E92 8D 31 02			sta CORE.SDLSTL+1
  3092
  3093 				; optimize OK (DISPLAYLIST), line = 298
  3094
  3095 2E95 AD F4 02			lda CORE.CHBAS
  3096 2E98 8D 5B 4C			sta OLDCHBASE
  3097
  3098 				; optimize OK (DISPLAYLIST), line = 299
  3099
  3100 2E9B A9 64			lda #$64
  3101 2E9D 8D F4 02			sta CORE.CHBAS
  3102
  3103 				; optimize OK (DISPLAYLIST), line = 301
  3104
  3105 2EA0 AD 07 D4			lda CORE.PMBASE
  3106 2EA3 8D 5A 4C			sta OLDPMBASE
  3107
  3108 				; optimize OK (DISPLAYLIST), line = 302
  3109
  3110 2EA6 A9 80			lda #$80
  3111 2EA8 8D 07 D4			sta CORE.PMBASE
  3112
  3113 				; optimize FAIL ('INITPM', DISPLAYLIST), line = 303
  3114
  3115 2EAB 20 4B 2E			jsr INITPM
  3116
  3117 				; optimize OK (DISPLAYLIST), line = 305
  3118
  3119 2EAE A9 03			lda #$03
  3120 2EB0 8D 1D D0			sta CORE.GRACTL
  3121
  3122 				; optimize OK (DISPLAYLIST), line = 307
  3123
  3124 2EB3 8D 08 D0			sta CORE.SIZEP0
  3125
  3126 				; optimize OK (DISPLAYLIST), line = 308
  3127
  3128 2EB6 A9 20			lda #$20
  3129 2EB8 8D 00 D0			sta CORE.HPOSP0
  3130
  3131 				; optimize OK (DISPLAYLIST), line = 309
  3132
  3133 2EBB A9 00			lda #$00
  3134 2EBD 8D C0 02			sta CORE.PCOLR0
  3135
  3136 				; optimize OK (DISPLAYLIST), line = 311
  3137
  3138 2EC0 A9 03			lda #$03
  3139 2EC2 8D 09 D0			sta CORE.SIZEP1
  3140
  3141 				; optimize OK (DISPLAYLIST), line = 312
  3142
  3143 2EC5 A9 20			lda #$20
  3144 2EC7 8D 01 D0			sta CORE.HPOSP1
  3145
  3146 				; optimize OK (DISPLAYLIST), line = 313
  3147
  3148 2ECA A9 00			lda #$00
  3149 2ECC 8D C1 02			sta CORE.PCOLR1
  3150
  3151 				; optimize OK (DISPLAYLIST), line = 315
  3152
  3153 2ECF A9 03			lda #$03
  3154 2ED1 8D 0A D0			sta CORE.SIZEP2
  3155
  3156 				; optimize OK (DISPLAYLIST), line = 316
  3157
  3158 2ED4 A9 C0			lda #$C0
  3159 2ED6 8D 02 D0			sta CORE.HPOSP2
  3160
  3161 				; optimize OK (DISPLAYLIST), line = 317
  3162
  3163 2ED9 A9 00			lda #$00
  3164 2EDB 8D C2 02			sta CORE.PCOLR2
  3165
  3166 				; optimize OK (DISPLAYLIST), line = 319
  3167
  3168 2EDE A9 03			lda #$03
  3169 2EE0 8D 0B D0			sta CORE.SIZEP3
  3170
  3171 				; optimize OK (DISPLAYLIST), line = 320
  3172
  3173 2EE3 A9 C0			lda #$C0
  3174 2EE5 8D 03 D0			sta CORE.HPOSP3
  3175
  3176 				; optimize OK (DISPLAYLIST), line = 321
  3177
  3178 2EE8 A9 00			lda #$00
  3179 2EEA 8D C3 02			sta CORE.PCOLR3
  3180
  3181 				; optimize OK (DISPLAYLIST), line = 323
  3182
  3183 2EED A9 0C			lda #$0C
  3184 2EEF 8D C5 02			sta CORE.COLOR1
  3185
  3186 				; optimize OK (DISPLAYLIST), line = 324
  3187
  3188 2EF2 A9 00			lda #$00
  3189 2EF4 8D C6 02			sta CORE.COLOR2
  3190
  3191 				; optimize OK (DISPLAYLIST), line = 326
  3192
  3193 2EF7 8D 5C 4C			sta OLDDLI
  3194 2EFA 8D 5D 4C			sta OLDDLI+1
  3195
  3196 2EFD AD 00 02			lda VDSLST
  3197 2F00 8D 5C 4C			sta OLDDLI
  3198 2F03 AD 01 02			lda VDSLST+1
  3199 2F06 8D 5D 4C			sta OLDDLI+1
  3200
  3201 				; optimize OK (DISPLAYLIST), line = 328
  3202
  3203 2F09 A9 47 8D 00 02		mva <DLI VDSLST
  3204 2F0E A9 2B 8D 01 02		mva >DLI VDSLST+1
  3205
  3206 				; optimize OK (DISPLAYLIST), line = 330
  3207
  3208 2F13 A9 00			lda #$00
  3209 2F15 8D 5E 4C			sta OLDVBL
  3210 2F18 8D 5F 4C			sta OLDVBL+1
  3211
  3212 2F1B AD 24 02			lda VVBLKD
  3213 2F1E 8D 5E 4C			sta OLDVBL
  3214 2F21 AD 25 02			lda VVBLKD+1
  3215 2F24 8D 5F 4C			sta OLDVBL+1
  3216
  3217 				; optimize OK (DISPLAYLIST), line = 332
  3218
  3219 2F27 A9 69			lda <VBL
  3220 2F29 A0 05			ldy #5
  3221 2F2B 8D 0A D4			sta wsync
  3222 2F2E 88				dey
  3223 2F2F D0 FD			rne
  3224 2F31 8D 24 02			sta VVBLKD
  3225 2F34 A9 2B			lda >VBL
  3226 2F36 8D 25 02			sta VVBLKD+1
  3227
  3228 				; optimize OK (DISPLAYLIST), line = 334
  3229
  3230 2F39 A9 C0			lda #$C0
  3231 2F3B 8D 0E D4			sta CORE.NMIEN
  3232
  3233 				; optimize OK (DISPLAYLIST), line = 336
  3234
  3235 2F3E A9 3A			lda #$3A
  3236 2F40 8D 2F 02			sta CORE.SDMCTL
  3237 2F43			@exit
  3238 					.ifdef @new
  3239 					lda <@VarData
  3240 					sta :ztmp
  3241 					lda >@VarData
  3242 					ldy #@VarDataSize-1
  3243 					jmp @FreeMem
  3244 					els
  3245 2F43 60				rts						; ret
  3246 					eif
  3247 				.endl
  3248
  3249 2F44			.local	CLOSESCREEN					; PROCEDURE
  3250
  3251 				; optimize OK (DISPLAYLIST), line = 341
  3252
  3253 2F44 A9 00			lda #$00
  3254 2F46 8D 0E D4			sta CORE.NMIEN
  3255
  3256 				; optimize OK (DISPLAYLIST), line = 342
  3257
  3258 2F49 AD 5E 4C			lda OLDVBL
  3259 2F4C A0 05			ldy #5
  3260 2F4E 8D 0A D4			sta wsync
  3261 2F51 88				dey
  3262 2F52 D0 FD			rne
  3263 2F54 8D 24 02			sta VVBLKD
  3264 2F57 AD 5F 4C			lda OLDVBL+1
  3265 2F5A 8D 25 02			sta VVBLKD+1
  3266
  3267 				; optimize OK (DISPLAYLIST), line = 343
  3268
  3269 2F5D AD 5C 4C 8D 00 02		mva OLDDLI VDSLST
  3270 2F63 AD 5D 4C 8D 01 02		mva OLDDLI+1 VDSLST+1
  3271
  3272 				; optimize OK (DISPLAYLIST), line = 345
  3273
  3274 2F69 A9 00			lda #$00
  3275 2F6B 8D 00 D0			sta CORE.HPOSP0
  3276
  3277 				; optimize OK (DISPLAYLIST), line = 346
  3278
  3279 2F6E 8D 01 D0			sta CORE.HPOSP1
  3280
  3281 				; optimize OK (DISPLAYLIST), line = 347
  3282
  3283 2F71 8D 02 D0			sta CORE.HPOSP2
  3284
  3285 				; optimize OK (DISPLAYLIST), line = 348
  3286
  3287 2F74 8D 03 D0			sta CORE.HPOSP3
  3288
  3289 				; optimize OK (DISPLAYLIST), line = 350
  3290
  3291 2F77 AD 59 4C			lda OLDSDLSTL
  3292 2F7A 8D 30 02			sta CORE.SDLSTL
  3293 2F7D A9 00			lda #$00
  3294 2F7F 8D 31 02			sta CORE.SDLSTL+1
  3295
  3296 				; optimize OK (DISPLAYLIST), line = 351
  3297
  3298 2F82 AD 58 4C			lda OLDSDMCTL
  3299 2F85 8D 2F 02			sta CORE.SDMCTL
  3300
  3301 				; optimize OK (DISPLAYLIST), line = 352
  3302
  3303 2F88 AD 5A 4C			lda OLDPMBASE
  3304 2F8B 8D 07 D4			sta CORE.PMBASE
  3305
  3306 				; optimize OK (DISPLAYLIST), line = 353
  3307
  3308 2F8E AD 5B 4C			lda OLDCHBASE
  3309 2F91 8D F4 02			sta CORE.CHBAS
  3310 2F94			@exit
  3311 					.ifdef @new
  3312 					lda <@VarData
  3313 					sta :ztmp
  3314 					lda >@VarData
  3315 					ldy #@VarDataSize-1
  3316 					jmp @FreeMem
  3317 					els
  3318 2F94 60				rts						; ret
  3319 					eif
  3320 				.endl
  3321
  3322 2F95			.local	INITCOLORS					; PROCEDURE
  3323
  3324 				; optimize OK (DISPLAYLIST), line = 358
  3325
  3326 2F95 AD F6 4B			lda CORE.REDCOLOR
  3327 2F98 8D C0 02			sta CORE.PCOLR0
  3328
  3329 				; optimize OK (DISPLAYLIST), line = 359
  3330
  3331 2F9B AD F7 4B			lda CORE.GREENCOLOR
  3332 2F9E 8D C1 02			sta CORE.PCOLR1
  3333
  3334 				; optimize OK (DISPLAYLIST), line = 360
  3335
  3336 2FA1 AD F6 4B			lda CORE.REDCOLOR
  3337 2FA4 8D C2 02			sta CORE.PCOLR2
  3338
  3339 				; optimize OK (DISPLAYLIST), line = 361
  3340
  3341 2FA7 AD F7 4B			lda CORE.GREENCOLOR
  3342 2FAA 8D C3 02			sta CORE.PCOLR3
  3343 2FAD			@exit
  3344 					.ifdef @new
  3345 					lda <@VarData
  3346 					sta :ztmp
  3347 					lda >@VarData
  3348 					ldy #@VarDataSize-1
  3349 					jmp @FreeMem
  3350 					els
  3351 2FAD 60				rts						; ret
  3352 					eif
  3353 				.endl
  3354
  3355 				; ------------------------------------------------------------
  3356 				; ------------------------------------------------------------
  3357 2FAE			@UnitInit
  3358
  3359 				; optimize OK (DISPLAYLIST), line = 366
  3360
  3361 2FAE A9 02			lda #$02
  3362 2FB0 8D 60 4C			sta SCROLLDELAY
  3363
  3364 				; optimize OK (DISPLAYLIST), line = 367
  3365
  3366 2FB3 A9 0F			lda #$0F
  3367 2FB5 8D 61 4C			sta HORSCROLL
  3368
  3369 2FB8 60				rts
  3370
  3371 				; ------------------------------------------------------------
  3372
  3373 = 4C55			COLOR0VALUE	= DATAORIGIN+$038D
  3374 = 4C56			COLOR1VALUE	= DATAORIGIN+$038E
  3375 = 4C57			COLOR2VALUE	= DATAORIGIN+$038F
  3376 = 0020			ANTIC_EMPTY_3	= $20
  3377 = 0070			ANTIC_EMPTY_8	= $70
  3378 = 0002			ANTIC_MODE_2	= $02
  3379 = 000E			ANTIC_MODE_E	= $0E
  3380 = 000F			ANTIC_MODE_F	= $0F
  3381 = 0010			ANTIC_HS	= $10
  3382 = 0040			ANTIC_LMS	= $40
  3383 = 0080			ANTIC_DLI	= $80
  3384 = 00A0			ANTIC_EMPTY_3_DLI	= $A0
  3385 = 0042			ANTIC_MODE_2_LMS	= $42
  3386 = 0052			ANTIC_MODE_2_LMS_HS	= $52
  3387 = 004F			ANTIC_MODE_F_LMS	= $4F
  3388 = 004E			ANTIC_MODE_E_LMS	= $4E
  3389 = 0041			ANTIC_JVB	= $41
  3390 = 4C58			OLDSDMCTL	= DATAORIGIN+$0390
  3391 = 4C59			OLDSDLSTL	= DATAORIGIN+$0391
  3392 = 4C5A			OLDPMBASE	= DATAORIGIN+$0392
  3393 = 4C5B			OLDCHBASE	= DATAORIGIN+$0393
  3394 = 4C5C			OLDDLI	= DATAORIGIN+$0394
  3395 = 4C5E			OLDVBL	= DATAORIGIN+$0396
  3396 = 4C60			SCROLLDELAY	= DATAORIGIN+$0398
  3397 = 4C61			HORSCROLL	= DATAORIGIN+$0399
  3398 = 4C62			HORSCROLLADDR	= DATAORIGIN+$039A
  3399
  3400 				.endl							; UNIT DISPLAYLIST
  3401
  3402 				; ------------------------------------------------------------
  3403
  3404 2FB9			.local	IMAGEMANAGER					; UNIT
  3405
  3406 2FB9			.local	CLEARIMAGE					; PROCEDURE
  3407
  3408 				; optimize OK (IMAGEMANAGER), line = 23
  3409
  3410 2FB9 A9 00			lda #$00
  3411 2FBB 8D 55 4C			sta DISPLAYLIST.COLOR0VALUE
  3412
  3413 				; optimize OK (IMAGEMANAGER), line = 24
  3414
  3415 2FBE 8D 56 4C			sta DISPLAYLIST.COLOR1VALUE
  3416
  3417 				; optimize OK (IMAGEMANAGER), line = 25
  3418
  3419 2FC1 8D 57 4C			sta DISPLAYLIST.COLOR2VALUE
  3420
  3421 				; optimize OK (IMAGEMANAGER), line = 26
  3422
  3423 2FC4 85 8A			sta SYSTEM.FILLCHAR_0057.A
  3424 2FC6 A9 88			lda #$88
  3425 2FC8 85 8B			sta SYSTEM.FILLCHAR_0057.A+1
  3426 2FCA A9 00			lda #$00
  3427 2FCC 85 8E			sta SYSTEM.FILLCHAR_0057.COUNT
  3428 2FCE A9 14			lda #$14
  3429 2FD0 85 8F			sta SYSTEM.FILLCHAR_0057.COUNT+1
  3430 2FD2 A9 00			lda #$00
  3431 2FD4 85 86			sta SYSTEM.FILLCHAR_0057.VALUE
  3432 2FD6				.local +MAIN.SYSTEM.FILLCHAR_0057
  3433 2FD6				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0057.M@INLINE [Source: SortViz.a65]
     4 2FD6 20 0E 22			jsr @fill
Source: SortViz.a65
  3434 					.endl
  3435 2FD9			@exit
  3436 					.ifdef @new
  3437 					lda <@VarData
  3438 					sta :ztmp
  3439 					lda >@VarData
  3440 					ldy #@VarDataSize-1
  3441 					jmp @FreeMem
  3442 					els
  3443 2FD9 60				rts						; ret
  3444 					eif
  3445 				.endl
  3446
  3447 2FDA			.local	PREPARESPLASHSCREEN				; PROCEDURE
  3448
  3449 				; optimize OK (IMAGEMANAGER), line = 34
  3450
  3451 2FDA A9 00			lda #$00
  3452 2FDC 85 8A			sta SYSTEM.FILLCHAR_0057.A
  3453 2FDE A9 97			lda #$97
  3454 2FE0 85 8B			sta SYSTEM.FILLCHAR_0057.A+1
  3455 2FE2 A9 00			lda #$00
  3456 2FE4 85 8E			sta SYSTEM.FILLCHAR_0057.COUNT
  3457 2FE6 A9 05			lda #$05
  3458 2FE8 85 8F			sta SYSTEM.FILLCHAR_0057.COUNT+1
  3459 2FEA A9 00			lda #$00
  3460 2FEC 85 86			sta SYSTEM.FILLCHAR_0057.VALUE
  3461 2FEE				.local +MAIN.SYSTEM.FILLCHAR_0057
  3462 2FEE				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0057.M@INLINE [Source: SortViz.a65]
     4 2FEE 20 0E 22			jsr @fill
Source: SortViz.a65
  3463 					.endl
  3464
  3465 				; ------------------------------------------------------------
  3466
  3467 = 0500			SIZE	= $0500
  3468 = 9700			ADDR	= $9700
  3469 2FF1			@exit
  3470 					.ifdef @new
  3471 					lda <@VarData
  3472 					sta :ztmp
  3473 					lda >@VarData
  3474 					ldy #@VarDataSize-1
  3475 					jmp @FreeMem
  3476 					els
  3477 2FF1 60				rts						; ret
  3478 					eif
  3479 				.endl
  3480
  3481 2FF2			.local	COPYIMAGE					; PROCEDURE
  3482
  3483 				; optimize OK (IMAGEMANAGER), line = 39
  3484
  3485 2FF2 A9 0E			lda #$0E
  3486 2FF4 20 09 2E			jsr DISPLAYLIST.CHANGETOMODE
  3487
  3488 				; optimize OK (IMAGEMANAGER), line = 41
  3489
  3490 2FF7 A9 00			lda #$00
  3491 2FF9 85 8A			sta SYSTEM.MOVE_0058.SOURCE
  3492 2FFB A9 68			lda #$68
  3493 2FFD 85 8B			sta SYSTEM.MOVE_0058.SOURCE+1
  3494 2FFF A9 00			lda #$00
  3495 3001 85 8E			sta SYSTEM.MOVE_0058.DEST
  3496 3003 A9 88			lda #$88
  3497 3005 85 8F			sta SYSTEM.MOVE_0058.DEST+1
  3498 3007 A9 00			lda #$00
  3499 3009 85 86			sta SYSTEM.MOVE_0058.COUNT
  3500 300B A9 14			lda #$14
  3501 300D 85 87			sta SYSTEM.MOVE_0058.COUNT+1
  3502 300F				.local +MAIN.SYSTEM.MOVE_0058
  3503 300F				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0058.M@INLINE [Source: SortViz.a65]
     4 300F 20 B9 21			jsr @move
Source: SortViz.a65
  3504 					.endl
  3505
  3506 				; optimize OK (IMAGEMANAGER), line = 43
  3507
  3508 3012 AD 14 D0			lda CORE.PALNTS
  3509 3015 C9 0F			cmp #$0F
  3510 3017 D0 12			jne l_07FC
  3511
  3512 				; optimize OK (IMAGEMANAGER), line = 45
  3513
  3514 3019 A9 34			lda #$34
  3515 301B 8D 55 4C			sta DISPLAYLIST.COLOR0VALUE
  3516
  3517 				; optimize OK (IMAGEMANAGER), line = 46
  3518
  3519 301E A9 36			lda #$36
  3520 3020 8D 56 4C			sta DISPLAYLIST.COLOR1VALUE
  3521
  3522 				; optimize OK (IMAGEMANAGER), line = 47
  3523
  3524 3023 A9 3A			lda #$3A
  3525 3025 8D 57 4C			sta DISPLAYLIST.COLOR2VALUE
  3526 3028 4C 3A 30			jmp l_0812
  3527 302B			l_07FC
  3528
  3529 				; optimize OK (IMAGEMANAGER), line = 50
  3530
  3531 302B A9 14			lda #$14
  3532 302D 8D 55 4C			sta DISPLAYLIST.COLOR0VALUE
  3533
  3534 				; optimize OK (IMAGEMANAGER), line = 51
  3535
  3536 3030 A9 16			lda #$16
  3537 3032 8D 56 4C			sta DISPLAYLIST.COLOR1VALUE
  3538
  3539 				; optimize OK (IMAGEMANAGER), line = 52
  3540
  3541 3035 A9 1A			lda #$1A
  3542 3037 8D 57 4C			sta DISPLAYLIST.COLOR2VALUE
  3543 303A			l_0812
  3544
  3545 				; optimize OK (IMAGEMANAGER), line = 55
  3546
  3547 303A A9 02			lda #$02
  3548 303C 8D 72 4C			sta IMAGEKIND
  3549 303F			@exit
  3550 					.ifdef @new
  3551 					lda <@VarData
  3552 					sta :ztmp
  3553 					lda >@VarData
  3554 					ldy #@VarDataSize-1
  3555 					jmp @FreeMem
  3556 					els
  3557 303F 60				rts						; ret
  3558 					eif
  3559 				.endl
  3560
  3561 3040			.local	IMAGEPREPARETRIANGLE				; PROCEDURE
  3562
  3563 				; optimize OK (IMAGEMANAGER), line = 74
  3564
  3565 3040 A9 0F			lda #$0F
  3566 3042 20 09 2E			jsr DISPLAYLIST.CHANGETOMODE
  3567
  3568 				; optimize OK (IMAGEMANAGER), line = 76
  3569
  3570 3045 A9 00			lda #$00
  3571 3047 8D 73 4C			sta I
  3572
  3573 304A			l_0831
  3574 				; --- ForToDoCondition
  3575 304A AC 73 4C			ldy I
  3576 304D C0 A0			cpy #$A0
  3577 304F 90 03 4C DE 30		jcs l_083F
  3578
  3579 				; optimize OK (IMAGEMANAGER), line = 78
  3580
  3581 3054 B9 D5 48			lda CORE.adr.IMAGELINELOADDR,y
  3582 3057 85 9F			sta :STACKORIGIN+9
  3583 3059 B9 75 49			lda CORE.adr.IMAGELINEHIADDR,y
  3584 305C 85 8E			sta :ecx
  3585 305E A9 00			lda #$00
  3586 3060 85 8F			sta :ecx+1
  3587 3062 85 86			sta :eax
  3588 3064 A9 01			lda #$01
  3589 3066 85 87			sta :eax+1
  3590 					.ifdef fmulinit
  3591 					fmulu_16
  3592 					els
  3593 3068 20 D6 22			imulCX
  3594 					eif
  3595 306B A5 9F			lda :STACKORIGIN+9
  3596 306D 18 65 86			add :eax
  3597 3070 8D 76 4C			sta ADDR
  3598 3073 A9 00			lda #$00
  3599 3075 65 87			adc :eax+1
  3600 3077 8D 77 4C			sta ADDR+1
  3601
  3602 				; optimize OK (IMAGEMANAGER), line = 79
  3603
  3604 307A AD 73 4C			lda I
  3605 307D 4A				lsr @
  3606 307E 4A				lsr @
  3607 307F 4A				lsr @
  3608 3080 8D 75 4C			sta K
  3609
  3610 				; optimize OK (IMAGEMANAGER), line = 80
  3611
  3612 3083 F0 29			jeq l_0873
  3613
  3614 				; optimize OK (IMAGEMANAGER), line = 82
  3615
  3616 3085 A9 00			lda #$00
  3617 3087 8D 74 4C			sta J
  3618 308A AC 75 4C			ldy K
  3619 308D 88				dey
  3620 308E 8C 92 30			sty @FORTMP_0880_0
  3621
  3622 3091			l_0883
  3623 				; --- ForToDoCondition
  3624 3091 A9 00			lda @FORTMP_0880_0:#$00
  3625 3093 CD 74 4C			cmp J
  3626 3096 90 16			jcc l_0891
  3627
  3628 				; optimize OK (IMAGEMANAGER), line = 84
  3629
  3630 3098 AC 76 4C 84 84 AC + 	mwy ADDR :bp2
  3631 30A2 AC 74 4C			ldy J
  3632 30A5 A9 FF			lda #$FF
  3633 30A7 91 84			sta (:bp2),y
  3634
  3635 				; --- ForToDoEpilog
  3636 30A9 EE 74 4C			inc J
  3637 30AC D0 E3			jne l_0883
  3638 30AE			l_0891
  3639 30AE			l_0873
  3640
  3641 				; optimize OK (IMAGEMANAGER), line = 87
  3642
  3643 30AE AD 76 4C			lda ADDR
  3644 30B1 18 6D 75 4C			add K
  3645 30B5 8D 76 4C			sta ADDR
  3646 30B8 90 03			scc
  3647 30BA EE 77 4C			inc ADDR+1
  3648
  3649 				; optimize OK (IMAGEMANAGER), line = 88
  3650
  3651 30BD AD 73 4C			lda I
  3652 30C0 29 07			and #$07
  3653 30C2 A8				tay
  3654 30C3 B9 57 20			lda adr.VALUES,y
  3655 30C6 8D 78 4C			sta VAL
  3656
  3657 				; optimize OK (IMAGEMANAGER), line = 89
  3658
  3659 30C9 AC 77 4C			ldy ADDR+1
  3660 30CC 84 83			sty :bp+1
  3661 30CE AC 76 4C			ldy ADDR
  3662 30D1 AD 78 4C			lda VAL
  3663 30D4 91 82			sta (:bp),y
  3664
  3665 				; --- ForToDoEpilog
  3666 30D6 EE 73 4C			inc I
  3667 30D9 F0 03 4C 4A 30		jne l_0831
  3668 30DE			l_083F
  3669
  3670 				; optimize OK (IMAGEMANAGER), line = 92
  3671
  3672 30DE AD 14 D0			lda CORE.PALNTS
  3673 30E1 C9 0F			cmp #$0F
  3674 30E3 D0 0D			jne l_08D4
  3675
  3676 				; optimize OK (IMAGEMANAGER), line = 94
  3677
  3678 30E5 A9 9C			lda #$9C
  3679 30E7 8D 56 4C			sta DISPLAYLIST.COLOR1VALUE
  3680
  3681 				; optimize OK (IMAGEMANAGER), line = 95
  3682
  3683 30EA A9 90			lda #$90
  3684 30EC 8D 57 4C			sta DISPLAYLIST.COLOR2VALUE
  3685 30EF 4C FC 30			jmp l_08E6
  3686 30F2			l_08D4
  3687
  3688 				; optimize OK (IMAGEMANAGER), line = 98
  3689
  3690 30F2 A9 7C			lda #$7C
  3691 30F4 8D 56 4C			sta DISPLAYLIST.COLOR1VALUE
  3692
  3693 				; optimize OK (IMAGEMANAGER), line = 99
  3694
  3695 30F7 A9 70			lda #$70
  3696 30F9 8D 57 4C			sta DISPLAYLIST.COLOR2VALUE
  3697 30FC			l_08E6
  3698
  3699 				; optimize OK (IMAGEMANAGER), line = 102
  3700
  3701 30FC A9 01			lda #$01
  3702 30FE 8D 72 4C			sta IMAGEKIND
  3703
  3704 				; ------------------------------------------------------------
  3705
  3706 = 4C73			I	= DATAORIGIN+$03AB
  3707 = 4C74			J	= DATAORIGIN+$03AC
  3708 = 4C75			K	= DATAORIGIN+$03AD
  3709 = 4C76			ADDR	= DATAORIGIN+$03AE
  3710 = 4C78			VAL	= DATAORIGIN+$03B0
  3711 = 2057			adr.VALUES	= CODEORIGIN+$0057
  3712 3101			.var VALUES	= adr.VALUES .word
  3713
  3714 = 4C73			@VarData	= I
  3715 = 0006			@VarDataSize	= 6
  3716
  3717 3101			@exit
  3718 					.ifdef @new
  3719 					lda <@VarData
  3720 					sta :ztmp
  3721 					lda >@VarData
  3722 					ldy #@VarDataSize-1
  3723 					jmp @FreeMem
  3724 					els
  3725 3101 60				rts						; ret
  3726 					eif
  3727 = 3102 57 20		VALUES
  3727 				.endl
  3728
  3729 3104			.local	NEXTIMAGE					; PROCEDURE
  3730
  3731 				; optimize FAIL ('CLEARIMAGE', IMAGEMANAGER), line = 107
  3732
  3733 3104 20 B9 2F			jsr CLEARIMAGE
  3734
  3735 				; optimize OK (IMAGEMANAGER), line = 109
  3736
  3737 3107 AD 72 4C			lda IMAGEKIND
  3738 310A 8D 7A 4C			sta @CASETMP_0003
  3739 310D C9 00			cmp #$00
  3740 310F F0 04			beq @+
  3741 3111 C9 02			cmp #$02
  3742 3113 D0 06			jne l_0904
  3743 				@
  3744
  3745 				; optimize FAIL ('IMAGEPREPARETRIANGLE', IMAGEMANAGER), line = 110
  3746
  3747 3115 20 40 30			jsr IMAGEPREPARETRIANGLE
  3748 3118 4C 22 31			jmp a_0003
  3749 311B			l_0904
  3750 311B C9 01			cmp #$01
  3751 311D D0 03			jne l_090E
  3752 				@
  3753
  3754 				; optimize FAIL ('COPYIMAGE', IMAGEMANAGER), line = 111
  3755
  3756 311F 20 F2 2F			jsr COPYIMAGE
  3757 3122			l_090E
  3758 3122			a_0003
  3759
  3760 				; ------------------------------------------------------------
  3761
  3762 = 4C7A			@CASETMP_0003	= DATAORIGIN+$03B2
  3763
  3764 = 4C7A			@VarData	= @CASETMP_0003
  3765 = 0001			@VarDataSize	= 1
  3766
  3767 3122			@exit
  3768 					.ifdef @new
  3769 					lda <@VarData
  3770 					sta :ztmp
  3771 					lda >@VarData
  3772 					ldy #@VarDataSize-1
  3773 					jmp @FreeMem
  3774 					els
  3775 3122 60				rts						; ret
  3776 					eif
  3777 				.endl
  3778
  3779 				; ------------------------------------------------------------
  3780 				; ------------------------------------------------------------
  3781 3123			@UnitInit
  3782
  3783 				; optimize OK (IMAGEMANAGER), line = 117
  3784
  3785 3123 A9 00			lda #$00
  3786 3125 8D 55 4C			sta DISPLAYLIST.COLOR0VALUE
  3787
  3788 				; optimize OK (IMAGEMANAGER), line = 118
  3789
  3790 3128 8D 56 4C			sta DISPLAYLIST.COLOR1VALUE
  3791
  3792 				; optimize OK (IMAGEMANAGER), line = 119
  3793
  3794 312B 8D 57 4C			sta DISPLAYLIST.COLOR2VALUE
  3795
  3796 				; optimize FAIL ('PREPARESPLASHSCREEN', IMAGEMANAGER), line = 120
  3797
  3798 312E 20 DA 2F			jsr PREPARESPLASHSCREEN
  3799
  3800 				; optimize OK (IMAGEMANAGER), line = 121
  3801
  3802 3131 A9 00			lda #$00
  3803 3133 8D 72 4C			sta IMAGEKIND
  3804
  3805 3136 60				rts
  3806
  3807 				; ------------------------------------------------------------
  3808
  3809 = 4C72			IMAGEKIND	= DATAORIGIN+$03AA
  3810
  3811 				.endl							; UNIT IMAGEMANAGER
  3812
  3813 				; ------------------------------------------------------------
  3814
  3815 3137			.local	ARRAYACCESS					; UNIT
  3816
  3817 3137			.local	CLEAR						; PROCEDURE
  3818
  3819 				; optimize FAIL ('CRT.NOSOUND', ARRAYACCESS), line = 43
  3820
  3821 3137 20 75 25			jsr CRT.NOSOUND
  3822
  3823 				; optimize OK (ARRAYACCESS), line = 44
  3824
  3825 313A A9 00			lda #$00
  3826 313C A0 60			ldy #256-160
  3827 313E 99 E1 83 C8 D0 FA		sta:rne $8441+160-256,y+
  3828
  3829 				; optimize OK (ARRAYACCESS), line = 45
  3830
  3831 3144 A9 00			lda #$00
  3832 3146 A0 60			ldy #256-160
  3833 3148 99 E1 84 C8 D0 FA		sta:rne $8541+160-256,y+
  3834
  3835 				; optimize OK (ARRAYACCESS), line = 46
  3836
  3837 314E A9 00			lda #$00
  3838 3150 A0 60			ldy #256-160
  3839 3152 99 E1 85 C8 D0 FA		sta:rne $8641+160-256,y+
  3840
  3841 				; optimize OK (ARRAYACCESS), line = 47
  3842
  3843 3158 A9 00			lda #$00
  3844 315A A0 60			ldy #256-160
  3845 315C 99 E1 86 C8 D0 FA		sta:rne $8741+160-256,y+
  3846
  3847 				; optimize OK (ARRAYACCESS), line = 48
  3848
  3849 3162 A9 7D			lda <adr.MARKERS
  3850 3164 85 84			sta :bp2
  3851 3166 A9 4C			lda >adr.MARKERS
  3852 3168 85 85			sta :bp2+1
  3853 316A A9 00			lda #$00
  3854 316C A0 09			ldy #$09
  3855 316E 91 84 88 10 FB		sta:rpl (:bp2),y-
  3856
  3857 				; optimize OK (ARRAYACCESS), line = 49
  3858
  3859 3173 A9 00			lda #$00
  3860 3175 8D 91 4C			sta MARKERINDEX
  3861
  3862 				; ------------------------------------------------------------
  3863
  3864 = 8441			P0_ADDR	= $8441
  3865 = 8541			P1_ADDR	= $8541
  3866 = 8641			P2_ADDR	= $8641
  3867 = 8741			P3_ADDR	= $8741
  3868 3178			@exit
  3869 					.ifdef @new
  3870 					lda <@VarData
  3871 					sta :ztmp
  3872 					lda >@VarData
  3873 					ldy #@VarDataSize-1
  3874 					jmp @FreeMem
  3875 					els
  3876 3178 60				rts						; ret
  3877 					eif
  3878 				.endl
  3879
  3880 3179			.local	ABORTPROCESSING					; PROCEDURE
  3881
  3882 				; optimize FAIL ('CRT.NOSOUND', ARRAYACCESS), line = 54
  3883
  3884 3179 20 75 25			jsr CRT.NOSOUND
  3885
  3886 				; optimize OK (ARRAYACCESS), line = 55
  3887
  3888 317C A9 01			lda #$01
  3889 317E 8D 07 4C			sta OPERATION.ABORTED
  3890 3181			@exit
  3891 					.ifdef @new
  3892 					lda <@VarData
  3893 					sta :ztmp
  3894 					lda >@VarData
  3895 					ldy #@VarDataSize-1
  3896 					jmp @FreeMem
  3897 					els
  3898 3181 60				rts						; ret
  3899 					eif
  3900 				.endl
  3901
  3902 3182			.local	PAUSEPROCESSING					; PROCEDURE
  3903
  3904 				; optimize FAIL ('CRT.NOSOUND', ARRAYACCESS), line = 62
  3905
  3906 3182 20 75 25			jsr CRT.NOSOUND
  3907
  3908 				; optimize OK (ARRAYACCESS), line = 63
  3909
  3910 3185 A9 03			lda #$03
  3911 3187 8D 01 4C			sta OPERATION.WORKINGMODE
  3912
  3913 				; optimize FAIL ('STATUS.UPDATESTATUS', ARRAYACCESS), line = 64
  3914
  3915 318A 20 B3 29			jsr STATUS.UPDATESTATUS
  3916
  3917 				; --- WhileProlog
  3918 318D 4C AD 31			jmp l_0958
  3919 3190			l_0959
  3920
  3921 				; optimize FAIL ('KEYBOARD.GETKEY', ARRAYACCESS), line = 68
  3922
  3923 3190 20 D1 25			jsr KEYBOARD.GETKEY
  3924 3193 AD 00 4C			lda KEYBOARD.GETKEY.RESULT
  3925 3196 8D 92 4C			sta KEY
  3926
  3927 				; optimize OK (ARRAYACCESS), line = 69
  3928
  3929 3199 C9 1C			cmp #$1C
  3930 319B D0 06			jne l_096F
  3931
  3932 				; optimize FAIL ('ABORTPROCESSING', ARRAYACCESS), line = 71
  3933
  3934 319D 20 79 31			jsr ABORTPROCESSING
  3935 31A0 4C B0 31			jmp b_0959					; break
  3936 31A3			l_096F
  3937
  3938 				; optimize OK (ARRAYACCESS), line = 74
  3939
  3940 31A3 AD 92 4C			lda KEY
  3941 31A6 C9 21			cmp #$21
  3942 31A8 D0 03			jne l_098C
  3943 31AA 4C B0 31			jmp b_0959					; break
  3944 31AD			l_098C
  3945 31AD			l_097A
  3946 31AD			l_0958
  3947
  3948 				; optimize OK (ARRAYACCESS), line = 66
  3949
  3950 31AD 4C 90 31			jmp l_0959
  3951 31B0			b_0959
  3952
  3953 				; optimize OK (ARRAYACCESS), line = 80
  3954
  3955 31B0 A9 02			lda #$02
  3956 31B2 8D 01 4C			sta OPERATION.WORKINGMODE
  3957
  3958 				; optimize FAIL ('STATUS.UPDATESTATUS', ARRAYACCESS), line = 81
  3959
  3960 31B5 20 B3 29			jsr STATUS.UPDATESTATUS
  3961
  3962 				; ------------------------------------------------------------
  3963
  3964 = 4C92			KEY	= DATAORIGIN+$03CA
  3965
  3966 = 4C92			@VarData	= KEY
  3967 = 0001			@VarDataSize	= 1
  3968
  3969 31B8			@exit
  3970 					.ifdef @new
  3971 					lda <@VarData
  3972 					sta :ztmp
  3973 					lda >@VarData
  3974 					ldy #@VarDataSize-1
  3975 					jmp @FreeMem
  3976 					els
  3977 31B8 60				rts						; ret
  3978 					eif
  3979 				.endl
  3980
  3981 31B9			.local	CHECKKEYBOARD					; PROCEDURE
  3982
  3983 				; optimize FAIL ('CRT.KEYPRESSED', ARRAYACCESS), line = 88
  3984
  3985 31B9 20 67 25			jsr CRT.KEYPRESSED
  3986 31BC AD FB 4B			lda CRT.KEYPRESSED.RESULT
  3987 31BF F0 34			jeq l_09A6
  3988
  3989 				; optimize FAIL ('KEYBOARD.GETKEY', ARRAYACCESS), line = 90
  3990
  3991 31C1 20 D1 25			jsr KEYBOARD.GETKEY
  3992 31C4 AD 00 4C			lda KEYBOARD.GETKEY.RESULT
  3993 31C7 8D 93 4C			sta KEY
  3994
  3995 				; optimize OK (ARRAYACCESS), line = 91
  3996
  3997 31CA 8D 94 4C			sta @CASETMP_0004
  3998 31CD C9 0E			cmp #$0E
  3999 31CF D0 06			jne l_09B6
  4000 				@
  4001
  4002 				; optimize FAIL ('DECREASEDELAY', ARRAYACCESS), line = 92
  4003
  4004 31D1 20 09 34			jsr DECREASEDELAY
  4005 31D4 4C F5 31			jmp a_0004
  4006 31D7			l_09B6
  4007 31D7 C9 06			cmp #$06
  4008 31D9 D0 06			jne l_09C0
  4009 				@
  4010
  4011 				; optimize FAIL ('INCREASEDELAY', ARRAYACCESS), line = 93
  4012
  4013 31DB 20 1E 34			jsr INCREASEDELAY
  4014 31DE 4C F5 31			jmp a_0004
  4015 31E1			l_09C0
  4016 31E1 C9 21			cmp #$21
  4017 31E3 D0 06			jne l_09CA
  4018 				@
  4019
  4020 				; optimize FAIL ('PAUSEPROCESSING', ARRAYACCESS), line = 94
  4021
  4022 31E5 20 82 31			jsr PAUSEPROCESSING
  4023 31E8 4C F5 31			jmp a_0004
  4024 31EB			l_09CA
  4025 31EB C9 2C			cmp #$2C
  4026 31ED D0 06			jne l_09D4
  4027 				@
  4028
  4029 				; optimize FAIL ('CRT.NOSOUND', ARRAYACCESS), line = 97
  4030
  4031 31EF 20 75 25			jsr CRT.NOSOUND
  4032
  4033 				; optimize FAIL ('IMAGEMANAGER.NEXTIMAGE', ARRAYACCESS), line = 98
  4034
  4035 31F2 20 04 31			jsr IMAGEMANAGER.NEXTIMAGE
  4036
  4037 31F5			l_09D4
  4038 31F5			a_0004
  4039 31F5			l_09A6
  4040
  4041 				; ------------------------------------------------------------
  4042
  4043 = 4C93			KEY	= DATAORIGIN+$03CB
  4044 = 4C94			@CASETMP_0004	= DATAORIGIN+$03CC
  4045
  4046 = 4C93			@VarData	= KEY
  4047 = 0002			@VarDataSize	= 2
  4048
  4049 31F5			@exit
  4050 					.ifdef @new
  4051 					lda <@VarData
  4052 					sta :ztmp
  4053 					lda >@VarData
  4054 					ldy #@VarDataSize-1
  4055 					jmp @FreeMem
  4056 					els
  4057 31F5 60				rts						; ret
  4058 					eif
  4059 				.endl
  4060
  4061 31F6			.local	UPDATEMARKER					; PROCEDURE
  4062
  4063 				; optimize FAIL (0, ARRAYACCESS), line = 129
  4064
  4065 31F6 EE 91 4C			inc MARKERINDEX
  4066
  4067 				; optimize OK (ARRAYACCESS), line = 130
  4068
  4069 31F9 AD 91 4C			lda MARKERINDEX
  4070 31FC C9 0A			cmp #$0A
  4071 31FE D0 05			jne l_09FA
  4072
  4073 				; optimize OK (ARRAYACCESS), line = 132
  4074
  4075 3200 A9 00			lda #$00
  4076 3202 8D 91 4C			sta MARKERINDEX
  4077 3205			l_09FA
  4078
  4079 				; optimize OK (ARRAYACCESS), line = 134
  4080
  4081 3205 AC 91 4C			ldy MARKERINDEX
  4082 3208 B9 87 4C			lda adr.MARKERKINDS,y
  4083 320B 8D 9A 4C			sta MARKERKIND
  4084
  4085 				; optimize OK (ARRAYACCESS), line = 135
  4086
  4087 320E B9 7D 4C			lda adr.MARKERS,y
  4088 3211 8D 99 4C			sta POS
  4089
  4090 				; optimize OK (ARRAYACCESS), line = 137
  4091
  4092 3214 AD 9A 4C			lda MARKERKIND
  4093 3217 C9 01			cmp #$01
  4094 3219 D0 0E			jne l_0A25
  4095
  4096 				; optimize OK (ARRAYACCESS), line = 139
  4097
  4098 321B AC 99 4C			ldy POS
  4099 321E A9 00			lda #$00
  4100 3220 99 41 85			sta $8541,y
  4101
  4102 				; optimize OK (ARRAYACCESS), line = 140
  4103
  4104 3223 99 41 87			sta $8741,y
  4105 3226 4C 3B 32			jmp l_0A41
  4106 3229			l_0A25
  4107
  4108 				; optimize OK (ARRAYACCESS), line = 142
  4109
  4110 3229 AD 9A 4C			lda MARKERKIND
  4111 322C C9 02			cmp #$02
  4112 322E D0 0B			jne l_0A53
  4113
  4114 				; optimize OK (ARRAYACCESS), line = 144
  4115
  4116 3230 AC 99 4C			ldy POS
  4117 3233 A9 00			lda #$00
  4118 3235 99 41 84			sta $8441,y
  4119
  4120 				; optimize OK (ARRAYACCESS), line = 145
  4121
  4122 3238 99 41 86			sta $8641,y
  4123 323B			l_0A53
  4124 323B			l_0A41
  4125
  4126 				; optimize OK (ARRAYACCESS), line = 148
  4127
  4128 323B AC 91 4C			ldy MARKERINDEX
  4129 323E AD 95 4C			lda INDEX
  4130 3241 99 7D 4C			sta adr.MARKERS,y
  4131
  4132 				; optimize OK (ARRAYACCESS), line = 149
  4133
  4134 3244 AD 96 4C			lda NEWMARKERKIND
  4135 3247 99 87 4C			sta adr.MARKERKINDS,y
  4136
  4137 				; optimize OK (ARRAYACCESS), line = 151
  4138
  4139 324A C9 01			cmp #$01
  4140 324C D0 0E			jne l_0A8C
  4141
  4142 				; optimize OK (ARRAYACCESS), line = 153
  4143
  4144 324E AC 95 4C			ldy INDEX
  4145 3251 A9 FF			lda #$FF
  4146 3253 99 41 85			sta $8541,y
  4147
  4148 				; optimize OK (ARRAYACCESS), line = 154
  4149
  4150 3256 99 41 87			sta $8741,y
  4151 3259 4C 6E 32			jmp l_0AA8
  4152 325C			l_0A8C
  4153
  4154 				; optimize OK (ARRAYACCESS), line = 156
  4155
  4156 325C AD 96 4C			lda NEWMARKERKIND
  4157 325F C9 02			cmp #$02
  4158 3261 D0 0B			jne l_0ABA
  4159
  4160 				; optimize OK (ARRAYACCESS), line = 158
  4161
  4162 3263 AC 95 4C			ldy INDEX
  4163 3266 A9 FF			lda #$FF
  4164 3268 99 41 84			sta $8441,y
  4165
  4166 				; optimize OK (ARRAYACCESS), line = 159
  4167
  4168 326B 99 41 86			sta $8641,y
  4169 326E			l_0ABA
  4170 326E			l_0AA8
  4171
  4172 				; optimize OK (ARRAYACCESS), line = 162
  4173
  4174 326E AC 95 4C			ldy INDEX
  4175 3271 AD 7B 4C			lda SOUNDCHANNEL
  4176 3274 8D FC 4B			sta CRT.SOUND.CHAN
  4177 3277 B9 5F 20			lda adr.SOUNDS,y
  4178 327A 8D FD 4B			sta CRT.SOUND.FREQ
  4179 327D A9 0A			lda #$0A
  4180 327F 8D FE 4B			sta CRT.SOUND.DIST
  4181 3282 8D FF 4B			sta CRT.SOUND.VOL
  4182 3285 20 91 25			jsr CRT.SOUND
  4183
  4184 				; optimize FAIL (0, ARRAYACCESS), line = 163
  4185
  4186 3288 EE 7B 4C			inc SOUNDCHANNEL
  4187
  4188 				; optimize OK (ARRAYACCESS), line = 164
  4189
  4190 328B AD 7B 4C			lda SOUNDCHANNEL
  4191 328E C9 04			cmp #$04
  4192 3290 D0 05			jne l_0AF1
  4193 3292 A9 00			lda #$00
  4194 3294 8D 7B 4C			sta SOUNDCHANNEL
  4195 3297			l_0AF1
  4196
  4197 				; optimize FAIL ('STATUS.UPDATESTATISTICS', ARRAYACCESS), line = 166
  4198
  4199 3297 20 A2 28			jsr STATUS.UPDATESTATISTICS
  4200
  4201 				; optimize FAIL ('CHECKKEYBOARD', ARRAYACCESS), line = 167
  4202
  4203 329A 20 B9 31			jsr CHECKKEYBOARD
  4204
  4205 				; optimize OK (ARRAYACCESS), line = 169
  4206
  4207 329D AD 7C 4C			lda ACCESSDELAYINDEX
  4208 32A0 F0 0E			jeq l_0B0C
  4209
  4210 				; optimize OK (ARRAYACCESS), line = 171
  4211
  4212 32A2 AD F5 4B			lda CORE.ACCESSDELAY
  4213 32A5 8D F9 4B			sta CRT.DELAY.COUNT
  4214 32A8 A9 00			lda #$00
  4215 32AA 8D FA 4B			sta CRT.DELAY.COUNT+1
  4216 32AD 20 0E 25			jsr CRT.DELAY
  4217 32B0			l_0B0C
  4218
  4219 				; ------------------------------------------------------------
  4220
  4221 = 4C95			INDEX	= DATAORIGIN+$03CD
  4222 = 4C96			NEWMARKERKIND	= DATAORIGIN+$03CE
  4223 = 8441			P0_ADDR	= $8441
  4224 = 8541			P1_ADDR	= $8541
  4225 = 8641			P2_ADDR	= $8641
  4226 = 8741			P3_ADDR	= $8741
  4227 = 0001			MK_READ	= $01
  4228 = 0002			MK_WRITE	= $02
  4229 = 205F			adr.SOUNDS	= CODEORIGIN+$005F
  4230 32B0			.var SOUNDS	= adr.SOUNDS .word
  4231 = 4C97			ADDR	= DATAORIGIN+$03CF
  4232 = 4C99			POS	= DATAORIGIN+$03D1
  4233 = 4C9A			MARKERKIND	= DATAORIGIN+$03D2
  4234
  4235 = 4C95			@VarData	= INDEX
  4236 = 0006			@VarDataSize	= 6
  4237
  4238 32B0			@exit
  4239 					.ifdef @new
  4240 					lda <@VarData
  4241 					sta :ztmp
  4242 					lda >@VarData
  4243 					ldy #@VarDataSize-1
  4244 					jmp @FreeMem
  4245 					els
  4246 32B0 60				rts						; ret
  4247 					eif
  4248 = 32B1 5F 20		SOUNDS
  4248 				.endl
  4249
  4250 32B3			.local	GETVALUE					; FUNCTION
  4251 32B3 8D 9B 4C			sta INDEX
  4252
  4253 				; optimize OK (ARRAYACCESS), line = 177
  4254
  4255 32B6 AC 9B 4C			ldy INDEX
  4256 32B9 B9 55 4B			lda CORE.adr.TABLE,y
  4257 32BC 8D 9C 4C			sta RESULT
  4258
  4259 				; optimize FAIL ('STATUS.INCREADCOUNT', ARRAYACCESS), line = 178
  4260
  4261 32BF 20 35 28			jsr STATUS.INCREADCOUNT
  4262
  4263 				; optimize OK (ARRAYACCESS), line = 179
  4264
  4265 32C2 AD 9B 4C			lda INDEX
  4266 32C5 8D 95 4C			sta UPDATEMARKER.INDEX
  4267 32C8 A9 01			lda #$01
  4268 32CA 8D 96 4C			sta UPDATEMARKER.NEWMARKERKIND
  4269 32CD 20 F6 31			jsr UPDATEMARKER
  4270 32D0			@exit
  4271
  4272 				; ------------------------------------------------------------
  4273
  4274 = 4C9B			INDEX	= DATAORIGIN+$03D3
  4275 = 4C9C			RESULT	= DATAORIGIN+$03D4
  4276
  4277 = 4C9B			@VarData	= INDEX
  4278 = 0001			@VarDataSize	= 1
  4279
  4280 32D0 60				rts						; ret
  4281 				.endl
  4282
  4283 32D1			.local	GETVALUESILENT					; FUNCTION
  4284 32D1 8D 9D 4C			sta INDEX
  4285
  4286 				; optimize OK (ARRAYACCESS), line = 184
  4287
  4288 32D4 AC 9D 4C			ldy INDEX
  4289 32D7 B9 55 4B			lda CORE.adr.TABLE,y
  4290 32DA 8D 9E 4C			sta RESULT
  4291 32DD			@exit
  4292
  4293 				; ------------------------------------------------------------
  4294
  4295 = 4C9D			INDEX	= DATAORIGIN+$03D5
  4296 = 4C9E			RESULT	= DATAORIGIN+$03D6
  4297
  4298 = 4C9D			@VarData	= INDEX
  4299 = 0001			@VarDataSize	= 1
  4300
  4301 32DD 60				rts						; ret
  4302 				.endl
  4303
  4304 32DE			.local	SETVALUE					; PROCEDURE
  4305
  4306 				; optimize OK (ARRAYACCESS), line = 191
  4307
  4308 32DE AC 9F 4C			ldy INDEX
  4309 32E1 AD A0 4C			lda VALUE
  4310 32E4 99 55 4B			sta CORE.adr.TABLE,y
  4311
  4312 				; optimize OK (ARRAYACCESS), line = 193
  4313
  4314 32E7 A9 00			lda #$00
  4315 32E9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4316 32EB AD 9F 4C			lda INDEX
  4317 32EE 0A				asl @
  4318 32EF 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4319 32F1 18 6D 0A 25			add CORE.DISPLAYLISTLINEADDR
  4320 32F5 85 84			sta :bp2
  4321 32F7 AD 0B 25			lda CORE.DISPLAYLISTLINEADDR+1
  4322 32FA 65 AF			adc :STACKORIGIN+STACKWIDTH+9
  4323 32FC 85 85			sta :bp2+1
  4324 32FE A0 00			ldy #$00
  4325 3300 B1 84			lda (:bp2),y
  4326 3302 8D A1 4C			sta ADDR
  4327 3305 C8				iny
  4328 3306 B1 84			lda (:bp2),y
  4329 3308 8D A2 4C			sta ADDR+1
  4330
  4331 				; optimize OK (ARRAYACCESS), line = 194
  4332
  4333 330B AC A0 4C			ldy VALUE
  4334 330E B9 D5 48			lda CORE.adr.IMAGELINELOADDR,y
  4335 3311 AC A2 4C			ldy ADDR+1
  4336 3314 84 83			sty :bp+1
  4337 3316 AC A1 4C			ldy ADDR
  4338 3319 91 82			sta (:bp),y
  4339
  4340 				; optimize FAIL (0, ARRAYACCESS), line = 195
  4341
  4342 331B EE A1 4C			inc ADDR
  4343 331E D0 03			sne
  4344 3320 EE A2 4C			inc ADDR+1
  4345
  4346 				; optimize OK (ARRAYACCESS), line = 196
  4347
  4348 3323 AC A0 4C			ldy VALUE
  4349 3326 B9 75 49			lda CORE.adr.IMAGELINEHIADDR,y
  4350 3329 AC A2 4C			ldy ADDR+1
  4351 332C 84 83			sty :bp+1
  4352 332E AC A1 4C			ldy ADDR
  4353 3331 91 82			sta (:bp),y
  4354
  4355 				; optimize FAIL ('STATUS.INCWRITECOUNT', ARRAYACCESS), line = 198
  4356
  4357 3333 20 48 28			jsr STATUS.INCWRITECOUNT
  4358
  4359 				; optimize OK (ARRAYACCESS), line = 199
  4360
  4361 3336 AD 9F 4C			lda INDEX
  4362 3339 8D 95 4C			sta UPDATEMARKER.INDEX
  4363 333C A9 02			lda #$02
  4364 333E 8D 96 4C			sta UPDATEMARKER.NEWMARKERKIND
  4365 3341 20 F6 31			jsr UPDATEMARKER
  4366
  4367 				; ------------------------------------------------------------
  4368
  4369 = 4C9F			INDEX	= DATAORIGIN+$03D7
  4370 = 4CA0			VALUE	= DATAORIGIN+$03D8
  4371 = 4CA1			ADDR	= DATAORIGIN+$03D9
  4372
  4373 = 4C9F			@VarData	= INDEX
  4374 = 0004			@VarDataSize	= 4
  4375
  4376 3344			@exit
  4377 					.ifdef @new
  4378 					lda <@VarData
  4379 					sta :ztmp
  4380 					lda >@VarData
  4381 					ldy #@VarDataSize-1
  4382 					jmp @FreeMem
  4383 					els
  4384 3344 60				rts						; ret
  4385 					eif
  4386 				.endl
  4387
  4388 3345			.local	SETVALUESILENT					; PROCEDURE
  4389
  4390 				; optimize OK (ARRAYACCESS), line = 206
  4391
  4392 3345 AC A3 4C			ldy INDEX
  4393 3348 AD A4 4C			lda VALUE
  4394 334B 99 55 4B			sta CORE.adr.TABLE,y
  4395
  4396 				; optimize OK (ARRAYACCESS), line = 208
  4397
  4398 334E A9 00			lda #$00
  4399 3350 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4400 3352 AD A3 4C			lda INDEX
  4401 3355 0A				asl @
  4402 3356 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4403 3358 18 6D 0A 25			add CORE.DISPLAYLISTLINEADDR
  4404 335C 85 84			sta :bp2
  4405 335E AD 0B 25			lda CORE.DISPLAYLISTLINEADDR+1
  4406 3361 65 AF			adc :STACKORIGIN+STACKWIDTH+9
  4407 3363 85 85			sta :bp2+1
  4408 3365 A0 00			ldy #$00
  4409 3367 B1 84			lda (:bp2),y
  4410 3369 8D A5 4C			sta ADDR
  4411 336C C8				iny
  4412 336D B1 84			lda (:bp2),y
  4413 336F 8D A6 4C			sta ADDR+1
  4414
  4415 				; optimize OK (ARRAYACCESS), line = 209
  4416
  4417 3372 AC A4 4C			ldy VALUE
  4418 3375 B9 D5 48			lda CORE.adr.IMAGELINELOADDR,y
  4419 3378 AC A6 4C			ldy ADDR+1
  4420 337B 84 83			sty :bp+1
  4421 337D AC A5 4C			ldy ADDR
  4422 3380 91 82			sta (:bp),y
  4423
  4424 				; optimize FAIL (0, ARRAYACCESS), line = 210
  4425
  4426 3382 EE A5 4C			inc ADDR
  4427 3385 D0 03			sne
  4428 3387 EE A6 4C			inc ADDR+1
  4429
  4430 				; optimize OK (ARRAYACCESS), line = 211
  4431
  4432 338A AC A4 4C			ldy VALUE
  4433 338D B9 75 49			lda CORE.adr.IMAGELINEHIADDR,y
  4434 3390 AC A6 4C			ldy ADDR+1
  4435 3393 84 83			sty :bp+1
  4436 3395 AC A5 4C			ldy ADDR
  4437 3398 91 82			sta (:bp),y
  4438
  4439 				; ------------------------------------------------------------
  4440
  4441 = 4CA3			INDEX	= DATAORIGIN+$03DB
  4442 = 4CA4			VALUE	= DATAORIGIN+$03DC
  4443 = 4CA5			ADDR	= DATAORIGIN+$03DD
  4444
  4445 = 4CA3			@VarData	= INDEX
  4446 = 0004			@VarDataSize	= 4
  4447
  4448 339A			@exit
  4449 					.ifdef @new
  4450 					lda <@VarData
  4451 					sta :ztmp
  4452 					lda >@VarData
  4453 					ldy #@VarDataSize-1
  4454 					jmp @FreeMem
  4455 					els
  4456 339A 60				rts						; ret
  4457 					eif
  4458 				.endl
  4459
  4460 339B			.local	SWAPVALUES					; PROCEDURE
  4461
  4462 				; optimize OK (ARRAYACCESS), line = 218
  4463
  4464 339B AD A7 4C			lda INDEX1
  4465 339E 20 B3 32			jsr GETVALUE
  4466 33A1 AD 9C 4C			lda GETVALUE.RESULT
  4467 33A4 8D A9 4C			sta V1
  4468
  4469 				; optimize OK (ARRAYACCESS), line = 219
  4470
  4471 33A7 AD A8 4C			lda INDEX2
  4472 33AA 20 B3 32			jsr GETVALUE
  4473 33AD AD 9C 4C			lda GETVALUE.RESULT
  4474 33B0 8D AA 4C			sta V2
  4475
  4476 				; optimize OK (ARRAYACCESS), line = 220
  4477
  4478 33B3 AD A7 4C			lda INDEX1
  4479 33B6 8D 9F 4C			sta SETVALUE.INDEX
  4480 33B9 AD AA 4C			lda V2
  4481 33BC 8D A0 4C			sta SETVALUE.VALUE
  4482 33BF 20 DE 32			jsr SETVALUE
  4483
  4484 				; optimize OK (ARRAYACCESS), line = 221
  4485
  4486 33C2 AD A8 4C			lda INDEX2
  4487 33C5 8D 9F 4C			sta SETVALUE.INDEX
  4488 33C8 AD A9 4C			lda V1
  4489 33CB 8D A0 4C			sta SETVALUE.VALUE
  4490 33CE 20 DE 32			jsr SETVALUE
  4491
  4492 				; ------------------------------------------------------------
  4493
  4494 = 4CA7			INDEX1	= DATAORIGIN+$03DF
  4495 = 4CA8			INDEX2	= DATAORIGIN+$03E0
  4496 = 4CA9			V1	= DATAORIGIN+$03E1
  4497 = 4CAA			V2	= DATAORIGIN+$03E2
  4498
  4499 = 4CA7			@VarData	= INDEX1
  4500 = 0004			@VarDataSize	= 4
  4501
  4502 33D1			@exit
  4503 					.ifdef @new
  4504 					lda <@VarData
  4505 					sta :ztmp
  4506 					lda >@VarData
  4507 					ldy #@VarDataSize-1
  4508 					jmp @FreeMem
  4509 					els
  4510 33D1 60				rts						; ret
  4511 					eif
  4512 				.endl
  4513
  4514 33D2			.local	SWAPVALUESSILENT				; PROCEDURE
  4515
  4516 				; optimize OK (ARRAYACCESS), line = 228
  4517
  4518 33D2 AD AB 4C			lda INDEX1
  4519 33D5 20 D1 32			jsr GETVALUESILENT
  4520 33D8 AD 9E 4C			lda GETVALUESILENT.RESULT
  4521 33DB 8D AD 4C			sta V1
  4522
  4523 				; optimize OK (ARRAYACCESS), line = 229
  4524
  4525 33DE AD AC 4C			lda INDEX2
  4526 33E1 20 D1 32			jsr GETVALUESILENT
  4527 33E4 AD 9E 4C			lda GETVALUESILENT.RESULT
  4528 33E7 8D AE 4C			sta V2
  4529
  4530 				; optimize OK (ARRAYACCESS), line = 230
  4531
  4532 33EA AD AB 4C			lda INDEX1
  4533 33ED 8D A3 4C			sta SETVALUESILENT.INDEX
  4534 33F0 AD AE 4C			lda V2
  4535 33F3 8D A4 4C			sta SETVALUESILENT.VALUE
  4536 33F6 20 45 33			jsr SETVALUESILENT
  4537
  4538 				; optimize OK (ARRAYACCESS), line = 231
  4539
  4540 33F9 AD AC 4C			lda INDEX2
  4541 33FC 8D A3 4C			sta SETVALUESILENT.INDEX
  4542 33FF AD AD 4C			lda V1
  4543 3402 8D A4 4C			sta SETVALUESILENT.VALUE
  4544 3405 20 45 33			jsr SETVALUESILENT
  4545
  4546 				; ------------------------------------------------------------
  4547
  4548 = 4CAB			INDEX1	= DATAORIGIN+$03E3
  4549 = 4CAC			INDEX2	= DATAORIGIN+$03E4
  4550 = 4CAD			V1	= DATAORIGIN+$03E5
  4551 = 4CAE			V2	= DATAORIGIN+$03E6
  4552
  4553 = 4CAB			@VarData	= INDEX1
  4554 = 0004			@VarDataSize	= 4
  4555
  4556 3408			@exit
  4557 					.ifdef @new
  4558 					lda <@VarData
  4559 					sta :ztmp
  4560 					lda >@VarData
  4561 					ldy #@VarDataSize-1
  4562 					jmp @FreeMem
  4563 					els
  4564 3408 60				rts						; ret
  4565 					eif
  4566 				.endl
  4567
  4568 3409			.local	DECREASEDELAY					; PROCEDURE
  4569
  4570 				; optimize OK (ARRAYACCESS), line = 236
  4571
  4572 3409 AD 7C 4C			lda ACCESSDELAYINDEX
  4573 340C F0 0F			jeq l_0BE5
  4574
  4575 				; optimize FAIL (0, ARRAYACCESS), line = 238
  4576
  4577 340E CE 7C 4C			dec ACCESSDELAYINDEX
  4578
  4579 				; optimize OK (ARRAYACCESS), line = 239
  4580
  4581 3411 AC 7C 4C			ldy ACCESSDELAYINDEX
  4582 3414 B9 0D 20			lda CORE.adr.SET_VALUE_DELAYS,y
  4583 3417 8D F5 4B			sta CORE.ACCESSDELAY
  4584
  4585 				; optimize FAIL ('STATUS.UPDATEDELAY', ARRAYACCESS), line = 240
  4586
  4587 341A 20 2F 29			jsr STATUS.UPDATEDELAY
  4588 341D			l_0BE5
  4589 341D			@exit
  4590 					.ifdef @new
  4591 					lda <@VarData
  4592 					sta :ztmp
  4593 					lda >@VarData
  4594 					ldy #@VarDataSize-1
  4595 					jmp @FreeMem
  4596 					els
  4597 341D 60				rts						; ret
  4598 					eif
  4599 				.endl
  4600
  4601 341E			.local	INCREASEDELAY					; PROCEDURE
  4602
  4603 				; optimize OK (ARRAYACCESS), line = 246
  4604
  4605 341E AD 7C 4C			lda ACCESSDELAYINDEX
  4606 3421 C9 07			cmp #$07
  4607 3423 B0 0F			jcs l_0C0C
  4608
  4609 				; optimize FAIL (0, ARRAYACCESS), line = 248
  4610
  4611 3425 EE 7C 4C			inc ACCESSDELAYINDEX
  4612
  4613 				; optimize OK (ARRAYACCESS), line = 249
  4614
  4615 3428 AC 7C 4C			ldy ACCESSDELAYINDEX
  4616 342B B9 0D 20			lda CORE.adr.SET_VALUE_DELAYS,y
  4617 342E 8D F5 4B			sta CORE.ACCESSDELAY
  4618
  4619 				; optimize FAIL ('STATUS.UPDATEDELAY', ARRAYACCESS), line = 250
  4620
  4621 3431 20 2F 29			jsr STATUS.UPDATEDELAY
  4622 3434			l_0C0C
  4623 3434			@exit
  4624 					.ifdef @new
  4625 					lda <@VarData
  4626 					sta :ztmp
  4627 					lda >@VarData
  4628 					ldy #@VarDataSize-1
  4629 					jmp @FreeMem
  4630 					els
  4631 3434 60				rts						; ret
  4632 					eif
  4633 				.endl
  4634
  4635 				; ------------------------------------------------------------
  4636 				; ------------------------------------------------------------
  4637 3435			@UnitInit
  4638
  4639 				; optimize OK (ARRAYACCESS), line = 255
  4640
  4641 3435 A9 00			lda #$00
  4642 3437 8D 7C 4C			sta ACCESSDELAYINDEX
  4643
  4644 				; optimize OK (ARRAYACCESS), line = 256
  4645
  4646 343A 8D F5 4B			sta CORE.ACCESSDELAY
  4647
  4648 				; optimize OK (ARRAYACCESS), line = 257
  4649
  4650 343D 8D 7B 4C			sta SOUNDCHANNEL
  4651
  4652 				; optimize OK (ARRAYACCESS), line = 258
  4653
  4654 3440 8D 91 4C			sta MARKERINDEX
  4655
  4656 3443 60				rts
  4657
  4658 				; ------------------------------------------------------------
  4659
  4660 = 000A			MARKER_COUNT	= $0A
  4661 = 0009			MAX_MARKER	= $09
  4662 = 0041			PM_OFFSET	= $41
  4663 = 4C7B			SOUNDCHANNEL	= DATAORIGIN+$03B3
  4664 = 4C7C			ACCESSDELAYINDEX	= DATAORIGIN+$03B4
  4665 = 4C7D			adr.MARKERS	= [DATAORIGIN+$03B5] .array [10]
  4666 3444			.var MARKERS	= adr.MARKERS .word
  4667 = 4C87			adr.MARKERKINDS	= [DATAORIGIN+$03BF] .array [10]
  4668 3444			.var MARKERKINDS	= adr.MARKERKINDS .word
  4669 = 4C91			MARKERINDEX	= DATAORIGIN+$03C9
  4670
  4671 = 3444 7D 4C		MARKERS
  4671 = 3446 87 4C		MARKERKINDS
  4671 				.endl							; UNIT ARRAYACCESS
  4672
  4673 				; ------------------------------------------------------------
  4674
  4675 3448			.local	SHUFFLEALGORITHMS				; UNIT
  4676
  4677 3448			.local	FILLASCENDING					; PROCEDURE
  4678
  4679 				; optimize OK (SHUFFLEALGORITHMS), line = 21
  4680
  4681 3448 A9 00			lda #$00
  4682 344A 8D AF 4C			sta I
  4683
  4684 344D			l_0C3A
  4685 				; --- ForToDoCondition
  4686 344D AD AF 4C			lda I
  4687 3450 C9 A0			cmp #$A0
  4688 3452 B0 0E			jcs l_0C48
  4689
  4690 				; optimize OK (SHUFFLEALGORITHMS), line = 23
  4691
  4692 3454 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  4693 3457 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  4694 345A 20 DE 32			jsr ARRAYACCESS.SETVALUE
  4695
  4696 				; --- ForToDoEpilog
  4697 345D EE AF 4C			inc I
  4698 3460 D0 EB			jne l_0C3A
  4699 3462			l_0C48
  4700
  4701 				; ------------------------------------------------------------
  4702
  4703 = 4CAF			I	= DATAORIGIN+$03E7
  4704
  4705 = 4CAF			@VarData	= I
  4706 = 0001			@VarDataSize	= 1
  4707
  4708 3462			@exit
  4709 					.ifdef @new
  4710 					lda <@VarData
  4711 					sta :ztmp
  4712 					lda >@VarData
  4713 					ldy #@VarDataSize-1
  4714 					jmp @FreeMem
  4715 					els
  4716 3462 60				rts						; ret
  4717 					eif
  4718 				.endl
  4719
  4720 3463			.local	FILLDESCENDING					; PROCEDURE
  4721
  4722 				; optimize OK (SHUFFLEALGORITHMS), line = 31
  4723
  4724 3463 A9 00			lda #$00
  4725 3465 8D B0 4C			sta I
  4726
  4727 3468			l_0C61
  4728 				; --- ForToDoCondition
  4729 3468 AD B0 4C			lda I
  4730 346B C9 A0			cmp #$A0
  4731 346D B0 17			jcs l_0C6F
  4732
  4733 				; optimize OK (SHUFFLEALGORITHMS), line = 33
  4734
  4735 346F A9 9F			lda #$9F
  4736 3471 38 ED B0 4C			sub I
  4737 3475 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  4738 3478 AD B0 4C			lda I
  4739 347B 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  4740 347E 20 DE 32			jsr ARRAYACCESS.SETVALUE
  4741
  4742 				; --- ForToDoEpilog
  4743 3481 EE B0 4C			inc I
  4744 3484 D0 E2			jne l_0C61
  4745 3486			l_0C6F
  4746
  4747 				; ------------------------------------------------------------
  4748
  4749 = 4CB0			I	= DATAORIGIN+$03E8
  4750
  4751 = 4CB0			@VarData	= I
  4752 = 0001			@VarDataSize	= 1
  4753
  4754 3486			@exit
  4755 					.ifdef @new
  4756 					lda <@VarData
  4757 					sta :ztmp
  4758 					lda >@VarData
  4759 					ldy #@VarDataSize-1
  4760 					jmp @FreeMem
  4761 					els
  4762 3486 60				rts						; ret
  4763 					eif
  4764 				.endl
  4765
  4766 3487			.local	FILLPYRAMID					; PROCEDURE
  4767
  4768 				; optimize OK (SHUFFLEALGORITHMS), line = 42
  4769
  4770 3487 A9 4F			lda #$4F
  4771 3489 8D B2 4C			sta MID
  4772
  4773 				; optimize OK (SHUFFLEALGORITHMS), line = 44
  4774
  4775 348C A9 00			lda #$00
  4776 348E 8D B1 4C			sta I
  4777
  4778 3491			l_0C92
  4779 				; --- ForToDoCondition
  4780 3491 AD B1 4C			lda I
  4781 3494 CD B2 4C			cmp MID
  4782 3497 90 02			scc
  4783 3499 D0 12			jne l_0CA0
  4784
  4785 				; optimize OK (SHUFFLEALGORITHMS), line = 46
  4786
  4787 349B 0A				asl @
  4788 349C 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  4789 349F AD B1 4C			lda I
  4790 34A2 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  4791 34A5 20 DE 32			jsr ARRAYACCESS.SETVALUE
  4792
  4793 				; --- ForToDoEpilog
  4794 34A8 EE B1 4C			inc I
  4795 34AB D0 E4			jne l_0C92
  4796 34AD			l_0CA0
  4797
  4798 				; optimize OK (SHUFFLEALGORITHMS), line = 49
  4799
  4800 34AD AC B2 4C			ldy MID
  4801 34B0 C8				iny
  4802 34B1 8C B1 4C			sty I
  4803
  4804 34B4			l_0CBF
  4805 				; --- ForToDoCondition
  4806 34B4 AD B1 4C			lda I
  4807 34B7 C9 A0			cmp #$A0
  4808 34B9 B0 4F			jcs l_0CCD
  4809
  4810 				; optimize OK (SHUFFLEALGORITHMS), line = 51
  4811
  4812 34BB 38 ED B2 4C			sub MID
  4813 34BF 85 A0			sta :STACKORIGIN+10
  4814 34C1 A9 00			lda #$00
  4815 34C3 E9 00			sbc #$00
  4816 34C5 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4817 34C7 A9 00			lda #$00
  4818 34C9 E9 00			sbc #$00
  4819 34CB 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  4820 34CD A9 00			lda #$00
  4821 34CF E9 00			sbc #$00
  4822 34D1 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  4823 34D3 A5 A0			lda :STACKORIGIN+10
  4824 34D5 38 E9 01			sub #$01
  4825 34D8 85 A0			sta :STACKORIGIN+10
  4826 34DA A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  4827 34DC E9 00			sbc #$00
  4828 34DE 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4829 34E0 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  4830 34E2 E9 00			sbc #$00
  4831 34E4 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  4832 34E6 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  4833 34E8 E9 00			sbc #$00
  4834 34EA 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  4835 34EC 06 A0			asl :STACKORIGIN+10
  4836 34EE 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4837 34F0 26 C0			rol :STACKORIGIN+STACKWIDTH*2+10
  4838 34F2 26 D0			rol :STACKORIGIN+STACKWIDTH*3+10
  4839 34F4 A9 9F			lda #$9F
  4840 34F6 38 E5 A0			sub :STACKORIGIN+10
  4841 34F9 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  4842 34FC AD B1 4C			lda I
  4843 34FF 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  4844 3502 20 DE 32			jsr ARRAYACCESS.SETVALUE
  4845
  4846 				; --- ForToDoEpilog
  4847 3505 EE B1 4C			inc I
  4848 3508 D0 AA			jne l_0CBF
  4849 350A			l_0CCD
  4850
  4851 				; ------------------------------------------------------------
  4852
  4853 = 4CB1			I	= DATAORIGIN+$03E9
  4854 = 4CB2			MID	= DATAORIGIN+$03EA
  4855
  4856 = 4CB1			@VarData	= I
  4857 = 0002			@VarDataSize	= 2
  4858
  4859 350A			@exit
  4860 					.ifdef @new
  4861 					lda <@VarData
  4862 					sta :ztmp
  4863 					lda >@VarData
  4864 					ldy #@VarDataSize-1
  4865 					jmp @FreeMem
  4866 					els
  4867 350A 60				rts						; ret
  4868 					eif
  4869 				.endl
  4870
  4871 350B			.local	FILLINTERLACED					; PROCEDURE
  4872
  4873 				; optimize OK (SHUFFLEALGORITHMS), line = 59
  4874
  4875 350B A9 00			lda #$00
  4876 350D 8D B4 4C			sta MIN
  4877
  4878 				; optimize OK (SHUFFLEALGORITHMS), line = 60
  4879
  4880 3510 A9 9F			lda #$9F
  4881 3512 8D B5 4C			sta MAX
  4882
  4883 				; optimize OK (SHUFFLEALGORITHMS), line = 61
  4884
  4885 3515 A9 00			lda #$00
  4886 3517 8D B3 4C			sta I
  4887
  4888 351A			l_0D00
  4889 				; --- ForToDoCondition
  4890 351A AD B3 4C			lda I
  4891 351D C9 A0			cmp #$A0
  4892 351F B0 30			jcs l_0D0E
  4893
  4894 				; optimize OK (SHUFFLEALGORITHMS), line = 63
  4895
  4896 3521 29 01			and #$01
  4897 3523 D0 15			jne l_0D24
  4898
  4899 				; optimize OK (SHUFFLEALGORITHMS), line = 65
  4900
  4901 3525 AD B3 4C			lda I
  4902 3528 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  4903 352B AD B4 4C			lda MIN
  4904 352E 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  4905 3531 20 DE 32			jsr ARRAYACCESS.SETVALUE
  4906
  4907 				; optimize FAIL (0, SHUFFLEALGORITHMS), line = 66
  4908
  4909 3534 EE B4 4C			inc MIN
  4910 3537 4C 4C 35			jmp l_0D39
  4911 353A			l_0D24
  4912
  4913 				; optimize OK (SHUFFLEALGORITHMS), line = 69
  4914
  4915 353A AD B3 4C			lda I
  4916 353D 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  4917 3540 AD B5 4C			lda MAX
  4918 3543 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  4919 3546 20 DE 32			jsr ARRAYACCESS.SETVALUE
  4920
  4921 				; optimize FAIL (0, SHUFFLEALGORITHMS), line = 70
  4922
  4923 3549 CE B5 4C			dec MAX
  4924 354C			l_0D39
  4925
  4926 				; --- ForToDoEpilog
  4927 354C EE B3 4C			inc I
  4928 354F D0 C9			jne l_0D00
  4929 3551			l_0D0E
  4930
  4931 				; ------------------------------------------------------------
  4932
  4933 = 4CB3			I	= DATAORIGIN+$03EB
  4934 = 4CB4			MIN	= DATAORIGIN+$03EC
  4935 = 4CB5			MAX	= DATAORIGIN+$03ED
  4936
  4937 = 4CB3			@VarData	= I
  4938 = 0003			@VarDataSize	= 3
  4939
  4940 3551			@exit
  4941 					.ifdef @new
  4942 					lda <@VarData
  4943 					sta :ztmp
  4944 					lda >@VarData
  4945 					ldy #@VarDataSize-1
  4946 					jmp @FreeMem
  4947 					els
  4948 3551 60				rts						; ret
  4949 					eif
  4950 				.endl
  4951
  4952 3552			.local	KNUTHSHUFFLE					; PROCEDURE
  4953
  4954 				; optimize OK (SHUFFLEALGORITHMS), line = 79
  4955
  4956 3552 A9 00			lda #$00
  4957 3554 8D B6 4C			sta I
  4958
  4959 3557			l_0D56
  4960 				; --- ForToDoCondition
  4961 3557 AD B6 4C			lda I
  4962 355A C9 9F			cmp #$9F
  4963 355C B0 3E			jcs l_0D64
  4964
  4965 				; optimize OK (SHUFFLEALGORITHMS), line = 81
  4966
  4967 355E AD 07 4C			lda OPERATION.ABORTED
  4968 3561 F0 03			jeq l_0D70
  4969 3563 4C 9C 35			jmp @exit					; exit
  4970 3566			l_0D70
  4971
  4972 				; optimize OK (SHUFFLEALGORITHMS), line = 82
  4973
  4974 3566 A9 9F			lda #$9F
  4975 3568 38 ED B6 4C			sub I
  4976 356C 20 C4 24			jsr SYSTEM.RANDOM_0078
  4977 356F E8				inx
  4978 3570 AD D4 48			lda SYSTEM.RANDOM_0078.RESULT
  4979 3573 18 6D B6 4C			add I
  4980 3577 95 96			sta :STACKORIGIN,x
  4981 3579 E8				inx
  4982 357A A9 01 95 96			mva #$01 :STACKORIGIN,x
  4983 357E B5 95			lda :STACKORIGIN-1,x
  4984 3580 18 75 96			add :STACKORIGIN,x
  4985 3583 8D B7 4C			sta J
  4986 3586 CA				dex
  4987 3587 CA				dex
  4988
  4989 				; optimize OK (SHUFFLEALGORITHMS), line = 83
  4990
  4991 3588 AD B6 4C			lda I
  4992 358B 8D A7 4C			sta ARRAYACCESS.SWAPVALUES.INDEX1
  4993 358E AD B7 4C			lda J
  4994 3591 8D A8 4C			sta ARRAYACCESS.SWAPVALUES.INDEX2
  4995 3594 20 9B 33			jsr ARRAYACCESS.SWAPVALUES
  4996
  4997 				; --- ForToDoEpilog
  4998 3597 EE B6 4C			inc I
  4999 359A D0 BB			jne l_0D56
  5000 359C			l_0D64
  5001
  5002 				; ------------------------------------------------------------
  5003
  5004 = 4CB6			I	= DATAORIGIN+$03EE
  5005 = 4CB7			J	= DATAORIGIN+$03EF
  5006
  5007 = 4CB6			@VarData	= I
  5008 = 0002			@VarDataSize	= 2
  5009
  5010 359C			@exit
  5011 					.ifdef @new
  5012 					lda <@VarData
  5013 					sta :ztmp
  5014 					lda >@VarData
  5015 					ldy #@VarDataSize-1
  5016 					jmp @FreeMem
  5017 					els
  5018 359C 60				rts						; ret
  5019 					eif
  5020 				.endl
  5021
  5022 359D			.local	LOCALSHUFFLE					; PROCEDURE
  5023
  5024 				; optimize OK (SHUFFLEALGORITHMS), line = 93
  5025
  5026 359D A9 00			lda #$00
  5027 359F 8D B8 4C			sta I
  5028
  5029 35A2			l_0DA1
  5030 				; --- ForToDoCondition
  5031 35A2 AD B8 4C			lda I
  5032 35A5 C9 9F			cmp #$9F
  5033 35A7 B0 4D			jcs l_0DAF
  5034
  5035 				; optimize OK (SHUFFLEALGORITHMS), line = 95
  5036
  5037 35A9 AD 07 4C			lda OPERATION.ABORTED
  5038 35AC F0 03			jeq l_0DBB
  5039 35AE 4C F6 35			jmp @exit					; exit
  5040 35B1			l_0DBB
  5041
  5042 				; optimize OK (SHUFFLEALGORITHMS), line = 96
  5043
  5044 35B1 A9 05			lda #$05
  5045 35B3 20 C4 24			jsr SYSTEM.RANDOM_0078
  5046 35B6 AD D4 48			lda SYSTEM.RANDOM_0078.RESULT
  5047 35B9 18 69 01			add #$01
  5048 35BC 8D BA 4C			sta DIST
  5049
  5050 				; optimize OK (SHUFFLEALGORITHMS), line = 97
  5051
  5052 35BF AD B8 4C			lda I
  5053 35C2 18 6D BA 4C			add DIST
  5054 35C6 C9 9F			cmp #$9F
  5055 35C8 90 0E			jcc l_0DDF
  5056 35CA F0 0C			jeq l_0DDF
  5057
  5058 				; optimize OK (SHUFFLEALGORITHMS), line = 99
  5059
  5060 35CC A9 9F			lda #$9F
  5061 35CE 38 ED B8 4C			sub I
  5062 35D2 38 E9 01			sub #$01
  5063 35D5 8D BA 4C			sta DIST
  5064 35D8			l_0DDF
  5065
  5066 				; optimize OK (SHUFFLEALGORITHMS), line = 101
  5067
  5068 35D8 AD B8 4C			lda I
  5069 35DB 18 6D BA 4C			add DIST
  5070 35DF 8D B9 4C			sta J
  5071
  5072 				; optimize OK (SHUFFLEALGORITHMS), line = 102
  5073
  5074 35E2 AD B8 4C			lda I
  5075 35E5 8D A7 4C			sta ARRAYACCESS.SWAPVALUES.INDEX1
  5076 35E8 AD B9 4C			lda J
  5077 35EB 8D A8 4C			sta ARRAYACCESS.SWAPVALUES.INDEX2
  5078 35EE 20 9B 33			jsr ARRAYACCESS.SWAPVALUES
  5079
  5080 				; --- ForToDoEpilog
  5081 35F1 EE B8 4C			inc I
  5082 35F4 D0 AC			jne l_0DA1
  5083 35F6			l_0DAF
  5084
  5085 				; ------------------------------------------------------------
  5086
  5087 = 0005			MAX_DISTANCE	= $05
  5088 = 4CB8			I	= DATAORIGIN+$03F0
  5089 = 4CB9			J	= DATAORIGIN+$03F1
  5090 = 4CBA			DIST	= DATAORIGIN+$03F2
  5091
  5092 = 4CB8			@VarData	= I
  5093 = 0003			@VarDataSize	= 3
  5094
  5095 35F6			@exit
  5096 					.ifdef @new
  5097 					lda <@VarData
  5098 					sta :ztmp
  5099 					lda >@VarData
  5100 					ldy #@VarDataSize-1
  5101 					jmp @FreeMem
  5102 					els
  5103 35F6 60				rts						; ret
  5104 					eif
  5105 				.endl
  5106
  5107 35F7			.local	FILLASCENDINGWITHSHUFFLE			; PROCEDURE
  5108
  5109 				; optimize FAIL ('FILLASCENDING', SHUFFLEALGORITHMS), line = 108
  5110
  5111 35F7 20 48 34			jsr FILLASCENDING
  5112
  5113 				; optimize FAIL ('LOCALSHUFFLE', SHUFFLEALGORITHMS), line = 109
  5114
  5115 35FA 20 9D 35			jsr LOCALSHUFFLE
  5116 35FD			@exit
  5117 					.ifdef @new
  5118 					lda <@VarData
  5119 					sta :ztmp
  5120 					lda >@VarData
  5121 					ldy #@VarDataSize-1
  5122 					jmp @FreeMem
  5123 					els
  5124 35FD 60				rts						; ret
  5125 					eif
  5126 				.endl
  5127
  5128 35FE			.local	SPLASHSCREENSHUFFLE				; PROCEDURE
  5129
  5130 				; optimize OK (SHUFFLEALGORITHMS), line = 118
  5131
  5132 35FE A9 00			lda #$00
  5133 3600 8D BB 4C			sta I
  5134
  5135 3603			l_0E1B
  5136 				; --- ForToDoCondition
  5137 3603 AD BB 4C			lda I
  5138 3606 C9 A0			cmp #$A0
  5139 3608 B0 0E			jcs l_0E29
  5140
  5141 				; optimize OK (SHUFFLEALGORITHMS), line = 120
  5142
  5143 360A 8D A3 4C			sta ARRAYACCESS.SETVALUESILENT.INDEX
  5144 360D 8D A4 4C			sta ARRAYACCESS.SETVALUESILENT.VALUE
  5145 3610 20 45 33			jsr ARRAYACCESS.SETVALUESILENT
  5146
  5147 				; --- ForToDoEpilog
  5148 3613 EE BB 4C			inc I
  5149 3616 D0 EB			jne l_0E1B
  5150 3618			l_0E29
  5151
  5152 				; optimize OK (SHUFFLEALGORITHMS), line = 123
  5153
  5154 3618 A9 00			lda #$00
  5155 361A 8D BB 4C			sta I
  5156
  5157 361D			l_0E3E
  5158 				; --- ForToDoCondition
  5159 361D AD BB 4C			lda I
  5160 3620 C9 77			cmp #$77
  5161 3622 B0 3E			jcs l_0E4C
  5162
  5163 				; optimize OK (SHUFFLEALGORITHMS), line = 125
  5164
  5165 3624 AD 07 4C			lda OPERATION.ABORTED
  5166 3627 F0 03			jeq l_0E58
  5167 3629 4C 62 36			jmp @exit					; exit
  5168 362C			l_0E58
  5169
  5170 				; optimize OK (SHUFFLEALGORITHMS), line = 126
  5171
  5172 362C A9 77			lda #$77
  5173 362E 38 ED BB 4C			sub I
  5174 3632 20 C4 24			jsr SYSTEM.RANDOM_0078
  5175 3635 E8				inx
  5176 3636 AD D4 48			lda SYSTEM.RANDOM_0078.RESULT
  5177 3639 18 6D BB 4C			add I
  5178 363D 95 96			sta :STACKORIGIN,x
  5179 363F E8				inx
  5180 3640 A9 01 95 96			mva #$01 :STACKORIGIN,x
  5181 3644 B5 95			lda :STACKORIGIN-1,x
  5182 3646 18 75 96			add :STACKORIGIN,x
  5183 3649 8D BC 4C			sta J
  5184 364C CA				dex
  5185 364D CA				dex
  5186
  5187 				; optimize OK (SHUFFLEALGORITHMS), line = 127
  5188
  5189 364E AD BB 4C			lda I
  5190 3651 8D AB 4C			sta ARRAYACCESS.SWAPVALUESSILENT.INDEX1
  5191 3654 AD BC 4C			lda J
  5192 3657 8D AC 4C			sta ARRAYACCESS.SWAPVALUESSILENT.INDEX2
  5193 365A 20 D2 33			jsr ARRAYACCESS.SWAPVALUESSILENT
  5194
  5195 				; --- ForToDoEpilog
  5196 365D EE BB 4C			inc I
  5197 3660 D0 BB			jne l_0E3E
  5198 3662			l_0E4C
  5199
  5200 				; ------------------------------------------------------------
  5201
  5202 = 0077			MAX_LINE	= $77
  5203 = 4CBB			I	= DATAORIGIN+$03F3
  5204 = 4CBC			J	= DATAORIGIN+$03F4
  5205
  5206 = 4CBB			@VarData	= I
  5207 = 0002			@VarDataSize	= 2
  5208
  5209 3662			@exit
  5210 					.ifdef @new
  5211 					lda <@VarData
  5212 					sta :ztmp
  5213 					lda >@VarData
  5214 					ldy #@VarDataSize-1
  5215 					jmp @FreeMem
  5216 					els
  5217 3662 60				rts						; ret
  5218 					eif
  5219 				.endl
  5220
  5221 				; ------------------------------------------------------------
  5222
  5223 				.endl							; UNIT SHUFFLEALGORITHMS
  5224
  5225 				; ------------------------------------------------------------
  5226
  5227 3663			.local	SORTINGALGORITHMS				; UNIT
  5228
  5229 3663			.local	BUBBLESORT					; PROCEDURE
  5230
  5231 				; optimize OK (SORTINGALGORITHMS), line = 33
  5232
  5233 3663 A9 9E			lda #$9E
  5234 3665 8D BD 4C			sta LAST
  5235
  5236 				; optimize OK (SORTINGALGORITHMS), line = 34
  5237
  5238 3668 A9 00			lda #$00
  5239 366A 8D BE 4C			sta I
  5240
  5241 366D			l_0E8D
  5242 				; --- ForToDoCondition
  5243 366D AD BE 4C			lda I
  5244 3670 C9 9F			cmp #$9F
  5245 3672 B0 66			jcs l_0E9B
  5246
  5247 				; optimize OK (SORTINGALGORITHMS), line = 36
  5248
  5249 3674 A9 00			lda #$00
  5250 3676 8D BF 4C			sta J
  5251
  5252 3679			l_0EA6
  5253 				; --- ForToDoCondition
  5254 3679 AD BF 4C			lda J
  5255 367C CD BD 4C			cmp LAST
  5256 367F 90 02			scc
  5257 3681 D0 4F			jne l_0EB4
  5258
  5259 				; optimize OK (SORTINGALGORITHMS), line = 38
  5260
  5261 3683 AD 07 4C			lda OPERATION.ABORTED
  5262 3686 F0 03			jeq l_0EC0
  5263 3688 4C DA 36			jmp @exit					; exit
  5264 368B			l_0EC0
  5265
  5266 				; optimize OK (SORTINGALGORITHMS), line = 40
  5267
  5268 368B AC BF 4C			ldy J
  5269 368E C8				iny
  5270 368F 8C C0 4C			sty K
  5271
  5272 				; optimize OK (SORTINGALGORITHMS), line = 41
  5273
  5274 3692 AD BF 4C			lda J
  5275 3695 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5276 3698 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  5277 369B 8D C1 4C			sta V1
  5278
  5279 				; optimize OK (SORTINGALGORITHMS), line = 42
  5280
  5281 369E AD C0 4C			lda K
  5282 36A1 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5283 36A4 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  5284 36A7 8D C2 4C			sta V2
  5285
  5286 				; optimize OK (SORTINGALGORITHMS), line = 43
  5287
  5288 36AA CD C1 4C			cmp V1
  5289 36AD B0 1E			jcs l_0EEF
  5290
  5291 				; optimize OK (SORTINGALGORITHMS), line = 45
  5292
  5293 36AF AD BF 4C			lda J
  5294 36B2 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  5295 36B5 AD C2 4C			lda V2
  5296 36B8 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  5297 36BB 20 DE 32			jsr ARRAYACCESS.SETVALUE
  5298
  5299 				; optimize OK (SORTINGALGORITHMS), line = 46
  5300
  5301 36BE AD C0 4C			lda K
  5302 36C1 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  5303 36C4 AD C1 4C			lda V1
  5304 36C7 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  5305 36CA 20 DE 32			jsr ARRAYACCESS.SETVALUE
  5306 36CD			l_0EEF
  5307
  5308 				; --- ForToDoEpilog
  5309 36CD EE BF 4C			inc J
  5310 36D0 D0 A7			jne l_0EA6
  5311 36D2			l_0EB4
  5312
  5313 				; optimize FAIL (0, SORTINGALGORITHMS), line = 49
  5314
  5315 36D2 CE BD 4C			dec LAST
  5316
  5317 				; --- ForToDoEpilog
  5318 36D5 EE BE 4C			inc I
  5319 36D8 D0 93			jne l_0E8D
  5320 36DA			l_0E9B
  5321
  5322 				; ------------------------------------------------------------
  5323
  5324 = 4CBD			LAST	= DATAORIGIN+$03F5
  5325 = 4CBE			I	= DATAORIGIN+$03F6
  5326 = 4CBF			J	= DATAORIGIN+$03F7
  5327 = 4CC0			K	= DATAORIGIN+$03F8
  5328 = 4CC1			V1	= DATAORIGIN+$03F9
  5329 = 4CC2			V2	= DATAORIGIN+$03FA
  5330
  5331 = 4CBD			@VarData	= LAST
  5332 = 0006			@VarDataSize	= 6
  5333
  5334 36DA			@exit
  5335 					.ifdef @new
  5336 					lda <@VarData
  5337 					sta :ztmp
  5338 					lda >@VarData
  5339 					ldy #@VarDataSize-1
  5340 					jmp @FreeMem
  5341 					els
  5342 36DA 60				rts						; ret
  5343 					eif
  5344 				.endl
  5345
  5346 36DB			.local	INSERTIONSORT					; PROCEDURE
  5347
  5348 				; optimize OK (SORTINGALGORITHMS), line = 58
  5349
  5350 36DB A9 01			lda #$01
  5351 36DD 8D C3 4C			sta I
  5352
  5353 36E0			l_0F1B
  5354 				; --- ForToDoCondition
  5355 36E0 AD C3 4C			lda I
  5356 36E3 C9 A0			cmp #$A0
  5357 36E5 B0 5E			jcs l_0F29
  5358
  5359 				; optimize OK (SORTINGALGORITHMS), line = 60
  5360
  5361 36E7 AD 07 4C			lda OPERATION.ABORTED
  5362 36EA F0 03			jeq l_0F35
  5363 36EC 4C 45 37			jmp @exit					; exit
  5364 36EF			l_0F35
  5365
  5366 				; optimize OK (SORTINGALGORITHMS), line = 61
  5367
  5368 36EF AD C3 4C			lda I
  5369 36F2 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5370 36F5 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  5371 36F8 8D C5 4C			sta TMP
  5372
  5373 				; optimize OK (SORTINGALGORITHMS), line = 62
  5374
  5375 36FB AD C3 4C			lda I
  5376 36FE 8D C4 4C			sta J
  5377
  5378 				; --- WhileProlog
  5379 3701 4C 2F 37			jmp l_0F47
  5380 3704			l_0F48
  5381
  5382 				; optimize OK (SORTINGALGORITHMS), line = 65
  5383
  5384 3704 AC C4 4C			ldy J
  5385 3707 88				dey
  5386 3708 98				tya
  5387 3709 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5388 370C AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  5389 370F 8D C6 4C			sta VAL
  5390
  5391 				; optimize OK (SORTINGALGORITHMS), line = 66
  5392
  5393 3712 AD C5 4C			lda TMP
  5394 3715 CD C6 4C			cmp VAL
  5395 3718 90 03			jcc l_0F67
  5396 371A 4C 31 37			jmp b_0F48					; break
  5397 371D			l_0F67
  5398
  5399 				; optimize OK (SORTINGALGORITHMS), line = 68
  5400
  5401 371D AD C4 4C			lda J
  5402 3720 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  5403 3723 AD C6 4C			lda VAL
  5404 3726 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  5405 3729 20 DE 32			jsr ARRAYACCESS.SETVALUE
  5406
  5407 				; optimize FAIL (0, SORTINGALGORITHMS), line = 69
  5408
  5409 372C CE C4 4C			dec J
  5410 372F			l_0F47
  5411
  5412 				; optimize OK (SORTINGALGORITHMS), line = 63
  5413
  5414 372F D0 D3			jne l_0F48
  5415 3731			b_0F48
  5416
  5417 				; optimize OK (SORTINGALGORITHMS), line = 71
  5418
  5419 3731 AD C4 4C			lda J
  5420 3734 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  5421 3737 AD C5 4C			lda TMP
  5422 373A 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  5423 373D 20 DE 32			jsr ARRAYACCESS.SETVALUE
  5424
  5425 				; --- ForToDoEpilog
  5426 3740 EE C3 4C			inc I
  5427 3743 D0 9B			jne l_0F1B
  5428 3745			l_0F29
  5429
  5430 				; ------------------------------------------------------------
  5431
  5432 = 4CC3			I	= DATAORIGIN+$03FB
  5433 = 4CC4			J	= DATAORIGIN+$03FC
  5434 = 4CC5			TMP	= DATAORIGIN+$03FD
  5435 = 4CC6			VAL	= DATAORIGIN+$03FE
  5436
  5437 = 4CC3			@VarData	= I
  5438 = 0004			@VarDataSize	= 4
  5439
  5440 3745			@exit
  5441 					.ifdef @new
  5442 					lda <@VarData
  5443 					sta :ztmp
  5444 					lda >@VarData
  5445 					ldy #@VarDataSize-1
  5446 					jmp @FreeMem
  5447 					els
  5448 3745 60				rts						; ret
  5449 					eif
  5450 				.endl
  5451
  5452 3746			.local	SELECTIONSORT					; PROCEDURE
  5453
  5454 				; optimize OK (SORTINGALGORITHMS), line = 80
  5455
  5456 3746 A9 00			lda #$00
  5457 3748 8D C7 4C			sta I
  5458
  5459 374B			l_0F9A
  5460 				; --- ForToDoCondition
  5461 374B AD C7 4C			lda I
  5462 374E C9 9F			cmp #$9F
  5463 3750 B0 58			jcs l_0FA8
  5464
  5465 				; optimize OK (SORTINGALGORITHMS), line = 82
  5466
  5467 3752 8D C9 4C			sta TMP
  5468
  5469 				; optimize OK (SORTINGALGORITHMS), line = 83
  5470
  5471 3755 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5472 3758 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  5473 375B 8D CA 4C			sta VAL
  5474
  5475 				; optimize OK (SORTINGALGORITHMS), line = 84
  5476
  5477 375E AC C7 4C			ldy I
  5478 3761 C8				iny
  5479 3762 8C C8 4C			sty J
  5480
  5481 3765			l_0FC4
  5482 				; --- ForToDoCondition
  5483 3765 AD C8 4C			lda J
  5484 3768 C9 A0			cmp #$A0
  5485 376A B0 2A			jcs l_0FD2
  5486
  5487 				; optimize OK (SORTINGALGORITHMS), line = 86
  5488
  5489 376C AD 07 4C			lda OPERATION.ABORTED
  5490 376F F0 03			jeq l_0FDE
  5491 3771 4C AA 37			jmp @exit					; exit
  5492 3774			l_0FDE
  5493
  5494 				; optimize OK (SORTINGALGORITHMS), line = 87
  5495
  5496 3774 AD C8 4C			lda J
  5497 3777 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5498 377A AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  5499 377D CD CA 4C			cmp VAL
  5500 3780 B0 0F			jcs l_0FF6
  5501 				@
  5502
  5503 				; optimize OK (SORTINGALGORITHMS), line = 89
  5504
  5505 3782 AD C8 4C			lda J
  5506 3785 8D C9 4C			sta TMP
  5507
  5508 				; optimize OK (SORTINGALGORITHMS), line = 90
  5509
  5510 3788 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5511 378B AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  5512 378E 8D CA 4C			sta VAL
  5513 3791			l_0FF6
  5514
  5515 				; --- ForToDoEpilog
  5516 3791 EE C8 4C			inc J
  5517 3794 D0 CF			jne l_0FC4
  5518 3796			l_0FD2
  5519
  5520 				; optimize OK (SORTINGALGORITHMS), line = 93
  5521
  5522 3796 AD C7 4C			lda I
  5523 3799 8D A7 4C			sta ARRAYACCESS.SWAPVALUES.INDEX1
  5524 379C AD C9 4C			lda TMP
  5525 379F 8D A8 4C			sta ARRAYACCESS.SWAPVALUES.INDEX2
  5526 37A2 20 9B 33			jsr ARRAYACCESS.SWAPVALUES
  5527
  5528 				; --- ForToDoEpilog
  5529 37A5 EE C7 4C			inc I
  5530 37A8 D0 A1			jne l_0F9A
  5531 37AA			l_0FA8
  5532
  5533 				; ------------------------------------------------------------
  5534
  5535 = 4CC7			I	= DATAORIGIN+$03FF
  5536 = 4CC8			J	= DATAORIGIN+$0400
  5537 = 4CC9			TMP	= DATAORIGIN+$0401
  5538 = 4CCA			VAL	= DATAORIGIN+$0402
  5539
  5540 = 4CC7			@VarData	= I
  5541 = 0004			@VarDataSize	= 4
  5542
  5543 37AA			@exit
  5544 					.ifdef @new
  5545 					lda <@VarData
  5546 					sta :ztmp
  5547 					lda >@VarData
  5548 					ldy #@VarDataSize-1
  5549 					jmp @FreeMem
  5550 					els
  5551 37AA 60				rts						; ret
  5552 					eif
  5553 				.endl
  5554
  5555 37AB			.local	QUICKSORT					; PROCEDURE
  5556
  5557 37AB 4C B6 38			jmp l_101B
  5558
  5559 37AE			.local	INTERNALQUICKSORT				; PROCEDURE
  5560 					.ifdef @VarData
  5561 37AE A9 CB		@new	lda <@VarData
  5562 37B0 85 92			sta :ztmp
  5563 37B2 A9 4C			lda >@VarData
  5564 37B4 A0 05			ldy #@VarDataSize-1
  5565 37B6 20 18 24			jsr @AllocMem
  5566 					eif
  5567
  5568 				; ------------------------------------------------------------
  5569
  5570 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  5571 				; as Pointer
  5572 37B9 B5 96			lda :STACKORIGIN,x
  5573 37BB 8D CB 4C			sta LEFT
  5574 37BE CA				dex
  5575 37BF 30 06			jmi @main
  5576
  5577 				; ------------------------------------------------------------
  5578
  5579 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  5580 				; as Pointer
  5581 37C1 B5 96			lda :STACKORIGIN,x
  5582 37C3 8D CC 4C			sta RIGHT
  5583 37C6 CA				dex
  5584 37C7			@main
  5585
  5586 				; optimize OK (SORTINGALGORITHMS), line = 104
  5587
  5588 37C7 AD CB 4C			lda LEFT
  5589 37CA 8D CD 4C			sta I
  5590
  5591 				; optimize OK (SORTINGALGORITHMS), line = 105
  5592
  5593 37CD AD CC 4C			lda RIGHT
  5594 37D0 8D CE 4C			sta J
  5595
  5596 				; optimize OK (SORTINGALGORITHMS), line = 106
  5597
  5598 37D3 38 ED CB 4C			sub LEFT
  5599 37D7 85 A0			sta :STACKORIGIN+10
  5600 37D9 A9 00			lda #$00
  5601 37DB E9 00			sbc #$00
  5602 37DD 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5603 37DF 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
  5604 37E1 66 A0			ror :STACKORIGIN+10
  5605 37E3 AD CB 4C			lda LEFT
  5606 37E6 18 65 A0			add :STACKORIGIN+10
  5607 37E9 8D CF 4C			sta MID
  5608
  5609 				; optimize OK (SORTINGALGORITHMS), line = 107
  5610
  5611 37EC 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5612 37EF AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  5613 37F2 8D D0 4C			sta PIVOT
  5614
  5615 				; --- RepeatUntilProlog
  5616 37F5			l_104E
  5617
  5618 				; optimize OK (SORTINGALGORITHMS), line = 109
  5619
  5620 37F5 AD 07 4C			lda OPERATION.ABORTED
  5621 37F8 F0 03			jeq l_105A
  5622 37FA 4C AB 38			jmp @exit					; exit
  5623 37FD			l_105A
  5624
  5625 				; --- WhileProlog
  5626 37FD 4C 0D 38			jmp l_105F
  5627 3800			l_1060
  5628
  5629 				; optimize OK (SORTINGALGORITHMS), line = 112
  5630
  5631 3800 AD CD 4C			lda I
  5632 3803 C9 9F			cmp #$9F
  5633 3805 D0 03			jne l_1072
  5634 3807 4C 21 38			jmp b_1060					; break
  5635 380A			l_1072
  5636
  5637 				; optimize FAIL (0, SORTINGALGORITHMS), line = 113
  5638
  5639 380A EE CD 4C			inc I
  5640 380D			l_105F
  5641
  5642 				; optimize FAIL (1, SORTINGALGORITHMS), line = 110
  5643
  5644 380D E8				inx
  5645 380E AD D0 4C 95 96		mva PIVOT :STACKORIGIN,x
  5646 3813 AD CD 4C			lda I
  5647 3816 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5648 3819 CA				dex
  5649 381A AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  5650 381D D5 97			cmp :STACKORIGIN+1,x
  5651 381F 90 DF			jcc l_1060
  5652 3821			b_1060
  5653
  5654 				; --- WhileProlog
  5655 3821 4C 2F 38			jmp l_108A
  5656 3824			l_108B
  5657
  5658 				; optimize OK (SORTINGALGORITHMS), line = 118
  5659
  5660 3824 AD CE 4C			lda J
  5661 3827 D0 03			jne l_109D
  5662 3829 4C 43 38			jmp b_108B					; break
  5663 382C			l_109D
  5664
  5665 				; optimize FAIL (0, SORTINGALGORITHMS), line = 119
  5666
  5667 382C CE CE 4C			dec J
  5668 382F			l_108A
  5669
  5670 				; optimize FAIL (1, SORTINGALGORITHMS), line = 116
  5671
  5672 382F E8				inx
  5673 3830 AD D0 4C 95 96		mva PIVOT :STACKORIGIN,x
  5674 3835 AD CE 4C			lda J
  5675 3838 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5676 383B CA				dex
  5677 383C B5 97			lda :STACKORIGIN+1,x
  5678 383E CD 9C 4C			cmp ARRAYACCESS.GETVALUE.RESULT
  5679 3841 90 E1			jcc l_108B
  5680 3843			b_108B
  5681
  5682 				; optimize OK (SORTINGALGORITHMS), line = 122
  5683
  5684 3843 AD CE 4C			lda J
  5685 3846 CD CD 4C			cmp I
  5686 3849 90 27			jcc l_10C7
  5687
  5688 				; optimize OK (SORTINGALGORITHMS), line = 124
  5689
  5690 384B AD CD 4C			lda I
  5691 384E 8D A7 4C			sta ARRAYACCESS.SWAPVALUES.INDEX1
  5692 3851 AD CE 4C			lda J
  5693 3854 8D A8 4C			sta ARRAYACCESS.SWAPVALUES.INDEX2
  5694 3857 20 9B 33			jsr ARRAYACCESS.SWAPVALUES
  5695
  5696 				; optimize OK (SORTINGALGORITHMS), line = 125
  5697
  5698 385A AD CD 4C			lda I
  5699 385D C9 9F			cmp #$9F
  5700 385F D0 03			jne l_10E1
  5701 3861 4C 7D 38			jmp b_104E					; break
  5702 3864			l_10E1
  5703
  5704 				; optimize FAIL (0, SORTINGALGORITHMS), line = 126
  5705
  5706 3864 EE CD 4C			inc I
  5707
  5708 				; optimize OK (SORTINGALGORITHMS), line = 127
  5709
  5710 3867 AD CE 4C			lda J
  5711 386A D0 03			jne l_10FA
  5712 386C 4C 7D 38			jmp b_104E					; break
  5713 386F			l_10FA
  5714
  5715 				; optimize FAIL (0, SORTINGALGORITHMS), line = 128
  5716
  5717 386F CE CE 4C			dec J
  5718 3872			l_10C7
  5719
  5720 				; optimize OK (SORTINGALGORITHMS), line = 130
  5721
  5722 3872 AD CE 4C			lda J
  5723 3875 CD CD 4C			cmp I
  5724 3878 90 03 4C F5 37		jcs l_104E
  5725 387D			b_104E
  5726
  5727 				; optimize OK (SORTINGALGORITHMS), line = 132
  5728
  5729 387D AD CB 4C			lda LEFT
  5730 3880 CD CE 4C			cmp J
  5731 3883 B0 0F			jcs l_1126
  5732
  5733 				; optimize FAIL ('INTERNALQUICKSORT', SORTINGALGORITHMS), line = 134
  5734
  5735 3885 E8				inx
  5736 3886 AD CE 4C 95 96		mva J :STACKORIGIN,x
  5737 388B E8				inx
  5738 388C AD CB 4C 95 96		mva LEFT :STACKORIGIN,x
  5739 3891 20 AE 37			jsr INTERNALQUICKSORT
  5740 3894			l_1126
  5741
  5742 				; optimize OK (SORTINGALGORITHMS), line = 136
  5743
  5744 3894 AD CD 4C			lda I
  5745 3897 CD CC 4C			cmp RIGHT
  5746 389A B0 0F			jcs l_1144
  5747
  5748 				; optimize FAIL ('INTERNALQUICKSORT', SORTINGALGORITHMS), line = 138
  5749
  5750 389C E8				inx
  5751 389D AD CC 4C 95 96		mva RIGHT :STACKORIGIN,x
  5752 38A2 E8				inx
  5753 38A3 AD CD 4C 95 96		mva I :STACKORIGIN,x
  5754 38A8 20 AE 37			jsr INTERNALQUICKSORT
  5755 38AB			l_1144
  5756
  5757 				; ------------------------------------------------------------
  5758
  5759 = 4CCB			LEFT	= DATAORIGIN+$0403
  5760 = 4CCC			RIGHT	= DATAORIGIN+$0404
  5761 = 4CCD			I	= DATAORIGIN+$0405
  5762 = 4CCE			J	= DATAORIGIN+$0406
  5763 = 4CCF			MID	= DATAORIGIN+$0407
  5764 = 4CD0			PIVOT	= DATAORIGIN+$0408
  5765
  5766 = 4CCB			@VarData	= LEFT
  5767 = 0006			@VarDataSize	= 6
  5768
  5769 38AB			@exit
  5770 					.ifdef @new
  5771 38AB A9 CB			lda <@VarData
  5772 38AD 85 92			sta :ztmp
  5773 38AF A9 4C			lda >@VarData
  5774 38B1 A0 05			ldy #@VarDataSize-1
  5775 38B3 4C 37 24			jmp @FreeMem
  5776 					els
  5777 					rts						; ret
  5778 					eif
  5779 				.endl
  5780 38B6			l_101B
  5781
  5782 				; optimize FAIL ('INTERNALQUICKSORT', SORTINGALGORITHMS), line = 143
  5783
  5784 38B6 E8				inx
  5785 38B7 A9 9F 95 96			mva #$9F :STACKORIGIN,x
  5786 38BB E8				inx
  5787 38BC A9 00 95 96			mva #$00 :STACKORIGIN,x
  5788 38C0 20 AE 37			jsr INTERNALQUICKSORT
  5789
  5790 				; ------------------------------------------------------------
  5791
  5792 38C3			@exit
  5793 					.ifdef @new
  5794 					lda <@VarData
  5795 					sta :ztmp
  5796 					lda >@VarData
  5797 					ldy #@VarDataSize-1
  5798 					jmp @FreeMem
  5799 					els
  5800 38C3 60				rts						; ret
  5801 					eif
  5802 				.endl
  5803
  5804 38C4			.local	MERGESORT					; PROCEDURE
  5805
  5806 38C4 4C F2 39			jmp l_1156
  5807
  5808 38C7			.local	MERGE						; PROCEDURE
  5809
  5810 				; optimize OK (SORTINGALGORITHMS), line = 152
  5811
  5812 38C7 AC D2 4C			ldy MID
  5813 38CA C8				iny
  5814 38CB 8C D4 4C			sty LEFT2
  5815
  5816 				; optimize OK (SORTINGALGORITHMS), line = 153
  5817
  5818 38CE AD D2 4C			lda MID
  5819 38D1 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5820 38D4 E8				inx
  5821 38D5 AD 9C 4C 95 96		mva ARRAYACCESS.GETVALUE.RESULT :STACKORIGIN,x
  5822 38DA AD D4 4C			lda LEFT2
  5823 38DD 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5824 38E0 CA				dex
  5825 38E1 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  5826 38E4 D5 97			cmp :STACKORIGIN+1,x
  5827 38E6 90 03			jcc l_1179
  5828 				@
  5829 38E8 4C 6B 39			jmp @exit					; exit
  5830 38EB			l_1179
  5831
  5832 				; --- WhileProlog
  5833 38EB 4C 59 39			jmp l_117E
  5834 38EE			l_117F
  5835
  5836 				; optimize OK (SORTINGALGORITHMS), line = 157
  5837
  5838 38EE AD 07 4C			lda OPERATION.ABORTED
  5839 38F1 F0 03			jeq l_118B
  5840 38F3 4C 6B 39			jmp @exit					; exit
  5841 38F6			l_118B
  5842
  5843 				; optimize OK (SORTINGALGORITHMS), line = 158
  5844
  5845 38F6 AD D4 4C			lda LEFT2
  5846 38F9 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5847 38FC AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  5848 38FF 8D D5 4C			sta VAL
  5849
  5850 				; optimize OK (SORTINGALGORITHMS), line = 159
  5851
  5852 3902 AD D1 4C			lda LEFT
  5853 3905 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5854 3908 AD D5 4C			lda VAL
  5855 390B CD 9C 4C			cmp ARRAYACCESS.GETVALUE.RESULT
  5856 390E 90 06			jcc l_11AA
  5857 				@
  5858
  5859 				; optimize FAIL (0, SORTINGALGORITHMS), line = 161
  5860
  5861 3910 EE D1 4C			inc LEFT
  5862 3913 4C 59 39			jmp l_11B8
  5863 3916			l_11AA
  5864
  5865 				; optimize OK (SORTINGALGORITHMS), line = 164
  5866
  5867 3916 AD D4 4C			lda LEFT2
  5868 3919 8D D6 4C			sta IND
  5869
  5870 				; --- WhileProlog
  5871 391C 4C 39 39			jmp l_11C0
  5872 391F			l_11C1
  5873
  5874 				; optimize OK (SORTINGALGORITHMS), line = 168
  5875
  5876 391F AC D6 4C			ldy IND
  5877 3922 88				dey
  5878 3923 98				tya
  5879 3924 20 B3 32			jsr ARRAYACCESS.GETVALUE
  5880 3927 AD D6 4C			lda IND
  5881 392A 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  5882 392D AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  5883 3930 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  5884 3933 20 DE 32			jsr ARRAYACCESS.SETVALUE
  5885
  5886 				; optimize FAIL (0, SORTINGALGORITHMS), line = 169
  5887
  5888 3936 CE D6 4C			dec IND
  5889 3939			l_11C0
  5890
  5891 				; optimize OK (SORTINGALGORITHMS), line = 166
  5892
  5893 3939 AD D6 4C			lda IND
  5894 393C CD D1 4C			cmp LEFT
  5895 393F D0 DE			jne l_11C1
  5896
  5897 				; optimize OK (SORTINGALGORITHMS), line = 171
  5898
  5899 3941 AD D1 4C			lda LEFT
  5900 3944 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  5901 3947 AD D5 4C			lda VAL
  5902 394A 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  5903 394D 20 DE 32			jsr ARRAYACCESS.SETVALUE
  5904
  5905 				; optimize FAIL (0, SORTINGALGORITHMS), line = 173
  5906
  5907 3950 EE D1 4C			inc LEFT
  5908
  5909 				; optimize FAIL (0, SORTINGALGORITHMS), line = 174
  5910
  5911 3953 EE D2 4C			inc MID
  5912
  5913 				; optimize FAIL (0, SORTINGALGORITHMS), line = 175
  5914
  5915 3956 EE D4 4C			inc LEFT2
  5916 3959			l_11B8
  5917 3959			l_117E
  5918
  5919 				; optimize OK (SORTINGALGORITHMS), line = 155
  5920
  5921 3959 AD D1 4C			lda LEFT
  5922 395C CD D2 4C			cmp MID
  5923 395F 90 02			bcc @+
  5924 3961 D0 08			jne l_117Fw
  5925 				@
  5926 3963 AD D3 4C			lda RIGHT
  5927 3966 CD D4 4C			cmp LEFT2
  5928 3969 B0 83			jcs l_117F
  5929 396B			l_117Fw
  5930
  5931 				; ------------------------------------------------------------
  5932
  5933 = 4CD1			LEFT	= DATAORIGIN+$0409
  5934 = 4CD2			MID	= DATAORIGIN+$040A
  5935 = 4CD3			RIGHT	= DATAORIGIN+$040B
  5936 = 4CD4			LEFT2	= DATAORIGIN+$040C
  5937 = 4CD5			VAL	= DATAORIGIN+$040D
  5938 = 4CD6			IND	= DATAORIGIN+$040E
  5939
  5940 = 4CD1			@VarData	= LEFT
  5941 = 0006			@VarDataSize	= 6
  5942
  5943 396B			@exit
  5944 					.ifdef @new
  5945 					lda <@VarData
  5946 					sta :ztmp
  5947 					lda >@VarData
  5948 					ldy #@VarDataSize-1
  5949 					jmp @FreeMem
  5950 					els
  5951 396B 60				rts						; ret
  5952 					eif
  5953 				.endl
  5954
  5955 396C			.local	INTERNALMERGESORT				; PROCEDURE
  5956 					.ifdef @VarData
  5957 396C A9 D7		@new	lda <@VarData
  5958 396E 85 92			sta :ztmp
  5959 3970 A9 4C			lda >@VarData
  5960 3972 A0 02			ldy #@VarDataSize-1
  5961 3974 20 18 24			jsr @AllocMem
  5962 					eif
  5963
  5964 				; ------------------------------------------------------------
  5965
  5966 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  5967 				; as Pointer
  5968 3977 B5 96			lda :STACKORIGIN,x
  5969 3979 8D D7 4C			sta LEFT
  5970 397C CA				dex
  5971 397D 30 06			jmi @main
  5972
  5973 				; ------------------------------------------------------------
  5974
  5975 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  5976 				; as Pointer
  5977 397F B5 96			lda :STACKORIGIN,x
  5978 3981 8D D8 4C			sta RIGHT
  5979 3984 CA				dex
  5980 3985			@main
  5981
  5982 				; optimize OK (SORTINGALGORITHMS), line = 184
  5983
  5984 3985 AD 07 4C			lda OPERATION.ABORTED
  5985 3988 F0 03			jeq l_1224
  5986 398A 4C E7 39			jmp @exit					; exit
  5987 398D			l_1224
  5988
  5989 				; optimize OK (SORTINGALGORITHMS), line = 185
  5990
  5991 398D AD D7 4C			lda LEFT
  5992 3990 CD D8 4C			cmp RIGHT
  5993 3993 B0 52			jcs l_123B
  5994
  5995 				; optimize OK (SORTINGALGORITHMS), line = 187
  5996
  5997 3995 AD D8 4C			lda RIGHT
  5998 3998 38 ED D7 4C			sub LEFT
  5999 399C 85 A0			sta :STACKORIGIN+10
  6000 399E A9 00			lda #$00
  6001 39A0 E9 00			sbc #$00
  6002 39A2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6003 39A4 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
  6004 39A6 66 A0			ror :STACKORIGIN+10
  6005 39A8 AD D7 4C			lda LEFT
  6006 39AB 18 65 A0			add :STACKORIGIN+10
  6007 39AE 8D D9 4C			sta MID
  6008
  6009 				; optimize FAIL ('INTERNALMERGESORT', SORTINGALGORITHMS), line = 188
  6010
  6011 39B1 E8				inx
  6012 39B2 AD D9 4C 95 96		mva MID :STACKORIGIN,x
  6013 39B7 E8				inx
  6014 39B8 AD D7 4C 95 96		mva LEFT :STACKORIGIN,x
  6015 39BD 20 6C 39			jsr INTERNALMERGESORT
  6016
  6017 				; optimize FAIL ('INTERNALMERGESORT', SORTINGALGORITHMS), line = 189
  6018
  6019 39C0 E8				inx
  6020 39C1 AD D8 4C 95 96		mva RIGHT :STACKORIGIN,x
  6021 39C6 E8				inx
  6022 39C7 AD D9 4C			lda MID
  6023 39CA 18 69 01			add #$01
  6024 39CD 95 96			sta :STACKORIGIN,x
  6025 39CF 20 6C 39			jsr INTERNALMERGESORT
  6026
  6027 				; optimize OK (SORTINGALGORITHMS), line = 190
  6028
  6029 39D2 AD D7 4C			lda LEFT
  6030 39D5 8D D1 4C			sta MERGE.LEFT
  6031 39D8 AD D9 4C			lda MID
  6032 39DB 8D D2 4C			sta MERGE.MID
  6033 39DE AD D8 4C			lda RIGHT
  6034 39E1 8D D3 4C			sta MERGE.RIGHT
  6035 39E4 20 C7 38			jsr MERGE
  6036 39E7			l_123B
  6037
  6038 				; ------------------------------------------------------------
  6039
  6040 = 4CD7			LEFT	= DATAORIGIN+$040F
  6041 = 4CD8			RIGHT	= DATAORIGIN+$0410
  6042 = 4CD9			MID	= DATAORIGIN+$0411
  6043
  6044 = 4CD7			@VarData	= LEFT
  6045 = 0003			@VarDataSize	= 3
  6046
  6047 39E7			@exit
  6048 					.ifdef @new
  6049 39E7 A9 D7			lda <@VarData
  6050 39E9 85 92			sta :ztmp
  6051 39EB A9 4C			lda >@VarData
  6052 39ED A0 02			ldy #@VarDataSize-1
  6053 39EF 4C 37 24			jmp @FreeMem
  6054 					els
  6055 					rts						; ret
  6056 					eif
  6057 				.endl
  6058 39F2			l_1156
  6059
  6060 				; optimize FAIL ('INTERNALMERGESORT', SORTINGALGORITHMS), line = 195
  6061
  6062 39F2 E8				inx
  6063 39F3 A9 9F 95 96			mva #$9F :STACKORIGIN,x
  6064 39F7 E8				inx
  6065 39F8 A9 00 95 96			mva #$00 :STACKORIGIN,x
  6066 39FC 20 6C 39			jsr INTERNALMERGESORT
  6067
  6068 				; ------------------------------------------------------------
  6069
  6070 39FF			@exit
  6071 					.ifdef @new
  6072 					lda <@VarData
  6073 					sta :ztmp
  6074 					lda >@VarData
  6075 					ldy #@VarDataSize-1
  6076 					jmp @FreeMem
  6077 					els
  6078 39FF 60				rts						; ret
  6079 					eif
  6080 				.endl
  6081
  6082 3A00			.local	COCTAILSORT					; PROCEDURE
  6083
  6084 				; optimize OK (SORTINGALGORITHMS), line = 204
  6085
  6086 3A00 A9 00			lda #$00
  6087 3A02 8D DF 4C			sta LEFT
  6088
  6089 				; optimize OK (SORTINGALGORITHMS), line = 205
  6090
  6091 3A05 A9 9F			lda #$9F
  6092 3A07 8D E0 4C			sta RIGHT
  6093
  6094 				; --- RepeatUntilProlog
  6095 3A0A			l_1281
  6096
  6097 				; optimize OK (SORTINGALGORITHMS), line = 209
  6098
  6099 3A0A A9 00			lda #$00
  6100 3A0C 8D DA 4C			sta SWAPPED
  6101
  6102 				; optimize OK (SORTINGALGORITHMS), line = 211
  6103
  6104 3A0F AD DF 4C			lda LEFT
  6105 3A12 8D DB 4C			sta I
  6106 3A15 AC E0 4C			ldy RIGHT
  6107 3A18 88				dey
  6108 3A19 8C 1D 3A			sty @FORTMP_1293_0
  6109
  6110 3A1C			l_1296
  6111 				; --- ForToDoCondition
  6112 3A1C A9 00			lda @FORTMP_1293_0:#$00
  6113 3A1E CD DB 4C			cmp I
  6114 3A21 90 54			jcc l_12A4
  6115
  6116 				; optimize OK (SORTINGALGORITHMS), line = 213
  6117
  6118 3A23 AD 07 4C			lda OPERATION.ABORTED
  6119 3A26 F0 03			jeq l_12B0
  6120 3A28 4C FB 3A			jmp @exit					; exit
  6121 3A2B			l_12B0
  6122
  6123 				; optimize OK (SORTINGALGORITHMS), line = 214
  6124
  6125 3A2B AC DB 4C			ldy I
  6126 3A2E C8				iny
  6127 3A2F 8C DC 4C			sty J
  6128
  6129 				; optimize OK (SORTINGALGORITHMS), line = 215
  6130
  6131 3A32 AD DB 4C			lda I
  6132 3A35 20 B3 32			jsr ARRAYACCESS.GETVALUE
  6133 3A38 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  6134 3A3B 8D DD 4C			sta V1
  6135
  6136 				; optimize OK (SORTINGALGORITHMS), line = 216
  6137
  6138 3A3E AD DC 4C			lda J
  6139 3A41 20 B3 32			jsr ARRAYACCESS.GETVALUE
  6140 3A44 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  6141 3A47 8D DE 4C			sta V2
  6142
  6143 				; optimize OK (SORTINGALGORITHMS), line = 217
  6144
  6145 3A4A CD DD 4C			cmp V1
  6146 3A4D B0 23			jcs l_12DF
  6147
  6148 				; optimize OK (SORTINGALGORITHMS), line = 219
  6149
  6150 3A4F AD DB 4C			lda I
  6151 3A52 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  6152 3A55 AD DE 4C			lda V2
  6153 3A58 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  6154 3A5B 20 DE 32			jsr ARRAYACCESS.SETVALUE
  6155
  6156 				; optimize OK (SORTINGALGORITHMS), line = 220
  6157
  6158 3A5E AD DC 4C			lda J
  6159 3A61 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  6160 3A64 AD DD 4C			lda V1
  6161 3A67 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  6162 3A6A 20 DE 32			jsr ARRAYACCESS.SETVALUE
  6163
  6164 				; optimize OK (SORTINGALGORITHMS), line = 221
  6165
  6166 3A6D A9 01			lda #$01
  6167 3A6F 8D DA 4C			sta SWAPPED
  6168 3A72			l_12DF
  6169
  6170 				; --- ForToDoEpilog
  6171 3A72 EE DB 4C			inc I
  6172 3A75 D0 A5			jne l_1296
  6173 3A77			l_12A4
  6174
  6175 				; optimize OK (SORTINGALGORITHMS), line = 225
  6176
  6177 3A77 AD DA 4C			lda SWAPPED
  6178 3A7A D0 03			jne l_1308
  6179 3A7C 4C FB 3A			jmp b_1281					; break
  6180 3A7F			l_1308
  6181
  6182 				; optimize OK (SORTINGALGORITHMS), line = 227
  6183
  6184 3A7F A9 00			lda #$00
  6185 3A81 8D DA 4C			sta SWAPPED
  6186
  6187 				; optimize FAIL (0, SORTINGALGORITHMS), line = 228
  6188
  6189 3A84 CE E0 4C			dec RIGHT
  6190
  6191 				; optimize OK (SORTINGALGORITHMS), line = 230
  6192
  6193 3A87 AC E0 4C			ldy RIGHT
  6194 3A8A 88				dey
  6195 3A8B 8C DB 4C			sty I
  6196
  6197 3A8E			l_1324
  6198 				; --- ForToDoCondition
  6199 3A8E AD DB 4C			lda I
  6200 3A91 CD DF 4C			cmp LEFT
  6201 3A94 90 5A			jcc l_1332
  6202
  6203 				; optimize OK (SORTINGALGORITHMS), line = 232
  6204
  6205 3A96 AD 07 4C			lda OPERATION.ABORTED
  6206 3A99 F0 03			jeq l_133E
  6207 3A9B 4C FB 3A			jmp @exit					; exit
  6208 3A9E			l_133E
  6209
  6210 				; optimize OK (SORTINGALGORITHMS), line = 233
  6211
  6212 3A9E AC DB 4C			ldy I
  6213 3AA1 C8				iny
  6214 3AA2 8C DC 4C			sty J
  6215
  6216 				; optimize OK (SORTINGALGORITHMS), line = 234
  6217
  6218 3AA5 AD DB 4C			lda I
  6219 3AA8 20 B3 32			jsr ARRAYACCESS.GETVALUE
  6220 3AAB AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  6221 3AAE 8D DD 4C			sta V1
  6222
  6223 				; optimize OK (SORTINGALGORITHMS), line = 235
  6224
  6225 3AB1 AD DC 4C			lda J
  6226 3AB4 20 B3 32			jsr ARRAYACCESS.GETVALUE
  6227 3AB7 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  6228 3ABA 8D DE 4C			sta V2
  6229
  6230 				; optimize OK (SORTINGALGORITHMS), line = 236
  6231
  6232 3ABD CD DD 4C			cmp V1
  6233 3AC0 B0 23			jcs l_136D
  6234
  6235 				; optimize OK (SORTINGALGORITHMS), line = 238
  6236
  6237 3AC2 AD DB 4C			lda I
  6238 3AC5 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  6239 3AC8 AD DE 4C			lda V2
  6240 3ACB 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  6241 3ACE 20 DE 32			jsr ARRAYACCESS.SETVALUE
  6242
  6243 				; optimize OK (SORTINGALGORITHMS), line = 239
  6244
  6245 3AD1 AD DC 4C			lda J
  6246 3AD4 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  6247 3AD7 AD DD 4C			lda V1
  6248 3ADA 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  6249 3ADD 20 DE 32			jsr ARRAYACCESS.SETVALUE
  6250
  6251 				; optimize OK (SORTINGALGORITHMS), line = 240
  6252
  6253 3AE0 A9 01			lda #$01
  6254 3AE2 8D DA 4C			sta SWAPPED
  6255 3AE5			l_136D
  6256
  6257 				; --- ForToDoEpilog
  6258 3AE5 AD DB 4C			lda I
  6259 3AE8 F0 06			beq l_1332
  6260 3AEA CE DB 4C			dec I
  6261 3AED 4C 8E 3A			jmp l_1324
  6262 3AF0			l_1332
  6263
  6264 				; optimize FAIL (0, SORTINGALGORITHMS), line = 244
  6265
  6266 3AF0 EE DF 4C			inc LEFT
  6267
  6268 				; optimize OK (SORTINGALGORITHMS), line = 246
  6269
  6270 3AF3 AD DA 4C			lda SWAPPED
  6271 3AF6 F0 03 4C 0A 3A		jne l_1281
  6272 3AFB			b_1281
  6273
  6274 				; ------------------------------------------------------------
  6275
  6276 = 4CDA			SWAPPED	= DATAORIGIN+$0412
  6277 = 4CDB			I	= DATAORIGIN+$0413
  6278 = 4CDC			J	= DATAORIGIN+$0414
  6279 = 4CDD			V1	= DATAORIGIN+$0415
  6280 = 4CDE			V2	= DATAORIGIN+$0416
  6281 = 4CDF			LEFT	= DATAORIGIN+$0417
  6282 = 4CE0			RIGHT	= DATAORIGIN+$0418
  6283
  6284 = 4CDA			@VarData	= SWAPPED
  6285 = 0007			@VarDataSize	= 7
  6286
  6287 3AFB			@exit
  6288 					.ifdef @new
  6289 					lda <@VarData
  6290 					sta :ztmp
  6291 					lda >@VarData
  6292 					ldy #@VarDataSize-1
  6293 					jmp @FreeMem
  6294 					els
  6295 3AFB 60				rts						; ret
  6296 					eif
  6297 				.endl
  6298
  6299 3AFC			.local	GNOMESORT					; PROCEDURE
  6300
  6301 				; optimize OK (SORTINGALGORITHMS), line = 254
  6302
  6303 3AFC A9 01			lda #$01
  6304 3AFE 8D E2 4C			sta I
  6305
  6306 				; optimize OK (SORTINGALGORITHMS), line = 255
  6307
  6308 3B01 A9 02			lda #$02
  6309 3B03 8D E3 4C			sta J
  6310
  6311 				; --- WhileProlog
  6312 3B06 4C 6B 3B			jmp l_13A3
  6313 3B09			l_13A4
  6314
  6315 				; optimize OK (SORTINGALGORITHMS), line = 258
  6316
  6317 3B09 AD 07 4C			lda OPERATION.ABORTED
  6318 3B0C F0 03			jeq l_13B0
  6319 3B0E 4C 72 3B			jmp @exit					; exit
  6320 3B11			l_13B0
  6321
  6322 				; optimize OK (SORTINGALGORITHMS), line = 259
  6323
  6324 3B11 AC E2 4C			ldy I
  6325 3B14 88				dey
  6326 3B15 98				tya
  6327 3B16 20 B3 32			jsr ARRAYACCESS.GETVALUE
  6328 3B19 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  6329 3B1C 8D E4 4C			sta V1
  6330
  6331 				; optimize OK (SORTINGALGORITHMS), line = 260
  6332
  6333 3B1F AD E2 4C			lda I
  6334 3B22 20 B3 32			jsr ARRAYACCESS.GETVALUE
  6335 3B25 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  6336 3B28 8D E5 4C			sta V2
  6337
  6338 				; optimize OK (SORTINGALGORITHMS), line = 261
  6339
  6340 3B2B CD E4 4C			cmp V1
  6341 3B2E 90 0C			jcc l_13D9
  6342
  6343 				; optimize OK (SORTINGALGORITHMS), line = 263
  6344
  6345 3B30 AD E3 4C			lda J
  6346 3B33 8D E2 4C			sta I
  6347
  6348 				; optimize FAIL (0, SORTINGALGORITHMS), line = 264
  6349
  6350 3B36 EE E3 4C			inc J
  6351 3B39 4C 6B 3B			jmp l_13ED
  6352 3B3C			l_13D9
  6353
  6354 				; optimize OK (SORTINGALGORITHMS), line = 267
  6355
  6356 3B3C AD E2 4C			lda I
  6357 3B3F 38 E9 01			sub #$01
  6358 3B42 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  6359 3B45 AD E5 4C			lda V2
  6360 3B48 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  6361 3B4B 20 DE 32			jsr ARRAYACCESS.SETVALUE
  6362
  6363 				; optimize OK (SORTINGALGORITHMS), line = 268
  6364
  6365 3B4E AD E2 4C			lda I
  6366 3B51 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  6367 3B54 AD E4 4C			lda V1
  6368 3B57 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  6369 3B5A 20 DE 32			jsr ARRAYACCESS.SETVALUE
  6370
  6371 				; optimize FAIL (0, SORTINGALGORITHMS), line = 269
  6372
  6373 3B5D CE E2 4C			dec I
  6374
  6375 				; optimize OK (SORTINGALGORITHMS), line = 270
  6376
  6377 3B60 D0 09			jne l_1415
  6378
  6379 				; optimize OK (SORTINGALGORITHMS), line = 272
  6380
  6381 3B62 AD E3 4C			lda J
  6382 3B65 8D E2 4C			sta I
  6383
  6384 				; optimize FAIL (0, SORTINGALGORITHMS), line = 273
  6385
  6386 3B68 EE E3 4C			inc J
  6387 3B6B			l_1415
  6388 3B6B			l_13ED
  6389 3B6B			l_13A3
  6390
  6391 				; optimize OK (SORTINGALGORITHMS), line = 256
  6392
  6393 3B6B AD E2 4C			lda I
  6394 3B6E C9 A0			cmp #$A0
  6395 3B70 90 97			jcc l_13A4
  6396
  6397 				; ------------------------------------------------------------
  6398
  6399 = 4CE2			I	= DATAORIGIN+$041A
  6400 = 4CE3			J	= DATAORIGIN+$041B
  6401 = 4CE4			V1	= DATAORIGIN+$041C
  6402 = 4CE5			V2	= DATAORIGIN+$041D
  6403
  6404 = 4CE2			@VarData	= I
  6405 = 0004			@VarDataSize	= 4
  6406
  6407 3B72			@exit
  6408 					.ifdef @new
  6409 					lda <@VarData
  6410 					sta :ztmp
  6411 					lda >@VarData
  6412 					ldy #@VarDataSize-1
  6413 					jmp @FreeMem
  6414 					els
  6415 3B72 60				rts						; ret
  6416 					eif
  6417 				.endl
  6418
  6419 3B73			.local	CIRCLESORT					; PROCEDURE
  6420
  6421 3B73 4C AA 3C			jmp l_1432
  6422
  6423 3B76			.local	CIRCLESORTINTERNAL				; PROCEDURE
  6424 					.ifdef @VarData
  6425 3B76 A9 EA		@new	lda <@VarData
  6426 3B78 85 92			sta :ztmp
  6427 3B7A A9 4C			lda >@VarData
  6428 3B7C A0 06			ldy #@VarDataSize-1
  6429 3B7E 20 18 24			jsr @AllocMem
  6430 					eif
  6431
  6432 				; ------------------------------------------------------------
  6433
  6434 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  6435 				; as Pointer
  6436 3B81 B5 96			lda :STACKORIGIN,x
  6437 3B83 8D EA 4C			sta LEFT
  6438 3B86 CA				dex
  6439 3B87 30 06			jmi @main
  6440
  6441 				; ------------------------------------------------------------
  6442
  6443 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  6444 				; as Pointer
  6445 3B89 B5 96			lda :STACKORIGIN,x
  6446 3B8B 8D EB 4C			sta RIGHT
  6447 3B8E CA				dex
  6448 3B8F			@main
  6449
  6450 				; optimize OK (SORTINGALGORITHMS), line = 288
  6451
  6452 3B8F AD EA 4C			lda LEFT
  6453 3B92 CD EB 4C			cmp RIGHT
  6454 3B95 90 03 4C 9F 3C		jcs l_144F
  6455
  6456 				; optimize OK (SORTINGALGORITHMS), line = 290
  6457
  6458 3B9A 8D EC 4C			sta L
  6459
  6460 				; optimize OK (SORTINGALGORITHMS), line = 291
  6461
  6462 3B9D AD EB 4C			lda RIGHT
  6463 3BA0 8D ED 4C			sta R
  6464
  6465 				; --- WhileProlog
  6466 3BA3 4C 04 3C			jmp l_145E
  6467 3BA6			l_145F
  6468
  6469 				; optimize OK (SORTINGALGORITHMS), line = 295
  6470
  6471 3BA6 AD 07 4C			lda OPERATION.ABORTED
  6472 3BA9 F0 03			jeq l_146B
  6473 3BAB 4C 9F 3C			jmp @exit					; exit
  6474 3BAE			l_146B
  6475
  6476 				; optimize OK (SORTINGALGORITHMS), line = 296
  6477
  6478 3BAE AD ED 4C			lda R
  6479 3BB1 20 B3 32			jsr ARRAYACCESS.GETVALUE
  6480 3BB4 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  6481 3BB7 8D EF 4C			sta V1
  6482
  6483 				; optimize OK (SORTINGALGORITHMS), line = 297
  6484
  6485 3BBA AD EC 4C			lda L
  6486 3BBD 20 B3 32			jsr ARRAYACCESS.GETVALUE
  6487 3BC0 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  6488 3BC3 8D F0 4C			sta V2
  6489
  6490 				; optimize OK (SORTINGALGORITHMS), line = 298
  6491
  6492 3BC6 AD EF 4C			lda V1
  6493 3BC9 CD F0 4C			cmp V2
  6494 3BCC B0 30			jcs l_1490
  6495
  6496 				; optimize OK (SORTINGALGORITHMS), line = 300
  6497
  6498 3BCE AD ED 4C			lda R
  6499 3BD1 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  6500 3BD4 AD F0 4C			lda V2
  6501 3BD7 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  6502 3BDA 20 DE 32			jsr ARRAYACCESS.SETVALUE
  6503
  6504 				; optimize OK (SORTINGALGORITHMS), line = 301
  6505
  6506 3BDD AD EC 4C			lda L
  6507 3BE0 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  6508 3BE3 AD EF 4C			lda V1
  6509 3BE6 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  6510 3BE9 20 DE 32			jsr ARRAYACCESS.SETVALUE
  6511
  6512 				; optimize FAIL (0, SORTINGALGORITHMS), line = 302
  6513
  6514 3BEC EE E6 4C D0 0D EE + 	ind SWAPS
  6515 3BFE			l_1490
  6516
  6517 				; optimize FAIL (0, SORTINGALGORITHMS), line = 304
  6518
  6519 3BFE EE EC 4C			inc L
  6520
  6521 				; optimize FAIL (0, SORTINGALGORITHMS), line = 305
  6522
  6523 3C01 CE ED 4C			dec R
  6524 3C04			l_145E
  6525
  6526 				; optimize OK (SORTINGALGORITHMS), line = 293
  6527
  6528 3C04 AD EC 4C			lda L
  6529 3C07 CD ED 4C			cmp R
  6530 3C0A 90 9A			jcc l_145F
  6531
  6532 				; optimize OK (SORTINGALGORITHMS), line = 308
  6533
  6534 3C0C CD ED 4C			cmp R
  6535 3C0F D0 55			jne l_14D0
  6536
  6537 				; optimize OK (SORTINGALGORITHMS), line = 310
  6538
  6539 3C11 AC EC 4C			ldy L
  6540 3C14 C8				iny
  6541 3C15 98				tya
  6542 3C16 20 B3 32			jsr ARRAYACCESS.GETVALUE
  6543 3C19 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  6544 3C1C 8D EF 4C			sta V1
  6545
  6546 				; optimize OK (SORTINGALGORITHMS), line = 311
  6547
  6548 3C1F AD EC 4C			lda L
  6549 3C22 20 B3 32			jsr ARRAYACCESS.GETVALUE
  6550 3C25 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  6551 3C28 8D F0 4C			sta V2
  6552
  6553 				; optimize OK (SORTINGALGORITHMS), line = 312
  6554
  6555 3C2B AD EF 4C			lda V1
  6556 3C2E CD F0 4C			cmp V2
  6557 3C31 B0 33			jcs l_14F7
  6558
  6559 				; optimize OK (SORTINGALGORITHMS), line = 314
  6560
  6561 3C33 AD EC 4C			lda L
  6562 3C36 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  6563 3C39 AD EF 4C			lda V1
  6564 3C3C 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  6565 3C3F 20 DE 32			jsr ARRAYACCESS.SETVALUE
  6566
  6567 				; optimize OK (SORTINGALGORITHMS), line = 315
  6568
  6569 3C42 AD EC 4C			lda L
  6570 3C45 18 69 01			add #$01
  6571 3C48 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  6572 3C4B AD F0 4C			lda V2
  6573 3C4E 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  6574 3C51 20 DE 32			jsr ARRAYACCESS.SETVALUE
  6575
  6576 				; optimize FAIL (0, SORTINGALGORITHMS), line = 316
  6577
  6578 3C54 EE E6 4C D0 0D EE + 	ind SWAPS
  6579 3C66			l_14F7
  6580 3C66			l_14D0
  6581
  6582 				; optimize OK (SORTINGALGORITHMS), line = 320
  6583
  6584 3C66 AD EC 4C			lda L
  6585 3C69 18 6D ED 4C			add R
  6586 3C6D 85 9F			sta :STACKORIGIN+9
  6587 3C6F A9 00			lda #$00
  6588 3C71 69 00			adc #$00
  6589 3C73 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6590 3C75 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  6591 3C77 66 9F			ror :STACKORIGIN+9
  6592 3C79 A5 9F			lda :STACKORIGIN+9
  6593 3C7B 8D EE 4C			sta MID
  6594
  6595 				; optimize FAIL ('CIRCLESORTINTERNAL', SORTINGALGORITHMS), line = 322
  6596
  6597 3C7E E8				inx
  6598 3C7F AD EE 4C 95 96		mva MID :STACKORIGIN,x
  6599 3C84 E8				inx
  6600 3C85 AD EA 4C 95 96		mva LEFT :STACKORIGIN,x
  6601 3C8A 20 76 3B			jsr CIRCLESORTINTERNAL
  6602
  6603 				; optimize FAIL ('CIRCLESORTINTERNAL', SORTINGALGORITHMS), line = 323
  6604
  6605 3C8D E8				inx
  6606 3C8E AD EB 4C 95 96		mva RIGHT :STACKORIGIN,x
  6607 3C93 E8				inx
  6608 3C94 AD EE 4C			lda MID
  6609 3C97 18 69 01			add #$01
  6610 3C9A 95 96			sta :STACKORIGIN,x
  6611 3C9C 20 76 3B			jsr CIRCLESORTINTERNAL
  6612 3C9F			l_144F
  6613
  6614 				; ------------------------------------------------------------
  6615
  6616 = 4CEA			LEFT	= DATAORIGIN+$0422
  6617 = 4CEB			RIGHT	= DATAORIGIN+$0423
  6618 = 4CEC			L	= DATAORIGIN+$0424
  6619 = 4CED			R	= DATAORIGIN+$0425
  6620 = 4CEE			MID	= DATAORIGIN+$0426
  6621 = 4CEF			V1	= DATAORIGIN+$0427
  6622 = 4CF0			V2	= DATAORIGIN+$0428
  6623
  6624 = 4CEA			@VarData	= LEFT
  6625 = 0007			@VarDataSize	= 7
  6626
  6627 3C9F			@exit
  6628 					.ifdef @new
  6629 3C9F A9 EA			lda <@VarData
  6630 3CA1 85 92			sta :ztmp
  6631 3CA3 A9 4C			lda >@VarData
  6632 3CA5 A0 06			ldy #@VarDataSize-1
  6633 3CA7 4C 37 24			jmp @FreeMem
  6634 					els
  6635 					rts						; ret
  6636 					eif
  6637 				.endl
  6638 3CAA			l_1432
  6639
  6640 				; optimize OK (SORTINGALGORITHMS), line = 328
  6641
  6642 3CAA A9 01			lda #$01
  6643 3CAC 8D E6 4C			sta SWAPS
  6644 3CAF A9 00			lda #$00
  6645 3CB1 8D E7 4C			sta SWAPS+1
  6646 3CB4 8D E8 4C			sta SWAPS+2
  6647 3CB7 8D E9 4C			sta SWAPS+3
  6648
  6649 				; --- WhileProlog
  6650 3CBA 4C E0 3C			jmp l_153E
  6651 3CBD			l_153F
  6652
  6653 				; optimize OK (SORTINGALGORITHMS), line = 331
  6654
  6655 3CBD AD 07 4C			lda OPERATION.ABORTED
  6656 3CC0 F0 03			jeq l_154B
  6657 3CC2 4C F0 3C			jmp @exit					; exit
  6658 3CC5			l_154B
  6659
  6660 				; optimize OK (SORTINGALGORITHMS), line = 332
  6661
  6662 3CC5 A9 00			lda #$00
  6663 3CC7 8D E6 4C			sta SWAPS
  6664 3CCA 8D E7 4C			sta SWAPS+1
  6665 3CCD 8D E8 4C			sta SWAPS+2
  6666 3CD0 8D E9 4C			sta SWAPS+3
  6667
  6668 				; optimize FAIL ('CIRCLESORTINTERNAL', SORTINGALGORITHMS), line = 333
  6669
  6670 3CD3 E8				inx
  6671 3CD4 A9 9F 95 96			mva #$9F :STACKORIGIN,x
  6672 3CD8 E8				inx
  6673 3CD9 A9 00 95 96			mva #$00 :STACKORIGIN,x
  6674 3CDD 20 76 3B			jsr CIRCLESORTINTERNAL
  6675 3CE0			l_153E
  6676
  6677 				; optimize OK (SORTINGALGORITHMS), line = 329
  6678
  6679 3CE0 AD E9 4C			lda SWAPS+3
  6680 3CE3 30 0B			bmi @+
  6681 3CE5 0D E8 4C			ora SWAPS+2
  6682 3CE8 0D E7 4C			ora SWAPS+1
  6683 3CEB 0D E6 4C			ora SWAPS
  6684 3CEE D0 CD			jne l_153F
  6685 				@
  6686
  6687 				; ------------------------------------------------------------
  6688
  6689 = 4CE6			SWAPS	= DATAORIGIN+$041E
  6690
  6691 = 4CE6			@VarData	= SWAPS
  6692 = 0004			@VarDataSize	= 4
  6693
  6694 3CF0			@exit
  6695 					.ifdef @new
  6696 					lda <@VarData
  6697 					sta :ztmp
  6698 					lda >@VarData
  6699 					ldy #@VarDataSize-1
  6700 					jmp @FreeMem
  6701 					els
  6702 3CF0 60				rts						; ret
  6703 					eif
  6704 				.endl
  6705
  6706 3CF1			.local	COMBSORT					; PROCEDURE
  6707
  6708 				; optimize OK (SORTINGALGORITHMS), line = 343
  6709
  6710 3CF1 A9 A0			lda #$A0
  6711 3CF3 8D F2 4C			sta GAP
  6712
  6713 				; optimize OK (SORTINGALGORITHMS), line = 344
  6714
  6715 3CF6 A9 01			lda #$01
  6716 3CF8 8D F3 4C			sta SWAPPED
  6717
  6718 				; --- WhileProlog
  6719 3CFB 4C CA 3D			jmp l_156D
  6720 3CFE			l_156E
  6721
  6722 				; optimize FAIL ('divmulINT.REAL', SORTINGALGORITHMS), line = 348
  6723
  6724 3CFE E8				inx
  6725 3CFF AD F2 4C 95 96		mva GAP :STACKORIGIN,x
  6726 3D04 E8				inx
  6727 3D05 A9 4D 95 96			mva #$4D :STACKORIGIN,x
  6728 3D09 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  6729 3D0D A9 00 95 B6			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  6730 3D11 A9 00 95 C6			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  6731 3D15 A9 00 95 A5			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  6732 3D19 A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  6733 3D1D A9 00 95 C5			mva #$00 :STACKORIGIN-1+STACKWIDTH*3,x
  6734 3D21 20 3A 21			jsr @expandToREAL1
  6735 3D24 20 56 22			jsr divmulINT.REAL
  6736 3D27 CA				dex
  6737 3D28 B5 96			lda :STACKORIGIN,x
  6738 3D2A 85 86			sta @REAL_TRUNC.A
  6739 3D2C B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6740 3D2E 85 87			sta @REAL_TRUNC.A+1
  6741 3D30 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  6742 3D32 85 88			sta @REAL_TRUNC.A+2
  6743 3D34 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  6744 3D36 85 89			sta @REAL_TRUNC.A+3
  6745 3D38 20 E4 23			jsr @REAL_TRUNC
  6746 3D3B A5 86			lda @REAL_TRUNC.RESULT
  6747 3D3D 95 96			sta :STACKORIGIN,x
  6748 3D3F A5 87			lda @REAL_TRUNC.RESULT+1
  6749 3D41 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6750 3D43 A5 88			lda @REAL_TRUNC.RESULT+2
  6751 3D45 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6752 3D47 A5 89			lda @REAL_TRUNC.RESULT+3
  6753 3D49 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6754 3D4B B5 96			lda :STACKORIGIN,x
  6755 3D4D 8D F2 4C			sta GAP
  6756 3D50 CA				dex
  6757
  6758 				; optimize OK (SORTINGALGORITHMS), line = 349
  6759
  6760 3D51 AD F2 4C			lda GAP
  6761 3D54 C9 01			cmp #$01
  6762 3D56 B0 05			jcs l_158D
  6763
  6764 				; optimize OK (SORTINGALGORITHMS), line = 351
  6765
  6766 3D58 A9 01			lda #$01
  6767 3D5A 8D F2 4C			sta GAP
  6768 3D5D			l_158D
  6769
  6770 				; optimize OK (SORTINGALGORITHMS), line = 354
  6771
  6772 3D5D A9 00			lda #$00
  6773 3D5F 8D F3 4C			sta SWAPPED
  6774
  6775 				; optimize OK (SORTINGALGORITHMS), line = 355
  6776
  6777 3D62 8D F1 4C			sta I
  6778 3D65 A9 9F			lda #$9F
  6779 3D67 38 ED F2 4C			sub GAP
  6780 3D6B 8D 6F 3D			sta @FORTMP_15A4_0
  6781
  6782 3D6E			l_15A7
  6783 				; --- ForToDoCondition
  6784 3D6E A9 00			lda @FORTMP_15A4_0:#$00
  6785 3D70 CD F1 4C			cmp I
  6786 3D73 90 55			jcc l_15B5
  6787
  6788 				; optimize OK (SORTINGALGORITHMS), line = 357
  6789
  6790 3D75 AD 07 4C			lda OPERATION.ABORTED
  6791 3D78 F0 03			jeq l_15C1
  6792 3D7A 4C DD 3D			jmp @exit					; exit
  6793 3D7D			l_15C1
  6794
  6795 				; optimize OK (SORTINGALGORITHMS), line = 358
  6796
  6797 3D7D AD F1 4C			lda I
  6798 3D80 20 B3 32			jsr ARRAYACCESS.GETVALUE
  6799 3D83 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  6800 3D86 8D F4 4C			sta V1
  6801
  6802 				; optimize OK (SORTINGALGORITHMS), line = 359
  6803
  6804 3D89 AD F1 4C			lda I
  6805 3D8C 18 6D F2 4C			add GAP
  6806 3D90 20 B3 32			jsr ARRAYACCESS.GETVALUE
  6807 3D93 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  6808 3D96 8D F5 4C			sta V2
  6809
  6810 				; optimize OK (SORTINGALGORITHMS), line = 360
  6811
  6812 3D99 CD F4 4C			cmp V1
  6813 3D9C B0 27			jcs l_15EC
  6814
  6815 				; optimize OK (SORTINGALGORITHMS), line = 362
  6816
  6817 3D9E AD F1 4C			lda I
  6818 3DA1 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  6819 3DA4 AD F5 4C			lda V2
  6820 3DA7 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  6821 3DAA 20 DE 32			jsr ARRAYACCESS.SETVALUE
  6822
  6823 				; optimize OK (SORTINGALGORITHMS), line = 363
  6824
  6825 3DAD AD F1 4C			lda I
  6826 3DB0 18 6D F2 4C			add GAP
  6827 3DB4 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  6828 3DB7 AD F4 4C			lda V1
  6829 3DBA 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  6830 3DBD 20 DE 32			jsr ARRAYACCESS.SETVALUE
  6831
  6832 				; optimize OK (SORTINGALGORITHMS), line = 364
  6833
  6834 3DC0 A9 01			lda #$01
  6835 3DC2 8D F3 4C			sta SWAPPED
  6836 3DC5			l_15EC
  6837
  6838 				; --- ForToDoEpilog
  6839 3DC5 EE F1 4C			inc I
  6840 3DC8 D0 A4			jne l_15A7
  6841 3DCA			l_15B5
  6842 3DCA			l_156D
  6843
  6844 				; optimize OK (SORTINGALGORITHMS), line = 346
  6845
  6846 3DCA A0 01			ldy #1
  6847 3DCC AD F2 4C			lda GAP
  6848 3DCF C9 02			cmp #$02
  6849 3DD1 B0 01			bcs @+
  6850 3DD3 88				dey
  6851 				@
  6852 3DD4 98				tya
  6853 3DD5 0D F3 4C			ora SWAPPED
  6854 3DD8 F0 03 4C FE 3C		jne l_156E
  6855
  6856 				; ------------------------------------------------------------
  6857
  6858 = 4CF1			I	= DATAORIGIN+$0429
  6859 = 4CF2			GAP	= DATAORIGIN+$042A
  6860 = 4CF3			SWAPPED	= DATAORIGIN+$042B
  6861 = 4CF4			V1	= DATAORIGIN+$042C
  6862 = 4CF5			V2	= DATAORIGIN+$042D
  6863
  6864 = 4CF1			@VarData	= I
  6865 = 0005			@VarDataSize	= 5
  6866
  6867 3DDD			@exit
  6868 					.ifdef @new
  6869 					lda <@VarData
  6870 					sta :ztmp
  6871 					lda >@VarData
  6872 					ldy #@VarDataSize-1
  6873 					jmp @FreeMem
  6874 					els
  6875 3DDD 60				rts						; ret
  6876 					eif
  6877 				.endl
  6878
  6879 3DDE			.local	PANCAKESORT					; PROCEDURE
  6880
  6881 3DDE 4C 28 3E			jmp l_1622
  6882
  6883 3DE1			.local	FLIP						; PROCEDURE
  6884 3DE1 8D F7 4C			sta LAST
  6885
  6886 				; optimize OK (SORTINGALGORITHMS), line = 376
  6887
  6888 3DE4 38 E9 01			sub #$01
  6889 3DE7 85 9F			sta :STACKORIGIN+9
  6890 3DE9 A9 00			lda #$00
  6891 3DEB E9 00			sbc #$00
  6892 3DED 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6893 3DEF 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  6894 3DF1 66 9F			ror :STACKORIGIN+9
  6895 3DF3 A5 9F			lda :STACKORIGIN+9
  6896 3DF5 8D F9 4C			sta H
  6897
  6898 				; optimize OK (SORTINGALGORITHMS), line = 377
  6899
  6900 3DF8 A9 00			lda #$00
  6901 3DFA 8D F8 4C			sta I
  6902
  6903 3DFD			l_163E
  6904 				; --- ForToDoCondition
  6905 3DFD AD F8 4C			lda I
  6906 3E00 CD F9 4C			cmp H
  6907 3E03 90 02			scc
  6908 3E05 D0 20			jne l_164C
  6909
  6910 				; optimize OK (SORTINGALGORITHMS), line = 379
  6911
  6912 3E07 AD 07 4C			lda OPERATION.ABORTED
  6913 3E0A F0 03			jeq l_1658
  6914 3E0C 4C 27 3E			jmp @exit					; exit
  6915 3E0F			l_1658
  6916
  6917 				; optimize OK (SORTINGALGORITHMS), line = 380
  6918
  6919 3E0F AD F7 4C			lda LAST
  6920 3E12 38 ED F8 4C			sub I
  6921 3E16 8D A8 4C			sta ARRAYACCESS.SWAPVALUES.INDEX2
  6922 3E19 AD F8 4C			lda I
  6923 3E1C 8D A7 4C			sta ARRAYACCESS.SWAPVALUES.INDEX1
  6924 3E1F 20 9B 33			jsr ARRAYACCESS.SWAPVALUES
  6925
  6926 				; --- ForToDoEpilog
  6927 3E22 EE F8 4C			inc I
  6928 3E25 D0 D6			jne l_163E
  6929 3E27			l_164C
  6930
  6931 				; ------------------------------------------------------------
  6932
  6933 = 4CF7			LAST	= DATAORIGIN+$042F
  6934 = 4CF8			I	= DATAORIGIN+$0430
  6935 = 4CF9			H	= DATAORIGIN+$0431
  6936
  6937 = 4CF7			@VarData	= LAST
  6938 = 0003			@VarDataSize	= 3
  6939
  6940 3E27			@exit
  6941 					.ifdef @new
  6942 					lda <@VarData
  6943 					sta :ztmp
  6944 					lda >@VarData
  6945 					ldy #@VarDataSize-1
  6946 					jmp @FreeMem
  6947 					els
  6948 3E27 60				rts						; ret
  6949 					eif
  6950 				.endl
  6951 3E28			l_1622
  6952
  6953 				; optimize OK (SORTINGALGORITHMS), line = 387
  6954
  6955 3E28 A9 A0			lda #$A0
  6956 3E2A 8D FA 4C			sta I
  6957
  6958 3E2D			l_1677
  6959 				; --- ForToDoCondition
  6960 3E2D AD FA 4C			lda I
  6961 3E30 C9 01			cmp #$01
  6962 3E32 90 6E			jcc l_1685
  6963
  6964 				; optimize OK (SORTINGALGORITHMS), line = 389
  6965
  6966 3E34 A9 00			lda #$00
  6967 3E36 8D FC 4C			sta MAXPOS
  6968
  6969 				; optimize OK (SORTINGALGORITHMS), line = 390
  6970
  6971 3E39 20 B3 32			jsr ARRAYACCESS.GETVALUE
  6972 3E3C AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  6973 3E3F 8D FD 4C			sta VAL
  6974
  6975 				; optimize OK (SORTINGALGORITHMS), line = 391
  6976
  6977 3E42 A9 00			lda #$00
  6978 3E44 8D FB 4C			sta J
  6979 3E47 AC FA 4C			ldy I
  6980 3E4A 88				dey
  6981 3E4B 8C 4F 3E			sty @FORTMP_169C_0
  6982
  6983 3E4E			l_169F
  6984 				; --- ForToDoCondition
  6985 3E4E A9 00			lda @FORTMP_169C_0:#$00
  6986 3E50 CD FB 4C			cmp J
  6987 3E53 90 2A			jcc l_16AD
  6988
  6989 				; optimize OK (SORTINGALGORITHMS), line = 393
  6990
  6991 3E55 AD 07 4C			lda OPERATION.ABORTED
  6992 3E58 F0 03			jeq l_16B9
  6993 3E5A 4C A2 3E			jmp @exit					; exit
  6994 3E5D			l_16B9
  6995
  6996 				; optimize OK (SORTINGALGORITHMS), line = 394
  6997
  6998 3E5D AD FB 4C			lda J
  6999 3E60 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7000 3E63 AD FD 4C			lda VAL
  7001 3E66 CD 9C 4C			cmp ARRAYACCESS.GETVALUE.RESULT
  7002 3E69 B0 0F			jcs l_16D1
  7003 				@
  7004
  7005 				; optimize OK (SORTINGALGORITHMS), line = 396
  7006
  7007 3E6B AD FB 4C			lda J
  7008 3E6E 8D FC 4C			sta MAXPOS
  7009
  7010 				; optimize OK (SORTINGALGORITHMS), line = 397
  7011
  7012 3E71 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7013 3E74 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  7014 3E77 8D FD 4C			sta VAL
  7015 3E7A			l_16D1
  7016
  7017 				; --- ForToDoEpilog
  7018 3E7A EE FB 4C			inc J
  7019 3E7D D0 CF			jne l_169F
  7020 3E7F			l_16AD
  7021
  7022 				; optimize OK (SORTINGALGORITHMS), line = 401
  7023
  7024 3E7F AD FA 4C			lda I
  7025 3E82 38 E9 01			sub #$01
  7026 3E85 CD FC 4C			cmp MAXPOS
  7027 3E88 D0 03			jne l_16FE
  7028 3E8A 4C 9D 3E			jmp c_1677					; continue
  7029 3E8D			l_16FE
  7030
  7031 				; optimize OK (SORTINGALGORITHMS), line = 406
  7032
  7033 3E8D AD FC 4C			lda MAXPOS
  7034 3E90 F0 03			jeq l_1713
  7035
  7036 				; optimize OK (SORTINGALGORITHMS), line = 407
  7037
  7038 3E92 20 E1 3D			jsr FLIP
  7039 3E95			l_1713
  7040
  7041 				; optimize OK (SORTINGALGORITHMS), line = 409
  7042
  7043 3E95 AC FA 4C			ldy I
  7044 3E98 88				dey
  7045 3E99 98				tya
  7046 3E9A 20 E1 3D			jsr FLIP
  7047
  7048 				; --- ForToDoEpilog
  7049 3E9D			c_1677
  7050 3E9D CE FA 4C			dec I
  7051 3EA0 D0 8B			jne l_1677
  7052 3EA2			l_1685
  7053
  7054 				; ------------------------------------------------------------
  7055
  7056 = 4CFA			I	= DATAORIGIN+$0432
  7057 = 4CFB			J	= DATAORIGIN+$0433
  7058 = 4CFC			MAXPOS	= DATAORIGIN+$0434
  7059 = 4CFD			VAL	= DATAORIGIN+$0435
  7060
  7061 = 4CFA			@VarData	= I
  7062 = 0004			@VarDataSize	= 4
  7063
  7064 3EA2			@exit
  7065 					.ifdef @new
  7066 					lda <@VarData
  7067 					sta :ztmp
  7068 					lda >@VarData
  7069 					ldy #@VarDataSize-1
  7070 					jmp @FreeMem
  7071 					els
  7072 3EA2 60				rts						; ret
  7073 					eif
  7074 				.endl
  7075
  7076 3EA3			.local	SHELLSORT					; PROCEDURE
  7077
  7078 				; optimize OK (SORTINGALGORITHMS), line = 417
  7079
  7080 3EA3 A9 50			lda #$50
  7081 3EA5 8D 01 4D			sta STEP
  7082
  7083 				; --- WhileProlog
  7084 3EA8 4C 47 3F			jmp l_1731
  7085 3EAB			l_1732
  7086
  7087 				; optimize OK (SORTINGALGORITHMS), line = 421
  7088
  7089 3EAB AD 01 4D			lda STEP
  7090 3EAE 8D FF 4C			sta I
  7091
  7092 3EB1			l_173D
  7093 				; --- ForToDoCondition
  7094 3EB1 AD FF 4C			lda I
  7095 3EB4 C9 A0			cmp #$A0
  7096 3EB6 90 03 4C 44 3F		jcs l_174B
  7097
  7098 				; optimize OK (SORTINGALGORITHMS), line = 423
  7099
  7100 3EBB AD 07 4C			lda OPERATION.ABORTED
  7101 3EBE F0 03			jeq l_1757
  7102 3EC0 4C 4F 3F			jmp @exit					; exit
  7103 3EC3			l_1757
  7104
  7105 				; optimize OK (SORTINGALGORITHMS), line = 424
  7106
  7107 3EC3 AD FF 4C			lda I
  7108 3EC6 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7109 3EC9 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  7110 3ECC 8D 02 4D			sta TMP
  7111
  7112 				; optimize OK (SORTINGALGORITHMS), line = 425
  7113
  7114 3ECF AD FF 4C			lda I
  7115
  7116 				; --- WhileProlog
  7117 3ED2 4C 25 3F			jmp l_1769
  7118 3ED5			l_176A
  7119
  7120 				; optimize OK (SORTINGALGORITHMS), line = 429
  7121
  7122 3ED5 AD 00 4D			lda J
  7123 3ED8 38 ED 01 4D			sub STEP
  7124 3EDC 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7125 3EDF AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  7126 3EE2 8D 03 4D			sta VAL
  7127
  7128 				; optimize OK (SORTINGALGORITHMS), line = 430
  7129
  7130 3EE5 AD 02 4D			lda TMP
  7131 3EE8 CD 03 4D			cmp VAL
  7132 3EEB 90 03			jcc l_178B
  7133 3EED 4C 2D 3F			jmp b_176A					; break
  7134 3EF0			l_178B
  7135
  7136 				; optimize OK (SORTINGALGORITHMS), line = 432
  7137
  7138 3EF0 AD 00 4D			lda J
  7139 3EF3 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7140 3EF6 E8				inx
  7141 3EF7 AD 9C 4C 95 96		mva ARRAYACCESS.GETVALUE.RESULT :STACKORIGIN,x
  7142 3EFC AD 00 4D			lda J
  7143 3EFF 38 ED 01 4D			sub STEP
  7144 3F03 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  7145 3F06 B5 96			lda :STACKORIGIN,x
  7146 3F08 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  7147 3F0B CA				dex
  7148 3F0C 20 DE 32			jsr ARRAYACCESS.SETVALUE
  7149
  7150 				; optimize OK (SORTINGALGORITHMS), line = 433
  7151
  7152 3F0F AD 00 4D			lda J
  7153 3F12 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  7154 3F15 AD 03 4D			lda VAL
  7155 3F18 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  7156 3F1B 20 DE 32			jsr ARRAYACCESS.SETVALUE
  7157
  7158 				; optimize OK (SORTINGALGORITHMS), line = 434
  7159
  7160 3F1E AD 00 4D			lda J
  7161 3F21 38 ED 01 4D			sub STEP
  7162 3F25			l_1769
  7163 3F25 8D 00 4D			sta J
  7164
  7165 				; optimize OK (SORTINGALGORITHMS), line = 427
  7166
  7167 3F28 CD 01 4D			cmp STEP
  7168 3F2B B0 A8			jcs l_176A
  7169 3F2D			b_176A
  7170
  7171 				; optimize OK (SORTINGALGORITHMS), line = 437
  7172
  7173 3F2D AD 00 4D			lda J
  7174 3F30 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  7175 3F33 AD 02 4D			lda TMP
  7176 3F36 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  7177 3F39 20 DE 32			jsr ARRAYACCESS.SETVALUE
  7178
  7179 				; --- ForToDoEpilog
  7180 3F3C EE FF 4C			inc I
  7181 3F3F F0 03 4C B1 3E		jne l_173D
  7182 3F44			l_174B
  7183
  7184 				; optimize OK (SORTINGALGORITHMS), line = 440
  7185
  7186 3F44 4E 01 4D			lsr STEP
  7187 3F47			l_1731
  7188
  7189 				; optimize OK (SORTINGALGORITHMS), line = 419
  7190
  7191 3F47 AD 01 4D			lda STEP
  7192 3F4A F0 03 4C AB 3E		jne l_1732
  7193
  7194 				; ------------------------------------------------------------
  7195
  7196 = 4CFF			I	= DATAORIGIN+$0437
  7197 = 4D00			J	= DATAORIGIN+$0438
  7198 = 4D01			STEP	= DATAORIGIN+$0439
  7199 = 4D02			TMP	= DATAORIGIN+$043A
  7200 = 4D03			VAL	= DATAORIGIN+$043B
  7201
  7202 = 4CFF			@VarData	= I
  7203 = 0005			@VarDataSize	= 5
  7204
  7205 3F4F			@exit
  7206 					.ifdef @new
  7207 					lda <@VarData
  7208 					sta :ztmp
  7209 					lda >@VarData
  7210 					ldy #@VarDataSize-1
  7211 					jmp @FreeMem
  7212 					els
  7213 3F4F 60				rts						; ret
  7214 					eif
  7215 				.endl
  7216
  7217 3F50			.local	ODDEVENSORT					; PROCEDURE
  7218
  7219 				; optimize OK (SORTINGALGORITHMS), line = 449
  7220
  7221 3F50 A9 00			lda #$00
  7222 3F52 8D 07 4D			sta SORTED
  7223
  7224 				; --- WhileProlog
  7225 3F55 4C 19 40			jmp l_17E0
  7226 3F58			l_17E1
  7227
  7228 				; optimize OK (SORTINGALGORITHMS), line = 453
  7229
  7230 3F58 A9 01			lda #$01
  7231 3F5A 8D 07 4D			sta SORTED
  7232
  7233 				; optimize OK (SORTINGALGORITHMS), line = 455
  7234
  7235 				; --- WhileProlog
  7236 3F5D 4C B3 3F			jmp l_17EB
  7237 3F60			l_17EC
  7238
  7239 				; optimize OK (SORTINGALGORITHMS), line = 458
  7240
  7241 3F60 AD 07 4C			lda OPERATION.ABORTED
  7242 3F63 F0 03			jeq l_17F8
  7243 3F65 4C 21 40			jmp @exit					; exit
  7244 3F68			l_17F8
  7245
  7246 				; optimize OK (SORTINGALGORITHMS), line = 459
  7247
  7248 3F68 AD 04 4D			lda I
  7249 3F6B 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7250 3F6E AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  7251 3F71 8D 05 4D			sta V1
  7252
  7253 				; optimize OK (SORTINGALGORITHMS), line = 460
  7254
  7255 3F74 AC 04 4D			ldy I
  7256 3F77 C8				iny
  7257 3F78 98				tya
  7258 3F79 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7259 3F7C AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  7260 3F7F 8D 06 4D			sta V2
  7261
  7262 				; optimize OK (SORTINGALGORITHMS), line = 461
  7263
  7264 3F82 CD 05 4D			cmp V1
  7265 3F85 B0 26			jcs l_1821
  7266
  7267 				; optimize OK (SORTINGALGORITHMS), line = 463
  7268
  7269 3F87 AD 04 4D			lda I
  7270 3F8A 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  7271 3F8D AD 06 4D			lda V2
  7272 3F90 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  7273 3F93 20 DE 32			jsr ARRAYACCESS.SETVALUE
  7274
  7275 				; optimize OK (SORTINGALGORITHMS), line = 464
  7276
  7277 3F96 AD 04 4D			lda I
  7278 3F99 18 69 01			add #$01
  7279 3F9C 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  7280 3F9F AD 05 4D			lda V1
  7281 3FA2 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  7282 3FA5 20 DE 32			jsr ARRAYACCESS.SETVALUE
  7283
  7284 				; optimize OK (SORTINGALGORITHMS), line = 465
  7285
  7286 3FA8 A9 00			lda #$00
  7287 3FAA 8D 07 4D			sta SORTED
  7288 3FAD			l_1821
  7289
  7290 				; optimize OK (SORTINGALGORITHMS), line = 467
  7291
  7292 3FAD AD 04 4D			lda I
  7293 3FB0 18 69 02			add #$02
  7294 3FB3			l_17EB
  7295 3FB3 8D 04 4D			sta I
  7296
  7297 				; optimize OK (SORTINGALGORITHMS), line = 456
  7298
  7299 3FB6 C9 9F			cmp #$9F
  7300 3FB8 90 A6			jcc l_17EC
  7301
  7302 				; optimize OK (SORTINGALGORITHMS), line = 470
  7303
  7304 3FBA A9 00			lda #$00
  7305
  7306 				; --- WhileProlog
  7307 3FBC 4C 12 40			jmp l_184D
  7308 3FBF			l_184E
  7309
  7310 				; optimize OK (SORTINGALGORITHMS), line = 473
  7311
  7312 3FBF AD 07 4C			lda OPERATION.ABORTED
  7313 3FC2 F0 03			jeq l_185A
  7314 3FC4 4C 21 40			jmp @exit					; exit
  7315 3FC7			l_185A
  7316
  7317 				; optimize OK (SORTINGALGORITHMS), line = 474
  7318
  7319 3FC7 AD 04 4D			lda I
  7320 3FCA 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7321 3FCD AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  7322 3FD0 8D 05 4D			sta V1
  7323
  7324 				; optimize OK (SORTINGALGORITHMS), line = 475
  7325
  7326 3FD3 AC 04 4D			ldy I
  7327 3FD6 C8				iny
  7328 3FD7 98				tya
  7329 3FD8 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7330 3FDB AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  7331 3FDE 8D 06 4D			sta V2
  7332
  7333 				; optimize OK (SORTINGALGORITHMS), line = 476
  7334
  7335 3FE1 CD 05 4D			cmp V1
  7336 3FE4 B0 26			jcs l_1883
  7337
  7338 				; optimize OK (SORTINGALGORITHMS), line = 478
  7339
  7340 3FE6 AD 04 4D			lda I
  7341 3FE9 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  7342 3FEC AD 06 4D			lda V2
  7343 3FEF 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  7344 3FF2 20 DE 32			jsr ARRAYACCESS.SETVALUE
  7345
  7346 				; optimize OK (SORTINGALGORITHMS), line = 479
  7347
  7348 3FF5 AD 04 4D			lda I
  7349 3FF8 18 69 01			add #$01
  7350 3FFB 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  7351 3FFE AD 05 4D			lda V1
  7352 4001 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  7353 4004 20 DE 32			jsr ARRAYACCESS.SETVALUE
  7354
  7355 				; optimize OK (SORTINGALGORITHMS), line = 480
  7356
  7357 4007 A9 00			lda #$00
  7358 4009 8D 07 4D			sta SORTED
  7359 400C			l_1883
  7360
  7361 				; optimize OK (SORTINGALGORITHMS), line = 482
  7362
  7363 400C AD 04 4D			lda I
  7364 400F 18 69 02			add #$02
  7365 4012			l_184D
  7366 4012 8D 04 4D			sta I
  7367
  7368 				; optimize OK (SORTINGALGORITHMS), line = 471
  7369
  7370 4015 C9 9F			cmp #$9F
  7371 4017 90 A6			jcc l_184E
  7372 4019			l_17E0
  7373
  7374 				; optimize OK (SORTINGALGORITHMS), line = 451
  7375
  7376 4019 AD 07 4D			lda SORTED
  7377 401C D0 03 4C 58 3F		jeq l_17E1
  7378
  7379 				; ------------------------------------------------------------
  7380
  7381 = 4D04			I	= DATAORIGIN+$043C
  7382 = 4D05			V1	= DATAORIGIN+$043D
  7383 = 4D06			V2	= DATAORIGIN+$043E
  7384 = 4D07			SORTED	= DATAORIGIN+$043F
  7385
  7386 = 4D04			@VarData	= I
  7387 = 0004			@VarDataSize	= 4
  7388
  7389 4021			@exit
  7390 					.ifdef @new
  7391 					lda <@VarData
  7392 					sta :ztmp
  7393 					lda >@VarData
  7394 					ldy #@VarDataSize-1
  7395 					jmp @FreeMem
  7396 					els
  7397 4021 60				rts						; ret
  7398 					eif
  7399 				.endl
  7400
  7401 4022			.local	BITONICSORT					; PROCEDURE
  7402
  7403 4022 4C C9 41			jmp l_18B6
  7404
  7405 4025			.local	GETHALFASPOWEROFTWO				; FUNCTION
  7406 4025 8D 08 4D			sta SIZE
  7407
  7408 				; optimize OK (SORTINGALGORITHMS), line = 491
  7409
  7410 4028 A9 01			lda #$01
  7411 402A 8D 09 4D			sta RESULT
  7412 402D A9 00			lda #$00
  7413 402F 8D 0A 4D			sta RESULT+1
  7414
  7415 				; --- WhileProlog
  7416 4032 4C 3B 40			jmp l_18BF
  7417 4035			l_18C0
  7418
  7419 				; optimize OK (SORTINGALGORITHMS), line = 494
  7420
  7421 4035 0E 09 4D			asl RESULT
  7422 4038 2E 0A 4D			rol RESULT+1
  7423 403B			l_18BF
  7424
  7425 				; optimize OK (SORTINGALGORITHMS), line = 492
  7426
  7427 403B AD 0A 4D			lda RESULT+1
  7428 403E D0 08			bne @+
  7429 4040 AD 09 4D			lda RESULT
  7430 4043 CD 08 4D			cmp SIZE
  7431 4046 90 ED			jcc l_18C0
  7432 				@
  7433
  7434 				; optimize OK (SORTINGALGORITHMS), line = 497
  7435
  7436 4048 4E 0A 4D			lsr RESULT+1
  7437 404B 6E 09 4D			ror RESULT
  7438 404E			@exit
  7439
  7440 				; ------------------------------------------------------------
  7441
  7442 = 4D08			SIZE	= DATAORIGIN+$0440
  7443 = 4D09			RESULT	= DATAORIGIN+$0441
  7444
  7445 = 4D08			@VarData	= SIZE
  7446 = 0001			@VarDataSize	= 1
  7447
  7448 404E 60				rts						; ret
  7449 				.endl
  7450
  7451 404F			.local	BITONICMERGE					; PROCEDURE
  7452 					.ifdef @VarData
  7453 404F A9 0B		@new	lda <@VarData
  7454 4051 85 92			sta :ztmp
  7455 4053 A9 4D			lda >@VarData
  7456 4055 A0 07			ldy #@VarDataSize-1
  7457 4057 20 18 24			jsr @AllocMem
  7458 					eif
  7459
  7460 				; ------------------------------------------------------------
  7461
  7462 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  7463 				; as Pointer
  7464 405A B5 96			lda :STACKORIGIN,x
  7465 405C 8D 0B 4D			sta LEFT
  7466 405F CA				dex
  7467 4060 30 0E			jmi @main
  7468
  7469 				; ------------------------------------------------------------
  7470
  7471 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  7472 				; as Pointer
  7473 4062 B5 96			lda :STACKORIGIN,x
  7474 4064 8D 0C 4D			sta SIZE
  7475 4067 CA				dex
  7476 4068 30 06			jmi @main
  7477
  7478 				; ------------------------------------------------------------
  7479
  7480 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  7481 				; as Pointer
  7482 406A B5 96			lda :STACKORIGIN,x
  7483 406C 8D 0D 4D			sta DIR
  7484 406F CA				dex
  7485 4070			@main
  7486
  7487 				; optimize OK (SORTINGALGORITHMS), line = 505
  7488
  7489 4070 AD 0C 4D			lda SIZE
  7490 4073 C9 02			cmp #$02
  7491 4075 B0 03 4C 35 41		jcc l_18FE
  7492
  7493 				; optimize OK (SORTINGALGORITHMS), line = 507
  7494
  7495 407A 20 25 40			jsr GETHALFASPOWEROFTWO
  7496 407D AD 09 4D			lda GETHALFASPOWEROFTWO.RESULT
  7497 4080 8D 0E 4D			sta HALF
  7498
  7499 				; optimize OK (SORTINGALGORITHMS), line = 508
  7500
  7501 4083 AD 0C 4D			lda SIZE
  7502 4086 38 E9 01			sub #$01
  7503 4089 38 ED 0E 4D			sub HALF
  7504 408D 18 6D 0B 4D			add LEFT
  7505 4091 8D 10 4D			sta RIGHT
  7506
  7507 				; optimize OK (SORTINGALGORITHMS), line = 509
  7508
  7509 4094 AD 0B 4D			lda LEFT
  7510 4097 8D 0F 4D			sta I
  7511
  7512 409A			l_1929
  7513 				; --- ForToDoCondition
  7514 409A AD 0F 4D			lda I
  7515 409D CD 10 4D			cmp RIGHT
  7516 40A0 90 02			scc
  7517 40A2 D0 5F			jne l_1937
  7518
  7519 				; optimize OK (SORTINGALGORITHMS), line = 511
  7520
  7521 40A4 AD 07 4C			lda OPERATION.ABORTED
  7522 40A7 F0 03			jeq l_1943
  7523 40A9 4C 35 41			jmp @exit					; exit
  7524 40AC			l_1943
  7525
  7526 				; optimize OK (SORTINGALGORITHMS), line = 512
  7527
  7528 40AC AD 0F 4D			lda I
  7529 40AF 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7530 40B2 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  7531 40B5 8D 11 4D			sta V1
  7532
  7533 				; optimize OK (SORTINGALGORITHMS), line = 513
  7534
  7535 40B8 AD 0F 4D			lda I
  7536 40BB 18 6D 0E 4D			add HALF
  7537 40BF 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7538 40C2 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  7539 40C5 8D 12 4D			sta V2
  7540
  7541 				; optimize OK (SORTINGALGORITHMS), line = 514
  7542
  7543 40C8 A0 01			ldy #1
  7544 40CA AD 12 4D			lda V2
  7545 40CD CD 11 4D			cmp V1
  7546 40D0 90 01			bcc @+
  7547 40D2 88				dey
  7548 				@
  7549 40D3 84 A0			sty :STACKORIGIN+10
  7550 40D5 AD 0D 4D			lda DIR
  7551 40D8 C5 A0			cmp :STACKORIGIN+10
  7552 40DA D0 22			jne l_1976
  7553
  7554 				; optimize OK (SORTINGALGORITHMS), line = 516
  7555
  7556 40DC AD 0F 4D			lda I
  7557 40DF 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  7558 40E2 AD 12 4D			lda V2
  7559 40E5 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  7560 40E8 20 DE 32			jsr ARRAYACCESS.SETVALUE
  7561
  7562 				; optimize OK (SORTINGALGORITHMS), line = 517
  7563
  7564 40EB AD 0F 4D			lda I
  7565 40EE 18 6D 0E 4D			add HALF
  7566 40F2 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  7567 40F5 AD 11 4D			lda V1
  7568 40F8 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  7569 40FB 20 DE 32			jsr ARRAYACCESS.SETVALUE
  7570 40FE			l_1976
  7571
  7572 				; --- ForToDoEpilog
  7573 40FE EE 0F 4D			inc I
  7574 4101 D0 97			jne l_1929
  7575 4103			l_1937
  7576
  7577 				; optimize FAIL ('BITONICMERGE', SORTINGALGORITHMS), line = 521
  7578
  7579 4103 E8				inx
  7580 4104 AD 0D 4D 95 96		mva DIR :STACKORIGIN,x
  7581 4109 E8				inx
  7582 410A AD 0E 4D 95 96		mva HALF :STACKORIGIN,x
  7583 410F E8				inx
  7584 4110 AD 0B 4D 95 96		mva LEFT :STACKORIGIN,x
  7585 4115 20 4F 40			jsr BITONICMERGE
  7586
  7587 				; optimize FAIL ('BITONICMERGE', SORTINGALGORITHMS), line = 522
  7588
  7589 4118 E8				inx
  7590 4119 AD 0D 4D 95 96		mva DIR :STACKORIGIN,x
  7591 411E E8				inx
  7592 411F AD 0C 4D			lda SIZE
  7593 4122 38 ED 0E 4D			sub HALF
  7594 4126 95 96			sta :STACKORIGIN,x
  7595 4128 E8				inx
  7596 4129 AD 0B 4D			lda LEFT
  7597 412C 18 6D 0E 4D			add HALF
  7598 4130 95 96			sta :STACKORIGIN,x
  7599 4132 20 4F 40			jsr BITONICMERGE
  7600 4135			l_18FE
  7601
  7602 				; ------------------------------------------------------------
  7603
  7604 = 4D0B			LEFT	= DATAORIGIN+$0443
  7605 = 4D0C			SIZE	= DATAORIGIN+$0444
  7606 = 4D0D			DIR	= DATAORIGIN+$0445
  7607 = 4D0E			HALF	= DATAORIGIN+$0446
  7608 = 4D0F			I	= DATAORIGIN+$0447
  7609 = 4D10			RIGHT	= DATAORIGIN+$0448
  7610 = 4D11			V1	= DATAORIGIN+$0449
  7611 = 4D12			V2	= DATAORIGIN+$044A
  7612
  7613 = 4D0B			@VarData	= LEFT
  7614 = 0008			@VarDataSize	= 8
  7615
  7616 4135			@exit
  7617 					.ifdef @new
  7618 4135 A9 0B			lda <@VarData
  7619 4137 85 92			sta :ztmp
  7620 4139 A9 4D			lda >@VarData
  7621 413B A0 07			ldy #@VarDataSize-1
  7622 413D 4C 37 24			jmp @FreeMem
  7623 					els
  7624 					rts						; ret
  7625 					eif
  7626 				.endl
  7627
  7628 4140			.local	BITONICSORTINTERNAL				; PROCEDURE
  7629 					.ifdef @VarData
  7630 4140 A9 13		@new	lda <@VarData
  7631 4142 85 92			sta :ztmp
  7632 4144 A9 4D			lda >@VarData
  7633 4146 A0 03			ldy #@VarDataSize-1
  7634 4148 20 18 24			jsr @AllocMem
  7635 					eif
  7636
  7637 				; ------------------------------------------------------------
  7638
  7639 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  7640 				; as Pointer
  7641 414B B5 96			lda :STACKORIGIN,x
  7642 414D 8D 13 4D			sta LEFT
  7643 4150 CA				dex
  7644 4151 30 0E			jmi @main
  7645
  7646 				; ------------------------------------------------------------
  7647
  7648 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  7649 				; as Pointer
  7650 4153 B5 96			lda :STACKORIGIN,x
  7651 4155 8D 14 4D			sta SIZE
  7652 4158 CA				dex
  7653 4159 30 06			jmi @main
  7654
  7655 				; ------------------------------------------------------------
  7656
  7657 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  7658 				; as Pointer
  7659 415B B5 96			lda :STACKORIGIN,x
  7660 415D 8D 15 4D			sta DIR
  7661 4160 CA				dex
  7662 4161			@main
  7663
  7664 				; optimize OK (SORTINGALGORITHMS), line = 530
  7665
  7666 4161 AD 07 4C			lda OPERATION.ABORTED
  7667 4164 F0 03			jeq l_19CD
  7668 4166 4C BE 41			jmp @exit					; exit
  7669 4169			l_19CD
  7670
  7671 				; optimize OK (SORTINGALGORITHMS), line = 531
  7672
  7673 4169 AD 14 4D			lda SIZE
  7674 416C C9 02			cmp #$02
  7675 416E 90 4E			jcc l_19E2
  7676
  7677 				; optimize OK (SORTINGALGORITHMS), line = 533
  7678
  7679 4170 4A				lsr @
  7680 4171 8D 16 4D			sta HALF
  7681
  7682 				; optimize FAIL ('BITONICSORTINTERNAL', SORTINGALGORITHMS), line = 534
  7683
  7684 4174 E8				inx
  7685 4175 AD 15 4D 95 96		mva DIR :STACKORIGIN,x
  7686 417A 20 FF 20			jsr notBOOLEAN
  7687 417D E8				inx
  7688 417E AD 16 4D 95 96		mva HALF :STACKORIGIN,x
  7689 4183 E8				inx
  7690 4184 AD 13 4D 95 96		mva LEFT :STACKORIGIN,x
  7691 4189 20 40 41			jsr BITONICSORTINTERNAL
  7692
  7693 				; optimize FAIL ('BITONICSORTINTERNAL', SORTINGALGORITHMS), line = 535
  7694
  7695 418C E8				inx
  7696 418D AD 15 4D 95 96		mva DIR :STACKORIGIN,x
  7697 4192 E8				inx
  7698 4193 AD 14 4D			lda SIZE
  7699 4196 38 ED 16 4D			sub HALF
  7700 419A 95 96			sta :STACKORIGIN,x
  7701 419C E8				inx
  7702 419D AD 13 4D			lda LEFT
  7703 41A0 18 6D 16 4D			add HALF
  7704 41A4 95 96			sta :STACKORIGIN,x
  7705 41A6 20 40 41			jsr BITONICSORTINTERNAL
  7706
  7707 				; optimize FAIL ('BITONICMERGE', SORTINGALGORITHMS), line = 536
  7708
  7709 41A9 E8				inx
  7710 41AA AD 15 4D 95 96		mva DIR :STACKORIGIN,x
  7711 41AF E8				inx
  7712 41B0 AD 14 4D 95 96		mva SIZE :STACKORIGIN,x
  7713 41B5 E8				inx
  7714 41B6 AD 13 4D 95 96		mva LEFT :STACKORIGIN,x
  7715 41BB 20 4F 40			jsr BITONICMERGE
  7716 41BE			l_19E2
  7717
  7718 				; ------------------------------------------------------------
  7719
  7720 = 4D13			LEFT	= DATAORIGIN+$044B
  7721 = 4D14			SIZE	= DATAORIGIN+$044C
  7722 = 4D15			DIR	= DATAORIGIN+$044D
  7723 = 4D16			HALF	= DATAORIGIN+$044E
  7724
  7725 = 4D13			@VarData	= LEFT
  7726 = 0004			@VarDataSize	= 4
  7727
  7728 41BE			@exit
  7729 					.ifdef @new
  7730 41BE A9 13			lda <@VarData
  7731 41C0 85 92			sta :ztmp
  7732 41C2 A9 4D			lda >@VarData
  7733 41C4 A0 03			ldy #@VarDataSize-1
  7734 41C6 4C 37 24			jmp @FreeMem
  7735 					els
  7736 					rts						; ret
  7737 					eif
  7738 				.endl
  7739 41C9			l_18B6
  7740
  7741 				; optimize FAIL ('BITONICSORTINTERNAL', SORTINGALGORITHMS), line = 541
  7742
  7743 41C9 E8				inx
  7744 41CA A9 01 95 96			mva #$01 :STACKORIGIN,x
  7745 41CE E8				inx
  7746 41CF A9 A0 95 96			mva #$A0 :STACKORIGIN,x
  7747 41D3 E8				inx
  7748 41D4 A9 00 95 96			mva #$00 :STACKORIGIN,x
  7749 41D8 20 40 41			jsr BITONICSORTINTERNAL
  7750
  7751 				; ------------------------------------------------------------
  7752
  7753 41DB			@exit
  7754 					.ifdef @new
  7755 					lda <@VarData
  7756 					sta :ztmp
  7757 					lda >@VarData
  7758 					ldy #@VarDataSize-1
  7759 					jmp @FreeMem
  7760 					els
  7761 41DB 60				rts						; ret
  7762 					eif
  7763 				.endl
  7764
  7765 41DC			.local	RADIXSORT					; PROCEDURE
  7766
  7767 41DC 4C CA 42			jmp l_1A25
  7768
  7769 41DF			.local	RADIXSORTINTERNAL				; PROCEDURE
  7770 					.ifdef @VarData
  7771 41DF A9 17		@new	lda <@VarData
  7772 41E1 85 92			sta :ztmp
  7773 41E3 A9 4D			lda >@VarData
  7774 41E5 A0 06			ldy #@VarDataSize-1
  7775 41E7 20 18 24			jsr @AllocMem
  7776 					eif
  7777
  7778 				; ------------------------------------------------------------
  7779
  7780 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  7781 				; as Pointer
  7782 41EA B5 96			lda :STACKORIGIN,x
  7783 41EC 8D 17 4D			sta MASK
  7784 41EF CA				dex
  7785 41F0 30 0E			jmi @main
  7786
  7787 				; ------------------------------------------------------------
  7788
  7789 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  7790 				; as Pointer
  7791 41F2 B5 96			lda :STACKORIGIN,x
  7792 41F4 8D 18 4D			sta FIRST
  7793 41F7 CA				dex
  7794 41F8 30 06			jmi @main
  7795
  7796 				; ------------------------------------------------------------
  7797
  7798 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  7799 				; as Pointer
  7800 41FA B5 96			lda :STACKORIGIN,x
  7801 41FC 8D 19 4D			sta LAST
  7802 41FF CA				dex
  7803 4200			@main
  7804
  7805 				; optimize OK (SORTINGALGORITHMS), line = 551
  7806
  7807 4200 AD 18 4D			lda FIRST
  7808 4203 CD 19 4D			cmp LAST
  7809 4206 90 03			jcc l_1A45
  7810 4208 4C BF 42			jmp @exit					; exit
  7811 420B			l_1A45
  7812
  7813 				; optimize OK (SORTINGALGORITHMS), line = 553
  7814
  7815 420B AD 18 4D			lda FIRST
  7816 420E 8D 1C 4D			sta I
  7817
  7818 				; optimize OK (SORTINGALGORITHMS), line = 554
  7819
  7820 4211 AD 19 4D			lda LAST
  7821 4214 8D 1D 4D			sta J
  7822
  7823 				; --- WhileProlog
  7824 4217 4C 66 42			jmp l_1A56
  7825 421A			l_1A57
  7826
  7827 				; optimize OK (SORTINGALGORITHMS), line = 557
  7828
  7829 421A AD 07 4C			lda OPERATION.ABORTED
  7830 421D F0 03			jeq l_1A63
  7831 421F 4C BF 42			jmp @exit					; exit
  7832 4222			l_1A63
  7833
  7834 				; optimize OK (SORTINGALGORITHMS), line = 558
  7835
  7836 4222 AD 1C 4D			lda I
  7837 4225 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7838 4228 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  7839 422B 8D 1A 4D			sta V1
  7840
  7841 				; optimize OK (SORTINGALGORITHMS), line = 559
  7842
  7843 422E 2D 17 4D			and MASK
  7844 4231 D0 06			jne l_1A85
  7845
  7846 				; optimize FAIL (0, SORTINGALGORITHMS), line = 561
  7847
  7848 4233 EE 1C 4D			inc I
  7849 4236 4C 66 42			jmp l_1A93
  7850 4239			l_1A85
  7851
  7852 				; optimize OK (SORTINGALGORITHMS), line = 564
  7853
  7854 4239 AD 1D 4D			lda J
  7855 423C 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7856 423F AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  7857 4242 8D 1B 4D			sta V2
  7858
  7859 				; optimize OK (SORTINGALGORITHMS), line = 565
  7860
  7861 4245 AD 1C 4D			lda I
  7862 4248 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  7863 424B AD 1B 4D			lda V2
  7864 424E 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  7865 4251 20 DE 32			jsr ARRAYACCESS.SETVALUE
  7866
  7867 				; optimize OK (SORTINGALGORITHMS), line = 566
  7868
  7869 4254 AD 1D 4D			lda J
  7870 4257 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  7871 425A AD 1A 4D			lda V1
  7872 425D 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  7873 4260 20 DE 32			jsr ARRAYACCESS.SETVALUE
  7874
  7875 				; optimize FAIL (0, SORTINGALGORITHMS), line = 567
  7876
  7877 4263 CE 1D 4D			dec J
  7878 4266			l_1A93
  7879 4266			l_1A56
  7880
  7881 				; optimize OK (SORTINGALGORITHMS), line = 555
  7882
  7883 4266 AD 1C 4D			lda I
  7884 4269 CD 1D 4D			cmp J
  7885 426C 90 AC			jcc l_1A57
  7886
  7887 				; optimize OK (SORTINGALGORITHMS), line = 571
  7888
  7889 426E AD 17 4D			lda MASK
  7890 4271 C9 01			cmp #$01
  7891 4273 D0 03			jne l_1ACC
  7892 4275 4C BF 42			jmp @exit					; exit
  7893 4278			l_1ACC
  7894
  7895 				; optimize OK (SORTINGALGORITHMS), line = 573
  7896
  7897 4278 AD 1C 4D			lda I
  7898 427B 20 B3 32			jsr ARRAYACCESS.GETVALUE
  7899 427E AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  7900 4281 8D 1A 4D			sta V1
  7901
  7902 				; optimize OK (SORTINGALGORITHMS), line = 574
  7903
  7904 4284 2D 17 4D			and MASK
  7905 4287 D0 06			jne l_1AEE
  7906 4289 EE 1D 4D			inc J
  7907 428C 4C 92 42			jmp l_1AFC
  7908 428F			l_1AEE
  7909
  7910 				; optimize FAIL (0, SORTINGALGORITHMS), line = 575
  7911
  7912 428F CE 1C 4D			dec I
  7913 4292			l_1AFC
  7914
  7915 				; optimize OK (SORTINGALGORITHMS), line = 577
  7916
  7917 4292 4E 17 4D			lsr MASK
  7918
  7919 				; optimize FAIL ('RADIXSORTINTERNAL', SORTINGALGORITHMS), line = 579
  7920
  7921 4295 E8				inx
  7922 4296 AD 1C 4D 95 96		mva I :STACKORIGIN,x
  7923 429B E8				inx
  7924 429C AD 18 4D 95 96		mva FIRST :STACKORIGIN,x
  7925 42A1 E8				inx
  7926 42A2 AD 17 4D 95 96		mva MASK :STACKORIGIN,x
  7927 42A7 20 DF 41			jsr RADIXSORTINTERNAL
  7928
  7929 				; optimize FAIL ('RADIXSORTINTERNAL', SORTINGALGORITHMS), line = 580
  7930
  7931 42AA E8				inx
  7932 42AB AD 19 4D 95 96		mva LAST :STACKORIGIN,x
  7933 42B0 E8				inx
  7934 42B1 AD 1D 4D 95 96		mva J :STACKORIGIN,x
  7935 42B6 E8				inx
  7936 42B7 AD 17 4D 95 96		mva MASK :STACKORIGIN,x
  7937 42BC 20 DF 41			jsr RADIXSORTINTERNAL
  7938
  7939 				; ------------------------------------------------------------
  7940
  7941 = 4D17			MASK	= DATAORIGIN+$044F
  7942 = 4D18			FIRST	= DATAORIGIN+$0450
  7943 = 4D19			LAST	= DATAORIGIN+$0451
  7944 = 4D1A			V1	= DATAORIGIN+$0452
  7945 = 4D1B			V2	= DATAORIGIN+$0453
  7946 = 4D1C			I	= DATAORIGIN+$0454
  7947 = 4D1D			J	= DATAORIGIN+$0455
  7948
  7949 = 4D17			@VarData	= MASK
  7950 = 0007			@VarDataSize	= 7
  7951
  7952 42BF			@exit
  7953 					.ifdef @new
  7954 42BF A9 17			lda <@VarData
  7955 42C1 85 92			sta :ztmp
  7956 42C3 A9 4D			lda >@VarData
  7957 42C5 A0 06			ldy #@VarDataSize-1
  7958 42C7 4C 37 24			jmp @FreeMem
  7959 					els
  7960 					rts						; ret
  7961 					eif
  7962 				.endl
  7963 42CA			l_1A25
  7964
  7965 				; optimize FAIL ('RADIXSORTINTERNAL', SORTINGALGORITHMS), line = 584
  7966
  7967 42CA E8				inx
  7968 42CB A9 9F 95 96			mva #$9F :STACKORIGIN,x
  7969 42CF E8				inx
  7970 42D0 A9 00 95 96			mva #$00 :STACKORIGIN,x
  7971 42D4 E8				inx
  7972 42D5 A9 80 95 96			mva #$80 :STACKORIGIN,x
  7973 42D9 20 DF 41			jsr RADIXSORTINTERNAL
  7974
  7975 				; ------------------------------------------------------------
  7976
  7977 42DC			@exit
  7978 					.ifdef @new
  7979 					lda <@VarData
  7980 					sta :ztmp
  7981 					lda >@VarData
  7982 					ldy #@VarDataSize-1
  7983 					jmp @FreeMem
  7984 					els
  7985 42DC 60				rts						; ret
  7986 					eif
  7987 				.endl
  7988
  7989 42DD			.local	HEAPSORT					; PROCEDURE
  7990
  7991 42DD 4C 9A 43			jmp l_1B27
  7992
  7993 42E0			.local	BUILDHEAP					; PROCEDURE
  7994
  7995 				; optimize OK (SORTINGALGORITHMS), line = 594
  7996
  7997 42E0 A9 01			lda #$01
  7998 42E2 8D 1E 4D			sta I
  7999
  8000 42E5			l_1B33
  8001 				; --- ForToDoCondition
  8002 42E5 AD 1E 4D			lda I
  8003 42E8 C9 A0			cmp #$A0
  8004 42EA 90 03 4C 99 43		jcs l_1B41
  8005
  8006 				; optimize OK (SORTINGALGORITHMS), line = 596
  8007
  8008 42EF 38 E9 01			sub #$01
  8009 42F2 85 9F			sta :STACKORIGIN+9
  8010 42F4 A9 00			lda #$00
  8011 42F6 E9 00			sbc #$00
  8012 42F8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8013 42FA 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  8014 42FC 66 9F			ror :STACKORIGIN+9
  8015 42FE A5 9F			lda :STACKORIGIN+9
  8016 4300 8D 20 4D			sta K
  8017
  8018 				; optimize OK (SORTINGALGORITHMS), line = 597
  8019
  8020 4303 AD 1E 4D			lda I
  8021 4306 20 B3 32			jsr ARRAYACCESS.GETVALUE
  8022 4309 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  8023 430C 8D 21 4D			sta V1
  8024
  8025 				; optimize OK (SORTINGALGORITHMS), line = 598
  8026
  8027 430F AD 20 4D			lda K
  8028 4312 20 B3 32			jsr ARRAYACCESS.GETVALUE
  8029 4315 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  8030 4318 8D 22 4D			sta V2
  8031
  8032 				; optimize OK (SORTINGALGORITHMS), line = 599
  8033
  8034 431B CD 21 4D			cmp V1
  8035 431E B0 71			jcs l_1B71
  8036
  8037 				; optimize OK (SORTINGALGORITHMS), line = 601
  8038
  8039 4320 AD 1E 4D			lda I
  8040 4323 8D 1F 4D			sta J
  8041
  8042 				; --- WhileProlog
  8043 4326 4C 89 43			jmp l_1B7A
  8044 4329			l_1B7B
  8045
  8046 				; optimize OK (SORTINGALGORITHMS), line = 604
  8047
  8048 4329 AD 07 4C			lda OPERATION.ABORTED
  8049 432C F0 03			jeq l_1B87
  8050 432E 4C 99 43			jmp @exit					; exit
  8051 4331			l_1B87
  8052
  8053 				; optimize OK (SORTINGALGORITHMS), line = 606
  8054
  8055 4331 AD 20 4D			lda K
  8056 4334 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  8057 4337 AD 21 4D			lda V1
  8058 433A 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  8059 433D 20 DE 32			jsr ARRAYACCESS.SETVALUE
  8060
  8061 				; optimize OK (SORTINGALGORITHMS), line = 607
  8062
  8063 4340 AD 1F 4D			lda J
  8064 4343 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  8065 4346 AD 22 4D			lda V2
  8066 4349 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  8067 434C 20 DE 32			jsr ARRAYACCESS.SETVALUE
  8068
  8069 				; optimize OK (SORTINGALGORITHMS), line = 609
  8070
  8071 434F AD 20 4D			lda K
  8072 4352 D0 03			jne l_1BAA
  8073 4354 4C 91 43			jmp b_1B7B					; break
  8074 4357			l_1BAA
  8075
  8076 				; optimize OK (SORTINGALGORITHMS), line = 611
  8077
  8078 4357 AD 20 4D			lda K
  8079 435A 8D 1F 4D			sta J
  8080
  8081 				; optimize OK (SORTINGALGORITHMS), line = 612
  8082
  8083 435D 38 E9 01			sub #$01
  8084 4360 85 9F			sta :STACKORIGIN+9
  8085 4362 A9 00			lda #$00
  8086 4364 E9 00			sbc #$00
  8087 4366 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8088 4368 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  8089 436A 66 9F			ror :STACKORIGIN+9
  8090 436C A5 9F			lda :STACKORIGIN+9
  8091 436E 8D 20 4D			sta K
  8092
  8093 				; optimize OK (SORTINGALGORITHMS), line = 614
  8094
  8095 4371 AD 1F 4D			lda J
  8096 4374 20 B3 32			jsr ARRAYACCESS.GETVALUE
  8097 4377 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  8098 437A 8D 21 4D			sta V1
  8099
  8100 				; optimize OK (SORTINGALGORITHMS), line = 615
  8101
  8102 437D AD 20 4D			lda K
  8103 4380 20 B3 32			jsr ARRAYACCESS.GETVALUE
  8104 4383 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  8105 4386 8D 22 4D			sta V2
  8106 4389			l_1B7A
  8107
  8108 				; optimize OK (SORTINGALGORITHMS), line = 602
  8109
  8110 4389 AD 22 4D			lda V2
  8111 438C CD 21 4D			cmp V1
  8112 438F 90 98			jcc l_1B7B
  8113 4391			b_1B7B
  8114 4391			l_1B71
  8115
  8116 				; --- ForToDoEpilog
  8117 4391 EE 1E 4D			inc I
  8118 4394 F0 03 4C E5 42		jne l_1B33
  8119 4399			l_1B41
  8120
  8121 				; ------------------------------------------------------------
  8122
  8123 4399			@exit
  8124 					.ifdef @new
  8125 					lda <@VarData
  8126 					sta :ztmp
  8127 					lda >@VarData
  8128 					ldy #@VarDataSize-1
  8129 					jmp @FreeMem
  8130 					els
  8131 4399 60				rts						; ret
  8132 					eif
  8133 				.endl
  8134 439A			l_1B27
  8135
  8136 				; optimize FAIL ('BUILDHEAP', SORTINGALGORITHMS), line = 622
  8137
  8138 439A 20 E0 42			jsr BUILDHEAP
  8139
  8140 				; optimize OK (SORTINGALGORITHMS), line = 623
  8141
  8142 439D AD 07 4C			lda OPERATION.ABORTED
  8143 43A0 F0 03			jeq l_1BF2
  8144 43A2 4C 72 44			jmp @exit					; exit
  8145 43A5			l_1BF2
  8146
  8147 				; optimize OK (SORTINGALGORITHMS), line = 625
  8148
  8149 43A5 A9 9F			lda #$9F
  8150 43A7 8D 1E 4D			sta I
  8151
  8152 43AA			l_1BFE
  8153 				; --- ForToDoCondition
  8154 43AA AD 1E 4D			lda I
  8155 43AD C9 01			cmp #$01
  8156 43AF B0 03 4C 72 44		jcc l_1C0C
  8157
  8158 				; optimize OK (SORTINGALGORITHMS), line = 627
  8159
  8160 43B4 A9 00			lda #$00
  8161 43B6 8D A7 4C			sta ARRAYACCESS.SWAPVALUES.INDEX1
  8162 43B9 AD 1E 4D			lda I
  8163 43BC 8D A8 4C			sta ARRAYACCESS.SWAPVALUES.INDEX2
  8164 43BF 20 9B 33			jsr ARRAYACCESS.SWAPVALUES
  8165
  8166 				; optimize OK (SORTINGALGORITHMS), line = 628
  8167
  8168 43C2 A9 00			lda #$00
  8169 43C4 8D 1F 4D			sta J
  8170
  8171 				; --- WhileProlog
  8172 43C7 4C 67 44			jmp l_1C17
  8173 43CA			l_1C18
  8174
  8175 				; optimize OK (SORTINGALGORITHMS), line = 632
  8176
  8177 43CA AD 07 4C			lda OPERATION.ABORTED
  8178 43CD F0 03			jeq l_1C24
  8179 43CF 4C 72 44			jmp @exit					; exit
  8180 43D2			l_1C24
  8181
  8182 				; optimize OK (SORTINGALGORITHMS), line = 634
  8183
  8184 43D2 AD 1F 4D			lda J
  8185 43D5 C9 7F			cmp #$7F
  8186 43D7 90 03			jcc l_1C39
  8187 43D9 4C 6A 44			jmp b_1C18					; break
  8188 43DC			l_1C39
  8189
  8190 				; optimize OK (SORTINGALGORITHMS), line = 635
  8191
  8192 43DC AD 1F 4D			lda J
  8193 43DF 0A				asl @
  8194 43E0 18 69 01			add #$01
  8195 43E3 8D 20 4D			sta K
  8196
  8197 				; optimize OK (SORTINGALGORITHMS), line = 636
  8198
  8199 43E6 18 69 01			add #$01
  8200 43E9 CD 1E 4D			cmp I
  8201 43EC B0 25			jcs l_1C62
  8202
  8203 				; optimize OK (SORTINGALGORITHMS), line = 638
  8204
  8205 43EE AD 20 4D			lda K
  8206 43F1 20 B3 32			jsr ARRAYACCESS.GETVALUE
  8207 43F4 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  8208 43F7 8D 21 4D			sta V1
  8209
  8210 				; optimize OK (SORTINGALGORITHMS), line = 639
  8211
  8212 43FA AC 20 4D			ldy K
  8213 43FD C8				iny
  8214 43FE 98				tya
  8215 43FF 20 B3 32			jsr ARRAYACCESS.GETVALUE
  8216 4402 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  8217 4405 8D 22 4D			sta V2
  8218
  8219 				; optimize OK (SORTINGALGORITHMS), line = 640
  8220
  8221 4408 AD 21 4D			lda V1
  8222 440B CD 22 4D			cmp V2
  8223 440E B0 03			jcs l_1C89
  8224
  8225 				; optimize FAIL (0, SORTINGALGORITHMS), line = 642
  8226
  8227 4410 EE 20 4D			inc K
  8228 4413			l_1C89
  8229 4413			l_1C62
  8230
  8231 				; optimize OK (SORTINGALGORITHMS), line = 646
  8232
  8233 4413 AD 20 4D			lda K
  8234 4416 CD 1E 4D			cmp I
  8235 4419 B0 3E			jcs l_1CA6
  8236
  8237 				; optimize OK (SORTINGALGORITHMS), line = 648
  8238
  8239 441B AD 1F 4D			lda J
  8240 441E 20 B3 32			jsr ARRAYACCESS.GETVALUE
  8241 4421 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  8242 4424 8D 21 4D			sta V1
  8243
  8244 				; optimize OK (SORTINGALGORITHMS), line = 649
  8245
  8246 4427 AD 20 4D			lda K
  8247 442A 20 B3 32			jsr ARRAYACCESS.GETVALUE
  8248 442D AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  8249 4430 8D 22 4D			sta V2
  8250
  8251 				; optimize OK (SORTINGALGORITHMS), line = 650
  8252
  8253 4433 AD 21 4D			lda V1
  8254 4436 CD 22 4D			cmp V2
  8255 4439 B0 1E			jcs l_1CC9
  8256
  8257 				; optimize OK (SORTINGALGORITHMS), line = 652
  8258
  8259 443B AD 1F 4D			lda J
  8260 443E 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  8261 4441 AD 22 4D			lda V2
  8262 4444 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  8263 4447 20 DE 32			jsr ARRAYACCESS.SETVALUE
  8264
  8265 				; optimize OK (SORTINGALGORITHMS), line = 653
  8266
  8267 444A AD 20 4D			lda K
  8268 444D 8D 9F 4C			sta ARRAYACCESS.SETVALUE.INDEX
  8269 4450 AD 21 4D			lda V1
  8270 4453 8D A0 4C			sta ARRAYACCESS.SETVALUE.VALUE
  8271 4456 20 DE 32			jsr ARRAYACCESS.SETVALUE
  8272 4459			l_1CC9
  8273 4459			l_1CA6
  8274
  8275 				; optimize OK (SORTINGALGORITHMS), line = 657
  8276
  8277 4459 AD 20 4D			lda K
  8278 445C 8D 1F 4D			sta J
  8279
  8280 				; optimize OK (SORTINGALGORITHMS), line = 658
  8281
  8282 445F CD 1E 4D			cmp I
  8283 4462 90 03			jcc l_1CF6
  8284 4464 4C 6A 44			jmp b_1C18					; break
  8285 4467			l_1CF6
  8286 4467			l_1C17
  8287
  8288 				; optimize OK (SORTINGALGORITHMS), line = 630
  8289
  8290 4467 4C CA 43			jmp l_1C18
  8291 446A			b_1C18
  8292
  8293 				; --- ForToDoEpilog
  8294 446A CE 1E 4D			dec I
  8295 446D F0 03 4C AA 43		jne l_1BFE
  8296 4472			l_1C0C
  8297
  8298 				; ------------------------------------------------------------
  8299
  8300 = 4D1E			I	= DATAORIGIN+$0456
  8301 = 4D1F			J	= DATAORIGIN+$0457
  8302 = 4D20			K	= DATAORIGIN+$0458
  8303 = 4D21			V1	= DATAORIGIN+$0459
  8304 = 4D22			V2	= DATAORIGIN+$045A
  8305
  8306 = 4D1E			@VarData	= I
  8307 = 0005			@VarDataSize	= 5
  8308
  8309 4472			@exit
  8310 					.ifdef @new
  8311 					lda <@VarData
  8312 					sta :ztmp
  8313 					lda >@VarData
  8314 					ldy #@VarDataSize-1
  8315 					jmp @FreeMem
  8316 					els
  8317 4472 60				rts						; ret
  8318 					eif
  8319 				.endl
  8320
  8321 4473			.local	DOUBLESELECTIONSORT				; PROCEDURE
  8322
  8323 				; optimize OK (SORTINGALGORITHMS), line = 670
  8324
  8325 4473 A9 00			lda #$00
  8326 4475 8D 24 4D			sta LEFT
  8327
  8328 				; optimize OK (SORTINGALGORITHMS), line = 671
  8329
  8330 4478 A9 9F			lda #$9F
  8331 447A 8D 25 4D			sta RIGHT
  8332
  8333 				; --- WhileProlog
  8334 447D 4C 42 45			jmp l_1D10
  8335 4480			l_1D11
  8336
  8337 				; optimize OK (SORTINGALGORITHMS), line = 675
  8338
  8339 4480 AD 24 4D			lda LEFT
  8340 4483 20 B3 32			jsr ARRAYACCESS.GETVALUE
  8341 4486 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  8342 4489 8D 2B 4D			sta LEFTVAL
  8343
  8344 				; optimize OK (SORTINGALGORITHMS), line = 676
  8345
  8346 448C AD 25 4D			lda RIGHT
  8347 448F 20 B3 32			jsr ARRAYACCESS.GETVALUE
  8348 4492 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  8349 4495 8D 2C 4D			sta RIGHTVAL
  8350
  8351 				; optimize OK (SORTINGALGORITHMS), line = 678
  8352
  8353 4498 AD 24 4D			lda LEFT
  8354 449B 8D 27 4D			sta MININD
  8355
  8356 				; optimize OK (SORTINGALGORITHMS), line = 679
  8357
  8358 449E 8D 28 4D			sta MAXIND
  8359
  8360 				; optimize OK (SORTINGALGORITHMS), line = 680
  8361
  8362 44A1 AD 2B 4D			lda LEFTVAL
  8363 44A4 8D 29 4D			sta MINVAL
  8364
  8365 				; optimize OK (SORTINGALGORITHMS), line = 681
  8366
  8367 44A7 8D 2A 4D			sta MAXVAL
  8368
  8369 				; optimize OK (SORTINGALGORITHMS), line = 683
  8370
  8371 44AA AD 24 4D			lda LEFT
  8372 44AD 8D 23 4D			sta I
  8373
  8374 44B0			l_1D44
  8375 				; --- ForToDoCondition
  8376 44B0 AD 23 4D			lda I
  8377 44B3 CD 25 4D			cmp RIGHT
  8378 44B6 90 02			scc
  8379 44B8 D0 44			jne l_1D52
  8380
  8381 				; optimize OK (SORTINGALGORITHMS), line = 685
  8382
  8383 44BA AD 07 4C			lda OPERATION.ABORTED
  8384 44BD F0 03			jeq l_1D5E
  8385 44BF 4C 4D 45			jmp @exit					; exit
  8386 44C2			l_1D5E
  8387
  8388 				; optimize OK (SORTINGALGORITHMS), line = 686
  8389
  8390 44C2 AD 23 4D			lda I
  8391 44C5 20 B3 32			jsr ARRAYACCESS.GETVALUE
  8392 44C8 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  8393 44CB 8D 26 4D			sta VAL
  8394
  8395 				; optimize OK (SORTINGALGORITHMS), line = 688
  8396
  8397 44CE AD 2A 4D			lda MAXVAL
  8398 44D1 CD 26 4D			cmp VAL
  8399 44D4 B0 0F			jcs l_1D7C
  8400
  8401 				; optimize OK (SORTINGALGORITHMS), line = 690
  8402
  8403 44D6 AD 23 4D			lda I
  8404 44D9 8D 28 4D			sta MAXIND
  8405
  8406 				; optimize OK (SORTINGALGORITHMS), line = 691
  8407
  8408 44DC AD 26 4D			lda VAL
  8409 44DF 8D 2A 4D			sta MAXVAL
  8410 44E2 4C F9 44			jmp l_1D92
  8411 44E5			l_1D7C
  8412
  8413 				; optimize OK (SORTINGALGORITHMS), line = 693
  8414
  8415 44E5 AD 26 4D			lda VAL
  8416 44E8 CD 29 4D			cmp MINVAL
  8417 44EB B0 0C			jcs l_1DA6
  8418
  8419 				; optimize OK (SORTINGALGORITHMS), line = 695
  8420
  8421 44ED AD 23 4D			lda I
  8422 44F0 8D 27 4D			sta MININD
  8423
  8424 				; optimize OK (SORTINGALGORITHMS), line = 696
  8425
  8426 44F3 AD 26 4D			lda VAL
  8427 44F6 8D 29 4D			sta MINVAL
  8428 44F9			l_1DA6
  8429 44F9			l_1D92
  8430
  8431 				; --- ForToDoEpilog
  8432 44F9 EE 23 4D			inc I
  8433 44FC D0 B2			jne l_1D44
  8434 44FE			l_1D52
  8435
  8436 				; optimize OK (SORTINGALGORITHMS), line = 700
  8437
  8438 44FE AD 24 4D			lda LEFT
  8439 4501 8D A7 4C			sta ARRAYACCESS.SWAPVALUES.INDEX1
  8440 4504 AD 27 4D			lda MININD
  8441 4507 8D A8 4C			sta ARRAYACCESS.SWAPVALUES.INDEX2
  8442 450A 20 9B 33			jsr ARRAYACCESS.SWAPVALUES
  8443
  8444 				; optimize OK (SORTINGALGORITHMS), line = 702
  8445
  8446 450D AD 27 4D			lda MININD
  8447 4510 20 B3 32			jsr ARRAYACCESS.GETVALUE
  8448 4513 AD 9C 4C			lda ARRAYACCESS.GETVALUE.RESULT
  8449 4516 CD 2A 4D			cmp MAXVAL
  8450 4519 D0 12			jne l_1DD6
  8451 				@
  8452
  8453 				; optimize OK (SORTINGALGORITHMS), line = 704
  8454
  8455 451B AD 25 4D			lda RIGHT
  8456 451E 8D A7 4C			sta ARRAYACCESS.SWAPVALUES.INDEX1
  8457 4521 AD 27 4D			lda MININD
  8458 4524 8D A8 4C			sta ARRAYACCESS.SWAPVALUES.INDEX2
  8459 4527 20 9B 33			jsr ARRAYACCESS.SWAPVALUES
  8460 452A 4C 3C 45			jmp l_1DE7
  8461 452D			l_1DD6
  8462
  8463 				; optimize OK (SORTINGALGORITHMS), line = 707
  8464
  8465 452D AD 25 4D			lda RIGHT
  8466 4530 8D A7 4C			sta ARRAYACCESS.SWAPVALUES.INDEX1
  8467 4533 AD 28 4D			lda MAXIND
  8468 4536 8D A8 4C			sta ARRAYACCESS.SWAPVALUES.INDEX2
  8469 4539 20 9B 33			jsr ARRAYACCESS.SWAPVALUES
  8470 453C			l_1DE7
  8471
  8472 				; optimize FAIL (0, SORTINGALGORITHMS), line = 710
  8473
  8474 453C EE 24 4D			inc LEFT
  8475
  8476 				; optimize FAIL (0, SORTINGALGORITHMS), line = 711
  8477
  8478 453F CE 25 4D			dec RIGHT
  8479 4542			l_1D10
  8480
  8481 				; optimize OK (SORTINGALGORITHMS), line = 673
  8482
  8483 4542 AD 24 4D			lda LEFT
  8484 4545 CD 25 4D			cmp RIGHT
  8485 4548 B0 03 4C 80 44		jcc l_1D11
  8486
  8487 				; ------------------------------------------------------------
  8488
  8489 = 4D23			I	= DATAORIGIN+$045B
  8490 = 4D24			LEFT	= DATAORIGIN+$045C
  8491 = 4D25			RIGHT	= DATAORIGIN+$045D
  8492 = 4D26			VAL	= DATAORIGIN+$045E
  8493 = 4D27			MININD	= DATAORIGIN+$045F
  8494 = 4D28			MAXIND	= DATAORIGIN+$0460
  8495 = 4D29			MINVAL	= DATAORIGIN+$0461
  8496 = 4D2A			MAXVAL	= DATAORIGIN+$0462
  8497 = 4D2B			LEFTVAL	= DATAORIGIN+$0463
  8498 = 4D2C			RIGHTVAL	= DATAORIGIN+$0464
  8499
  8500 = 4D23			@VarData	= I
  8501 = 000A			@VarDataSize	= 10
  8502
  8503 454D			@exit
  8504 					.ifdef @new
  8505 					lda <@VarData
  8506 					sta :ztmp
  8507 					lda >@VarData
  8508 					ldy #@VarDataSize-1
  8509 					jmp @FreeMem
  8510 					els
  8511 454D 60				rts						; ret
  8512 					eif
  8513 				.endl
  8514
  8515 454E			.local	SPLASHSCREENSORT				; PROCEDURE
  8516
  8517 				; optimize OK (SORTINGALGORITHMS), line = 723
  8518
  8519 454E A9 76			lda #$76
  8520 4550 8D 2D 4D			sta LAST
  8521
  8522 				; optimize OK (SORTINGALGORITHMS), line = 724
  8523
  8524 4553 A9 00			lda #$00
  8525 4555 8D 2E 4D			sta I
  8526
  8527 4558			l_1E15
  8528 				; --- ForToDoCondition
  8529 4558 AD 2E 4D			lda I
  8530 455B C9 77			cmp #$77
  8531 455D B0 5B			jcs l_1E23
  8532
  8533 				; optimize OK (SORTINGALGORITHMS), line = 726
  8534
  8535 455F A9 00			lda #$00
  8536 4561 8D 2F 4D			sta J
  8537
  8538 4564			l_1E2E
  8539 				; --- ForToDoCondition
  8540 4564 AD 2F 4D			lda J
  8541 4567 CD 2D 4D			cmp LAST
  8542 456A 90 02			scc
  8543 456C D0 44			jne l_1E3C
  8544
  8545 				; optimize OK (SORTINGALGORITHMS), line = 728
  8546
  8547 456E AC 2F 4D			ldy J
  8548 4571 C8				iny
  8549 4572 8C 30 4D			sty K
  8550
  8551 				; optimize OK (SORTINGALGORITHMS), line = 729
  8552
  8553 4575 20 D1 32			jsr ARRAYACCESS.GETVALUESILENT
  8554 4578 AD 9E 4C			lda ARRAYACCESS.GETVALUESILENT.RESULT
  8555 457B 8D 31 4D			sta V1
  8556
  8557 				; optimize OK (SORTINGALGORITHMS), line = 730
  8558
  8559 457E AD 30 4D			lda K
  8560 4581 20 D1 32			jsr ARRAYACCESS.GETVALUESILENT
  8561 4584 AD 9E 4C			lda ARRAYACCESS.GETVALUESILENT.RESULT
  8562 4587 8D 32 4D			sta V2
  8563
  8564 				; optimize OK (SORTINGALGORITHMS), line = 731
  8565
  8566 458A CD 31 4D			cmp V1
  8567 458D B0 1E			jcs l_1E68
  8568
  8569 				; optimize OK (SORTINGALGORITHMS), line = 733
  8570
  8571 458F AD 2F 4D			lda J
  8572 4592 8D A3 4C			sta ARRAYACCESS.SETVALUESILENT.INDEX
  8573 4595 AD 32 4D			lda V2
  8574 4598 8D A4 4C			sta ARRAYACCESS.SETVALUESILENT.VALUE
  8575 459B 20 45 33			jsr ARRAYACCESS.SETVALUESILENT
  8576
  8577 				; optimize OK (SORTINGALGORITHMS), line = 734
  8578
  8579 459E AD 30 4D			lda K
  8580 45A1 8D A3 4C			sta ARRAYACCESS.SETVALUESILENT.INDEX
  8581 45A4 AD 31 4D			lda V1
  8582 45A7 8D A4 4C			sta ARRAYACCESS.SETVALUESILENT.VALUE
  8583 45AA 20 45 33			jsr ARRAYACCESS.SETVALUESILENT
  8584 45AD			l_1E68
  8585
  8586 				; --- ForToDoEpilog
  8587 45AD EE 2F 4D			inc J
  8588 45B0 D0 B2			jne l_1E2E
  8589 45B2			l_1E3C
  8590
  8591 				; optimize FAIL (0, SORTINGALGORITHMS), line = 737
  8592
  8593 45B2 CE 2D 4D			dec LAST
  8594
  8595 				; --- ForToDoEpilog
  8596 45B5 EE 2E 4D			inc I
  8597 45B8 D0 9E			jne l_1E15
  8598 45BA			l_1E23
  8599
  8600 				; ------------------------------------------------------------
  8601
  8602 = 0077			MAX_LINE	= $77
  8603 = 4D2D			LAST	= DATAORIGIN+$0465
  8604 = 4D2E			I	= DATAORIGIN+$0466
  8605 = 4D2F			J	= DATAORIGIN+$0467
  8606 = 4D30			K	= DATAORIGIN+$0468
  8607 = 4D31			V1	= DATAORIGIN+$0469
  8608 = 4D32			V2	= DATAORIGIN+$046A
  8609
  8610 = 4D2D			@VarData	= LAST
  8611 = 0006			@VarDataSize	= 6
  8612
  8613 45BA			@exit
  8614 					.ifdef @new
  8615 					lda <@VarData
  8616 					sta :ztmp
  8617 					lda >@VarData
  8618 					ldy #@VarDataSize-1
  8619 					jmp @FreeMem
  8620 					els
  8621 45BA 60				rts						; ret
  8622 					eif
  8623 				.endl
  8624
  8625 				; ------------------------------------------------------------
  8626
  8627 				.endl							; UNIT SORTINGALGORITHMS
  8628
  8629 				; ------------------------------------------------------------
  8630
  8631 45BB			.local	DOS						; UNIT
  8632
  8633 				; ------------------------------------------------------------
  8634
  8635 = D014			PALNTSC	= $D014
  8636
  8637 				.endl							; UNIT DOS
  8638
  8639 				; ------------------------------------------------------------
  8640
  8641 45BB			.local	STRUTILS					; UNIT
  8642
  8643 				; ------------------------------------------------------------
  8644
  8645 				.endl							; UNIT STRUTILS
  8646
  8647 				; ------------------------------------------------------------
  8648
  8649 45BB			.local	SYSUTILS					; UNIT
  8650
  8651 				; ------------------------------------------------------------
  8652
  8653 = 0001			FAREADONLY	= $01
  8654 = 0002			FAHIDDEN	= $02
  8655 = 0004			FASYSFILE	= $04
  8656 = 0008			FAVOLUMEID	= $08
  8657 = 0010			FADIRECTORY	= $10
  8658 = 0020			FAARCHIVE	= $20
  8659 = 003F			FAANYFILE	= $3F
  8660
  8661 				.endl							; UNIT SYSUTILS
  8662
  8663 45BB			.local	RUNOPERATION					; PROCEDURE
  8664
  8665 				; optimize FAIL ('STATUS.UPDATEOPERATIONCAPTION', SortViz.pas), line = 14
  8666
  8667 45BB 20 02 27			jsr STATUS.UPDATEOPERATIONCAPTION
  8668
  8669 				; optimize FAIL ('STATUS.RESETSTATISTICS', SortViz.pas), line = 15
  8670
  8671 45BE 20 4C 29			jsr STATUS.RESETSTATISTICS
  8672
  8673 				; optimize OK (SortViz.pas), line = 17
  8674
  8675 45C1 AD 05 4C			lda OPERATION.OPERATIONKIND
  8676 45C4 8D 34 4D			sta @CASETMP_0007
  8677 45C7 C9 02			cmp #$02
  8678 45C9 D0 06			jne l_1ECA
  8679 				@
  8680
  8681 				; optimize FAIL ('SHUFFLEALGORITHMS.FILLASCENDING', SortViz.pas), line = 18
  8682
  8683 45CB 20 48 34			jsr SHUFFLEALGORITHMS.FILLASCENDING
  8684 45CE 4C A0 46			jmp a_0007
  8685 45D1			l_1ECA
  8686 45D1 C9 03			cmp #$03
  8687 45D3 D0 06			jne l_1ED4
  8688 				@
  8689
  8690 				; optimize FAIL ('SHUFFLEALGORITHMS.FILLDESCENDING', SortViz.pas), line = 19
  8691
  8692 45D5 20 63 34			jsr SHUFFLEALGORITHMS.FILLDESCENDING
  8693 45D8 4C A0 46			jmp a_0007
  8694 45DB			l_1ED4
  8695 45DB C9 04			cmp #$04
  8696 45DD D0 06			jne l_1EDE
  8697 				@
  8698
  8699 				; optimize FAIL ('SHUFFLEALGORITHMS.FILLPYRAMID', SortViz.pas), line = 20
  8700
  8701 45DF 20 87 34			jsr SHUFFLEALGORITHMS.FILLPYRAMID
  8702 45E2 4C A0 46			jmp a_0007
  8703 45E5			l_1EDE
  8704 45E5 C9 05			cmp #$05
  8705 45E7 D0 06			jne l_1EE8
  8706 				@
  8707
  8708 				; optimize FAIL ('SHUFFLEALGORITHMS.FILLINTERLACED', SortViz.pas), line = 21
  8709
  8710 45E9 20 0B 35			jsr SHUFFLEALGORITHMS.FILLINTERLACED
  8711 45EC 4C A0 46			jmp a_0007
  8712 45EF			l_1EE8
  8713 45EF C9 00			cmp #$00
  8714 45F1 D0 06			jne l_1EF2
  8715 				@
  8716
  8717 				; optimize FAIL ('SHUFFLEALGORITHMS.KNUTHSHUFFLE', SortViz.pas), line = 22
  8718
  8719 45F3 20 52 35			jsr SHUFFLEALGORITHMS.KNUTHSHUFFLE
  8720 45F6 4C A0 46			jmp a_0007
  8721 45F9			l_1EF2
  8722 45F9 C9 01			cmp #$01
  8723 45FB D0 06			jne l_1EFC
  8724 				@
  8725
  8726 				; optimize FAIL ('SHUFFLEALGORITHMS.FILLASCENDINGWITHSHUFFLE', SortViz.pas), line = 23
  8727
  8728 45FD 20 F7 35			jsr SHUFFLEALGORITHMS.FILLASCENDINGWITHSHUFFLE
  8729 4600 4C A0 46			jmp a_0007
  8730 4603			l_1EFC
  8731 4603 C9 06			cmp #$06
  8732 4605 D0 06			jne l_1F06
  8733 				@
  8734
  8735 				; optimize FAIL ('SORTINGALGORITHMS.INSERTIONSORT', SortViz.pas), line = 24
  8736
  8737 4607 20 DB 36			jsr SORTINGALGORITHMS.INSERTIONSORT
  8738 460A 4C A0 46			jmp a_0007
  8739 460D			l_1F06
  8740 460D C9 07			cmp #$07
  8741 460F D0 06			jne l_1F10
  8742 				@
  8743
  8744 				; optimize FAIL ('SORTINGALGORITHMS.SELECTIONSORT', SortViz.pas), line = 25
  8745
  8746 4611 20 46 37			jsr SORTINGALGORITHMS.SELECTIONSORT
  8747 4614 4C A0 46			jmp a_0007
  8748 4617			l_1F10
  8749 4617 C9 08			cmp #$08
  8750 4619 D0 06			jne l_1F1A
  8751 				@
  8752
  8753 				; optimize FAIL ('SORTINGALGORITHMS.QUICKSORT', SortViz.pas), line = 26
  8754
  8755 461B 20 AB 37			jsr SORTINGALGORITHMS.QUICKSORT
  8756 461E 4C A0 46			jmp a_0007
  8757 4621			l_1F1A
  8758 4621 C9 09			cmp #$09
  8759 4623 D0 06			jne l_1F24
  8760 				@
  8761
  8762 				; optimize FAIL ('SORTINGALGORITHMS.MERGESORT', SortViz.pas), line = 27
  8763
  8764 4625 20 C4 38			jsr SORTINGALGORITHMS.MERGESORT
  8765 4628 4C A0 46			jmp a_0007
  8766 462B			l_1F24
  8767 462B C9 0A			cmp #$0A
  8768 462D D0 06			jne l_1F2E
  8769 				@
  8770
  8771 				; optimize FAIL ('SORTINGALGORITHMS.BUBBLESORT', SortViz.pas), line = 28
  8772
  8773 462F 20 63 36			jsr SORTINGALGORITHMS.BUBBLESORT
  8774 4632 4C A0 46			jmp a_0007
  8775 4635			l_1F2E
  8776 4635 C9 0B			cmp #$0B
  8777 4637 D0 06			jne l_1F38
  8778 				@
  8779
  8780 				; optimize FAIL ('SORTINGALGORITHMS.COCTAILSORT', SortViz.pas), line = 29
  8781
  8782 4639 20 00 3A			jsr SORTINGALGORITHMS.COCTAILSORT
  8783 463C 4C A0 46			jmp a_0007
  8784 463F			l_1F38
  8785 463F C9 0C			cmp #$0C
  8786 4641 D0 06			jne l_1F42
  8787 				@
  8788
  8789 				; optimize FAIL ('SORTINGALGORITHMS.GNOMESORT', SortViz.pas), line = 30
  8790
  8791 4643 20 FC 3A			jsr SORTINGALGORITHMS.GNOMESORT
  8792 4646 4C A0 46			jmp a_0007
  8793 4649			l_1F42
  8794 4649 C9 0D			cmp #$0D
  8795 464B D0 06			jne l_1F4C
  8796 				@
  8797
  8798 				; optimize FAIL ('SORTINGALGORITHMS.CIRCLESORT', SortViz.pas), line = 31
  8799
  8800 464D 20 73 3B			jsr SORTINGALGORITHMS.CIRCLESORT
  8801 4650 4C A0 46			jmp a_0007
  8802 4653			l_1F4C
  8803 4653 C9 0E			cmp #$0E
  8804 4655 D0 06			jne l_1F56
  8805 				@
  8806
  8807 				; optimize FAIL ('SORTINGALGORITHMS.COMBSORT', SortViz.pas), line = 32
  8808
  8809 4657 20 F1 3C			jsr SORTINGALGORITHMS.COMBSORT
  8810 465A 4C A0 46			jmp a_0007
  8811 465D			l_1F56
  8812 465D C9 0F			cmp #$0F
  8813 465F D0 06			jne l_1F60
  8814 				@
  8815
  8816 				; optimize FAIL ('SORTINGALGORITHMS.PANCAKESORT', SortViz.pas), line = 33
  8817
  8818 4661 20 DE 3D			jsr SORTINGALGORITHMS.PANCAKESORT
  8819 4664 4C A0 46			jmp a_0007
  8820 4667			l_1F60
  8821 4667 C9 10			cmp #$10
  8822 4669 D0 06			jne l_1F6A
  8823 				@
  8824
  8825 				; optimize FAIL ('SORTINGALGORITHMS.SHELLSORT', SortViz.pas), line = 34
  8826
  8827 466B 20 A3 3E			jsr SORTINGALGORITHMS.SHELLSORT
  8828 466E 4C A0 46			jmp a_0007
  8829 4671			l_1F6A
  8830 4671 C9 11			cmp #$11
  8831 4673 D0 06			jne l_1F74
  8832 				@
  8833
  8834 				; optimize FAIL ('SORTINGALGORITHMS.ODDEVENSORT', SortViz.pas), line = 35
  8835
  8836 4675 20 50 3F			jsr SORTINGALGORITHMS.ODDEVENSORT
  8837 4678 4C A0 46			jmp a_0007
  8838 467B			l_1F74
  8839 467B C9 12			cmp #$12
  8840 467D D0 06			jne l_1F7E
  8841 				@
  8842
  8843 				; optimize FAIL ('SORTINGALGORITHMS.BITONICSORT', SortViz.pas), line = 36
  8844
  8845 467F 20 22 40			jsr SORTINGALGORITHMS.BITONICSORT
  8846 4682 4C A0 46			jmp a_0007
  8847 4685			l_1F7E
  8848 4685 C9 13			cmp #$13
  8849 4687 D0 06			jne l_1F88
  8850 				@
  8851
  8852 				; optimize FAIL ('SORTINGALGORITHMS.RADIXSORT', SortViz.pas), line = 37
  8853
  8854 4689 20 DC 41			jsr SORTINGALGORITHMS.RADIXSORT
  8855 468C 4C A0 46			jmp a_0007
  8856 468F			l_1F88
  8857 468F C9 14			cmp #$14
  8858 4691 D0 06			jne l_1F92
  8859 				@
  8860
  8861 				; optimize FAIL ('SORTINGALGORITHMS.HEAPSORT', SortViz.pas), line = 38
  8862
  8863 4693 20 DD 42			jsr SORTINGALGORITHMS.HEAPSORT
  8864 4696 4C A0 46			jmp a_0007
  8865 4699			l_1F92
  8866 4699 C9 15			cmp #$15
  8867 469B D0 03			jne l_1F9C
  8868 				@
  8869
  8870 				; optimize FAIL ('SORTINGALGORITHMS.DOUBLESELECTIONSORT', SortViz.pas), line = 39
  8871
  8872 469D 20 73 44			jsr SORTINGALGORITHMS.DOUBLESELECTIONSORT
  8873 46A0			l_1F9C
  8874 46A0			a_0007
  8875
  8876 				; optimize FAIL ('STATUS.FORCEUPDATESTATISTICS', SortViz.pas), line = 42
  8877
  8878 46A0 20 F1 28			jsr STATUS.FORCEUPDATESTATISTICS
  8879
  8880 				; optimize FAIL ('ARRAYACCESS.CLEAR', SortViz.pas), line = 43
  8881
  8882 46A3 20 37 31			jsr ARRAYACCESS.CLEAR
  8883
  8884 				; ------------------------------------------------------------
  8885
  8886 = 4D34			@CASETMP_0007	= DATAORIGIN+$046C
  8887
  8888 = 4D34			@VarData	= @CASETMP_0007
  8889 = 0001			@VarDataSize	= 1
  8890
  8891 46A6			@exit
  8892 					.ifdef @new
  8893 					lda <@VarData
  8894 					sta :ztmp
  8895 					lda >@VarData
  8896 					ldy #@VarDataSize-1
  8897 					jmp @FreeMem
  8898 					els
  8899 46A6 60				rts						; ret
  8900 					eif
  8901 				.endl
  8902
  8903 46A7			.local	TRYRUNOPERATION					; FUNCTION
  8904
  8905 				; optimize OK (SortViz.pas), line = 50
  8906
  8907 46A7 A9 00			lda #$00
  8908 46A9 8D 36 4D			sta I
  8909
  8910 46AC			l_1FC6
  8911 				; --- ForToDoCondition
  8912 46AC AC 36 4D			ldy I
  8913 46AF C0 16			cpy #$16
  8914 46B1 B0 33			jcs l_1FD4
  8915
  8916 				; optimize OK (SortViz.pas), line = 52
  8917
  8918 46B3 B9 2B 20			lda OPERATION.adr.OPERATION_SHORTCUTS,y
  8919 46B6 CD 33 4D			cmp KEY
  8920 46B9 D0 26			jne l_1FEB
  8921
  8922 				; optimize OK (SortViz.pas), line = 54
  8923
  8924 46BB AD 36 4D			lda I
  8925 46BE 8D 05 4C			sta OPERATION.OPERATIONKIND
  8926
  8927 				; optimize OK (SortViz.pas), line = 55
  8928
  8929 46C1 A9 00			lda #$00
  8930 46C3 8D 02 4C			sta OPERATION.DEMO
  8931
  8932 				; optimize OK (SortViz.pas), line = 56
  8933
  8934 46C6 A9 02			lda #$02
  8935 46C8 8D 01 4C			sta OPERATION.WORKINGMODE
  8936
  8937 				; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 57
  8938
  8939 46CB 20 B3 29			jsr STATUS.UPDATESTATUS
  8940
  8941 				; optimize FAIL ('RUNOPERATION', SortViz.pas), line = 59
  8942
  8943 46CE 20 BB 45			jsr RUNOPERATION
  8944
  8945 				; optimize OK (SortViz.pas), line = 61
  8946
  8947 46D1 A9 00			lda #$00
  8948 46D3 8D 01 4C			sta OPERATION.WORKINGMODE
  8949
  8950 				; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 62
  8951
  8952 46D6 20 B3 29			jsr STATUS.UPDATESTATUS
  8953
  8954 				; optimize OK (SortViz.pas), line = 63
  8955
  8956 46D9 A9 01			lda #$01
  8957 46DB 8D 35 4D			sta RESULT
  8958 46DE 4C EB 46			jmp @exit					; exit
  8959 46E1			l_1FEB
  8960
  8961 				; --- ForToDoEpilog
  8962 46E1 EE 36 4D			inc I
  8963 46E4 D0 C6			jne l_1FC6
  8964 46E6			l_1FD4
  8965
  8966 				; optimize OK (SortViz.pas), line = 68
  8967
  8968 46E6 A9 00			lda #$00
  8969 46E8 8D 35 4D			sta RESULT
  8970 46EB			@exit
  8971
  8972 				; ------------------------------------------------------------
  8973
  8974 = 4D35			RESULT	= DATAORIGIN+$046D
  8975 = 4D36			I	= DATAORIGIN+$046E
  8976
  8977 = 4D36			@VarData	= I
  8978 = 0001			@VarDataSize	= 1
  8979
  8980 46EB 60				rts						; ret
  8981 				.endl
  8982
  8983 46EC			.local	CHOOSEDEMOMETHOD				; FUNCTION
  8984
  8985 				; optimize OK (SortViz.pas), line = 75
  8986
  8987 46EC A9 01			lda #$01
  8988 46EE 8D 01 4C			sta OPERATION.WORKINGMODE
  8989
  8990 				; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 76
  8991
  8992 46F1 20 B3 29			jsr STATUS.UPDATESTATUS
  8993
  8994 				; --- WhileProlog
  8995 46F4 4C 36 47			jmp l_201B
  8996 46F7			l_201C
  8997
  8998 				; optimize FAIL ('KEYBOARD.GETKEY', SortViz.pas), line = 80
  8999
  9000 46F7 20 D1 25			jsr KEYBOARD.GETKEY
  9001 46FA AD 00 4C			lda KEYBOARD.GETKEY.RESULT
  9002 46FD 8D 33 4D			sta KEY
  9003
  9004 				; optimize OK (SortViz.pas), line = 81
  9005
  9006 4700 A9 00			lda #$00
  9007 4702 8D 38 4D			sta I
  9008
  9009 4705			l_2029
  9010 				; --- ForToDoCondition
  9011 4705 AC 38 4D			ldy I
  9012 4708 C0 06			cpy #$06
  9013 470A B0 2A			jcs l_2037
  9014
  9015 				; optimize OK (SortViz.pas), line = 83
  9016
  9017 470C B9 2B 20			lda OPERATION.adr.OPERATION_SHORTCUTS,y
  9018 470F CD 33 4D			cmp KEY
  9019 4712 D0 0E			jne l_204E
  9020
  9021 				; optimize OK (SortViz.pas), line = 85
  9022
  9023 4714 AD 38 4D			lda I
  9024 4717 8D 06 4C			sta OPERATION.DEMOSHUFFLEMETHOD
  9025
  9026 				; optimize OK (SortViz.pas), line = 86
  9027
  9028 471A A9 01			lda #$01
  9029 471C 8D 37 4D			sta RESULT
  9030 471F 4C 39 47			jmp @exit					; exit
  9031 4722			l_204E
  9032
  9033 				; optimize OK (SortViz.pas), line = 89
  9034
  9035 4722 AD 33 4D			lda KEY
  9036 4725 C9 1C			cmp #$1C
  9037 4727 D0 08			jne l_206D
  9038
  9039 				; optimize OK (SortViz.pas), line = 91
  9040
  9041 4729 A9 00			lda #$00
  9042 472B 8D 37 4D			sta RESULT
  9043 472E 4C 39 47			jmp @exit					; exit
  9044 4731			l_206D
  9045
  9046 				; --- ForToDoEpilog
  9047 4731 EE 38 4D			inc I
  9048 4734 D0 CF			jne l_2029
  9049 4736			l_2037
  9050 4736			l_201B
  9051
  9052 				; optimize OK (SortViz.pas), line = 78
  9053
  9054 4736 4C F7 46			jmp l_201C
  9055 4739			@exit
  9056
  9057 				; ------------------------------------------------------------
  9058
  9059 = 4D37			RESULT	= DATAORIGIN+$046F
  9060 = 4D38			I	= DATAORIGIN+$0470
  9061
  9062 = 4D38			@VarData	= I
  9063 = 0001			@VarDataSize	= 1
  9064
  9065 4739 60				rts						; ret
  9066 				.endl
  9067
  9068 473A			.local	RUNDEMO						; PROCEDURE
  9069
  9070 				; optimize FAIL ('CHOOSEDEMOMETHOD', SortViz.pas), line = 102
  9071
  9072 473A 20 EC 46			jsr CHOOSEDEMOMETHOD
  9073 473D AD 37 4D			lda CHOOSEDEMOMETHOD.RESULT
  9074 4740 F0 67			jeq l_208B
  9075
  9076 				; optimize OK (SortViz.pas), line = 104
  9077
  9078 4742 A9 01			lda #$01
  9079 4744 8D 02 4C			sta OPERATION.DEMO
  9080
  9081 				; optimize OK (SortViz.pas), line = 105
  9082
  9083 4747 A9 02			lda #$02
  9084 4749 8D 01 4C			sta OPERATION.WORKINGMODE
  9085
  9086 				; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 106
  9087
  9088 474C 20 B3 29			jsr STATUS.UPDATESTATUS
  9089
  9090 				; optimize OK (SortViz.pas), line = 108
  9091
  9092 474F A9 10			lda #$10
  9093 4751 8D 03 4C			sta OPERATION.OPERATIONCOUNT
  9094
  9095 				; optimize OK (SortViz.pas), line = 109
  9096
  9097 4754 A9 01			lda #$01
  9098 4756 8D 04 4C			sta OPERATION.OPERATIONINDEX
  9099
  9100 				; optimize OK (SortViz.pas), line = 110
  9101
  9102 4759 A9 06			lda #$06
  9103 475B 8D 39 4D			sta I
  9104
  9105 475E			l_20A6
  9106 				; --- ForToDoCondition
  9107 475E AD 39 4D			lda I
  9108 4761 C9 16			cmp #$16
  9109 4763 B0 44			jcs l_20B4
  9110
  9111 				; optimize OK (SortViz.pas), line = 112
  9112
  9113 4765 AD 06 4C			lda OPERATION.DEMOSHUFFLEMETHOD
  9114 4768 8D 05 4C			sta OPERATION.OPERATIONKIND
  9115
  9116 				; optimize FAIL ('RUNOPERATION', SortViz.pas), line = 113
  9117
  9118 476B 20 BB 45			jsr RUNOPERATION
  9119
  9120 				; optimize OK (SortViz.pas), line = 114
  9121
  9122 476E AD 07 4C			lda OPERATION.ABORTED
  9123 4771 F0 03			jeq l_20C7
  9124 4773 4C A9 47			jmp b_20A6					; break
  9125 4776			l_20C7
  9126
  9127 				; optimize OK (SortViz.pas), line = 115
  9128
  9129 4776 A9 C8			lda #$C8
  9130 4778 8D F9 4B			sta CRT.DELAY.COUNT
  9131 477B A9 00			lda #$00
  9132 477D 8D FA 4B			sta CRT.DELAY.COUNT+1
  9133 4780 20 0E 25			jsr CRT.DELAY
  9134
  9135 				; optimize OK (SortViz.pas), line = 116
  9136
  9137 4783 AD 39 4D			lda I
  9138 4786 8D 05 4C			sta OPERATION.OPERATIONKIND
  9139
  9140 				; optimize FAIL ('RUNOPERATION', SortViz.pas), line = 117
  9141
  9142 4789 20 BB 45			jsr RUNOPERATION
  9143
  9144 				; optimize OK (SortViz.pas), line = 118
  9145
  9146 478C AD 07 4C			lda OPERATION.ABORTED
  9147 478F F0 03			jeq l_20DF
  9148 4791 4C A9 47			jmp b_20A6					; break
  9149 4794			l_20DF
  9150
  9151 				; optimize OK (SortViz.pas), line = 119
  9152
  9153 4794 A9 E8			lda #$E8
  9154 4796 8D F9 4B			sta CRT.DELAY.COUNT
  9155 4799 A9 03			lda #$03
  9156 479B 8D FA 4B			sta CRT.DELAY.COUNT+1
  9157 479E 20 0E 25			jsr CRT.DELAY
  9158
  9159 				; optimize FAIL (0, SortViz.pas), line = 120
  9160
  9161 47A1 EE 04 4C			inc OPERATION.OPERATIONINDEX
  9162
  9163 				; --- ForToDoEpilog
  9164 47A4 EE 39 4D			inc I
  9165 47A7 D0 B5			jne l_20A6
  9166 47A9			l_20B4
  9167 47A9			b_20A6
  9168 47A9			l_208B
  9169
  9170 				; optimize OK (SortViz.pas), line = 124
  9171
  9172 47A9 A9 00			lda #$00
  9173 47AB 8D 01 4C			sta OPERATION.WORKINGMODE
  9174
  9175 				; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 125
  9176
  9177 47AE 20 B3 29			jsr STATUS.UPDATESTATUS
  9178
  9179 				; ------------------------------------------------------------
  9180
  9181 = 4D39			I	= DATAORIGIN+$0471
  9182
  9183 = 4D39			@VarData	= I
  9184 = 0001			@VarDataSize	= 1
  9185
  9186 47B1			@exit
  9187 					.ifdef @new
  9188 					lda <@VarData
  9189 					sta :ztmp
  9190 					lda >@VarData
  9191 					ldy #@VarDataSize-1
  9192 					jmp @FreeMem
  9193 					els
  9194 47B1 60				rts						; ret
  9195 					eif
  9196 				.endl
  9197
  9198 47B2			.local	PROCESSQUITQUERY				; PROCEDURE
  9199
  9200 				; optimize FAIL ('CRT.NOSOUND', SortViz.pas), line = 132
  9201
  9202 47B2 20 75 25			jsr CRT.NOSOUND
  9203
  9204 				; optimize OK (SortViz.pas), line = 133
  9205
  9206 47B5 A9 04			lda #$04
  9207 47B7 8D 01 4C			sta OPERATION.WORKINGMODE
  9208
  9209 				; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 134
  9210
  9211 47BA 20 B3 29			jsr STATUS.UPDATESTATUS
  9212
  9213 				; --- WhileProlog
  9214 47BD 4C DF 47			jmp l_2100
  9215 47C0			l_2101
  9216
  9217 				; optimize FAIL ('KEYBOARD.GETKEY', SortViz.pas), line = 138
  9218
  9219 47C0 20 D1 25			jsr KEYBOARD.GETKEY
  9220 47C3 AD 00 4C			lda KEYBOARD.GETKEY.RESULT
  9221 47C6 8D 3A 4D			sta KEY
  9222
  9223 				; optimize OK (SortViz.pas), line = 139
  9224
  9225 47C9 C9 2B			cmp #$2B
  9226 47CB D0 08			jne l_2117
  9227
  9228 				; optimize OK (SortViz.pas), line = 141
  9229
  9230 47CD A9 01			lda #$01
  9231 47CF 8D 08 4C			sta OPERATION.QUIT
  9232 47D2 4C E2 47			jmp b_2101					; break
  9233 47D5			l_2117
  9234
  9235 				; optimize OK (SortViz.pas), line = 144
  9236
  9237 47D5 AD 3A 4D			lda KEY
  9238 47D8 C9 23			cmp #$23
  9239 47DA D0 03			jne l_2137
  9240 47DC 4C E2 47			jmp b_2101					; break
  9241 47DF			l_2137
  9242 47DF			l_2125
  9243 47DF			l_2100
  9244
  9245 				; optimize OK (SortViz.pas), line = 136
  9246
  9247 47DF 4C C0 47			jmp l_2101
  9248 47E2			b_2101
  9249
  9250 				; optimize OK (SortViz.pas), line = 150
  9251
  9252 47E2 A9 00			lda #$00
  9253 47E4 8D 01 4C			sta OPERATION.WORKINGMODE
  9254
  9255 				; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 151
  9256
  9257 47E7 20 B3 29			jsr STATUS.UPDATESTATUS
  9258
  9259 				; ------------------------------------------------------------
  9260
  9261 = 4D3A			KEY	= DATAORIGIN+$0472
  9262
  9263 = 4D3A			@VarData	= KEY
  9264 = 0001			@VarDataSize	= 1
  9265
  9266 47EA			@exit
  9267 					.ifdef @new
  9268 					lda <@VarData
  9269 					sta :ztmp
  9270 					lda >@VarData
  9271 					ldy #@VarDataSize-1
  9272 					jmp @FreeMem
  9273 					els
  9274 47EA 60				rts						; ret
  9275 					eif
  9276 				.endl
  9277
  9278 47EB			.local	SPLASHSCREEN					; PROCEDURE
  9279
  9280 				; optimize FAIL ('SHUFFLEALGORITHMS.SPLASHSCREENSHUFFLE', SortViz.pas), line = 163
  9281
  9282 47EB 20 FE 35			jsr SHUFFLEALGORITHMS.SPLASHSCREENSHUFFLE
  9283
  9284 				; optimize OK (SortViz.pas), line = 165
  9285
  9286 47EE A9 00			lda #$00
  9287 47F0 8D 3B 4D			sta I
  9288
  9289 47F3			l_2151
  9290 				; --- ForToDoCondition
  9291 47F3 AD 3B 4D			lda I
  9292 47F6 C9 10			cmp #$10
  9293 47F8 B0 15			jcs l_215F
  9294
  9295 				; optimize OK (SortViz.pas), line = 167
  9296
  9297 47FA 8D 56 4C			sta DISPLAYLIST.COLOR1VALUE
  9298
  9299 				; optimize OK (SortViz.pas), line = 168
  9300
  9301 47FD A9 28			lda #$28
  9302 47FF 8D F9 4B			sta CRT.DELAY.COUNT
  9303 4802 A9 00			lda #$00
  9304 4804 8D FA 4B			sta CRT.DELAY.COUNT+1
  9305 4807 20 0E 25			jsr CRT.DELAY
  9306
  9307 				; --- ForToDoEpilog
  9308 480A EE 3B 4D			inc I
  9309 480D D0 E4			jne l_2151
  9310 480F			l_215F
  9311
  9312 				; optimize FAIL ('SORTINGALGORITHMS.SPLASHSCREENSORT', SortViz.pas), line = 171
  9313
  9314 480F 20 4E 45			jsr SORTINGALGORITHMS.SPLASHSCREENSORT
  9315
  9316 				; optimize OK (SortViz.pas), line = 172
  9317
  9318 4812 A9 D0			lda #$D0
  9319 4814 8D F9 4B			sta CRT.DELAY.COUNT
  9320 4817 A9 07			lda #$07
  9321 4819 8D FA 4B			sta CRT.DELAY.COUNT+1
  9322 481C 20 0E 25			jsr CRT.DELAY
  9323
  9324 				; optimize OK (SortViz.pas), line = 174
  9325
  9326 481F A9 0F			lda #$0F
  9327 4821 8D 3B 4D			sta I
  9328
  9329 4824			l_2178
  9330 				; --- ForToDoCondition
  9331
  9332 				; optimize OK (SortViz.pas), line = 176
  9333
  9334 4824 AD 3B 4D			lda I
  9335 4827 8D 56 4C			sta DISPLAYLIST.COLOR1VALUE
  9336
  9337 				; optimize OK (SortViz.pas), line = 177
  9338
  9339 482A A9 28			lda #$28
  9340 482C 8D F9 4B			sta CRT.DELAY.COUNT
  9341 482F A9 00			lda #$00
  9342 4831 8D FA 4B			sta CRT.DELAY.COUNT+1
  9343 4834 20 0E 25			jsr CRT.DELAY
  9344
  9345 				; --- ForToDoEpilog
  9346 4837 CE 3B 4D			dec I
  9347 483A 10 E8			jpl l_2178
  9348 483C			l_2186
  9349
  9350 				; optimize OK (SortViz.pas), line = 180
  9351
  9352 483C A9 F4			lda #$F4
  9353 483E 8D F9 4B			sta CRT.DELAY.COUNT
  9354 4841 A9 01			lda #$01
  9355 4843 8D FA 4B			sta CRT.DELAY.COUNT+1
  9356 4846 20 0E 25			jsr CRT.DELAY
  9357
  9358 				; ------------------------------------------------------------
  9359
  9360 = 000F			MAX_LUMINANCE	= $0F
  9361 = 0028			FADE_DELAY	= $28
  9362 = 07D0			SPLASH_DELAY	= $07D0
  9363 = 01F4			DELAY_AFTER	= $01F4
  9364 = 4D3B			I	= DATAORIGIN+$0473
  9365
  9366 = 4D3B			@VarData	= I
  9367 = 0001			@VarDataSize	= 1
  9368
  9369 4849			@exit
  9370 					.ifdef @new
  9371 					lda <@VarData
  9372 					sta :ztmp
  9373 					lda >@VarData
  9374 					ldy #@VarDataSize-1
  9375 					jmp @FreeMem
  9376 					els
  9377 4849 60				rts						; ret
  9378 					eif
  9379 				.endl
  9380 484A			l_0014
  9381
  9382 				; optimize FAIL ('SYSTEM.RANDOMIZE', SortViz.pas), line = 184
  9383
  9384 484A 20 B8 24			jsr SYSTEM.RANDOMIZE
  9385
  9386 				; optimize FAIL ('DISPLAYLIST.INITSCREEN', SortViz.pas), line = 186
  9387
  9388 484D 20 77 2E			jsr DISPLAYLIST.INITSCREEN
  9389
  9390 				; optimize FAIL ('SPLASHSCREEN', SortViz.pas), line = 187
  9391
  9392 4850 20 EB 47			jsr SPLASHSCREEN
  9393
  9394 				; optimize FAIL ('IMAGEMANAGER.NEXTIMAGE', SortViz.pas), line = 188
  9395
  9396 4853 20 04 31			jsr IMAGEMANAGER.NEXTIMAGE
  9397
  9398 				; optimize FAIL ('DISPLAYLIST.INITCOLORS', SortViz.pas), line = 189
  9399
  9400 4856 20 95 2F			jsr DISPLAYLIST.INITCOLORS
  9401
  9402 				; optimize OK (SortViz.pas), line = 191
  9403
  9404 4859 A9 02			lda #$02
  9405 485B 8D 05 4C			sta OPERATION.OPERATIONKIND
  9406
  9407 				; optimize FAIL ('RUNOPERATION', SortViz.pas), line = 192
  9408
  9409 485E 20 BB 45			jsr RUNOPERATION
  9410
  9411 				; optimize FAIL ('STATUS.UPDATESTATUS', SortViz.pas), line = 193
  9412
  9413 4861 20 B3 29			jsr STATUS.UPDATESTATUS
  9414
  9415 				; --- RepeatUntilProlog
  9416 4864			l_21A2
  9417
  9418 				; optimize FAIL ('KEYBOARD.GETKEY', SortViz.pas), line = 196
  9419
  9420 4864 20 D1 25			jsr KEYBOARD.GETKEY
  9421 4867 AD 00 4C			lda KEYBOARD.GETKEY.RESULT
  9422 486A 8D 33 4D			sta KEY
  9423
  9424 				; optimize FAIL ('TRYRUNOPERATION', SortViz.pas), line = 197
  9425
  9426 486D 20 A7 46			jsr TRYRUNOPERATION
  9427 4870 AD 35 4D			lda TRYRUNOPERATION.RESULT
  9428 4873 D0 35			jne l_21B3
  9429
  9430 				; optimize OK (SortViz.pas), line = 199
  9431
  9432 4875 AD 33 4D			lda KEY
  9433 4878 8D 3C 4D			sta @CASETMP_0008
  9434 487B C9 2C			cmp #$2C
  9435 487D D0 06			jne l_21BF
  9436 				@
  9437
  9438 				; optimize FAIL ('IMAGEMANAGER.NEXTIMAGE', SortViz.pas), line = 200
  9439
  9440 487F 20 04 31			jsr IMAGEMANAGER.NEXTIMAGE
  9441 4882 4C AA 48			jmp a_0008
  9442 4885			l_21BF
  9443 4885 C9 0E			cmp #$0E
  9444 4887 D0 06			jne l_21C9
  9445 				@
  9446
  9447 				; optimize FAIL ('ARRAYACCESS.DECREASEDELAY', SortViz.pas), line = 201
  9448
  9449 4889 20 09 34			jsr ARRAYACCESS.DECREASEDELAY
  9450 488C 4C AA 48			jmp a_0008
  9451 488F			l_21C9
  9452 488F C9 06			cmp #$06
  9453 4891 D0 06			jne l_21D3
  9454 				@
  9455
  9456 				; optimize FAIL ('ARRAYACCESS.INCREASEDELAY', SortViz.pas), line = 202
  9457
  9458 4893 20 1E 34			jsr ARRAYACCESS.INCREASEDELAY
  9459 4896 4C AA 48			jmp a_0008
  9460 4899			l_21D3
  9461 4899 C9 0C			cmp #$0C
  9462 489B D0 06			jne l_21DD
  9463 				@
  9464
  9465 				; optimize FAIL ('RUNDEMO', SortViz.pas), line = 203
  9466
  9467 489D 20 3A 47			jsr RUNDEMO
  9468 48A0 4C AA 48			jmp a_0008
  9469 48A3			l_21DD
  9470 48A3 C9 1C			cmp #$1C
  9471 48A5 D0 03			jne l_21E7
  9472 				@
  9473
  9474 				; optimize FAIL ('PROCESSQUITQUERY', SortViz.pas), line = 204
  9475
  9476 48A7 20 B2 47			jsr PROCESSQUITQUERY
  9477 48AA			l_21E7
  9478 48AA			a_0008
  9479 48AA			l_21B3
  9480
  9481 				; optimize OK (SortViz.pas), line = 207
  9482
  9483 48AA AD 08 4C			lda OPERATION.QUIT
  9484 48AD F0 B5			jeq l_21A2
  9485
  9486 				; optimize FAIL ('DISPLAYLIST.CLOSESCREEN', SortViz.pas), line = 209
  9487
  9488 48AF 20 44 2F			jsr DISPLAYLIST.CLOSESCREEN
  9489
  9490 				; ------------------------------------------------------------
  9491
  9492 = 4D33			KEY	= DATAORIGIN+$046B
  9493 = 4D3C			@CASETMP_0008	= DATAORIGIN+$0474
  9494 48B2			@exit
  9495
  9496 48B2 A2 00		@halt	ldx #$00
  9497 48B4 9A				txs
  9498 					.ifdef MAIN.@DEFINES.ROMOFF
  9499 					inc portb
  9500 					.fi
  9501
  9502 48B5 A0 01			ldy #$01
  9503
  9504 48B7 60				rts
  9505
  9506 				; ------------------------------------------------------------
  9507
  9508 48B8 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  9509
  9510 				; ------------------------------------------------------------
  9511
  9512 48C8			.local	@DEFINES
  9513 48C8			ATARI
  9514 				.endl
  9515
  9516 48C8			.local	@RESOURCE
  9517 				.endl
  9518
  9519 				.endl							; MAIN
  9520
  9521 				; ------------------------------------------------------------
  9522 				; ------------------------------------------------------------
  9523
  9524 				.macro	UNITINITIALIZATION
  9525 				
  9526 					.ifdef MAIN.SYSTEM.@UnitInit
  9527 					jsr MAIN.SYSTEM.@UnitInit
  9528 					.fi
  9529 				
  9530 					.ifdef MAIN.CORE.@UnitInit
  9531 					jsr MAIN.CORE.@UnitInit
  9532 					.fi
  9533 				
  9534 					.ifdef MAIN.ATARI.@UnitInit
  9535 					jsr MAIN.ATARI.@UnitInit
  9536 					.fi
  9537 				
  9538 					.ifdef MAIN.CRT.@UnitInit
  9539 					jsr MAIN.CRT.@UnitInit
  9540 					.fi
  9541 				
  9542 					.ifdef MAIN.CAPTION.@UnitInit
  9543 					jsr MAIN.CAPTION.@UnitInit
  9544 					.fi
  9545 				
  9546 					.ifdef MAIN.KEYBOARD.@UnitInit
  9547 					jsr MAIN.KEYBOARD.@UnitInit
  9548 					.fi
  9549 				
  9550 					.ifdef MAIN.OPERATION.@UnitInit
  9551 					jsr MAIN.OPERATION.@UnitInit
  9552 					.fi
  9553 				
  9554 					.ifdef MAIN.STATUS.@UnitInit
  9555 					jsr MAIN.STATUS.@UnitInit
  9556 					.fi
  9557 				
  9558 					.ifdef MAIN.DISPLAYLIST.@UnitInit
  9559 					jsr MAIN.DISPLAYLIST.@UnitInit
  9560 					.fi
  9561 				
  9562 					.ifdef MAIN.IMAGEMANAGER.@UnitInit
  9563 					jsr MAIN.IMAGEMANAGER.@UnitInit
  9564 					.fi
  9565 				
  9566 					.ifdef MAIN.ARRAYACCESS.@UnitInit
  9567 					jsr MAIN.ARRAYACCESS.@UnitInit
  9568 					.fi
  9569 				
  9570 					.ifdef MAIN.SHUFFLEALGORITHMS.@UnitInit
  9571 					jsr MAIN.SHUFFLEALGORITHMS.@UnitInit
  9572 					.fi
  9573 				
  9574 					.ifdef MAIN.SORTINGALGORITHMS.@UnitInit
  9575 					jsr MAIN.SORTINGALGORITHMS.@UnitInit
  9576 					.fi
  9577 				
  9578 					.ifdef MAIN.DOS.@UnitInit
  9579 					jsr MAIN.DOS.@UnitInit
  9580 					.fi
  9581 				
  9582 					.ifdef MAIN.STRUTILS.@UnitInit
  9583 					jsr MAIN.STRUTILS.@UnitInit
  9584 					.fi
  9585 				
  9586 					.ifdef MAIN.SYSUTILS.@UnitInit
  9587 					jsr MAIN.SYSUTILS.@UnitInit
  9588 					.fi
  9589 				.endm
  9590
  9591 				; ------------------------------------------------------------
  9592
  9593 					ift .SIZEOF(MAIN.SYSTEM) > 0
  9594 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  9594 				SYSTEM: $24A1..$24DE
  9595 					eif
  9596
  9597 					ift .SIZEOF(MAIN.CORE) > 0
  9598 					.print 'CORE: ',MAIN.CORE,'..',MAIN.CORE+.SIZEOF(MAIN.CORE)-1
  9598 				CORE: $24DF..$250D
  9599 					eif
  9600
  9601 					ift .SIZEOF(MAIN.ATARI) > 0
  9602 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  9603 					eif
  9604
  9605 					ift .SIZEOF(MAIN.CRT) > 0
  9606 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  9606 				CRT: $250E..$25CC
  9607 					eif
  9608
  9609 					ift .SIZEOF(MAIN.CAPTION) > 0
  9610 					.print 'CAPTION: ',MAIN.CAPTION,'..',MAIN.CAPTION+.SIZEOF(MAIN.CAPTION)-1
  9610 				CAPTION: $25CD..$25D0
  9611 					eif
  9612
  9613 					ift .SIZEOF(MAIN.KEYBOARD) > 0
  9614 					.print 'KEYBOARD: ',MAIN.KEYBOARD,'..',MAIN.KEYBOARD+.SIZEOF(MAIN.KEYBOARD)-1
  9614 				KEYBOARD: $25D1..$25E0
  9615 					eif
  9616
  9617 					ift .SIZEOF(MAIN.OPERATION) > 0
  9618 					.print 'OPERATION: ',MAIN.OPERATION,'..',MAIN.OPERATION+.SIZEOF(MAIN.OPERATION)-1
  9618 				OPERATION: $25E1..$25F5
  9619 					eif
  9620
  9621 					ift .SIZEOF(MAIN.STATUS) > 0
  9622 					.print 'STATUS: ',MAIN.STATUS,'..',MAIN.STATUS+.SIZEOF(MAIN.STATUS)-1
  9622 				STATUS: $25F6..$2B46
  9623 					eif
  9624
  9625 					ift .SIZEOF(MAIN.DISPLAYLIST) > 0
  9626 					.print 'DISPLAYLIST: ',MAIN.DISPLAYLIST,'..',MAIN.DISPLAYLIST+.SIZEOF(MAIN.DISPLAYLIST)-1
  9626 				DISPLAYLIST: $2B47..$2FB8
  9627 					eif
  9628
  9629 					ift .SIZEOF(MAIN.IMAGEMANAGER) > 0
  9630 					.print 'IMAGEMANAGER: ',MAIN.IMAGEMANAGER,'..',MAIN.IMAGEMANAGER+.SIZEOF(MAIN.IMAGEMANAGER)-1
  9630 				IMAGEMANAGER: $2FB9..$3136
  9631 					eif
  9632
  9633 					ift .SIZEOF(MAIN.ARRAYACCESS) > 0
  9634 					.print 'ARRAYACCESS: ',MAIN.ARRAYACCESS,'..',MAIN.ARRAYACCESS+.SIZEOF(MAIN.ARRAYACCESS)-1
  9634 				ARRAYACCESS: $3137..$3447
  9635 					eif
  9636
  9637 					ift .SIZEOF(MAIN.SHUFFLEALGORITHMS) > 0
  9638 					.print 'SHUFFLEALGORITHMS: ',MAIN.SHUFFLEALGORITHMS,'..',MAIN.SHUFFLEALGORITHMS+.SIZEOF(MAIN.SHUFFLEALGORITHMS)-1
  9638 				SHUFFLEALGORITHMS: $3448..$3662
  9639 					eif
  9640
  9641 					ift .SIZEOF(MAIN.SORTINGALGORITHMS) > 0
  9642 					.print 'SORTINGALGORITHMS: ',MAIN.SORTINGALGORITHMS,'..',MAIN.SORTINGALGORITHMS+.SIZEOF(MAIN.SORTINGALGORITHMS)-1
  9642 				SORTINGALGORITHMS: $3663..$45BA
  9643 					eif
  9644
  9645 					ift .SIZEOF(MAIN.DOS) > 0
  9646 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  9647 					eif
  9648
  9649 					ift .SIZEOF(MAIN.STRUTILS) > 0
  9650 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  9651 					eif
  9652
  9653 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  9654 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  9655 					eif
  9656
  9657 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  9657 				CODE: $2000..$48C7
  9658
  9659 				; ------------------------------------------------------------
  9660
  9661 48C8				.align $0004
  9662
  9663 48C8			DATAORIGIN
  9664 48C8 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  9665
  9666 = 0006			VARINITSIZE	= *-DATAORIGIN
  9667 = 0475			VARDATASIZE	= 1141
  9668
  9669 = 4D3D			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  9670
  9671 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  9671 				DATA: $48C8..$4D3D
  9672
  9673 02E0-02E1> 55 24			run START
  9674
  9675 				; ------------------------------------------------------------
  9676
  9677 				.macro	STATICDATA
  9678 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $01 $02  $05 $0A $14 $32 $64 $09 $0A $05
  9679 				.by  $06 $07 $08 $0B $0C $0D $0E $0F  $10 $11 $12 $13 $14 $15 $16 $17  $18 $19 $1A $1F $1E $1A $18 $1D
  9680 				.by  $1B $0D $3E $2F $25 $15 $12 $3D  $00 $08 $0A $2A $10 $2D $28 $39  $3A $91 $92 $93 $94 $95 $96 $A9
  9681 				.by  $B3 $B1 $AD $A2 $A3 $A7 $AC $AF  $B0 $A5 $B6 $B4 $B2 $A8 $A4 $80  $C0 $E0 $F0 $F8 $FC $FE $FF $00
  9682 				.by  $02 $03 $05 $06 $08 $0A $0B $0D  $0E $10 $12 $13 $15 $16 $18 $1A  $1B $1D $1E $20 $22 $23 $25 $26
  9683 				.by  $28 $2A $2B $2D $2F $30 $32 $33  $35 $37 $38 $3A $3B $3D $3F $40  $42 $43 $45 $47 $48 $4A $4B $4D
  9684 				.by  $4F $50 $52 $53 $55 $57 $58 $5A  $5B $5D $5F $60 $62 $63 $65 $67  $68 $6A $6B $6D $6F $70 $72 $73
  9685 				.by  $75 $77 $78 $7A $7B $7D $7F $80  $82 $84 $85 $87 $88 $8A $8C $8D  $8F $90 $92 $94 $95 $97 $98 $9A
  9686 				.by  $9C $9D $9F $A0 $A2 $A4 $A5 $A7  $A8 $AA $AC $AD $AF $B0 $B2 $B4  $B5 $B7 $B8 $BA $BC $BD $BF $C0
  9687 				.by  $C2 $C4 $C5 $C7 $C8 $CA $CC $CD  $CF $D0 $D2 $D4 $D5 $D7 $D9 $DA  $DC $DD $DF $E1 $E2 $E4 $E5 $E7
  9688 				.by  $E9 $EA $EC $ED $EF $F1 $F2 $F4  $F5 $F7 $F9 $FA $FC $FD $FF
  9689 				.endm
  9690
  9691 					end
