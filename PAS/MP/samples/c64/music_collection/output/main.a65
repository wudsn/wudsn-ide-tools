; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/02/02] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $02

zpage

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

; ------------------------------------------------------------
	opt h-f+
	org $801
	org [a($801)],$801
	basic_start(START)

	org $900

CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_c64.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	lda #$0e
	jsr $ffd2					; shifted charset
	ldx #$00
	stx bp						; BP = 0

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0125

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	FILLBYTE_0161					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; ---------------------  ASM Block 026  ---------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	PAUSE_0180					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 037  ---------------------


loop	lda n
	ora n+1
	beq stop

w1	bit vic_cr1
	bpl w1

w2	bit vic_cr1
	bmi w2

	dew n

	jmp loop
stop


; ------------------------------------------------------------

N	= DATAORIGIN+$000B

@VarData	= N
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	C64						; UNIT

; ------------------------------------------------------------

SPRITE0X	= $D000
SPRITE0Y	= $D001
SPRITE1X	= $D002
SPRITE1Y	= $D003
SPRITE2X	= $D004
SPRITE2Y	= $D005
SPRITE3X	= $D006
SPRITE3Y	= $D007
SPRITE4X	= $D008
SPRITE4Y	= $D009
SPRITE5X	= $D00A
SPRITE5Y	= $D00B
SPRITE6X	= $D00C
SPRITE6Y	= $D00D
SPRITE7X	= $D00E
SPRITE7Y	= $D00F
SPRITESXMSB	= $D010
CONTROLREGISTER1	= $D011
RASTERCOUNTER	= $D012
LIGHTPENX	= $D013
LIGHTPENY	= $D014
ENABLESPRITES	= $D015
CONTROLREGISTER2	= $D016
SPRITEYEXPANSION	= $D017
MEMORYPOINTERS	= $D018
INTERRUPTREGISTER	= $D019
INTERRUPTENABLED	= $D01A
SPRITEDATAPRIORITY	= $D01B
SPRITEMULTICOLOR	= $D01C
SPRITEXEXPANSION	= $D01D
SPRITESPRITECOLLISION	= $D01E
SPRITEDATACOLLISION	= $D01F
BORDERCOLOR	= $D020
BACKGROUNDCOLOR0	= $D021
BACKGROUNDCOLOR1	= $D022
BACKGROUNDCOLOR2	= $D023
BACKGROUNDCOLOR3	= $D024
SPRITEMULTICOLOR0	= $D025
SPRITEMULTICOLOR1	= $D026
SPRITE0COLOR	= $D027
SPRITE1COLOR	= $D028
SPRITE2COLOR	= $D029
SPRITE3COLOR	= $D02A
SPRITE4COLOR	= $D02B
SPRITE5COLOR	= $D02C
SPRITE6COLOR	= $D02D
SPRITE7COLOR	= $D02E
D6510	= $00
R6510	= $01
PRA2	= $DD00
SP0X	= $D000
SP0Y	= $D001
SP1X	= $D002
SP1Y	= $D003
SP2X	= $D004
SP2Y	= $D005
SP3X	= $D006
SP3Y	= $D007
SP4X	= $D008
SP4Y	= $D009
SP5X	= $D00A
SP5Y	= $D00B
SP6X	= $D00C
SP6Y	= $D00D
SP7X	= $D00E
SP7Y	= $D00F
MSIGX	= $D010
SCROLY	= $D011
VICCR1	= $D011
RASTER	= $D012
LPENX	= $D013
LPENY	= $D014
SPENA	= $D015
SCROLX	= $D016
VICCR2	= $D016
YXPAND	= $D017
VMCSB	= $D018
VICIRQ	= $D019
IRQMASK	= $D01A
SPBGPR	= $D01B
SPMC	= $D01C
XXPAND	= $D01D
SPSPCL	= $D01E
SPBGCL	= $D01F
EXTCOL	= $D020
BGCOL0	= $D021
BGCOL1	= $D022
BGCOL2	= $D023
BGCOL3	= $D024
SPMC0	= $D025
SPMC1	= $D026
SP0COL	= $D027
SP1COL	= $D028
SP2COL	= $D029
SP3COL	= $D02A
SP4COL	= $D02B
SP5COL	= $D02C
SP6COL	= $D02D
SP7COL	= $D02E
FRELO1	= $D400
FREHI1	= $D401
PWLO1	= $D402
PWHI1	= $D403
VCREG1	= $D404
ATDCY1	= $D405
SUREL1	= $D406
FRELO2	= $D407
FREHI2	= $D408
PWLO2	= $D409
PWHI2	= $D40A
VCREG2	= $D40B
ATDCY2	= $D40C
SUREL2	= $D40D
FRELO3	= $D40E
FREHI3	= $D40F
PWLO3	= $D410
PWHI3	= $D411
VCREG3	= $D412
ATDCY3	= $D413
SUREL3	= $D414
CUTLO	= $D415
CUTHI	= $D416
RESON	= $D417
SIGVOL	= $D418
POTX	= $D419
POTY	= $D41A
RANDOM	= $D41B
ENV3	= $D41C
COLORRAM	= $D800
CIAPRA	= $DC00
CIAPRB	= $DC01
CIDDRA	= $DC02
CIDDRB	= $DC03
TIMALO	= $DC04
TIMAHI	= $DC05
TIMBLO	= $DC06
TIMBHI	= $DC07
TODTEN	= $DC08
TODSEC	= $DC09
TODMIN	= $DC0A
TODHRS	= $DC0B
CIASDR	= $DC0C
CIAICR	= $DC0D
CIACRA	= $DC0E
CIACRB	= $DC0F
CI2PRA	= $DD00
CI2PRB	= $DD01
C2DDRA	= $DD02
C2DDRB	= $DD03
TI2ALO	= $DD04
TI2AHI	= $DD05
TI2BLO	= $DD06
TI2BHI	= $DD07
TO2TEN	= $DD08
TO2SEC	= $DD09
TO2MIN	= $DD0A
TO2HRS	= $DD0B
CI2SDR	= $DD0C
CI2ICR	= $DD0D
CI2CRA	= $DD0E
CI2CRB	= $DD0F
NMIADL	= $FFFA
NMIADH	= $FFFB
RSTADL	= $FFFC
RSTADH	= $FFFD
IRQADL	= $FFFE
IRQADH	= $FFFF

.endl							; UNIT C64

; ------------------------------------------------------------

.local	APLIB						; UNIT

.local	UNAPL_018D					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 053  ---------------------

		stx @sp

		mwa inputPointer	GET_BYTE+1
		mwa outputPointer	dest_ap

aPL_depack	lda #$80
		sta token
literal		lsr bl
		jsr GET_BYTE
write		jsr store
nxt_token	jsr get_token_bit
		bcc literal		; literal  -> 0
		jsr get_token_bit
		bcc block		; block    -> 10
		jsr get_token_bit
		bcc short_block		; short block -> 110

single_byte	lsr bl			; single byte -> 111
		lda #$10
@		pha
		jsr get_token_bit
		pla
		rol @
		bcc @-
		beq write
		jmp len01

aPL_done	ldx #0
@sp		equ *-1

		jmp @exit

short_block	jsr GET_BYTE
		lsr @
		beq aPL_done
		sta EBPL
		ldx #0
		stx EBPH
		ldx #$02
		bcc @+
		inx
@		sec
		ror  bl
		jmp len0203

block		jsr getgamma
		dex
		lda #$ff
bl		equ *-1
		bmi normalcodepair
		dex
		bne normalcodepair
		jsr getgamma
		lda #$ff
EBPL		equ *-1
		sta offsetL
		lda #$ff
EBPH		equ *-1
		sta offsetH
		jmp lenffff

normalcodepair	dex
		stx offsetH
		stx EBPH
		jsr GET_BYTE
		sta offsetL
		sta EBPL
		jsr getgamma
		lda offsetH
		beq _ceck7f
		cmp #$7d
		bcs  plus2
		cmp #$05
		bcs  plus1
		bcc normal1	; zawsze
_ceck7f		lda offsetL
		bmi normal1
plus2		inx
		bne plus1
		iny
plus1		inx
		bne normal1
		iny
normal1
lenffff		iny
		sec
		ror bl
		bne domatch	; zawsze

getgamma	lda #$00
		pha
		lda #$01
		pha
@		jsr get_token_bit
		tsx
		rol $101,x
		rol $102,x
		jsr get_token_bit
		bcs @-
		pla
		tax
		pla
		tay
		rts

get_token_bit	lda #$ff
token		equ *-1
		asl @
		bne @+
		php
		jsr GET_BYTE
		plp
		rol @
@		sta token
		rts

store		sta $ffff
dest_ap		equ *-2
		inw dest_ap
		rts

len01		ldx #$01
len0203		ldy #$01
		sta offsetL
		lda #0
		sta offsetH

domatch		lda dest_ap
		sec
		sbc #$ff
offsetL		equ *-1
		sta src
		lda dest_ap+1
		sbc #$ff
offsetH		equ *-1
		sta src+1
source		lda $ffff
src		equ *-2
		inw src
		jsr store
		dex
		bne source
		dey
		bne source
		jmp nxt_token


GET_BYTE	lda $ffff
		inw GET_BYTE+1
		rts


; ------------------------------------------------------------

INPUTPOINTER	= DATAORIGIN+$000D
OUTPUTPOINTER	= DATAORIGIN+$000F

@VarData	= INPUTPOINTER
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

.endl							; UNIT APLIB

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	CLRSCR						; PROCEDURE

; ---------------------  ASM Block 054  ---------------------

	jsr @ClrScr
 
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 059  ---------------------

	ldy #$00	; false
	lda $cb
	cmp #$40
	beq skp
	iny		; true

;	sty kbcodes

skp	sty Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0011

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; ------------------------------------------------------------

BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
WHITE	= $01
RED	= $02
CYAN	= $03
PURPLE	= $04
GREEN	= $05
BLUE	= $06
YELLOW	= $07
ORANGE	= $08
BROWN	= $09
LIGHT_RED	= $0A
DARK_GREY	= $0B
GREY	= $0C
LIGHT_GREEN	= $0D
LIGHT_BLUE	= $0E
LIGHT_GREY	= $0F
BLINK	= $80

.endl							; UNIT CRT

.local	MUSIC_PLAY					; PROCEDURE | ASSEMBLER | INLINE

	.MACRO m@INLINE

; ---------------------  ASM Block 066  ---------------------

  sei
  txa \ pha
  jsr M_PLAY
  pla \ tax  
  cli

	.ENDM
@exit
.endl

.local	MUSIC_INIT					; PROCEDURE | ASSEMBLER | INLINE

	.MACRO m@INLINE

; ---------------------  ASM Block 067  ---------------------

  txa \ pha
  jsr M_INIT
  pla \ tax

	.ENDM
@exit
.endl

.local	RESET_SYSTEM					; PROCEDURE | ASSEMBLER | INLINE

	.MACRO m@INLINE

; ---------------------  ASM Block 068  ---------------------

  jmp (RESET_VECTOR)

	.ENDM
@exit
.endl

.local	PREPARE_NEW_MUSIC				; PROCEDURE | INLINE

	.MACRO m@INLINE

; optimize OK (main.pas), line = 91

	lda #$00
	sta SYSTEM.FILLBYTE_0161.A
	lda #$C0
	sta SYSTEM.FILLBYTE_0161.A+1
	lda #$00
	sta SYSTEM.FILLBYTE_0161.COUNT
	lda #$10
	sta SYSTEM.FILLBYTE_0161.COUNT+1
	lda #$00
	sta SYSTEM.FILLBYTE_0161.VALUE
	.local +MAIN.SYSTEM.FILLBYTE_0161
	m@INLINE
	.endl

; optimize OK (main.pas), line = 92

	lda MUSIX_INDEX
	asl @
	tay
	lda adr.ZAKS,y
	sta APLIB.UNAPL_018D.INPUTPOINTER
	lda adr.ZAKS+1,y
	sta APLIB.UNAPL_018D.INPUTPOINTER+1
	lda #$00
	sta APLIB.UNAPL_018D.OUTPUTPOINTER
	lda #$C0
	sta APLIB.UNAPL_018D.OUTPUTPOINTER+1
	jsr APLIB.UNAPL_018D

; optimize FAIL ('m@INLINE', main.pas), line = 94

	.local +MAIN.MUSIC_INIT
	m@INLINE
	.endl
	.ENDM
@exit
.endl

.local	SID_OFF						; PROCEDURE | INLINE

	.MACRO m@INLINE

; optimize OK (main.pas), line = 99

	lda #$00
	ldy #$18
	sta:rpl $D400,y-
	.ENDM
@exit
.endl

.local	MAIN_LOOP					; PROCEDURE

; --- RepeatUntilProlog
l_01B2

; optimize FAIL ('@print', main.pas), line = 107

	@print #$13
	@printSTRING #CODEORIGIN+$00CC
	inx
	ldy #$00
	sty :STACKORIGIN+STACKWIDTH*3,x
	lda MUSIX_INDEX
	add #$01
	sta :STACKORIGIN,x
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	scc
	iny
	sty :STACKORIGIN+STACKWIDTH*2,x
	jsr @printCARD
	dex
	@print #$20
	inx
	lda MUSIX_INDEX
	asl @
	tay
	lda adr.NAMES,y
	sta :STACKORIGIN,x
	lda adr.NAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	ldy :STACKORIGIN+STACKWIDTH,x
	jsr @printSTRING
	dex

; optimize FAIL ('m@INLINE', main.pas), line = 109

	.local +MAIN.PREPARE_NEW_MUSIC
	m@INLINE
	.endl

; --- RepeatUntilProlog
l_01CC

; --- RepeatUntilProlog
l_01CD

; optimize OK (main.pas), line = 112

	lda C64.RASTERCOUNTER
	cmp #$80
	jne l_01CD

; optimize FAIL (0, main.pas), line = 113

	inc C64.BORDERCOLOR

; optimize FAIL ('m@INLINE', main.pas), line = 115

	.local +MAIN.MUSIC_PLAY
	m@INLINE
	.endl

; optimize FAIL (0, main.pas), line = 117

	dec C64.BORDERCOLOR

; optimize FAIL ('CRT.KEYPRESSED', main.pas), line = 118

	jsr CRT.KEYPRESSED
	lda CRT.KEYPRESSED.RESULT
	jeq l_01CC

; optimize FAIL ('m@INLINE', main.pas), line = 120

	.local +MAIN.SID_OFF
	m@INLINE
	.endl

; optimize FAIL (0, main.pas), line = 122

	inc MUSIX_INDEX

; optimize OK (main.pas), line = 123

	lda MUSIX_INDEX
	cmp #$0C
	jcc l_01B2
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0125

; optimize FAIL ('CRT.CLRSCR', main.pas), line = 129

	jsr CRT.CLRSCR

; optimize FAIL ('@print', main.pas), line = 131

	@print #$0D
	@printEOL

; optimize FAIL ('@print', main.pas), line = 132

	@printSTRING #CODEORIGIN+$00D1
	@printEOL

; optimize FAIL ('@print', main.pas), line = 133

	@printSTRING #CODEORIGIN+$00EB
	@printEOL

; optimize FAIL ('@print', main.pas), line = 134

	@printSTRING #CODEORIGIN+$0107
	@printEOL

; optimize FAIL ('MAIN_LOOP', main.pas), line = 136

	jsr MAIN_LOOP

; optimize FAIL ('CRT.CLRSCR', main.pas), line = 138

	jsr CRT.CLRSCR
	@printSTRING #CODEORIGIN+$0118
	lda #$32
	sta SYSTEM.PAUSE_0180.N
	lda #$00
	sta SYSTEM.PAUSE_0180.N+1
	jsr SYSTEM.PAUSE_0180

; optimize FAIL ('m@INLINE', main.pas), line = 140

	.local +MAIN.RESET_SYSTEM
	m@INLINE
	.endl

; ------------------------------------------------------------

MUSIC_APL_LONDON	= $4300
MUSIC_APL_ART	= $4900
MUSIC_APL_BATMANIA	= $5100
MUSIC_APL_CONTAXIA	= $5800
MUSIC_APL_DOMINATION	= $6000
MUSIC_APL_FALCON	= $6900
MUSIC_APL_FUNCIE	= $7000
MUSIC_APL_CHANCE	= $7900
MUSIC_APL_LOVE	= $8100
MUSIC_APL_LILY	= $8900
MUSIC_APL_PARTY	= $9100
MUSIC_APL_PIZZA	= $9800
MUSIC	= $C000
M_INIT	= $C048
M_PLAY	= $C021
M_SPACE	= $1000
M_COUNTER	= $0B
RESET_VECTOR	= $FFFC
SID_REG_HEAD	= $D400
RASTER_START	= $80
adr.NAMES	= CODEORIGIN+$011E
.var NAMES	= adr.NAMES .word
adr.ZAKS	= CODEORIGIN+$0136
.var ZAKS	= adr.ZAKS .word
MUSIX_INDEX	= DATAORIGIN+$0012
@exit

@halt	ldx #$00
	txs

	rts

; ------------------------------------------------------------

; ------------------------------------------------------------

.local	@DEFINES
C64
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.C64.@UnitInit
	jsr MAIN.C64.@UnitInit
	.fi

	.ifdef MAIN.APLIB.@UnitInit
	jsr MAIN.APLIB.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.C64) > 0
	.print 'C64: ',MAIN.C64,'..',MAIN.C64+.SIZEOF(MAIN.C64)-1
	eif

	ift .SIZEOF(MAIN.APLIB) > 0
	.print 'APLIB: ',MAIN.APLIB,'..',MAIN.APLIB+.SIZEOF(MAIN.APLIB)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 19

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

; ------------------------------------------------------------

.macro	STATICDATA
.by  $0F $4C $6F $6E $64 $6F $6E $20  $44 $65 $6D $6F $20 $20 $20 $20  $00 $0F $41 $75 $64 $69 $6F $20
.by  $41 $72 $74 $20 $20 $20 $20 $20  $20 $00 $0F $42 $61 $74 $6D $61  $6E $69 $61 $20 $49 $49 $20 $35
.by  $20 $20 $00 $0F $43 $6F $6E $74  $61 $78 $69 $61 $20 $20 $20 $20  $20 $20 $20 $00 $0F $50 $61 $72
.by  $74 $79 $20 $54 $75 $6E $65 $20  $20 $20 $20 $20 $00 $0F $44 $6F  $6D $69 $6E $61 $74 $69 $6F $6E
.by  $20 $20 $20 $20 $20 $00 $0F $46  $61 $6C $63 $6F $6E $20 $54 $6E  $20 $20 $20 $20 $20 $20 $00 $0F
.by  $46 $75 $6E $63 $69 $65 $20 $20  $20 $20 $20 $20 $20 $20 $20 $00  $0F $49 $6E $20 $43 $68 $61 $6E
.by  $63 $65 $20 $20 $20 $20 $20 $20  $00 $0F $4C $65 $73 $73 $6F $6E  $73 $20 $69 $6E $20 $4C $6F $76
.by  $65 $00 $0F $4C $69 $6C $79 $20  $77 $61 $73 $20 $68 $65 $72 $65  $20 $20 $00 $0F $50 $65 $70 $70
.by  $65 $72 $65 $64 $20 $50 $69 $7A  $7A $61 $20 $00 $03 $4E $6F $2E  $00 $18 $43 $6F $6D $70 $6F $73
.by  $65 $72 $20 $3A $20 $52 $65 $79  $6E $20 $4F $75 $77 $65 $68 $61  $6E $64 $00 $1A $50 $6C $61 $79
.by  $65 $72 $20 $20 $20 $3A $20 $4D  $75 $73 $69 $63 $20 $41 $73 $73  $65 $6D $62 $6C $65 $72 $00 $0F
.by  $0D $70 $72 $65 $73 $73 $20 $73  $70 $61 $63 $65 $2E $2E $2E $00  $04 $42 $59 $45 $21 $00 $00 $09
.by  $11 $09 $22 $09 $33 $09 $44 $09  $55 $09 $66 $09 $77 $09 $88 $09  $99 $09 $AA $09 $BB $09 $00 $43
.by  $00 $49 $00 $51 $00 $58 $00 $91  $00 $60 $00 $69 $00 $70 $00 $79  $00 $81 $00 $89 $00 $98
.endm

.local	RESOURCE
	icl 'c64\resource.asm'

	RCDATA 'music/london_demo.apl' MUSIC_APL_LONDON 0 0 0 0 0 0 0 0
	RCDATA 'music/audio_art.apl' MUSIC_APL_ART 0 0 0 0 0 0 0 0
	RCDATA 'music/batmania_ii_5.apl' MUSIC_APL_BATMANIA 0 0 0 0 0 0 0 0
	RCDATA 'music/contaxia.apl' MUSIC_APL_CONTAXIA 0 0 0 0 0 0 0 0
	RCDATA 'music/domination.apl' MUSIC_APL_DOMINATION 0 0 0 0 0 0 0 0
	RCDATA 'music/falcon_tn.apl' MUSIC_APL_FALCON 0 0 0 0 0 0 0 0
	RCDATA 'music/funcie.apl' MUSIC_APL_FUNCIE 0 0 0 0 0 0 0 0
	RCDATA 'music/in_chance.apl' MUSIC_APL_CHANCE 0 0 0 0 0 0 0 0
	RCDATA 'music/lessons_in_love.apl' MUSIC_APL_LOVE 0 0 0 0 0 0 0 0
	RCDATA 'music/lily_was_here.apl' MUSIC_APL_LILY 0 0 0 0 0 0 0 0
	RCDATA 'music/party_tune.apl' MUSIC_APL_PARTY 0 0 0 0 0 0 0 0
	RCDATA 'music/peppered_pizza.apl' MUSIC_APL_PIZZA 0 0 0 0 0 0 0 0
.endl

	end
