mads 2.1.5 build 4 (1 Apr 22)
Source: proc.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/04/11] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: proc.a65]
     1 FFFF> 2000-215D> 02 6F + .by  $02 $6F $6B $00
Source: proc.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 2004			RTLIB
   113 2004				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D3
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $2004..$20E0
   118
   119 				; ------------------------------------------------------------
   120
   121 20E1			START
   122 20E1 BA				tsx
   123 20E2 8E 49 21			stx MAIN.@halt+1
   124
   125 					.ifdef fmulinit
   126 					fmulinit
   127 					.fi
   128
   129 = 0009			VLEN	= VARDATASIZE-VARINITSIZE
   130 = 2166			VADR	= DATAORIGIN+VARINITSIZE
   131
   132 					ift VADR > $BFFF
   133 					ert 'Invalid memory address range ',VADR
   134 					eli (VLEN>0) && (VLEN<=256)
   135 20E5 A2 F7			ldx #256-VLEN
   136 20E7 A9 00			lda #$00
   137 20E9 9D 6F 20 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   138 					eli VLEN>256
   139 					@fill #VADR #VLEN #$00
   140 					eif
   141
   142 				.ifdef :psptr
   143 					mwa #PROGRAMSTACK :psptr
   144 				.fi
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.fi
   149
   150 20EF A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 20F1 BD 40 03 9D 4E 21 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 20FA E8				inx						; X = 0
   154 20FB 86 80			stx bp						; BP = 0
   155
   156 20FD 8E 0F D2			stx skctl					; reset POKEY
   157 2100 A9 03			lda #3
   158 2102 8D 0F D2			sta skctl
   159
   160 2105 CA				dex						; X = 255
   161
   162 2106				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: proc.a65]
   163
   164 2106			.local	MAIN						; PROCEDURE
   165
   166 2106 4C 3D 21			jmp l_000B
   167
   168 				; ------------------------------------------------------------
   169
   170 2109			.local	SYSTEM						; UNIT
   171
   172 				; ------------------------------------------------------------
   173
   174 = 0101			__PORTB_BANKS	= $0101
   175 = 0648			M_PI_2	= $0648
   176 = 0192			D_PI_2	= $0192
   177 = 0004			D_PI_180	= $04
   178 = 0000			MGTIA	= $00
   179 = 0080			MVBXE	= $80
   180 = 0000			VBXE_XDLADR	= $00
   181 = 00E0			VBXE_BCBTMP	= $E0
   182 = 0100			VBXE_BCBADR	= $0100
   183 = 1000			VBXE_MAPADR	= $1000
   184 = 1000			VBXE_CHBASE	= $1000
   185 = 5000			VBXE_OVRADR	= $5000
   186 = B000			VBXE_WINDOW	= $B000
   187 = 0000			IDLI	= $00
   188 = 0001			IVBL	= $01
   189 = 0002			ITIM1	= $02
   190 = 0003			ITIM2	= $03
   191 = 0004			ITIM4	= $04
   192 = 00FE			CH_DELCHR	= $FE
   193 = 009B			CH_ENTER	= $9B
   194 = 001B			CH_ESC	= $1B
   195 = 001C			CH_CURS_UP	= $1C
   196 = 001D			CH_CURS_DOWN	= $1D
   197 = 001E			CH_CURS_LEFT	= $1E
   198 = 001F			CH_CURS_RIGHT	= $1F
   199 = 007F			CH_TAB	= $7F
   200 = 009B			CH_EOL	= $9B
   201 = 007D			CH_CLR	= $7D
   202 = 00FD			CH_BELL	= $FD
   203 = 007E			CH_DEL	= $7E
   204 = 009C			CH_DELLINE	= $9C
   205 = 009D			CH_INSLINE	= $9D
   206 = 0000			COLOR_BLACK	= $00
   207 = 000E			COLOR_WHITE	= $0E
   208 = 0032			COLOR_RED	= $32
   209 = 0096			COLOR_CYAN	= $96
   210 = 0068			COLOR_VIOLET	= $68
   211 = 00C4			COLOR_GREEN	= $C4
   212 = 0074			COLOR_BLUE	= $74
   213 = 00EE			COLOR_YELLOW	= $EE
   214 = 0028			COLOR_ORANGE	= $28
   215 = 00E4			COLOR_BROWN	= $E4
   216 = 003C			COLOR_LIGHTRED	= $3C
   217 = 0004			COLOR_GRAY1	= $04
   218 = 0006			COLOR_GRAY2	= $06
   219 = 000A			COLOR_GRAY3	= $0A
   220 = 00CC			COLOR_LIGHTGREEN	= $CC
   221 = 007C			COLOR_LIGHTBLUE	= $7C
   222 = 0004			FMOPENREAD	= $04
   223 = 0008			FMOPENWRITE	= $08
   224 = 0009			FMOPENAPPEND	= $09
   225 = 000C			FMOPENREADWRITE	= $0C
   226 = 2160			SCREENWIDTH	= DATAORIGIN+$0000
   227 = 2162			SCREENHEIGHT	= DATAORIGIN+$0002
   228 = 2164			DATESEPARATOR	= DATAORIGIN+$0004
   229 = D20A			RND	= $D20A
   230 = 02C0			adr.PALETTE	= $02C0
   231 2109			.var PALETTE	= adr.PALETTE .word
   232 = D012			adr.HPALETTE	= $D012
   233 2109			.var HPALETTE	= adr.HPALETTE .word
   234 = 2165			FILEMODE	= DATAORIGIN+$0005
   235 = 2166			GRAPHMODE	= DATAORIGIN+$0006
   236 = 2167			IORESULT	= DATAORIGIN+$0007
   237 = 2168			EOLN	= DATAORIGIN+$0008
   238 = 2169			RNDSEED	= DATAORIGIN+$0009
   239
   240 = 2109 C0 02		PALETTE
   240 = 210B 12 D0		HPALETTE
   240 				.endl							; UNIT SYSTEM
   241
   242 				; ------------------------------------------------------------
   243
   244 210D			.local	ATARI						; UNIT
   245
   246 				; ------------------------------------------------------------
   247
   248 = 0010			IRQENS	= $10
   249 = 0012			RTCLOK	= $12
   250 = 0012			RTCLOK1	= $12
   251 = 0013			RTCLOK2	= $13
   252 = 0014			RTCLOK3	= $14
   253 = 004D			ATRACT	= $4D
   254 = 0052			LMARGIN	= $52
   255 = 0053			RMARGIN	= $53
   256 = 0054			ROWCRS	= $54
   257 = 0055			COLCRS	= $55
   258 = 0057			DINDEX	= $57
   259 = 0058			SAVMSC	= $58
   260 = 0062			PALNTS	= $62
   261 = 006A			RAMTOP	= $6A
   262 = 0200			VDSLST	= $0200
   263 = 0230			SDLSTL	= $0230
   264 = 0290			TXTROW	= $0290
   265 = 0291			TXTCOL	= $0291
   266 = 0293			TINDEX	= $0293
   267 = 0294			TXTMSC	= $0294
   268 = 022F			SDMCTL	= $022F
   269 = 026F			GPRIOR	= $026F
   270 = 02F0			CRSINH	= $02F0
   271 = 02F3			CHACT	= $02F3
   272 = 02F4			CHBAS	= $02F4
   273 = 02FC			CH	= $02FC
   274 = 02C0			PCOLR0	= $02C0
   275 = 02C1			PCOLR1	= $02C1
   276 = 02C2			PCOLR2	= $02C2
   277 = 02C3			PCOLR3	= $02C3
   278 = 02C4			COLOR0	= $02C4
   279 = 02C5			COLOR1	= $02C5
   280 = 02C6			COLOR2	= $02C6
   281 = 02C7			COLOR3	= $02C7
   282 = 02C8			COLOR4	= $02C8
   283 = 02C8			COLBAKS	= $02C8
   284 = D000			HPOSP0	= $D000
   285 = D001			HPOSP1	= $D001
   286 = D002			HPOSP2	= $D002
   287 = D003			HPOSP3	= $D003
   288 = D004			HPOSM0	= $D004
   289 = D005			HPOSM1	= $D005
   290 = D006			HPOSM2	= $D006
   291 = D007			HPOSM3	= $D007
   292 = D008			SIZEP0	= $D008
   293 = D009			SIZEP1	= $D009
   294 = D00A			SIZEP2	= $D00A
   295 = D00B			SIZEP3	= $D00B
   296 = D00C			SIZEM	= $D00C
   297 = D00D			GRAFP0	= $D00D
   298 = D00E			GRAFP1	= $D00E
   299 = D00F			GRAFP2	= $D00F
   300 = D010			GRAFP3	= $D010
   301 = D011			GRAFM	= $D011
   302 = D004			P0PF	= $D004
   303 = D014			PAL	= $D014
   304 = D012			COLPM0	= $D012
   305 = D013			COLPM1	= $D013
   306 = D014			COLPM2	= $D014
   307 = D015			COLPM3	= $D015
   308 = D016			COLPF0	= $D016
   309 = D017			COLPF1	= $D017
   310 = D018			COLPF2	= $D018
   311 = D019			COLPF3	= $D019
   312 = D01A			COLBK	= $D01A
   313 = D01B			PRIOR	= $D01B
   314 = D01D			GRACTL	= $D01D
   315 = D01E			HITCLR	= $D01E
   316 = D01F			CONSOL	= $D01F
   317 = D200			AUDF1	= $D200
   318 = D201			AUDC1	= $D201
   319 = D202			AUDF2	= $D202
   320 = D203			AUDC2	= $D203
   321 = D204			AUDF3	= $D204
   322 = D205			AUDC3	= $D205
   323 = D206			AUDF4	= $D206
   324 = D207			AUDC4	= $D207
   325 = D208			AUDCTL	= $D208
   326 = D209			KBCODE	= $D209
   327 = D20E			IRQEN	= $D20E
   328 = D20F			SKSTAT	= $D20F
   329 = D300			PORTA	= $D300
   330 = D301			PORTB	= $D301
   331 = D400			DMACTL	= $D400
   332 = D401			CHACTL	= $D401
   333 = D402			DLISTL	= $D402
   334 = D404			HSCROL	= $D404
   335 = D405			VSCROL	= $D405
   336 = D407			PMBASE	= $D407
   337 = D409			CHBASE	= $D409
   338 = D40A			WSYNC	= $D40A
   339 = D40B			VCOUNT	= $D40B
   340 = D40C			PENH	= $D40C
   341 = D40D			PENV	= $D40D
   342 = D40E			NMIEN	= $D40E
   343 = FFFA			NMIVEC	= $FFFA
   344 = FFFC			RESETVEC	= $FFFC
   345 = FFFE			IRQVEC	= $FFFE
   346
   347 				.endl							; UNIT ATARI
   348
   349 				; ------------------------------------------------------------
   350
   351 210D			.local	CRT						; UNIT
   352
   353 210D			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   354
   355 				; -------------------  ASM Block 00000056  -------------------
   356
   357 210D A0 00			ldy #$00	; false
   358 210F AD FC 02			lda kbcodes
   359 2112 C9 FF			cmp #$ff
   360 2114 F0 01			seq
   361 2116 C8				iny		; true
   362 2117 8C 6C 21			sty Result
   363
   364 211A			@exit
   365
   366 				; ------------------------------------------------------------
   367
   368 = 216C			RESULT	= DATAORIGIN+$000C
   369 211A 60				rts						; ret
   370 				.endl
   371
   372 				; ------------------------------------------------------------
   373
   374 = 216B			TEXTATTR	= DATAORIGIN+$000B
   375 = D01F			CONSOL	= $D01F
   376 = 0000			CN_START_SELECT_OPTION	= $00
   377 = 0001			CN_SELECT_OPTION	= $01
   378 = 0002			CN_START_OPTION	= $02
   379 = 0003			CN_OPTION	= $03
   380 = 0004			CN_START_SELECT	= $04
   381 = 0005			CN_SELECT	= $05
   382 = 0006			CN_START	= $06
   383 = 0007			CN_NONE	= $07
   384 = 0000			BW40	= $00
   385 = 0001			CO40	= $01
   386 = 0002			BW80	= $02
   387 = 0003			CO80	= $03
   388 = 0007			MONO	= $07
   389 = 0001			C40	= $01
   390 = 0003			C80	= $03
   391 = 0000			BLACK	= $00
   392 = 000F			WHITE	= $0F
   393 = 0026			RED	= $26
   394 = 00AC			CYAN	= $AC
   395 = 0048			PURPLE	= $48
   396 = 00B6			GREEN	= $B6
   397 = 0086			BLUE	= $86
   398 = 00DC			YELLOW	= $DC
   399 = 0018			ORANGE	= $18
   400 = 00F4			BROWN	= $F4
   401 = 002A			LIGHT_RED	= $2A
   402 = 0004			DARK_GREY	= $04
   403 = 0008			GREY	= $08
   404 = 00BC			LIGHT_GREEN	= $BC
   405 = 009A			LIGHT_BLUE	= $9A
   406 = 000C			LIGHT_GREY	= $0C
   407 = 0080			BLINK	= $80
   408
   409 				.endl							; UNIT CRT
   410
   411 211B			.local	BEEP						; PROCEDURE
   412
   413 				; optimize OK (proc.pas), line = 8
   414
   415 211B A9 75			lda #$75
   416 211D 8D 6E 21			sta B
   417
   418 				; optimize FAIL ('@print', proc.pas), line = 10
   419
   420 					@printSTRING #CODEORIGIN+$0000
   420 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
   420 2120 A0 20		 LDY> CODEORIGIN+$0000
   420 2122 A9 00		 LDA< CODEORIGIN+$0000
   420 2124 20 25 20		 JSR @PRINTSTRING
   421 2127 20 17 20			@printEOL
   422
   423 				; optimize OK (proc.pas), line = 12
   424
   425 212A AD 6E 21			lda B
   426 212D 18 69 1F			add #$1F
   427 2130 8D 6D 21			sta A
   428
   429 				; optimize FAIL ('@print', proc.pas), line = 14
   430
   431 2133 AD 6D 21			lda A
   432 2136 20 56 20			jsr @printBYTE._a
   433 2139 20 17 20			@printEOL
   434
   435 				; ------------------------------------------------------------
   436
   437 = 216D			A	= DATAORIGIN+$000D
   438 = 216E			B	= DATAORIGIN+$000E
   439
   440 = 216D			@VarData	= A
   441 = 0002			@VarDataSize	= 2
   442
   443 213C			@exit
   444 					.ifdef @new
   445 					lda <@VarData
   446 					sta :ztmp
   447 					lda >@VarData
   448 					ldy #@VarDataSize-1
   449 					jmp @FreeMem
   450 					els
   451 213C 60				rts						; ret
   452 					eif
   453 				.endl
   454 213D			l_000B
   455
   456 				; -------------------  ASM Block 00000063  -------------------
   457
   458 213D 20 1B 21		   jsr beep
   459 				  
   460 				; --- RepeatUntilProlog
   461 2140			l_008F
   462
   463 				; optimize FAIL ('CRT.KEYPRESSED', proc.pas), line = 25
   464
   465 2140 20 0D 21			jsr CRT.KEYPRESSED
   466 2143 AD 6C 21			lda CRT.KEYPRESSED.RESULT
   467 2146 F0 F8			jeq l_008F
   468
   469 				; ------------------------------------------------------------
   470
   471 2148			@exit
   472
   473 2148 A2 00		@halt	ldx #$00
   474 214A 9A				txs
   475 					.ifdef MAIN.@DEFINES.ROMOFF
   476 					inc portb
   477 					.fi
   478
   479 214B A0 01			ldy #$01
   480
   481 214D 60				rts
   482
   483 				; ------------------------------------------------------------
   484
   485 214E 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   486
   487 				; ------------------------------------------------------------
   488
   489 215E			.local	@DEFINES
   490 215E			ATARI
   491 				.endl
   492
   493 215E			.local	@RESOURCE
   494 				.endl
   495
   496 				.endl							; MAIN
   497
   498 				; ------------------------------------------------------------
   499 				; ------------------------------------------------------------
   500
   501 				.macro	UNITINITIALIZATION
   502 				
   503 					.ifdef MAIN.SYSTEM.@UnitInit
   504 					jsr MAIN.SYSTEM.@UnitInit
   505 					.fi
   506 				
   507 					.ifdef MAIN.ATARI.@UnitInit
   508 					jsr MAIN.ATARI.@UnitInit
   509 					.fi
   510 				
   511 					.ifdef MAIN.CRT.@UnitInit
   512 					jsr MAIN.CRT.@UnitInit
   513 					.fi
   514 				.endm
   515
   516 				; ------------------------------------------------------------
   517
   518 					ift .SIZEOF(MAIN.SYSTEM) > 0
   519 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   519 				SYSTEM: $2109..$210C
   520 					eif
   521
   522 					ift .SIZEOF(MAIN.ATARI) > 0
   523 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   524 					eif
   525
   526 					ift .SIZEOF(MAIN.CRT) > 0
   527 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   527 				CRT: $210D..$211A
   528 					eif
   529
   530 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
   530 				CODE: $2000..$215D
   531
   532 				; ------------------------------------------------------------
   533
   534 215E				.align $0004
   535
   536 2160			DATAORIGIN
   537 2160-2165> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
   538
   539 = 0006			VARINITSIZE	= *-DATAORIGIN
   540 = 000F			VARDATASIZE	= 15
   541
   542 = 216F			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   543
   544 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   544 				DATA: $2160..$216F
   545
   546 02E0-02E1> E1 20			run START
   547
   548 				; ------------------------------------------------------------
   549
   550 				.macro	STATICDATA
   551 				.by  $02 $6F $6B $00
   552 				.endm
   553
   554 					end
