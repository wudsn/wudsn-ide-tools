; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/09/07] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_043B

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000002  -------------------

	ldy #0
	mva (:edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	DPEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000003  -------------------

	ldy #0
	mva (:edx),y Result
	iny
	mva (:edx),y Result+1

@exit

; ------------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000018  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLCHAR_048B					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000020  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	FILLCHAR_048C					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000021  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	MOVE_048D					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000026  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	SPACE						; FUNCTION | ASSEMBLER
	sta B

; -------------------  ASM Block 00000030  -------------------

	ldy #0
	lda #' '
	sta:rne @buf,y+

	mva b @buf

	mwa #@buf Result

@exit

; ------------------------------------------------------------

B	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000C

@VarData	= B
@VarDataSize	= 1

	rts						; ret
.endl

.local	SETLENGTH					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000032  -------------------

	ldy #0
	mva Len (:edx),y

; ------------------------------------------------------------

S	= :EDX
LEN	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	CLRSCR						; PROCEDURE

; optimize FAIL ('@print', crt_atari.inc), line = 34

	@print #$7D
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DELAY						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000054  -------------------

	txa:pha

	ldx #0
	ldy #0

loop	cpy count
	bne @+
	cpx count+1
	beq stop

@	:8 lda:cmp:req vcount

	iny
	sne
	inx

	bne loop

stop	pla:tax

; ------------------------------------------------------------

COUNT	= DATAORIGIN+$000F

@VarData	= COUNT
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000E
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	A8DEFINES					; UNIT

; ------------------------------------------------------------

adr.LIB_VERSION	= CODEORIGIN+$0000
.var LIB_VERSION	= adr.LIB_VERSION .word
WRECSZ	= $0A
WBUFSZ	= $0814
WON	= $01
WOFF	= $00
WPABS	= $80
WPTOP	= $F1
WPBOT	= $F2
WPLFT	= $FB
WPRGT	= $FC
WPCNT	= $FF
WENONE	= $64
WENOPN	= $65
WEUSED	= $66
GDISP	= $00
GEDIT	= $01
GHORZ	= $01
GVERT	= $02
GCON	= $01
GCOFF	= $02
GANY	= $00
GALNUM	= $01
GALPHA	= $02
GNUMER	= $03
XESC	= $FD
XTAB	= $FE
XNONE	= $FF
DMACTL	= $022F
COLDST	= $0244
GPRIOR	= $026F
INVFLG	= $02B6
SHFLOK	= $02BE
HELPFG	= $02DC
KEYPCH	= $02FC
GRACTL	= $D01D
CONSOL	= $D01F
PMBASE	= $D407
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
ALMARG	= $52
RSCRN	= $58
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
AFOREG	= $02C5
ABACKG	= $02C6
ABORDR	= $02C8
ACURIN	= $02F0
CBLACK	= $00
CWHITE	= $0E
CGREEN	= $D2
CBLUE	= $92
CRED	= $32
CYELLOW	= $DE
KNOMAP	= $C7
KNONE	= $FF
KENTER	= $0C
KDEL	= $34
KDEL_S	= $74
KDEL_C	= $B4
KINS	= $B7
KPLUS	= $06
KASTER	= $07
KMINUS	= $0E
KEQUAL	= $0F
KESC	= $1C
KSPACE	= $21
KINV	= $27
KTAB	= $2C
KTAB_S	= $6C
KCAP	= $3C
KLEFT	= $86
KRIGHT	= $87
KUP	= $8E
KDOWN	= $8F
KEYB	= $15
KEYC	= $12
KEYD	= $3A
KEYH	= $39
KEYN	= $23
KEYP	= $0A
KEYR	= $28
KEYS	= $3E
KEYT	= $2D
KB_C	= $95
KE_C	= $AA
KX	= $16
KX_S	= $56
KE_CS	= $EA
KS_CS	= $FE
KCNON	= $07
KCSTA	= $0106
KCSEL	= $0105
KCOPT	= $0103
KFHLP	= $11
KF1	= $03
KF2	= $04
KF3	= $13
KF4	= $14
CHBTRGT	= $03
CHTPRGT	= $05
CHTPLFT	= $11
CHBTLFT	= $1A
CHBALL	= $14
CHESC	= $1B
CHUP	= $1C
CHDN	= $1D
CHLFT	= $1E
CHRGT	= $1F
CHSPACE	= $20
CHDMND	= $60
CHCLS	= $7D
CHBACK	= $7E
CHTAB	= $7F
CHENT	= $9B
CHDELLN	= $9C
CHINVSP	= $A0
CHBUZ	= $FD
CHRGT_I	= $9F
CHO_L	= $6F
CHI_I	= $C9

.endl							; UNIT A8DEFINES

; ------------------------------------------------------------

.local	A8DEFWIN					; UNIT

; ------------------------------------------------------------

.endl							; UNIT A8DEFWIN

; ------------------------------------------------------------

.local	A8LIBMISC					; UNIT

.local	IKC2ATA						; FUNCTION
	sta BN

; optimize OK (A8LIBMISC), line = 66

	cmp #$C0
	jcs l_04E5

; optimize OK (A8LIBMISC), line = 68

	ldy BN
	lda adr.CL,y
	sta RESULT
	jmp l_04F8
l_04E5

; optimize OK (A8LIBMISC), line = 72

	lda BN
	sta RESULT
l_04F8
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$0011
RESULT	= DATAORIGIN+$0012
adr.CL	= CODEORIGIN+$0434
.var CL	= adr.CL .word

@VarData	= BN
@VarDataSize	= 1

	rts						; ret
.endl

.local	WAITKCX						; FUNCTION
	sta BI

; optimize OK (A8LIBMISC), line = 88

	lda #$00
	sta RESULT
	sta RESULT+1

; --- WhileProlog
l_0509

; optimize OK (A8LIBMISC), line = 91

	lda $02FC+1
	bne @+
	lda $02FC
	cmp #$FF
@
	jne l_0509w
	lda $D01F
	cmp #$07
	jne l_0509w
	lda $02DC
	jeq l_0509
l_0509w

; optimize OK (A8LIBMISC), line = 94

	lda $02FC
	sta BK

; optimize OK (A8LIBMISC), line = 95

	lda $D01F
	sta BC

; optimize OK (A8LIBMISC), line = 96

	lda $02DC
	sta BH

; optimize OK (A8LIBMISC), line = 99

	lda BC
	cmp #$07
	jeq l_054B

; optimize OK (A8LIBMISC), line = 101

	sta RESULT
	lda #$01
	sta RESULT+1
	jmp l_055F
l_054B

; optimize OK (A8LIBMISC), line = 104

	lda BH
	jeq l_0571

; optimize OK (A8LIBMISC), line = 106

	lda #$11
	sta RESULT
	lda #$00
	sta RESULT+1

; optimize OK (A8LIBMISC), line = 107

	sta $02DC
	jmp l_0582
l_0571

; optimize OK (A8LIBMISC), line = 110

	lda BK
	cmp #$3C
	jne l_0594

; optimize OK (A8LIBMISC), line = 112

	sta RESULT
	lda #$00
	sta RESULT+1

; optimize OK (A8LIBMISC), line = 115

	lda $02BE
	sta BU

; optimize OK (A8LIBMISC), line = 116

	eor #$40
	sta BU

; optimize OK (A8LIBMISC), line = 117

	sta $02BE
	jmp l_05B8
l_0594

; optimize OK (A8LIBMISC), line = 120

	lda BK
	cmp #$27
	jne l_05CA

; optimize OK (A8LIBMISC), line = 122

	sta RESULT
	lda #$00
	sta RESULT+1

; optimize OK (A8LIBMISC), line = 125

	lda BI
	cmp #$01
	jne l_05E3

; optimize OK (A8LIBMISC), line = 128

	lda $02B6
	sta BU

; optimize OK (A8LIBMISC), line = 129

	eor #$80
	sta BU

; optimize OK (A8LIBMISC), line = 130

	sta $02B6
l_05E3
	jmp l_0603
l_05CA

; optimize OK (A8LIBMISC), line = 135

	lda BK
	sta RESULT
	lda #$00
	sta RESULT+1
l_0603
l_05B8
l_0582
l_055F

; optimize OK (A8LIBMISC), line = 139

	lda #$FF
	sta $02FC
@exit

; ------------------------------------------------------------

BI	= DATAORIGIN+$0013
RESULT	= DATAORIGIN+$0014
BK	= DATAORIGIN+$0016
BC	= DATAORIGIN+$0017
BH	= DATAORIGIN+$0018
BU	= DATAORIGIN+$0019

@VarData	= BI
@VarDataSize	= 5

	rts						; ret
.endl

; ------------------------------------------------------------

.endl							; UNIT A8LIBMISC

; ------------------------------------------------------------

.local	A8LIBSTR					; UNIT

.local	STRINV						; PROCEDURE

; optimize OK (A8LIBSTR), line = 45

	lda #$00
	sta BL
	ldy BS
	dey
	sty @FORTMP_061C_0

l_061F
; --- ForToDoCondition
	lda @FORTMP_061C_0:#$00
	cmp BL
	jcc l_062D

; optimize OK (A8LIBSTR), line = 48

	mwy PS :bp2
	ldy #$00
	lda (:bp2),y
	eor #$80
	sta (:bp2),y

; optimize FAIL (0, A8LIBSTR), line = 49

	inc PS
	sne
	inc PS+1

; --- ForToDoEpilog
	inc BL
	jne l_061F
l_062D

; ------------------------------------------------------------

PS	= DATAORIGIN+$001A
BS	= DATAORIGIN+$001C
BL	= DATAORIGIN+$001D

@VarData	= PS
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STRAI						; PROCEDURE

; optimize OK (A8LIBSTR), line = 67

	lda #$00
	sta BL
	ldy BS
	dey
	sty @FORTMP_0650_0

l_0653
; --- ForToDoCondition
	lda @FORTMP_0650_0:#$00
	cmp BL
	jcc l_0661

; optimize OK (A8LIBSTR), line = 69

	mvy PS+1 :bp+1
	ldy PS
	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	cmp #$20
	jcs l_067F

; optimize OK (A8LIBSTR), line = 71

	mwy PS :bp2
	ldy #$00
	lda (:bp2),y
	add #$40
	sta (:bp2),y
	jmp l_0693
l_067F

; optimize OK (A8LIBSTR), line = 73

	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	cmp #$20
	jcc l_06B1
	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	cmp #$60
	jcs l_06B1

; optimize OK (A8LIBSTR), line = 75

	mwy PS :bp2
	ldy #$00
	lda (:bp2),y
	sub #$20
	sta (:bp2),y
	jmp l_06C5
l_06B1

; optimize OK (A8LIBSTR), line = 77

	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	jpl l_06E3
	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	cmp #$A0
	jcs l_06E3

; optimize OK (A8LIBSTR), line = 79

	mwy PS :bp2
	ldy #$00
	lda (:bp2),y
	add #$40
	sta (:bp2),y
	jmp l_06F7
l_06E3

; optimize OK (A8LIBSTR), line = 81

	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	cmp #$A0
	jcc l_0715
	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	cmp #$E0
	jcs l_0715

; optimize OK (A8LIBSTR), line = 83

	mwy PS :bp2
	ldy #$00
	lda (:bp2),y
	sub #$20
	sta (:bp2),y
l_0715
l_06F7
l_06C5
l_0693

; optimize FAIL (0, A8LIBSTR), line = 87

	inc PS
	sne
	inc PS+1

; --- ForToDoEpilog
	inc BL
	jne l_0653
l_0661

; ------------------------------------------------------------

PS	= DATAORIGIN+$001F
BS	= DATAORIGIN+$0021
BL	= DATAORIGIN+$0022

@VarData	= PS
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHARAI						; FUNCTION
	sta BC

; optimize OK (A8LIBSTR), line = 99

	lda #$1F
	cmp BC
	jcc l_074D

; optimize OK (A8LIBSTR), line = 101

	lda BC
	add #$40
	sta RESULT
	jmp l_0761
l_074D

; optimize OK (A8LIBSTR), line = 103

	lda BC
	cmp #$20
	jcc l_077F
	lda #$5F
	cmp BC
	jcc l_077F

; optimize OK (A8LIBSTR), line = 105

	lda BC
	sub #$20
	sta RESULT
	jmp l_0793
l_077F

; optimize OK (A8LIBSTR), line = 107

	lda BC
	jpl l_07B1
	lda #$9F
	cmp BC
	jcc l_07B1

; optimize OK (A8LIBSTR), line = 109

	lda BC
	add #$40
	sta RESULT
	jmp l_07C5
l_07B1

; optimize OK (A8LIBSTR), line = 111

	lda BC
	cmp #$A0
	jcc l_07E3
	lda #$DF
	cmp BC
	jcc l_07E3

; optimize OK (A8LIBSTR), line = 113

	lda BC
	sub #$20
	sta RESULT
	jmp l_07F7
l_07E3

; optimize OK (A8LIBSTR), line = 116

	lda BC
	sta RESULT
l_07F7
l_07C5
l_0793
l_0761
@exit

; ------------------------------------------------------------

BC	= DATAORIGIN+$0024
RESULT	= DATAORIGIN+$0025

@VarData	= BC
@VarDataSize	= 1

	rts						; ret
.endl

.local	BYTETOSTR3					; FUNCTION
	sta BN

	ldy #256-4
	mva:rne CODEORIGIN+$0007+4-256,y adr.RESULT+4-256,y+

; optimize OK (A8LIBSTR), line = 129

	lda BN
	sta :al
	lda #$0A
	sta :cl
	jsr idivAL_CL.MOD
	lda #$30
	add :ztmp8
	sta adr.RESULT+$03

; optimize OK (A8LIBSTR), line = 130

	lda BN
	cmp #$0A
	jcc l_0827

; optimize OK (A8LIBSTR), line = 132

	lsr @
	sta :eax
	lsr @
	adc :eax
	ror @
	lsr @
	lsr @
	adc :eax
	ror @
	adc :eax
	ror @
	lsr @
	lsr @
	sta BN

; optimize OK (A8LIBSTR), line = 133

	sta :al
	lda #$0A
	sta :cl
	jsr idivAL_CL.MOD
	lda #$30
	add :ztmp8
	sta adr.RESULT+$02

; optimize OK (A8LIBSTR), line = 134

	lda BN
	cmp #$0A
	jcc l_085A

; optimize OK (A8LIBSTR), line = 136

	lsr @
	sta :eax
	lsr @
	adc :eax
	ror @
	lsr @
	lsr @
	adc :eax
	ror @
	adc :eax
	ror @
	lsr @
	lsr @
	sta BN

; optimize OK (A8LIBSTR), line = 137

	sta :al
	lda #$0A
	sta :cl
	jsr idivAL_CL.MOD
	lda #$30
	add :ztmp8
	sta adr.RESULT+$01
l_085A
l_0827
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$0026
adr.RESULT	= [DATAORIGIN+$0027] .array [256]
.var RESULT	= adr.RESULT .word

@VarData	= BN
@VarDataSize	= 257

	rts						; ret
.endl

; ------------------------------------------------------------

.endl							; UNIT A8LIBSTR

; ------------------------------------------------------------

.local	DOS						; UNIT

; ------------------------------------------------------------

PALNTSC	= $D014

.endl							; UNIT DOS

; ------------------------------------------------------------

.local	STRUTILS					; UNIT

; ------------------------------------------------------------

.endl							; UNIT STRUTILS

; ------------------------------------------------------------

.local	SYSUTILS					; UNIT

; ------------------------------------------------------------

FAREADONLY	= $01
FAHIDDEN	= $02
FASYSFILE	= $04
FAVOLUMEID	= $08
FADIRECTORY	= $10
FAARCHIVE	= $20
FAANYFILE	= $3F

.endl							; UNIT SYSUTILS

; ------------------------------------------------------------

.local	A8LIBWIN					; UNIT

.local	WINIT						; PROCEDURE

; optimize OK (A8LIBWIN), line = 56

	lda #$01
	sta $02F0

; optimize OK (A8LIBWIN), line = 57

	lda #$00
	sta $0052

; optimize FAIL ('CRT.CLRSCR', A8LIBWIN), line = 58

	jsr CRT.CLRSCR

; optimize OK (A8LIBWIN), line = 61

	lda BAWM
	sta SYSTEM.FILLCHAR_048C.A
	lda BAWM+1
	sta SYSTEM.FILLCHAR_048C.A+1
	lda #$14
	sta SYSTEM.FILLCHAR_048C.COUNT
	lda #$08
	sta SYSTEM.FILLCHAR_048C.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_048C.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_048C
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 64

	lda BAWM
	sta CPWM
	lda BAWM+1
	sta CPWM+1

; optimize OK (A8LIBWIN), line = 67

	lda #$00
	sta BL

l_08CE
; --- ForToDoCondition
	ldy BL
	cpy #$0B
	jcs l_08DC

; optimize OK (A8LIBWIN), line = 70

	lda #$00
	sta adr.BAW.BU,y

; optimize OK (A8LIBWIN), line = 71

	sta adr.BAW.BX,y

; optimize OK (A8LIBWIN), line = 72

	sta adr.BAW.BY,y

; optimize OK (A8LIBWIN), line = 73

	sta adr.BAW.BW,y

; optimize OK (A8LIBWIN), line = 74

	sta adr.BAW.BH,y

; optimize OK (A8LIBWIN), line = 75

	sta adr.BAW.BI,y

; optimize OK (A8LIBWIN), line = 76

	lda BL
	asl @
	tay
	lda BAWM
	sta adr.BAW.CM,y
	lda BAWM+1
	sta adr.BAW.CM+1,y

; optimize OK (A8LIBWIN), line = 77

	lda #$00
	sta adr.BAW.CZ,y
	sta adr.BAW.CZ+1,y

; --- ForToDoEpilog
	inc BL
	jne l_08CE
l_08DC

; optimize OK (A8LIBWIN), line = 81

	lda #$00
	sta VCUR.VX

; optimize OK (A8LIBWIN), line = 82

	sta VCUR.VY

; ------------------------------------------------------------

BL	= DATAORIGIN+$09AD

@VarData	= BL
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WBACK						; PROCEDURE
	sta BN

; optimize OK (A8LIBWIN), line = 94

	lda $0058
	sta SYSTEM.FILLCHAR_048C.A
	lda $0058+1
	sta SYSTEM.FILLCHAR_048C.A+1
	lda #$C0
	sta SYSTEM.FILLCHAR_048C.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR_048C.COUNT+1
	lda BN
	sta SYSTEM.FILLCHAR_048C.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_048C
	m@INLINE
	.endl

; ------------------------------------------------------------

BN	= DATAORIGIN+$09AE

@VarData	= BN
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WOPEN						; FUNCTION

; optimize OK (A8LIBWIN), line = 118

	lda #$64
	sta RESULT

; optimize OK (A8LIBWIN), line = 121

	lda #$00
	sta BL

l_093D
; --- ForToDoCondition
	ldy BL
	cpy #$0B
	jcs l_094B

; optimize OK (A8LIBWIN), line = 124

	lda adr.BAW.BU,y
	jne l_0960

; optimize OK (A8LIBWIN), line = 127

	lda #$01
	sta adr.BAW.BU,y

; optimize OK (A8LIBWIN), line = 130

	lda BL
	asl @
	tay
	lda CPWM
	sta adr.BAW.CM,y
	lda CPWM+1
	sta adr.BAW.CM+1,y

; optimize OK (A8LIBWIN), line = 131

	lda BL
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda H
	sta :ecx
	lda W
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta :STACKORIGIN+10
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+10
	sta adr.BAW.CZ,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.BAW.CZ+1,y

; optimize OK (A8LIBWIN), line = 134

	ldy BL
	lda X
	sta adr.BAW.BX,y

; optimize OK (A8LIBWIN), line = 135

	lda Y
	sta adr.BAW.BY,y

; optimize OK (A8LIBWIN), line = 136

	lda W
	sta adr.BAW.BW,y

; optimize OK (A8LIBWIN), line = 137

	lda H
	sta adr.BAW.BH,y

; optimize OK (A8LIBWIN), line = 138

	lda BT
	sta adr.BAW.BI,y

; optimize OK (A8LIBWIN), line = 141

	lda $0058
	sta :STACKORIGIN+9
	lda $0058+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda Y
	jsr @mul40
	add :STACKORIGIN+9
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta PS+1
	tya
	add X
	sta PS
	scc
	inc PS+1

; optimize OK (A8LIBWIN), line = 144

	lda #$00
	sta BD
	ldy H
	dey
	sty @FORTMP_09CD_0

l_09D0
; --- ForToDoCondition
	lda @FORTMP_09CD_0:#$00
	cmp BD
	jcc l_09DE

; optimize OK (A8LIBWIN), line = 149

	lda BD
	jeq l_0A02x
	lda H
	sub #$01
	cmp BD
	jne l_0A02
l_0A02x

; optimize OK (A8LIBWIN), line = 152

	lda <adr.CL
	sta SYSTEM.FILLCHAR_048C.A
	lda >adr.CL
	sta SYSTEM.FILLCHAR_048C.A+1
	lda W
	sta SYSTEM.FILLCHAR_048C.COUNT
	lda #$00
	sta SYSTEM.FILLCHAR_048C.COUNT+1
	lda #$52
	sta SYSTEM.FILLCHAR_048C.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_048C
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 155

	lda BD
	jne l_0A1B

; optimize OK (A8LIBWIN), line = 157

	lda #$51
	sta adr.CL

; optimize OK (A8LIBWIN), line = 158

	ldy W
	lda #$45
	sta adr.CL-$01,y
	jmp l_0A35
l_0A1B

; optimize OK (A8LIBWIN), line = 162

	lda #$5A
	sta adr.CL

; optimize OK (A8LIBWIN), line = 163

	ldy W
	lda #$43
	sta adr.CL-$01,y
l_0A35
	jmp l_0A4E
l_0A02

; optimize OK (A8LIBWIN), line = 169

	lda <adr.CL
	sta SYSTEM.FILLCHAR_048C.A
	lda >adr.CL
	sta SYSTEM.FILLCHAR_048C.A+1
	lda W
	sta SYSTEM.FILLCHAR_048C.COUNT
	lda #$00
	sta SYSTEM.FILLCHAR_048C.COUNT+1
	sta SYSTEM.FILLCHAR_048C.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_048C
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 170

	lda #$7C
	sta adr.CL

; optimize OK (A8LIBWIN), line = 171

	ldy W
	sta adr.CL-$01,y
l_0A4E

; optimize OK (A8LIBWIN), line = 175

	lda BT
	cmp #$01
	jne l_0A76

; optimize OK (A8LIBWIN), line = 177

	lda #$00
	sta BC
	ldy W
	dey
	sty @FORTMP_0A83_0

l_0A86
; --- ForToDoCondition
	lda @FORTMP_0A83_0:#$00
	cmp BC
	jcc l_0A94

; optimize OK (A8LIBWIN), line = 179

	ldy BC
	lda adr.CL,y
	eor #$80
	sta adr.CL,y

; --- ForToDoEpilog
	inc BC
	jne l_0A86
l_0A94
l_0A76

; optimize OK (A8LIBWIN), line = 184

	lda PS
	sta SYSTEM.MOVE_048D.SOURCE
	lda PS+1
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda CPWM
	sta SYSTEM.MOVE_048D.DEST
	lda CPWM+1
	sta SYSTEM.MOVE_048D.DEST+1
	lda W
	sta SYSTEM.MOVE_048D.COUNT
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 186

	lda CPWM
	add W
	sta CPWM
	scc
	inc CPWM+1

; optimize OK (A8LIBWIN), line = 188

	lda <adr.CL
	sta SYSTEM.MOVE_048D.SOURCE
	lda >adr.CL
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda PS
	sta SYSTEM.MOVE_048D.DEST
	lda PS+1
	sta SYSTEM.MOVE_048D.DEST+1
	lda W
	sta SYSTEM.MOVE_048D.COUNT
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 190

	lda PS
	add #$28
	sta PS
	scc
	inc PS+1

; --- ForToDoEpilog
	inc BD
	jne l_09D0
l_09DE

; optimize OK (A8LIBWIN), line = 194

	lda BL
	sta RESULT
	jmp b_093D					; break
l_0960

; --- ForToDoEpilog
	inc BL
	jne l_093D
l_094B
b_093D
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$09AF
Y	= DATAORIGIN+$09B0
W	= DATAORIGIN+$09B1
H	= DATAORIGIN+$09B2
BT	= DATAORIGIN+$09B3
RESULT	= DATAORIGIN+$09B4
BL	= DATAORIGIN+$09B5
BD	= DATAORIGIN+$09B6
BC	= DATAORIGIN+$09B7
adr.CL	= [DATAORIGIN+$09B8] .array [41]
.var CL	= adr.CL .word
PS	= DATAORIGIN+$09E1

@VarData	= X
@VarDataSize	= 51

	rts						; ret
.endl

.local	WCLOSE						; FUNCTION
	sta BN

; optimize OK (A8LIBWIN), line = 216

	lda #$65
	sta RESULT

; optimize OK (A8LIBWIN), line = 219

	ldy BN
	lda adr.BAW.BU,y
	cmp #$01
	jne l_0AED

; optimize OK (A8LIBWIN), line = 222

	lda $0058
	sta :STACKORIGIN+9
	lda $0058+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.BAW.BY,y
	jsr @mul40
	add :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	ldy BN
	lda :STACKORIGIN+9
	add adr.BAW.BX,y
	sta PS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta PS+1

; optimize OK (A8LIBWIN), line = 225

	lda BN
	asl @
	tay
	lda adr.BAW.CM,y
	sta PA
	lda adr.BAW.CM+1,y
	sta PA+1

; optimize OK (A8LIBWIN), line = 228

	lda #$00
	sta BL
	ldy BN
	lda adr.BAW.BH,y
	sub #$01
	sta @FORTMP_0B20_0

l_0B23
; --- ForToDoCondition
	lda @FORTMP_0B20_0:#$00
	cmp BL
	jcc l_0B31

; optimize OK (A8LIBWIN), line = 231

	ldy BN
	lda adr.BAW.BW,y
	sta SYSTEM.MOVE_048D.COUNT
	lda PA
	sta SYSTEM.MOVE_048D.SOURCE
	lda PA+1
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda PS
	sta SYSTEM.MOVE_048D.DEST
	lda PS+1
	sta SYSTEM.MOVE_048D.DEST+1
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 233

	ldy BN
	lda PA
	add adr.BAW.BW,y
	sta PA
	scc
	inc PA+1

; optimize OK (A8LIBWIN), line = 235

	lda PS
	add #$28
	sta PS
	scc
	inc PS+1

; --- ForToDoEpilog
	inc BL
	jne l_0B23
l_0B31

; optimize OK (A8LIBWIN), line = 239

	lda BN
	asl @
	tay
	lda adr.BAW.CZ,y
	sta SYSTEM.FILLCHAR_048C.COUNT
	lda adr.BAW.CZ+1,y
	sta SYSTEM.FILLCHAR_048C.COUNT+1
	lda adr.BAW.CM,y
	sta SYSTEM.FILLCHAR_048C.A
	lda adr.BAW.CM+1,y
	sta SYSTEM.FILLCHAR_048C.A+1
	lda #$00
	sta SYSTEM.FILLCHAR_048C.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_048C
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 242

	lda BN
	asl @
	tay
	lda CPWM
	sub adr.BAW.CZ,y
	sta CPWM
	lda CPWM+1
	sbc adr.BAW.CZ+1,y
	sta CPWM+1

; optimize OK (A8LIBWIN), line = 245

	ldy BN
	lda #$00
	sta adr.BAW.BU,y

; optimize OK (A8LIBWIN), line = 246

	sta adr.BAW.BX,y

; optimize OK (A8LIBWIN), line = 247

	sta adr.BAW.BY,y

; optimize OK (A8LIBWIN), line = 248

	sta adr.BAW.BW,y

; optimize OK (A8LIBWIN), line = 249

	sta adr.BAW.BH,y

; optimize OK (A8LIBWIN), line = 250

	sta adr.BAW.BI,y

; optimize OK (A8LIBWIN), line = 251

	lda BN
	asl @
	tay
	lda BAWM
	sta adr.BAW.CM,y
	lda BAWM+1
	sta adr.BAW.CM+1,y

; optimize OK (A8LIBWIN), line = 252

	lda #$00
	sta adr.BAW.CZ,y
	sta adr.BAW.CZ+1,y

; optimize OK (A8LIBWIN), line = 255

	sta RESULT
l_0AED
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$09E5
RESULT	= DATAORIGIN+$09E6
BL	= DATAORIGIN+$09E7
PS	= DATAORIGIN+$09E8
PA	= DATAORIGIN+$09EA

@VarData	= BN
@VarDataSize	= 6

	rts						; ret
.endl

.local	WSTAT						; FUNCTION
	sta BN

; optimize OK (A8LIBWIN), line = 269

	ldy BN
	lda adr.BAW.BU,y
	sta RESULT
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$09ED
RESULT	= DATAORIGIN+$09EE

@VarData	= BN
@VarDataSize	= 1

	rts						; ret
.endl

.local	WPOS						; FUNCTION

; optimize OK (A8LIBWIN), line = 284

	lda #$00
	sta RESULT

; optimize OK (A8LIBWIN), line = 287

	lda BN
	cmp #$80
	jne l_0BCE

; optimize OK (A8LIBWIN), line = 290

	lda X
	sta VCUR.VX

; optimize OK (A8LIBWIN), line = 291

	lda Y
	sta VCUR.VY
	jmp l_0BE4
l_0BCE

; optimize OK (A8LIBWIN), line = 296

	ldy BN
	lda adr.BAW.BU,y
	cmp #$01
	jne l_0BF9

; optimize OK (A8LIBWIN), line = 299

	lda adr.BAW.BX,y
	add X
	sta VCUR.VX

; optimize OK (A8LIBWIN), line = 300

	lda adr.BAW.BY,y
	add Y
	sta VCUR.VY
l_0BF9
l_0BE4
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$09EF
X	= DATAORIGIN+$09F0
Y	= DATAORIGIN+$09F1
RESULT	= DATAORIGIN+$09F2

@VarData	= BN
@VarDataSize	= 3

	rts						; ret
.endl

.local	WPUT						; FUNCTION

; optimize OK (A8LIBWIN), line = 319

	lda #$65
	sta RESULT

; optimize OK (A8LIBWIN), line = 322

	lda X
	sta BT

; optimize OK (A8LIBWIN), line = 325

	ldy BN
	lda adr.BAW.BU,y
	cmp #$01
	jne l_0C3D

; optimize OK (A8LIBWIN), line = 328

	lda adr.BAW.BI,y
	cmp #$01
	jne l_0C53

; optimize OK (A8LIBWIN), line = 330

	lda BT
	eor #$80
	sta BT
l_0C53

; optimize OK (A8LIBWIN), line = 334

	lda $0058
	sta :STACKORIGIN+9
	lda $0058+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda VCUR.VY
	jsr @mul40
	add :STACKORIGIN+9
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta CS+1
	tya
	add VCUR.VX
	sta CS
	scc
	inc CS+1

; optimize OK (A8LIBWIN), line = 335

	lda X
	jsr A8LIBSTR.CHARAI
	inx
	mva A8LIBSTR.CHARAI.RESULT :STACKORIGIN,x
	inx
	mva CS :STACKORIGIN,x
	mva CS+1 :STACKORIGIN+STACKWIDTH,x
	jsr SYSTEM.POKE

; optimize FAIL (0, A8LIBWIN), line = 338

	inc VCUR.VX

; optimize OK (A8LIBWIN), line = 341

	lda #$00
	sta RESULT
l_0C3D
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$09F3
X	= DATAORIGIN+$09F4
RESULT	= DATAORIGIN+$09F5
BT	= DATAORIGIN+$09F6
CS	= DATAORIGIN+$09F7

@VarData	= BN
@VarDataSize	= 5

	rts						; ret
.endl

.local	WPRINT						; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta BN
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta X
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta Y
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta BI
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.PS,y+
	mwa #adr.PS PS
	dex
@main

; optimize OK (A8LIBWIN), line = 364

	lda #$65
	sta RESULT

; optimize OK (A8LIBWIN), line = 367

	ldy BN
	lda adr.BAW.BU,y
	cmp #$01
	jne l_0CB2

; optimize OK (A8LIBWIN), line = 370

	lda adr.PS
	sta BL

; optimize OK (A8LIBWIN), line = 371

	lda CL
	sta SYSTEM.SETLENGTH.S
	lda CL+1
	sta SYSTEM.SETLENGTH.S+1
	lda BL
	sta SYSTEM.SETLENGTH.LEN
	jsr SYSTEM.SETLENGTH

; optimize OK (A8LIBWIN), line = 372

	lda <adr.CL+$01
	sta SYSTEM.MOVE_048D.DEST
	lda >adr.CL+$01
	sta SYSTEM.MOVE_048D.DEST+1
	lda <adr.PS+$01
	sta SYSTEM.MOVE_048D.SOURCE
	lda >adr.PS+$01
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda BL
	sta SYSTEM.MOVE_048D.COUNT
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 381

	lda X
	cmp #$FF
	jeq l_0CEF
	ldy BN
	lda adr.BAW.BW,y
	sub X
	sta :STACKORIGIN+11
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	sub #$01
	sta :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+11
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+STACKWIDTH*2+11
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda :STACKORIGIN+STACKWIDTH*3+11
	sbc #$00
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda BL
	cmp :STACKORIGIN+11
@
	jcc l_0CEF
	jeq l_0CEF

; optimize OK (A8LIBWIN), line = 384

	lda adr.BAW.BW,y
	sub X
	sub #$01
	sta BL

; optimize OK (A8LIBWIN), line = 385

	lda CL
	sta SYSTEM.SETLENGTH.S
	lda CL+1
	sta SYSTEM.SETLENGTH.S+1
	lda BL
	sta SYSTEM.SETLENGTH.LEN
	jsr SYSTEM.SETLENGTH
l_0CEF

; optimize OK (A8LIBWIN), line = 389

	lda <adr.CL+$01
	sta A8LIBSTR.STRAI.PS
	lda >adr.CL+$01
	sta A8LIBSTR.STRAI.PS+1
	lda BL
	sta A8LIBSTR.STRAI.BS
	jsr A8LIBSTR.STRAI

; optimize OK (A8LIBWIN), line = 392

	ldy BN
	lda adr.BAW.BI,y
	cmp #$01
	jeq l_0D31x
	lda BI
	cmp #$01
	jne l_0D31
l_0D31x

; optimize OK (A8LIBWIN), line = 394

	lda <adr.CL+$01
	sta A8LIBSTR.STRINV.PS
	lda >adr.CL+$01
	sta A8LIBSTR.STRINV.PS+1
	lda BL
	sta A8LIBSTR.STRINV.BS
	jsr A8LIBSTR.STRINV
l_0D31

; optimize OK (A8LIBWIN), line = 398

	lda $0058
	sta :STACKORIGIN+9
	lda $0058+1
	sta :STACKORIGIN+STACKWIDTH+9
	ldy BN
	lda adr.BAW.BY,y
	jsr @mul40
	add :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	ldy BN
	lda :STACKORIGIN+9
	add adr.BAW.BX,y
	sta CS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta CS+1

; optimize OK (A8LIBWIN), line = 401

	lda Y
	jsr @mul40
	add CS
	sta CS
	lda CS+1
	adc :eax+1
	sta CS+1

; optimize OK (A8LIBWIN), line = 404

	lda X
	cmp #$FF
	jeq l_0D6D

; optimize OK (A8LIBWIN), line = 407

	lda CS
	add X
	sta CS
	scc
	inc CS+1
	jmp l_0D7A
l_0D6D

; optimize OK (A8LIBWIN), line = 411

	ldy BN
	lda adr.BAW.BW,y
	sub BL
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sbc #$00
	sta :eax+2
	lda #$00
	sbc #$00
	sta :eax+3
	lda #$02
	sta :ecx
	lda #$00
	sta :ecx+1
	jsr idivEAX_CX
	lda CS
	add :eax
	sta CS
	lda CS+1
	adc :eax+1
	sta CS+1
l_0D7A

; optimize OK (A8LIBWIN), line = 415

	lda <adr.CL+$01
	sta SYSTEM.MOVE_048D.SOURCE
	lda >adr.CL+$01
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda CS
	sta SYSTEM.MOVE_048D.DEST
	lda CS+1
	sta SYSTEM.MOVE_048D.DEST+1
	lda BL
	sta SYSTEM.MOVE_048D.COUNT
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 418

	lda #$00
	sta RESULT
l_0CB2
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$09F9
X	= DATAORIGIN+$09FA
Y	= DATAORIGIN+$09FB
BI	= DATAORIGIN+$09FC
adr.PS	= [DATAORIGIN+$09FD] .array [256]
.var PS	= adr.PS .word
RESULT	= DATAORIGIN+$0AFD
BL	= DATAORIGIN+$0AFE
TMP	= DATAORIGIN+$0AFF
CS	= DATAORIGIN+$0B00
adr.CL	= [DATAORIGIN+$0B02] .array [130]
.var CL	= adr.CL .word

@VarData	= BN
@VarDataSize	= 394

	rts						; ret
.endl

.local	WORN						; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta BN
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta BT
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta BL
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.PS,y+
	mwa #adr.PS PS
	dex
@main

; optimize OK (A8LIBWIN), line = 440

	lda #$65
	sta RESULT

; optimize OK (A8LIBWIN), line = 443

	ldy BN
	lda adr.BAW.BU,y
	cmp #$01
	jne l_0DC2

; optimize OK (A8LIBWIN), line = 446

	lda adr.PS
	add #$02
	sta BS

; optimize OK (A8LIBWIN), line = 447

	lda CL
	sta SYSTEM.SETLENGTH.S
	lda CL+1
	sta SYSTEM.SETLENGTH.S+1
	lda BS
	sta SYSTEM.SETLENGTH.LEN
	jsr SYSTEM.SETLENGTH

; optimize OK (A8LIBWIN), line = 448

	lda #$04
	sta adr.CL+$01

; optimize OK (A8LIBWIN), line = 449

	lda adr.PS
	sta SYSTEM.MOVE_048D.COUNT
	lda <adr.CL+$02
	sta SYSTEM.MOVE_048D.DEST
	lda >adr.CL+$02
	sta SYSTEM.MOVE_048D.DEST+1
	lda <adr.PS+$01
	sta SYSTEM.MOVE_048D.SOURCE
	lda >adr.PS+$01
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 450

	ldy BS
	lda #$01
	sta adr.CL,y

; optimize OK (A8LIBWIN), line = 453

	lda <adr.CL+$01
	sta A8LIBSTR.STRAI.PS
	lda >adr.CL+$01
	sta A8LIBSTR.STRAI.PS+1
	lda BS
	sta A8LIBSTR.STRAI.BS
	jsr A8LIBSTR.STRAI

; optimize OK (A8LIBWIN), line = 456

	ldy BN
	lda adr.BAW.BI,y
	cmp #$01
	jne l_0DF9

; optimize OK (A8LIBWIN), line = 458

	lda <adr.CL+$01
	sta A8LIBSTR.STRINV.PS
	lda >adr.CL+$01
	sta A8LIBSTR.STRINV.PS+1
	lda BS
	sta A8LIBSTR.STRINV.BS
	jsr A8LIBSTR.STRINV
	jmp l_0E08
l_0DF9

; optimize OK (A8LIBWIN), line = 463

	lda BS
	sub #$02
	sta A8LIBSTR.STRINV.BS
	lda <adr.CL+$02
	sta A8LIBSTR.STRINV.PS
	lda >adr.CL+$02
	sta A8LIBSTR.STRINV.PS+1
	jsr A8LIBSTR.STRINV
l_0E08

; optimize OK (A8LIBWIN), line = 467

	lda $0058
	sta :STACKORIGIN+9
	lda $0058+1
	sta :STACKORIGIN+STACKWIDTH+9
	ldy BN
	lda adr.BAW.BY,y
	jsr @mul40
	add :STACKORIGIN+9
	sta CS
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta CS+1

; optimize OK (A8LIBWIN), line = 470

	lda BT
	cmp #$F2
	jne l_0E35

; optimize OK (A8LIBWIN), line = 472

	ldy BN
	lda adr.BAW.BH,y
	sub #$01
	jsr @mul40
	add CS
	sta CS
	lda CS+1
	adc :eax+1
	sta CS+1
l_0E35

; optimize OK (A8LIBWIN), line = 476

	lda BL
	cmp #$FB
	jne l_0E58

; optimize OK (A8LIBWIN), line = 478

	ldy BN
	lda adr.BAW.BX,y
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda CS
	add :STACKORIGIN+9
	sta CS
	lda CS+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta CS+1
	jmp l_0E6C
l_0E58

; optimize OK (A8LIBWIN), line = 481

	lda BL
	cmp #$FC
	jne l_0E7E

; optimize OK (A8LIBWIN), line = 483

	ldy BN
	lda adr.BAW.BX,y
	add adr.BAW.BW,y
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub BS
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda CS
	add :STACKORIGIN+9
	sta CS
	lda CS+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta CS+1
	jmp l_0EA1
l_0E7E

; optimize OK (A8LIBWIN), line = 487

	ldy BN
	lda adr.BAW.BX,y
	sta :STACKORIGIN+9
	lda adr.BAW.BW,y
	sub BS
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sbc #$00
	sta :eax+2
	lda #$00
	sbc #$00
	sta :eax+3
	lda #$02
	sta :ecx
	lda #$00
	sta :ecx+1
	jsr idivEAX_CX
	lda :STACKORIGIN+9
	add :eax
	sta :STACKORIGIN+9
	lda #$00
	adc :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda CS
	add :STACKORIGIN+9
	sta CS
	lda CS+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta CS+1
l_0EA1
l_0E6C

; optimize OK (A8LIBWIN), line = 491

	lda <adr.CL+$01
	sta SYSTEM.MOVE_048D.SOURCE
	lda >adr.CL+$01
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda CS
	sta SYSTEM.MOVE_048D.DEST
	lda CS+1
	sta SYSTEM.MOVE_048D.DEST+1
	lda BS
	sta SYSTEM.MOVE_048D.COUNT
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 494

	lda #$00
	sta RESULT
l_0DC2
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$0B84
BT	= DATAORIGIN+$0B85
BL	= DATAORIGIN+$0B86
adr.PS	= [DATAORIGIN+$0B87] .array [256]
.var PS	= adr.PS .word
RESULT	= DATAORIGIN+$0C87
BS	= DATAORIGIN+$0C88
CS	= DATAORIGIN+$0C89
adr.CL	= [DATAORIGIN+$0C8B] .array [37]
.var CL	= adr.CL .word

@VarData	= BN
@VarDataSize	= 299

	rts						; ret
.endl

; ------------------------------------------------------------

adr.BAW	= DATAORIGIN+$0127	; [110] RECORD
.var BAW	= adr.BAW .word
adr.BAW.BU	= [DATAORIGIN+$0127] .array [11]
.var BAW.BU	= adr.BAW.BU .word
adr.BAW.BX	= [DATAORIGIN+$0132] .array [11]
.var BAW.BX	= adr.BAW.BX .word
adr.BAW.BY	= [DATAORIGIN+$013D] .array [11]
.var BAW.BY	= adr.BAW.BY .word
adr.BAW.BW	= [DATAORIGIN+$0148] .array [11]
.var BAW.BW	= adr.BAW.BW .word
adr.BAW.BH	= [DATAORIGIN+$0153] .array [11]
.var BAW.BH	= adr.BAW.BH .word
adr.BAW.BI	= [DATAORIGIN+$015E] .array [11]
.var BAW.BI	= adr.BAW.BI .word
adr.BAW.CM	= [DATAORIGIN+$0169] .array [11] .word
.var BAW.CM	= adr.BAW.CM .word
adr.BAW.CZ	= [DATAORIGIN+$017F] .array [11] .word
.var BAW.CZ	= adr.BAW.CZ .word
adr.VCUR	= DATAORIGIN+$0195	; [2] RECORD
.var VCUR	= adr.VCUR .word
VCUR.VX	= DATAORIGIN+$0195
VCUR.VY	= DATAORIGIN+$0196
adr.BAWM	= [DATAORIGIN+$0197] .array [2068]
.var BAWM	= adr.BAWM .word
CPWM	= DATAORIGIN+$09AB

.endl							; UNIT A8LIBWIN

; ------------------------------------------------------------

.local	A8LIBGADG					; UNIT

.local	GALERT						; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.PS,y+
	mwa #adr.PS PS
	dex
@main

; optimize OK (A8LIBGADG), line = 54

	lda adr.PS
	sta BL

; optimize OK (A8LIBGADG), line = 55

	lda #$26
	sub BL
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sbc #$00
	sta :eax+2
	lda #$00
	sbc #$00
	sta :eax+3
	lda #$02
	sta :ecx
	lda #$00
	sta :ecx+1
	jsr idivEAX_CX
	lda :eax
	sta X

; optimize OK (A8LIBGADG), line = 58

	lda BL
	add #$02
	sta A8LIBWIN.WOPEN.W
	lda X
	sta A8LIBWIN.WOPEN.X
	lda #$0A
	sta A8LIBWIN.WOPEN.Y
	lda #$05
	sta A8LIBWIN.WOPEN.H
	lda #$00
	sta A8LIBWIN.WOPEN.BT
	jsr A8LIBWIN.WOPEN
	lda A8LIBWIN.WOPEN.RESULT
	sta BW

; optimize FAIL ('A8LIBWIN.WORN', A8LIBGADG), line = 59

	inx
	mva #$19 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva #$F1 :STACKORIGIN,x
	inx
	mva BW :STACKORIGIN,x
	jsr A8LIBWIN.WORN

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 60

	inx
	mva PS :STACKORIGIN,x
	mva PS+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva BW :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 61

	inx
	mva #$21 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva BW :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (A8LIBGADG), line = 64

	lda #$00
	jsr A8LIBMISC.WAITKCX
	lda A8LIBMISC.WAITKCX.RESULT
	sta X

; optimize OK (A8LIBGADG), line = 67

	lda BW
	jsr A8LIBWIN.WCLOSE

; ------------------------------------------------------------

adr.PS	= [DATAORIGIN+$0CB0] .array [256]
.var PS	= adr.PS .word
BW	= DATAORIGIN+$0DB0
BL	= DATAORIGIN+$0DB1
X	= DATAORIGIN+$0DB2

@VarData	= PS
@VarDataSize	= 259

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GPROG						; PROCEDURE

; optimize OK (A8LIBGADG), line = 86

	lda #$14
	jsr SYSTEM.SPACE
	inx
	lda SYSTEM.SPACE.RESULT
	sta @move.src
	lda SYSTEM.SPACE.RESULT+1
	sta @move.src+1
	@moveSTRING CL #22
	dex

; optimize OK (A8LIBGADG), line = 90

	lda BS
	sta :eax
	lsr @
	adc #$0d
	adc :eax
	ror @
	lsr @
	lsr @
	adc :eax
	ror @
	adc :eax
	ror @
	lsr @
	lsr @
	sta IL
	lda #$00
	sta IL+1

; optimize OK (A8LIBGADG), line = 91

	lda <adr.CL+$01
	sta SYSTEM.FILLCHAR_048B.A
	lda >adr.CL+$01
	sta SYSTEM.FILLCHAR_048B.A+1
	lda IL
	sta SYSTEM.FILLCHAR_048B.COUNT
	lda IL+1
	sta SYSTEM.FILLCHAR_048B.COUNT+1
	lda #$A0
	sta SYSTEM.FILLCHAR_048B.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_048B
	m@INLINE
	.endl

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 94

	inx
	mva CL :STACKORIGIN,x
	mva CL+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva Y :STACKORIGIN,x
	inx
	mva X :STACKORIGIN,x
	inx
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; ------------------------------------------------------------

BN	= DATAORIGIN+$0DB3
X	= DATAORIGIN+$0DB4
Y	= DATAORIGIN+$0DB5
BS	= DATAORIGIN+$0DB6
IL	= DATAORIGIN+$0DB7
adr.CL	= [DATAORIGIN+$0DB9] .array [22]
.var CL	= adr.CL .word

@VarData	= BN
@VarDataSize	= 28

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GBUTTON						; FUNCTION

; optimize OK (A8LIBGADG), line = 115

	lda #$00
	sta BF

; optimize OK (A8LIBGADG), line = 118

	lda BD
	sta RESULT

; --- WhileProlog
	jmp l_0F49
l_0F4A

; optimize OK (A8LIBGADG), line = 124

	lda #$00
	sta BP

; optimize OK (A8LIBGADG), line = 127

	sta BL
	ldy BS
	dey
	sty @FORTMP_0F5A_0

l_0F5D
; --- ForToDoCondition
	lda @FORTMP_0F5A_0:#$00
	cmp BL
	jcc l_0F6B

; optimize OK (A8LIBGADG), line = 130

	lda BL
	add #$01
	cmp RESULT
	jne l_0F83

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 132

	inx
	mva BL :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	m@index2 0
	lda PA
	add :STACKORIGIN,x
	sta :bp2
	lda PA+1
	adc :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva (:bp2),y :STACKORIGIN,x
	iny
	mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva Y :STACKORIGIN,x
	inx
	lda X
	add BP
	sta :STACKORIGIN,x
	inx
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT
	jmp l_0FA3
l_0F83

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 135

	inx
	mva BL :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	m@index2 0
	lda PA
	add :STACKORIGIN,x
	sta :bp2
	lda PA+1
	adc :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva (:bp2),y :STACKORIGIN,x
	iny
	mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva Y :STACKORIGIN,x
	inx
	lda X
	add BP
	sta :STACKORIGIN,x
	inx
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT
l_0FA3

; optimize OK (A8LIBGADG), line = 139

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda BL
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add PA
	sta :bp2
	lda PA+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$01
	lda (:bp2),y
	sta :bp+1
	dey
	lda (:bp2),y
	tay
	lda BP
	add (:bp),y
	sta BP

; --- ForToDoEpilog
	inc BL
	jne l_0F5D
l_0F6B

; optimize OK (A8LIBGADG), line = 143

	lda BD
	jne l_0FD3

; optimize OK (A8LIBGADG), line = 145

	lda #$01
	sta BF
	jmp l_0FE1
l_0FD3

; optimize OK (A8LIBGADG), line = 149

	lda #$00
	jsr A8LIBMISC.WAITKCX
	lda A8LIBMISC.WAITKCX.RESULT
	sta BK

; optimize OK (A8LIBGADG), line = 152

	cmp #$86
	jeq l_101Cx
	cmp #$06
	jeq l_101Cx
	cmp #$8E
	jeq l_101Cx
	cmp #$0E
	jne l_101C
l_101Cx

; optimize FAIL (0, A8LIBGADG), line = 155

	dec RESULT

; optimize OK (A8LIBGADG), line = 156

	lda RESULT
	cmp #$01
	jcs l_1033

; optimize OK (A8LIBGADG), line = 158

	lda BS
	sta RESULT
l_1033
	jmp l_1045
l_101C

; optimize OK (A8LIBGADG), line = 161

	lda BK
	cmp #$87
	jeq l_107Bx
	cmp #$07
	jeq l_107Bx
	cmp #$8F
	jeq l_107Bx
	cmp #$0F
	jne l_107B
l_107Bx

; optimize FAIL (0, A8LIBGADG), line = 164

	inc RESULT

; optimize OK (A8LIBGADG), line = 165

	lda BS
	cmp RESULT
	jcs l_1094

; optimize OK (A8LIBGADG), line = 167

	lda #$01
	sta RESULT
l_1094
	jmp l_10A4
l_107B

; optimize OK (A8LIBGADG), line = 170

	lda BK
	cmp #$1C
	jne l_10B6

; optimize OK (A8LIBGADG), line = 172

	lda #$FD
	sta RESULT

; optimize OK (A8LIBGADG), line = 173

	lda #$01
	sta BF
	jmp l_10C8
l_10B6

; optimize OK (A8LIBGADG), line = 175

	lda BK
	cmp #$2C
	jne l_10DA

; optimize OK (A8LIBGADG), line = 177

	lda #$FE
	sta RESULT

; optimize OK (A8LIBGADG), line = 178

	lda #$01
	sta BF
	jmp l_10EC
l_10DA

; optimize OK (A8LIBGADG), line = 180

	lda BK
	cmp #$0C
	jne l_10FE

; optimize OK (A8LIBGADG), line = 182

	lda #$01
	sta BF
l_10FE
l_10EC
l_10C8
l_10A4
l_1045
l_0FE1
l_0F49

; optimize OK (A8LIBGADG), line = 121

	lda BF
	jeq l_0F4A
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$0DCF
X	= DATAORIGIN+$0DD0
Y	= DATAORIGIN+$0DD1
BD	= DATAORIGIN+$0DD2
BS	= DATAORIGIN+$0DD3
adr.PA	= [DATAORIGIN+$0DD4] .array [1] .word
.var PA	= adr.PA .word
RESULT	= DATAORIGIN+$0DD6
BF	= DATAORIGIN+$0DD7
BL	= DATAORIGIN+$0DD8
BK	= DATAORIGIN+$0DD9
BP	= DATAORIGIN+$0DDA

@VarData	= BN
@VarDataSize	= 11

	rts						; ret
.endl

.local	GCHECK						; FUNCTION

; optimize OK (A8LIBGADG), line = 205

	lda #$00
	sta BF

; optimize OK (A8LIBGADG), line = 208

	lda BD
	sta RESULT

; optimize OK (A8LIBGADG), line = 209

	sta BC

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 212

	inx
	mva #$27 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva Y :STACKORIGIN,x
	inx
	mva X :STACKORIGIN,x
	inx
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; --- WhileProlog
	jmp l_1130
l_1131

; optimize OK (A8LIBGADG), line = 218

	lda BC
	cmp #$01
	jne l_1143
	mva #$01 adr.TMPSTR
	mva #$58 adr.TMPSTR+1
	jne l_114D
l_1143
	mva #$01 adr.TMPSTR
	mva #$20 adr.TMPSTR+1
l_114D

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 225

	inx
	mva TMPSTR :STACKORIGIN,x
	mva TMPSTR+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva Y :STACKORIGIN,x
	inx
	ldy X
	iny
	sty :STACKORIGIN,x
	inx
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (A8LIBGADG), line = 228

	lda BI
	jne l_1170

; optimize OK (A8LIBGADG), line = 230

	lda #$01
	sta BF
	jmp l_117E
l_1170

; optimize OK (A8LIBGADG), line = 234

	lda #$00
	jsr A8LIBMISC.WAITKCX
	lda A8LIBMISC.WAITKCX.RESULT
	sta BK

; optimize OK (A8LIBGADG), line = 237

	cmp #$1C
	jne l_1195

; optimize OK (A8LIBGADG), line = 240

	lda #$FD
	sta RESULT

; optimize OK (A8LIBGADG), line = 241

	lda #$01
	sta BF
	jmp l_11A7
l_1195

; optimize OK (A8LIBGADG), line = 243

	lda BK
	cmp #$2C
	jne l_11B9

; optimize OK (A8LIBGADG), line = 246

	lda #$FE
	sta RESULT

; optimize OK (A8LIBGADG), line = 247

	lda #$01
	sta BF
	jmp l_11CB
l_11B9

; optimize OK (A8LIBGADG), line = 249

	lda BK
	cmp #$21
	jeq l_11F5x
	cmp #$16
	jeq l_11F5x
	cmp #$56
	jne l_11F5
l_11F5x

; optimize OK (A8LIBGADG), line = 252

	lda BC
	cmp #$01
	jne l_1208

; optimize OK (A8LIBGADG), line = 254

	lda #$02
	sta BC
	jmp l_1216
l_1208

; optimize OK (A8LIBGADG), line = 257

	lda #$01
	sta BC
l_1216

; optimize OK (A8LIBGADG), line = 259

	lda BC
	sta RESULT

; optimize OK (A8LIBGADG), line = 260

	lda #$01
	sta BF
l_11F5
l_11CB
l_11A7
l_117E
l_1130

; optimize OK (A8LIBGADG), line = 215

	lda BF
	jeq l_1131

; optimize OK (A8LIBGADG), line = 266

	lda RESULT
	cmp BC
	jne l_1243

; optimize OK (A8LIBGADG), line = 269

	cmp #$01
	jne l_1256
	mva #$01 adr.TMPSTR
	mva #$58 adr.TMPSTR+1
	jne l_1260
l_1256
	mva #$01 adr.TMPSTR
	mva #$20 adr.TMPSTR+1
l_1260

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 276

	inx
	mva TMPSTR :STACKORIGIN,x
	mva TMPSTR+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva Y :STACKORIGIN,x
	inx
	ldy X
	iny
	sty :STACKORIGIN,x
	inx
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT
	jmp l_127A
l_1243

; optimize OK (A8LIBGADG), line = 280

	lda BD
	cmp #$01
	jne l_128C
	mva #$01 adr.TMPSTR
	mva #$58 adr.TMPSTR+1
	jne l_1296
l_128C
	mva #$01 adr.TMPSTR
	mva #$20 adr.TMPSTR+1
l_1296

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 287

	inx
	mva TMPSTR :STACKORIGIN,x
	mva TMPSTR+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva Y :STACKORIGIN,x
	inx
	ldy X
	iny
	sty :STACKORIGIN,x
	inx
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT
l_127A
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$0DDC
X	= DATAORIGIN+$0DDD
Y	= DATAORIGIN+$0DDE
BI	= DATAORIGIN+$0DDF
BD	= DATAORIGIN+$0DE0
RESULT	= DATAORIGIN+$0DE1
BF	= DATAORIGIN+$0DE2
BK	= DATAORIGIN+$0DE3
BC	= DATAORIGIN+$0DE4
adr.TMPSTR	= [DATAORIGIN+$0DE5] .array [256]
.var TMPSTR	= adr.TMPSTR .word

@VarData	= BN
@VarDataSize	= 264

	rts						; ret
.endl

.local	GRADIO						; FUNCTION

; optimize OK (A8LIBGADG), line = 309

	lda #$00
	sta BF

; optimize OK (A8LIBGADG), line = 312

	lda BI
	sta RESULT

; optimize OK (A8LIBGADG), line = 313

	sta BC

; --- WhileProlog
	jmp l_12BD
l_12BE

; optimize OK (A8LIBGADG), line = 319

	lda #$00
	sta XP

; optimize OK (A8LIBGADG), line = 320

	sta YP

; optimize OK (A8LIBGADG), line = 323

	sta BL
	ldy BS
	dey
	sty @FORTMP_12D2_0

l_12D5
; --- ForToDoCondition
	lda @FORTMP_12D2_0:#$00
	cmp BL
	jcc l_12E3

; optimize OK (A8LIBGADG), line = 326

	lda Y
	add YP
	sta A8LIBWIN.WPOS.Y
	lda X
	add XP
	sta A8LIBWIN.WPOS.X
	lda BN
	sta A8LIBWIN.WPOS.BN
	jsr A8LIBWIN.WPOS

; optimize OK (A8LIBGADG), line = 327

	lda BL
	add #$01
	cmp BC
	jne l_131D
	lda BE
	jeq l_131D

; optimize OK (A8LIBGADG), line = 329

	lda BN
	sta A8LIBWIN.WPUT.BN
	lda #$9F
	sta A8LIBWIN.WPUT.X
	jsr A8LIBWIN.WPUT
	jmp l_132C
l_131D

; optimize OK (A8LIBGADG), line = 332

	lda BN
	sta A8LIBWIN.WPUT.BN
	lda #$20
	sta A8LIBWIN.WPUT.X
	jsr A8LIBWIN.WPUT
l_132C

; optimize OK (A8LIBGADG), line = 336

	lda Y
	add YP
	sta A8LIBWIN.WPOS.Y
	lda X
	add XP
	add #$01
	sta A8LIBWIN.WPOS.X
	lda BN
	sta A8LIBWIN.WPOS.BN
	jsr A8LIBWIN.WPOS

; optimize OK (A8LIBGADG), line = 337

	lda BL
	add #$01
	cmp RESULT
	jne l_1363

; optimize OK (A8LIBGADG), line = 339

	lda BN
	sta A8LIBWIN.WPUT.BN
	lda #$14
	sta A8LIBWIN.WPUT.X
	jsr A8LIBWIN.WPUT
	jmp l_1372
l_1363

; optimize OK (A8LIBGADG), line = 342

	lda BN
	sta A8LIBWIN.WPUT.BN
	lda #$6F
	sta A8LIBWIN.WPUT.X
	jsr A8LIBWIN.WPUT
l_1372

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 346

	inx
	mva BL :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	m@index2 0
	lda PS
	add :STACKORIGIN,x
	sta :bp2
	lda PS+1
	adc :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva (:bp2),y :STACKORIGIN,x
	iny
	mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	lda Y
	add YP
	sta :STACKORIGIN,x
	inx
	lda X
	add XP
	sta :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr addAL_CL
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (A8LIBGADG), line = 349

	lda BD
	cmp #$01
	jne l_13A9

; optimize OK (A8LIBGADG), line = 352

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda BL
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add PS
	sta :bp2
	lda PS+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$01
	lda (:bp2),y
	sta :bp+1
	dey
	lda (:bp2),y
	tay
	lda (:bp),y
	add #$04
	add XP
	sta XP
	jmp l_13BA
l_13A9

; optimize FAIL (0, A8LIBGADG), line = 356

	inc YP
l_13BA

; --- ForToDoEpilog
	inc BL
	jne l_12D5
l_12E3

; optimize OK (A8LIBGADG), line = 361

	lda BE
	jne l_13D5

; optimize OK (A8LIBGADG), line = 363

	lda #$01
	sta BF
	jmp l_13E3
l_13D5

; optimize OK (A8LIBGADG), line = 368

	lda #$00
	jsr A8LIBMISC.WAITKCX
	lda A8LIBMISC.WAITKCX.RESULT
	sta BK

; optimize OK (A8LIBGADG), line = 372

	cmp #$86
	jeq l_141Ex
	cmp #$06
	jeq l_141Ex
	cmp #$8E
	jeq l_141Ex
	cmp #$0E
	jne l_141E
l_141Ex

; optimize FAIL (0, A8LIBGADG), line = 375

	dec BC

; optimize OK (A8LIBGADG), line = 376

	lda BC
	cmp #$01
	jcs l_1435

; optimize OK (A8LIBGADG), line = 378

	lda BS
	sta BC
l_1435
	jmp l_1447
l_141E

; optimize OK (A8LIBGADG), line = 382

	lda BK
	cmp #$87
	jeq l_147Dx
	cmp #$07
	jeq l_147Dx
	cmp #$8F
	jeq l_147Dx
	cmp #$0F
	jne l_147D
l_147Dx

; optimize FAIL (0, A8LIBGADG), line = 385

	inc BC

; optimize OK (A8LIBGADG), line = 386

	lda BS
	cmp BC
	jcs l_1496

; optimize OK (A8LIBGADG), line = 388

	lda #$01
	sta BC
l_1496
	jmp l_14A6
l_147D

; optimize OK (A8LIBGADG), line = 392

	lda BK
	cmp #$1C
	jne l_14B8

; optimize OK (A8LIBGADG), line = 394

	lda #$FD
	sta RESULT

; optimize OK (A8LIBGADG), line = 395

	lda #$01
	sta BF
	jmp l_14CA
l_14B8

; optimize OK (A8LIBGADG), line = 398

	lda BK
	cmp #$2C
	jne l_14DC

; optimize OK (A8LIBGADG), line = 400

	lda #$FE
	sta RESULT

; optimize OK (A8LIBGADG), line = 401

	lda #$01
	sta BF
	jmp l_14EE
l_14DC

; optimize OK (A8LIBGADG), line = 404

	lda BK
	cmp #$21
	jne l_1500

; optimize OK (A8LIBGADG), line = 406

	lda BC
	sta RESULT
	jmp l_1510
l_1500

; optimize OK (A8LIBGADG), line = 409

	lda BK
	cmp #$0C
	jne l_1522

; optimize OK (A8LIBGADG), line = 411

	lda BC
	sta RESULT

; optimize OK (A8LIBGADG), line = 412

	lda #$01
	sta BF
l_1522
l_1510
l_14EE
l_14CA
l_14A6
l_1447
l_13E3
l_12BD

; optimize OK (A8LIBGADG), line = 316

	lda BF
	jeq l_12BE
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$0EE5
X	= DATAORIGIN+$0EE6
Y	= DATAORIGIN+$0EE7
BD	= DATAORIGIN+$0EE8
BE	= DATAORIGIN+$0EE9
BI	= DATAORIGIN+$0EEA
BS	= DATAORIGIN+$0EEB
adr.PS	= [DATAORIGIN+$0EEC] .array [1] .word
.var PS	= adr.PS .word
RESULT	= DATAORIGIN+$0EEE
BF	= DATAORIGIN+$0EEF
BL	= DATAORIGIN+$0EF0
BK	= DATAORIGIN+$0EF1
BC	= DATAORIGIN+$0EF2
XP	= DATAORIGIN+$0EF3
YP	= DATAORIGIN+$0EF4

@VarData	= BN
@VarDataSize	= 15

	rts						; ret
.endl

.local	GSPIN						; FUNCTION

; optimize OK (A8LIBGADG), line = 437

	lda #$00
	sta BF

; optimize OK (A8LIBGADG), line = 440

	lda BI
	sta BD

; optimize OK (A8LIBGADG), line = 443

	lda BM
	cmp #$FB
	jcc l_1558

; optimize OK (A8LIBGADG), line = 445

	lda #$FA
	sta BM
l_1558

; optimize OK (A8LIBGADG), line = 449

	lda BE
	jne l_1571

; optimize OK (A8LIBGADG), line = 451

	lda BD
	jsr A8LIBSTR.BYTETOSTR3
	inx
	lda A8LIBSTR.BYTETOSTR3.RESULT
	sta @move.src
	lda A8LIBSTR.BYTETOSTR3.RESULT+1
	sta @move.src+1
	@moveSTRING CL #5
	dex

; optimize OK (A8LIBGADG), line = 452

	lda #$01
	sta BF
l_1571

; --- WhileProlog
	jmp l_157E
l_157F

; optimize OK (A8LIBGADG), line = 459

	lda BD
	jsr A8LIBSTR.BYTETOSTR3
	inx
	lda A8LIBSTR.BYTETOSTR3.RESULT
	sta @move.src
	lda A8LIBSTR.BYTETOSTR3.RESULT+1
	sta @move.src+1
	@moveSTRING CL #5

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 460

	mva CL :STACKORIGIN,x
	mva CL+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva Y :STACKORIGIN,x
	inx
	mva X :STACKORIGIN,x
	inx
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (A8LIBGADG), line = 463

	lda BE
	cmp #$01
	jne l_15A2

; optimize OK (A8LIBGADG), line = 466

	lda #$00
	jsr A8LIBMISC.WAITKCX
	lda A8LIBMISC.WAITKCX.RESULT
	sta BK

; optimize OK (A8LIBGADG), line = 469

	cmp #$86
	jeq l_15DEx
	cmp #$06
	jeq l_15DEx
	cmp #$8F
	jeq l_15DEx
	cmp #$0F
	jne l_15DE
l_15DEx

; optimize OK (A8LIBGADG), line = 472

	lda BD
	jeq l_15F1

; optimize FAIL (0, A8LIBGADG), line = 474

	dec BD
l_15F1

; optimize OK (A8LIBGADG), line = 476

	lda BD
	cmp BL
	jcs l_160C

; optimize OK (A8LIBGADG), line = 478

	lda BL
	sta BD
l_160C
	jmp l_161E
l_15DE

; optimize OK (A8LIBGADG), line = 481

	lda BK
	cmp #$87
	jeq l_1654x
	cmp #$07
	jeq l_1654x
	cmp #$8E
	jeq l_1654x
	cmp #$0E
	jne l_1654
l_1654x

; optimize FAIL (0, A8LIBGADG), line = 484

	inc BD

; optimize OK (A8LIBGADG), line = 485

	lda BM
	cmp BD
	jcs l_166D

; optimize OK (A8LIBGADG), line = 487

	sta BD
l_166D
	jmp l_167F
l_1654

; optimize OK (A8LIBGADG), line = 490

	lda BK
	cmp #$1C
	jne l_1691

; optimize OK (A8LIBGADG), line = 492

	lda #$FD
	sta RESULT

; optimize OK (A8LIBGADG), line = 493

	lda #$01
	sta BF

; optimize OK (A8LIBGADG), line = 494

	lda BI
	jsr A8LIBSTR.BYTETOSTR3
	inx
	lda A8LIBSTR.BYTETOSTR3.RESULT
	sta @move.src
	lda A8LIBSTR.BYTETOSTR3.RESULT+1
	sta @move.src+1
	@moveSTRING CL #5
	dex
	jmp l_16A7
l_1691

; optimize OK (A8LIBGADG), line = 496

	lda BK
	cmp #$2C
	jne l_16B9

; optimize OK (A8LIBGADG), line = 498

	lda #$FE
	sta RESULT

; optimize OK (A8LIBGADG), line = 499

	lda #$01
	sta BF

; optimize OK (A8LIBGADG), line = 500

	lda BI
	jsr A8LIBSTR.BYTETOSTR3
	inx
	lda A8LIBSTR.BYTETOSTR3.RESULT
	sta @move.src
	lda A8LIBSTR.BYTETOSTR3.RESULT+1
	sta @move.src+1
	@moveSTRING CL #5
	dex
	jmp l_16CF
l_16B9

; optimize OK (A8LIBGADG), line = 502

	lda BK
	cmp #$0C
	jne l_16E1

; optimize OK (A8LIBGADG), line = 504

	lda BD
	sta RESULT

; optimize OK (A8LIBGADG), line = 505

	lda #$01
	sta BF

; optimize OK (A8LIBGADG), line = 506

	lda BD
	jsr A8LIBSTR.BYTETOSTR3
	inx
	lda A8LIBSTR.BYTETOSTR3.RESULT
	sta @move.src
	lda A8LIBSTR.BYTETOSTR3.RESULT+1
	sta @move.src+1
	@moveSTRING CL #5
	dex
l_16E1
l_16CF
l_16A7
l_167F
l_161E
l_15A2
l_157E

; optimize OK (A8LIBGADG), line = 456

	lda BF
	jeq l_157F

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 512

	inx
	mva CL :STACKORIGIN,x
	mva CL+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva Y :STACKORIGIN,x
	inx
	mva X :STACKORIGIN,x
	inx
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$0EF6
X	= DATAORIGIN+$0EF7
Y	= DATAORIGIN+$0EF8
BL	= DATAORIGIN+$0EF9
BM	= DATAORIGIN+$0EFA
BI	= DATAORIGIN+$0EFB
BE	= DATAORIGIN+$0EFC
RESULT	= DATAORIGIN+$0EFD
BD	= DATAORIGIN+$0EFE
BK	= DATAORIGIN+$0EFF
BF	= DATAORIGIN+$0F00
adr.CL	= [DATAORIGIN+$0F01] .array [5]
.var CL	= adr.CL .word

@VarData	= BN
@VarDataSize	= 15

	rts						; ret
.endl

.local	GINPUT						; FUNCTION

; optimize OK (A8LIBGADG), line = 534

	lda #$00
	sta RESULT

; optimize OK (A8LIBGADG), line = 535

	sta BD

; optimize OK (A8LIBGADG), line = 536

	sta BE

; optimize OK (A8LIBGADG), line = 537

	sta BF

; optimize OK (A8LIBGADG), line = 540

	ldy PS+1
	sty :bp+1
	ldy PS
	lda (:bp),y
	sta BZ

; optimize OK (A8LIBGADG), line = 543

	ldy PS+1
	sty :bp+1
	ldy PS
	lda (:bp),y
	sta SYSTEM.SETLENGTH.LEN
	lda CE
	sta SYSTEM.SETLENGTH.S
	lda CE+1
	sta SYSTEM.SETLENGTH.S+1
	jsr SYSTEM.SETLENGTH

; optimize OK (A8LIBGADG), line = 544

	ldy PS+1
	sty :bp+1
	ldy PS
	lda (:bp),y
	sta SYSTEM.MOVE_048D.COUNT
	lda <adr.CE+$01
	sta SYSTEM.MOVE_048D.DEST
	lda >adr.CE+$01
	sta SYSTEM.MOVE_048D.DEST+1
	lda PS
	add #$01
	sta SYSTEM.MOVE_048D.SOURCE
	lda PS+1
	adc #$00
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; --- WhileProlog
	jmp l_1729
l_172A

; optimize OK (A8LIBGADG), line = 550

	lda CD
	sta SYSTEM.SETLENGTH.S
	lda CD+1
	sta SYSTEM.SETLENGTH.S+1
	lda BS
	sta SYSTEM.SETLENGTH.LEN
	jsr SYSTEM.SETLENGTH

; optimize OK (A8LIBGADG), line = 551

	lda <adr.CD+$01
	sta SYSTEM.MOVE_048D.DEST
	lda >adr.CD+$01
	sta SYSTEM.MOVE_048D.DEST+1
	lda BD
	add #$01
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda <adr.CE
	add :STACKORIGIN+11
	sta SYSTEM.MOVE_048D.SOURCE
	lda >adr.CE
	adc :STACKORIGIN+STACKWIDTH+11
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda BS
	sta SYSTEM.MOVE_048D.COUNT
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize OK (A8LIBGADG), line = 554

	lda BE
	sub BD
	sta BI

; optimize OK (A8LIBGADG), line = 555

	lda BS
	sub #$01
	cmp BI
	jcs l_1760

; optimize OK (A8LIBGADG), line = 557

	ldy BS
	dey
	sty BI
l_1760

; optimize OK (A8LIBGADG), line = 559

	ldy BI
	lda adr.CD+$01,y
	eor #$80
	sta adr.CD+$01,y

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 562

	inx
	mva CD :STACKORIGIN,x
	mva CD+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva Y :STACKORIGIN,x
	inx
	mva X :STACKORIGIN,x
	inx
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (A8LIBGADG), line = 565

	lda #$00
	jsr A8LIBMISC.WAITKCX
	lda A8LIBMISC.WAITKCX.RESULT
	sta BK

; optimize OK (A8LIBGADG), line = 568

	jsr A8LIBMISC.IKC2ATA
	lda A8LIBMISC.IKC2ATA.RESULT
	sta BC

; optimize OK (A8LIBGADG), line = 571

	lda BK
	cmp #$87
	jne l_17B0

; optimize FAIL (0, A8LIBGADG), line = 573

	inc BE
	jmp l_17BE
l_17B0

; optimize OK (A8LIBGADG), line = 576

	lda BK
	cmp #$86
	jne l_17D0

; optimize OK (A8LIBGADG), line = 579

	lda BE
	jeq l_17E3

; optimize FAIL (0, A8LIBGADG), line = 581

	dec BE
l_17E3
	jmp l_17F3
l_17D0

; optimize OK (A8LIBGADG), line = 585

	lda BK
	cmp #$FE
	jne l_1805

; optimize OK (A8LIBGADG), line = 587

	lda #$00
	sta BE
	jmp l_1813
l_1805

; optimize OK (A8LIBGADG), line = 590

	lda BK
	cmp #$EA
	jne l_1825

; optimize OK (A8LIBGADG), line = 592

	lda BZ
	sta BE
	jmp l_1835
l_1825

; optimize OK (A8LIBGADG), line = 596

	lda BK
	cmp #$34
	jne l_1847

; optimize OK (A8LIBGADG), line = 599

	lda BE
	jeq l_185A

; optimize FAIL (0, A8LIBGADG), line = 601

	dec BE

; optimize OK (A8LIBGADG), line = 602

	ldy BE
	lda #$20
	sta adr.CE+$01,y
l_185A
	jmp l_1875
l_1847

; optimize OK (A8LIBGADG), line = 606

	lda BK
	cmp #$74
	jne l_1887

; optimize OK (A8LIBGADG), line = 608

	lda <adr.CE+$01
	sta SYSTEM.FILLCHAR_048B.A
	lda >adr.CE+$01
	sta SYSTEM.FILLCHAR_048B.A+1
	lda BZ
	sta SYSTEM.FILLCHAR_048B.COUNT
	lda #$00
	sta SYSTEM.FILLCHAR_048B.COUNT+1
	lda #$20
	sta SYSTEM.FILLCHAR_048B.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_048B
	m@INLINE
	.endl
	jmp l_1897
l_1887

; optimize OK (A8LIBGADG), line = 611

	lda BK
	cmp #$B4
	jne l_18A9

; optimize OK (A8LIBGADG), line = 614

	lda CE
	sta SYSTEM.SETLENGTH.S
	lda CE+1
	sta SYSTEM.SETLENGTH.S+1
	lda BZ
	sta SYSTEM.SETLENGTH.LEN
	jsr SYSTEM.SETLENGTH

; optimize OK (A8LIBGADG), line = 615

	ldy BE
	iny
	sty BL
	ldy BZ
	dey
	sty @FORTMP_18C2_0

l_18C5
; --- ForToDoCondition
	lda @FORTMP_18C2_0:#$00
	cmp BL
	jcc l_18D3

; optimize OK (A8LIBGADG), line = 617

	ldy BL
	lda adr.CE+$01,y
	sta adr.CE,y

; --- ForToDoEpilog
	inc BL
	jne l_18C5
l_18D3

; optimize OK (A8LIBGADG), line = 621

	ldy BZ
	lda #$20
	sta adr.CE,y
	jmp l_18F8
l_18A9

; optimize OK (A8LIBGADG), line = 624

	lda BK
	cmp #$B7
	jne l_190A

; optimize OK (A8LIBGADG), line = 627

	lda BE
	cmp BZ
	jcs l_191F

; optimize OK (A8LIBGADG), line = 630

	lda BZ
	sta BL

; --- WhileProlog
	jmp l_1928
l_1929

; optimize OK (A8LIBGADG), line = 633

	ldy BL
	lda adr.CE,y
	sta adr.CE+$01,y

; optimize FAIL (0, A8LIBGADG), line = 634

	dec BL
l_1928

; optimize OK (A8LIBGADG), line = 631

	lda BE
	add #$01
	sta :STACKORIGIN+10
	lda BL
	cmp :STACKORIGIN+10
	jcc l_1929

; optimize OK (A8LIBGADG), line = 638

	ldy BE
	lda #$20
	sta adr.CE+$01,y
l_191F
	jmp l_1965
l_190A

; optimize OK (A8LIBGADG), line = 642

	lda BK
	cmp #$0C
	jne l_1977

; optimize OK (A8LIBGADG), line = 645

	lda adr.CE
	sta SYSTEM.SETLENGTH.LEN
	lda PS
	sta SYSTEM.SETLENGTH.S
	lda PS+1
	sta SYSTEM.SETLENGTH.S+1
	jsr SYSTEM.SETLENGTH

; optimize OK (A8LIBGADG), line = 646

	lda adr.CE
	sta SYSTEM.MOVE_048D.COUNT
	lda PS
	add #$01
	sta SYSTEM.MOVE_048D.DEST
	lda PS+1
	adc #$00
	sta SYSTEM.MOVE_048D.DEST+1
	lda <adr.CE+$01
	sta SYSTEM.MOVE_048D.SOURCE
	lda >adr.CE+$01
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize OK (A8LIBGADG), line = 647

	lda #$01
	sta RESULT

; optimize OK (A8LIBGADG), line = 648

	sta BF
	jmp l_198F
l_1977

; optimize OK (A8LIBGADG), line = 651

	lda BK
	cmp #$1C
	jne l_19A1

; optimize OK (A8LIBGADG), line = 654

	ldy PS+1
	sty :bp+1
	ldy PS
	lda (:bp),y
	sta SYSTEM.SETLENGTH.LEN
	lda CE
	sta SYSTEM.SETLENGTH.S
	lda CE+1
	sta SYSTEM.SETLENGTH.S+1
	jsr SYSTEM.SETLENGTH

; optimize OK (A8LIBGADG), line = 655

	lda adr.CE
	sta SYSTEM.MOVE_048D.COUNT
	lda <adr.CE+$01
	sta SYSTEM.MOVE_048D.DEST
	lda >adr.CE+$01
	sta SYSTEM.MOVE_048D.DEST+1
	lda PS
	add #$01
	sta SYSTEM.MOVE_048D.SOURCE
	lda PS+1
	adc #$00
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize OK (A8LIBGADG), line = 656

	lda #$FD
	sta RESULT

; optimize OK (A8LIBGADG), line = 657

	lda #$01
	sta BF
	jmp l_19B9
l_19A1

; optimize OK (A8LIBGADG), line = 660

	lda BK
	cmp #$2C
	jne l_19CB

; optimize OK (A8LIBGADG), line = 663

	ldy PS+1
	sty :bp+1
	ldy PS
	lda (:bp),y
	sta SYSTEM.SETLENGTH.LEN
	lda CE
	sta SYSTEM.SETLENGTH.S
	lda CE+1
	sta SYSTEM.SETLENGTH.S+1
	jsr SYSTEM.SETLENGTH

; optimize OK (A8LIBGADG), line = 664

	lda adr.CE
	sta SYSTEM.MOVE_048D.COUNT
	lda <adr.CE+$01
	sta SYSTEM.MOVE_048D.DEST
	lda >adr.CE+$01
	sta SYSTEM.MOVE_048D.DEST+1
	lda PS
	add #$01
	sta SYSTEM.MOVE_048D.SOURCE
	lda PS+1
	adc #$00
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize OK (A8LIBGADG), line = 665

	lda #$FE
	sta RESULT

; optimize OK (A8LIBGADG), line = 666

	lda #$01
	sta BF
	jmp l_19E3
l_19CB

; optimize OK (A8LIBGADG), line = 670

	lda BC
	cmp #$01
	jcc l_1A01
	lda #$BF
	cmp BC
	jcc l_1A01

; optimize OK (A8LIBGADG), line = 673

	lda #$00
	sta BP

; optimize OK (A8LIBGADG), line = 677

	ldy #1
	lda BT
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda BC
	cmp #$1C
	bcc @+
	beq @+
	dey
@
	sty :STACKORIGIN+10
	ldy #1
	lda BC
	cmp #$20
	bcs @+
	dey
@
	tya
	ora :STACKORIGIN+10
	and :STACKORIGIN+9
	jeq l_1A30

; optimize OK (A8LIBGADG), line = 679

	lda #$01
	sta BP
	jmp l_1A3E
l_1A30

; optimize OK (A8LIBGADG), line = 682

	lda BT
	cmp #$01
	jne l_1A50

; optimize OK (A8LIBGADG), line = 684

	ldy #1
	lda BC
	cmp #$20
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda BC
	cmp #$30
	bcs @+
	dey
@
	sty :STACKORIGIN+10
	ldy #1
	lda #$39
	cmp BC
	bcs @+
	dey
@
	tya
	and :STACKORIGIN+10
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda BC
	cmp #$41
	bcs @+
	dey
@
	sty :STACKORIGIN+10
	ldy #1
	lda #$5A
	cmp BC
	bcs @+
	dey
@
	tya
	and :STACKORIGIN+10
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda BC
	cmp #$61
	bcs @+
	dey
@
	sty :STACKORIGIN+10
	ldy #1
	lda #$7A
	cmp BC
	bcs @+
	dey
@
	tya
	and :STACKORIGIN+10
	ora :STACKORIGIN+9
	jeq l_1AAB

; optimize OK (A8LIBGADG), line = 688

	lda #$01
	sta BP
l_1AAB
	jmp l_1ABB
l_1A50

; optimize OK (A8LIBGADG), line = 692

	lda BT
	cmp #$02
	jne l_1ACD

; optimize OK (A8LIBGADG), line = 694

	ldy #1
	lda BC
	cmp #$20
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda BC
	cmp #$41
	bcs @+
	dey
@
	sty :STACKORIGIN+10
	ldy #1
	lda #$5A
	cmp BC
	bcs @+
	dey
@
	tya
	and :STACKORIGIN+10
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda BC
	cmp #$61
	bcs @+
	dey
@
	sty :STACKORIGIN+10
	ldy #1
	lda #$7A
	cmp BC
	bcs @+
	dey
@
	tya
	and :STACKORIGIN+10
	ora :STACKORIGIN+9
	jeq l_1B10

; optimize OK (A8LIBGADG), line = 697

	lda #$01
	sta BP
l_1B10
	jmp l_1B20
l_1ACD

; optimize OK (A8LIBGADG), line = 701

	lda BT
	cmp #$03
	jne l_1B32

; optimize OK (A8LIBGADG), line = 703

	ldy #1
	lda BC
	cmp #$2D
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda BC
	cmp #$2E
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda BC
	cmp #$30
	bcs @+
	dey
@
	sty :STACKORIGIN+10
	ldy #1
	lda #$39
	cmp BC
	bcs @+
	dey
@
	tya
	and :STACKORIGIN+10
	ora :STACKORIGIN+9
	jeq l_1B69

; optimize OK (A8LIBGADG), line = 706

	lda #$01
	sta BP
l_1B69
l_1B32
l_1B20
l_1ABB
l_1A3E

; optimize OK (A8LIBGADG), line = 711

	lda BP
	jeq l_1B7E

; optimize OK (A8LIBGADG), line = 713

	ldy BE
	lda BC
	sta adr.CE+$01,y

; optimize FAIL (0, A8LIBGADG), line = 714

	inc BE
l_1B7E
l_1A01
l_19E3
l_19B9
l_198F
l_1965
l_18F8
l_1897
l_1875
l_1835
l_1813
l_17F3
l_17BE

; optimize OK (A8LIBGADG), line = 721

	lda BZ
	sub #$01
	cmp BE
	jcs l_1BAC

; optimize OK (A8LIBGADG), line = 723

	ldy BZ
	dey
	sty BE
l_1BAC

; optimize OK (A8LIBGADG), line = 727

	lda BE
	cmp BS
	jcc l_1BCD

; optimize OK (A8LIBGADG), line = 729

	sub BS
	add #$01
	sta BD
	jmp l_1BE7
l_1BCD

; optimize OK (A8LIBGADG), line = 732

	lda BE
	cmp BS
	jcs l_1BFB

; optimize OK (A8LIBGADG), line = 734

	lda #$00
	sta BD
l_1BFB
l_1BE7
l_1729

; optimize OK (A8LIBGADG), line = 547

	lda BF
	jeq l_172A

; optimize OK (A8LIBGADG), line = 739

	lda CD
	sta SYSTEM.SETLENGTH.S
	lda CD+1
	sta SYSTEM.SETLENGTH.S+1
	lda BS
	sta SYSTEM.SETLENGTH.LEN
	jsr SYSTEM.SETLENGTH

; optimize OK (A8LIBGADG), line = 740

	lda <adr.CD+$01
	sta SYSTEM.MOVE_048D.DEST
	lda >adr.CD+$01
	sta SYSTEM.MOVE_048D.DEST+1
	lda <adr.CE+$01
	sta SYSTEM.MOVE_048D.SOURCE
	lda >adr.CE+$01
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda BS
	sta SYSTEM.MOVE_048D.COUNT
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 741

	inx
	mva CD :STACKORIGIN,x
	mva CD+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva Y :STACKORIGIN,x
	inx
	mva X :STACKORIGIN,x
	inx
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$0F06
X	= DATAORIGIN+$0F07
Y	= DATAORIGIN+$0F08
BT	= DATAORIGIN+$0F09
BS	= DATAORIGIN+$0F0A
PS	= DATAORIGIN+$0F0B
RESULT	= DATAORIGIN+$0F0D
BF	= DATAORIGIN+$0F0E
BP	= DATAORIGIN+$0F0F
BD	= DATAORIGIN+$0F10
BE	= DATAORIGIN+$0F11
BK	= DATAORIGIN+$0F12
BC	= DATAORIGIN+$0F13
BL	= DATAORIGIN+$0F14
BZ	= DATAORIGIN+$0F15
BI	= DATAORIGIN+$0F16
adr.CD	= [DATAORIGIN+$0F17] .array [42]
.var CD	= adr.CD .word
adr.CE	= [DATAORIGIN+$0F41] .array [129]
.var CE	= adr.CE .word

@VarData	= BN
@VarDataSize	= 187

	rts						; ret
.endl

; ------------------------------------------------------------

.endl							; UNIT A8LIBGADG

; ------------------------------------------------------------

.local	A8LIBMENU					; UNIT

.local	MENUV						; FUNCTION

; optimize OK (A8LIBMENU), line = 56

	lda #$00
	sta BF

; optimize OK (A8LIBMENU), line = 59

	lda BS
	sta RESULT

; --- WhileProlog
	jmp l_1C34
l_1C35

; optimize OK (A8LIBMENU), line = 65

	lda #$00
	sta BL
	ldy BC
	dey
	sty @FORTMP_1C41_0

l_1C44
; --- ForToDoCondition
	lda @FORTMP_1C41_0:#$00
	cmp BL
	jcc l_1C52

; optimize OK (A8LIBMENU), line = 67

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda BL
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add PS
	sta :bp2
	lda PS+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta @move.src
	iny
	lda (:bp2),y
	sta @move.src+1
	mwy TMPSTR :bp2
	ldy #$00
	mva:rne (@move.src),y (:bp2),y+

; optimize OK (A8LIBMENU), line = 68

	lda adr.TMPSTR
	sta SYSTEM.SETLENGTH.LEN
	lda CL
	sta SYSTEM.SETLENGTH.S
	lda CL+1
	sta SYSTEM.SETLENGTH.S+1
	jsr SYSTEM.SETLENGTH

; optimize OK (A8LIBMENU), line = 69

	lda adr.CL
	sta SYSTEM.MOVE_048D.COUNT
	lda <adr.CL+$01
	sta SYSTEM.MOVE_048D.DEST
	lda >adr.CL+$01
	sta SYSTEM.MOVE_048D.DEST+1
	lda <adr.TMPSTR+$01
	sta SYSTEM.MOVE_048D.SOURCE
	lda >adr.TMPSTR+$01
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize OK (A8LIBMENU), line = 72

	lda BL
	add #$01
	cmp RESULT
	jne l_1C75

; optimize OK (A8LIBMENU), line = 74

	lda #$01
	sta TMP
	jmp l_1C83
l_1C75

; optimize OK (A8LIBMENU), line = 77

	lda #$00
	sta TMP
l_1C83

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBMENU), line = 79

	inx
	mva CL :STACKORIGIN,x
	mva CL+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva TMP :STACKORIGIN,x
	inx
	lda Y
	add BL
	sta :STACKORIGIN,x
	inx
	mva X :STACKORIGIN,x
	inx
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; --- ForToDoEpilog
	inc BL
	jne l_1C44
l_1C52

; optimize OK (A8LIBMENU), line = 83

	lda #$00
	jsr A8LIBMISC.WAITKCX
	lda A8LIBMISC.WAITKCX.RESULT
	sta BK

; optimize OK (A8LIBMENU), line = 86

	cmp #$8F
	jeq l_1CDCx
	cmp #$0F
	jeq l_1CDCx
	cmp #$87
	jeq l_1CDCx
	cmp #$07
	jne l_1CDC
l_1CDCx

; optimize FAIL (0, A8LIBMENU), line = 89

	inc RESULT

; optimize OK (A8LIBMENU), line = 92

	lda BC
	cmp RESULT
	jcs l_1CF5

; optimize OK (A8LIBMENU), line = 94

	lda #$01
	sta RESULT
l_1CF5
	jmp l_1D05
l_1CDC

; optimize OK (A8LIBMENU), line = 97

	lda BK
	cmp #$8E
	jeq l_1D3Bx
	cmp #$0E
	jeq l_1D3Bx
	cmp #$86
	jeq l_1D3Bx
	cmp #$06
	jne l_1D3B
l_1D3Bx

; optimize FAIL (0, A8LIBMENU), line = 100

	dec RESULT

; optimize OK (A8LIBMENU), line = 103

	lda RESULT
	cmp #$01
	jcs l_1D52

; optimize OK (A8LIBMENU), line = 105

	lda BC
	sta RESULT
l_1D52
l_1D3B
l_1D05

; optimize OK (A8LIBMENU), line = 110

	lda RESULT
	sta BL

; optimize OK (A8LIBMENU), line = 113

	lda BK
	cmp #$1C
	jne l_1D75

; optimize OK (A8LIBMENU), line = 115

	lda #$FD
	sta RESULT

; optimize OK (A8LIBMENU), line = 116

	lda #$01
	sta BF
	jmp l_1D87
l_1D75

; optimize OK (A8LIBMENU), line = 119

	lda BK
	cmp #$2C
	jne l_1D99

; optimize OK (A8LIBMENU), line = 121

	lda #$FE
	sta RESULT

; optimize OK (A8LIBMENU), line = 122

	lda #$01
	sta BF
	jmp l_1DAB
l_1D99

; optimize OK (A8LIBMENU), line = 125

	lda BK
	cmp #$0C
	jne l_1DBD

; optimize OK (A8LIBMENU), line = 127

	lda #$01
	sta BF
l_1DBD
l_1DAB
l_1D87
l_1C34

; optimize OK (A8LIBMENU), line = 62

	lda BF
	jeq l_1C35

; optimize OK (A8LIBMENU), line = 132

	lda BI
	jne l_1DDF

; optimize OK (A8LIBMENU), line = 134

	lda BL
	sub #$01
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda PS
	add :STACKORIGIN+9
	sta :bp2
	lda PS+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta @move.src
	iny
	lda (:bp2),y
	sta @move.src+1
	mwy TMPSTR :bp2
	ldy #$00
	mva:rne (@move.src),y (:bp2),y+

; optimize OK (A8LIBMENU), line = 135

	lda adr.TMPSTR
	sta SYSTEM.SETLENGTH.LEN
	lda CL
	sta SYSTEM.SETLENGTH.S
	lda CL+1
	sta SYSTEM.SETLENGTH.S+1
	jsr SYSTEM.SETLENGTH

; optimize OK (A8LIBMENU), line = 136

	lda adr.CL
	sta SYSTEM.MOVE_048D.COUNT
	lda <adr.CL+$01
	sta SYSTEM.MOVE_048D.DEST
	lda >adr.CL+$01
	sta SYSTEM.MOVE_048D.DEST+1
	lda <adr.TMPSTR+$01
	sta SYSTEM.MOVE_048D.SOURCE
	lda >adr.TMPSTR+$01
	sta SYSTEM.MOVE_048D.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_048D.COUNT+1
	.local +MAIN.SYSTEM.MOVE_048D
	m@INLINE
	.endl

; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBMENU), line = 137

	inx
	mva CL :STACKORIGIN,x
	mva CL+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	lda Y
	add BL
	sta :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr subAL_CL
	mva X :STACKORIGIN,x
	inx
	mva BN :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT
l_1DDF
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$0FC3
X	= DATAORIGIN+$0FC4
Y	= DATAORIGIN+$0FC5
BI	= DATAORIGIN+$0FC6
BS	= DATAORIGIN+$0FC7
BC	= DATAORIGIN+$0FC8
adr.PS	= [DATAORIGIN+$0FC9] .array [1] .word
.var PS	= adr.PS .word
RESULT	= DATAORIGIN+$0FCB
BF	= DATAORIGIN+$0FCC
BL	= DATAORIGIN+$0FCD
BK	= DATAORIGIN+$0FCE
TMP	= DATAORIGIN+$0FCF
adr.CL	= [DATAORIGIN+$0FD0] .array [40]
.var CL	= adr.CL .word
adr.TMPSTR	= [DATAORIGIN+$0FF8] .array [256]
.var TMPSTR	= adr.TMPSTR .word

@VarData	= BN
@VarDataSize	= 308

	rts						; ret
.endl

; ------------------------------------------------------------

.endl							; UNIT A8LIBMENU

.local	FORMINPUT					; FUNCTION

; optimize OK (appdemo.pas), line = 38

	lda #$00
	sta RESULT

; optimize OK (appdemo.pas), line = 39

	lda #$01
	sta BRA

; optimize OK (appdemo.pas), line = 40

	sta BRB

; optimize OK (appdemo.pas), line = 41

	lda #$02
	sta BCHAP

; optimize OK (appdemo.pas), line = 42

	lda #$01
	sta BCHBP

; optimize OK (appdemo.pas), line = 43

	lda #$02
	sta BCHCP

; optimize OK (appdemo.pas), line = 44

	lda #$0A
	sta BV
	ldy #256-15
	mva:rne CODEORIGIN+$006D+15-256,y adr.CF+15-256,y+

; optimize OK (appdemo.pas), line = 48

	lda #$1C
	sta adr.CF+$05

; optimize OK (appdemo.pas), line = 49

	lda #$1D
	sta adr.CF+$06

; optimize OK (appdemo.pas), line = 50

	lda #$1E
	sta adr.CF+$07

; optimize OK (appdemo.pas), line = 51

	lda #$1F
	sta adr.CF+$08

; optimize OK (appdemo.pas), line = 52

	lda #$7F
	sta adr.CF+$09

; optimize OK (appdemo.pas), line = 53

	lda #$1B
	sta adr.CF+$0A

; optimize OK (appdemo.pas), line = 54

	lda #$03
	sta adr.CF+$0B
	ldy #256-15
	mva:rne CODEORIGIN+$007D+15-256,y adr.CI+15-256,y+

; optimize OK (appdemo.pas), line = 57

	lda #$1E
	sta adr.CI+$05

; optimize OK (appdemo.pas), line = 58

	lda #$1F
	sta adr.CI+$06

; optimize OK (appdemo.pas), line = 59

	lda #$1B
	sta adr.CI+$07

; optimize OK (appdemo.pas), line = 60

	lda #$03
	sta adr.CI+$08
	ldy #256-15
	mva:rne CODEORIGIN+$006D+15-256,y adr.CR+15-256,y+

; optimize OK (appdemo.pas), line = 63

	lda #$1C
	sta adr.CR+$05

; optimize OK (appdemo.pas), line = 64

	lda #$1D
	sta adr.CR+$06

; optimize OK (appdemo.pas), line = 65

	lda #$1E
	sta adr.CR+$07

; optimize OK (appdemo.pas), line = 66

	lda #$1F
	sta adr.CR+$08

; optimize OK (appdemo.pas), line = 67

	lda #$7F
	sta adr.CR+$09

; optimize OK (appdemo.pas), line = 68

	lda #$1B
	sta adr.CR+$0A

; optimize OK (appdemo.pas), line = 69

	lda #$03
	sta adr.CR+$0C
	ldy #256-15
	mva:rne CODEORIGIN+$008D+15-256,y adr.CX+15-256,y+

; optimize OK (appdemo.pas), line = 72

	lda #$7F
	sta adr.CX+$07

; optimize OK (appdemo.pas), line = 73

	lda #$1B
	sta adr.CX+$08

; optimize OK (appdemo.pas), line = 74

	lda #$03
	sta adr.CX+$09
	ldy #256-41
	mva:rne CODEORIGIN+$009D+41-256,y adr.CA+41-256,y+
	ldy #256-41
	mva:rne CODEORIGIN+$00C7+41-256,y adr.CB+41-256,y+
	ldy #256-41
	mva:rne CODEORIGIN+$00F1+41-256,y adr.CC+41-256,y+
	ldy #256-41
	mva:rne CODEORIGIN+$011B+41-256,y adr.CD+41-256,y+

; optimize OK (appdemo.pas), line = 81

	lda #$14
	sta adr.CD+$01

; optimize OK (appdemo.pas), line = 82

	sta adr.CD+$17

; optimize OK (appdemo.pas), line = 85

	lda BRA
	sta BRAP

; optimize OK (appdemo.pas), line = 86

	lda BRB
	sta BRBP

; optimize OK (appdemo.pas), line = 87

	lda BV
	sta BVP

; optimize OK (appdemo.pas), line = 90

	lda #$02
	sta A8LIBWIN.WOPEN.X
	lda #$04
	sta A8LIBWIN.WOPEN.Y
	lda #$24
	sta A8LIBWIN.WOPEN.W
	lda #$12
	sta A8LIBWIN.WOPEN.H
	lda #$00
	sta A8LIBWIN.WOPEN.BT
	jsr A8LIBWIN.WOPEN
	lda A8LIBWIN.WOPEN.RESULT
	sta BW1

; optimize FAIL ('A8LIBWIN.WORN', appdemo.pas), line = 91

	inx
	mva #$45 :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FB :STACKORIGIN,x
	inx
	mva #$F1 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WORN

; optimize FAIL ('A8LIBWIN.WORN', appdemo.pas), line = 92

	inx
	mva #$51 :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FC :STACKORIGIN,x
	inx
	mva #$F1 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WORN

; optimize FAIL ('A8LIBWIN.WORN', appdemo.pas), line = 93

	inx
	mva CF :STACKORIGIN,x
	mva CF+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FB :STACKORIGIN,x
	inx
	mva #$F2 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WORN

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 95

	inx
	mva #$57 :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	sta :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 96

	inx
	mva #$64 :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	sta :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 97

	inx
	mva #$6C :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 98

	inx
	mva #$74 :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$04 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 99

	inx
	mva #$7C :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$05 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 100

	inx
	mva #$84 :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$06 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (appdemo.pas), line = 101

	lda BW1
	sta A8LIBGADG.GSPIN.BN
	lda #$08
	sta A8LIBGADG.GSPIN.X
	lda #$06
	sta A8LIBGADG.GSPIN.Y
	lda #$00
	sta A8LIBGADG.GSPIN.BL
	lda #$64
	sta A8LIBGADG.GSPIN.BM
	lda BVP
	sta A8LIBGADG.GSPIN.BI
	lda #$00
	sta A8LIBGADG.GSPIN.BE
	jsr A8LIBGADG.GSPIN

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 103

	inx
	mva #$8C :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$08 :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (appdemo.pas), line = 104

	lda BW1
	sta A8LIBGADG.GRADIO.BN
	lda #$02
	sta A8LIBGADG.GRADIO.X
	lda #$09
	sta A8LIBGADG.GRADIO.Y
	lda #$01
	sta A8LIBGADG.GRADIO.BD
	lda #$00
	sta A8LIBGADG.GRADIO.BE
	lda BRAP
	sta A8LIBGADG.GRADIO.BI
	lda #$03
	sta A8LIBGADG.GRADIO.BS
	lda #$F8
	sta A8LIBGADG.GRADIO.PS
	lda #$24
	sta A8LIBGADG.GRADIO.PS+1
	jsr A8LIBGADG.GRADIO

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 106

	inx
	mva #$9F :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$0B :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (appdemo.pas), line = 107

	lda BW1
	sta A8LIBGADG.GRADIO.BN
	lda #$02
	sta A8LIBGADG.GRADIO.X
	lda #$0C
	sta A8LIBGADG.GRADIO.Y
	lda #$02
	sta A8LIBGADG.GRADIO.BD
	lda #$00
	sta A8LIBGADG.GRADIO.BE
	lda BRBP
	sta A8LIBGADG.GRADIO.BI
	lda #$03
	sta A8LIBGADG.GRADIO.BS
	lda #$FE
	sta A8LIBGADG.GRADIO.PS
	lda #$24
	sta A8LIBGADG.GRADIO.PS+1
	jsr A8LIBGADG.GRADIO

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 109

	inx
	mva #$B2 :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$0B :STACKORIGIN,x
	inx
	mva #$14 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 110

	inx
	mva #$BF :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$0C :STACKORIGIN,x
	inx
	mva #$19 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 111

	inx
	mva #$C5 :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$0D :STACKORIGIN,x
	inx
	mva #$19 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 112

	inx
	mva #$CC :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$0E :STACKORIGIN,x
	inx
	mva #$19 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (appdemo.pas), line = 113

	lda BW1
	sta A8LIBGADG.GCHECK.BN
	lda #$15
	sta A8LIBGADG.GCHECK.X
	lda #$0C
	sta A8LIBGADG.GCHECK.Y
	lda #$00
	sta A8LIBGADG.GCHECK.BI
	lda BCHAP
	sta A8LIBGADG.GCHECK.BD
	jsr A8LIBGADG.GCHECK

; optimize OK (appdemo.pas), line = 114

	lda BW1
	sta A8LIBGADG.GCHECK.BN
	lda #$15
	sta A8LIBGADG.GCHECK.X
	lda #$0D
	sta A8LIBGADG.GCHECK.Y
	lda #$00
	sta A8LIBGADG.GCHECK.BI
	lda BCHBP
	sta A8LIBGADG.GCHECK.BD
	jsr A8LIBGADG.GCHECK

; optimize OK (appdemo.pas), line = 115

	lda BW1
	sta A8LIBGADG.GCHECK.BN
	lda #$15
	sta A8LIBGADG.GCHECK.X
	lda #$0E
	sta A8LIBGADG.GCHECK.Y
	lda #$00
	sta A8LIBGADG.GCHECK.BI
	lda BCHCP
	sta A8LIBGADG.GCHECK.BD
	jsr A8LIBGADG.GCHECK

; optimize OK (appdemo.pas), line = 117

	lda BW1
	sta A8LIBGADG.GBUTTON.BN
	lda #$15
	sta A8LIBGADG.GBUTTON.X
	lda #$10
	sta A8LIBGADG.GBUTTON.Y
	lda #$00
	sta A8LIBGADG.GBUTTON.BD
	lda #$02
	sta A8LIBGADG.GBUTTON.BS
	lda #$F4
	sta A8LIBGADG.GBUTTON.PA
	lda #$24
	sta A8LIBGADG.GBUTTON.PA+1
	jsr A8LIBGADG.GBUTTON

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 120

	inx
	mva CA :STACKORIGIN,x
	mva CA+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva #$08 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 121

	inx
	mva CB :STACKORIGIN,x
	mva CB+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	inx
	mva #$08 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 122

	inx
	mva CC :STACKORIGIN,x
	mva CC+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$04 :STACKORIGIN,x
	inx
	mva #$08 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 123

	inx
	mva CD :STACKORIGIN,x
	mva CD+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$05 :STACKORIGIN,x
	inx
	mva #$08 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; --- RepeatUntilProlog
l_1F9E

; optimize FAIL ('A8LIBWIN.WORN', appdemo.pas), line = 129

	inx
	mva CI :STACKORIGIN,x
	mva CI+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FB :STACKORIGIN,x
	inx
	mva #$F2 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WORN

; optimize OK (appdemo.pas), line = 132

	lda BW1
	sta A8LIBGADG.GINPUT.BN
	lda #$08
	sta A8LIBGADG.GINPUT.X
	lda #$02
	sta A8LIBGADG.GINPUT.Y
	lda #$03
	sta A8LIBGADG.GINPUT.BT
	lda #$1B
	sta A8LIBGADG.GINPUT.BS
	lda CA
	sta A8LIBGADG.GINPUT.PS
	lda CA+1
	sta A8LIBGADG.GINPUT.PS+1
	jsr A8LIBGADG.GINPUT
	lda A8LIBGADG.GINPUT.RESULT
	sta BA

; optimize OK (appdemo.pas), line = 133

	lda BW1
	sta A8LIBGADG.GINPUT.BN
	lda #$08
	sta A8LIBGADG.GINPUT.X
	lda #$03
	sta A8LIBGADG.GINPUT.Y
	lda #$02
	sta A8LIBGADG.GINPUT.BT
	lda #$1B
	sta A8LIBGADG.GINPUT.BS
	lda CB
	sta A8LIBGADG.GINPUT.PS
	lda CB+1
	sta A8LIBGADG.GINPUT.PS+1
	jsr A8LIBGADG.GINPUT
	lda A8LIBGADG.GINPUT.RESULT
	sta BB

; optimize OK (appdemo.pas), line = 134

	lda BW1
	sta A8LIBGADG.GINPUT.BN
	lda #$08
	sta A8LIBGADG.GINPUT.X
	lda #$04
	sta A8LIBGADG.GINPUT.Y
	lda #$01
	sta A8LIBGADG.GINPUT.BT
	lda #$1B
	sta A8LIBGADG.GINPUT.BS
	lda CC
	sta A8LIBGADG.GINPUT.PS
	lda CC+1
	sta A8LIBGADG.GINPUT.PS+1
	jsr A8LIBGADG.GINPUT
	lda A8LIBGADG.GINPUT.RESULT
	sta BC

; optimize OK (appdemo.pas), line = 135

	lda BW1
	sta A8LIBGADG.GINPUT.BN
	lda #$08
	sta A8LIBGADG.GINPUT.X
	lda #$05
	sta A8LIBGADG.GINPUT.Y
	lda #$00
	sta A8LIBGADG.GINPUT.BT
	lda #$1B
	sta A8LIBGADG.GINPUT.BS
	lda CD
	sta A8LIBGADG.GINPUT.PS
	lda CD+1
	sta A8LIBGADG.GINPUT.PS+1
	jsr A8LIBGADG.GINPUT
	lda A8LIBGADG.GINPUT.RESULT
	sta BD

; optimize OK (appdemo.pas), line = 138

	lda BW1
	sta A8LIBGADG.GSPIN.BN
	lda #$08
	sta A8LIBGADG.GSPIN.X
	lda #$06
	sta A8LIBGADG.GSPIN.Y
	lda #$00
	sta A8LIBGADG.GSPIN.BL
	lda #$64
	sta A8LIBGADG.GSPIN.BM
	lda BVP
	sta A8LIBGADG.GSPIN.BI
	lda #$01
	sta A8LIBGADG.GSPIN.BE
	jsr A8LIBGADG.GSPIN
	lda A8LIBGADG.GSPIN.RESULT
	sta BV

; optimize OK (appdemo.pas), line = 139

	cmp #$FD
	jeq l_2007
	cmp #$FE
	jeq l_2007

; optimize OK (appdemo.pas), line = 141

	sta BVP
l_2007

; optimize FAIL ('A8LIBWIN.WORN', appdemo.pas), line = 146

	inx
	mva CR :STACKORIGIN,x
	mva CR+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FB :STACKORIGIN,x
	inx
	mva #$F2 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WORN

; optimize OK (appdemo.pas), line = 149

	lda BW1
	sta A8LIBGADG.GRADIO.BN
	lda #$02
	sta A8LIBGADG.GRADIO.X
	lda #$09
	sta A8LIBGADG.GRADIO.Y
	lda #$01
	sta A8LIBGADG.GRADIO.BD
	sta A8LIBGADG.GRADIO.BE
	lda BRAP
	sta A8LIBGADG.GRADIO.BI
	lda #$03
	sta A8LIBGADG.GRADIO.BS
	lda #$F8
	sta A8LIBGADG.GRADIO.PS
	lda #$24
	sta A8LIBGADG.GRADIO.PS+1
	jsr A8LIBGADG.GRADIO
	lda A8LIBGADG.GRADIO.RESULT
	sta BRA

; optimize OK (appdemo.pas), line = 152

	cmp #$FD
	jeq l_2046
	cmp #$FE
	jeq l_2046

; optimize OK (appdemo.pas), line = 154

	sta BRAP
l_2046

; optimize OK (appdemo.pas), line = 158

	lda BW1
	sta A8LIBGADG.GRADIO.BN
	lda #$02
	sta A8LIBGADG.GRADIO.X
	lda #$09
	sta A8LIBGADG.GRADIO.Y
	lda #$01
	sta A8LIBGADG.GRADIO.BD
	lda #$00
	sta A8LIBGADG.GRADIO.BE
	lda BRAP
	sta A8LIBGADG.GRADIO.BI
	lda #$03
	sta A8LIBGADG.GRADIO.BS
	lda #$F8
	sta A8LIBGADG.GRADIO.PS
	lda #$24
	sta A8LIBGADG.GRADIO.PS+1
	jsr A8LIBGADG.GRADIO

; optimize OK (appdemo.pas), line = 161

	lda BW1
	sta A8LIBGADG.GRADIO.BN
	lda #$02
	sta A8LIBGADG.GRADIO.X
	lda #$0C
	sta A8LIBGADG.GRADIO.Y
	lda #$02
	sta A8LIBGADG.GRADIO.BD
	lda #$01
	sta A8LIBGADG.GRADIO.BE
	lda BRBP
	sta A8LIBGADG.GRADIO.BI
	lda #$03
	sta A8LIBGADG.GRADIO.BS
	lda #$FE
	sta A8LIBGADG.GRADIO.PS
	lda #$24
	sta A8LIBGADG.GRADIO.PS+1
	jsr A8LIBGADG.GRADIO
	lda A8LIBGADG.GRADIO.RESULT
	sta BRB

; optimize OK (appdemo.pas), line = 164

	cmp #$FD
	jeq l_208A
	cmp #$FE
	jeq l_208A

; optimize OK (appdemo.pas), line = 166

	sta BRBP
l_208A

; optimize OK (appdemo.pas), line = 170

	lda BW1
	sta A8LIBGADG.GRADIO.BN
	lda #$02
	sta A8LIBGADG.GRADIO.X
	lda #$0C
	sta A8LIBGADG.GRADIO.Y
	lda #$02
	sta A8LIBGADG.GRADIO.BD
	lda #$00
	sta A8LIBGADG.GRADIO.BE
	lda BRBP
	sta A8LIBGADG.GRADIO.BI
	lda #$03
	sta A8LIBGADG.GRADIO.BS
	lda #$FE
	sta A8LIBGADG.GRADIO.PS
	lda #$24
	sta A8LIBGADG.GRADIO.PS+1
	jsr A8LIBGADG.GRADIO

; optimize FAIL ('A8LIBWIN.WORN', appdemo.pas), line = 174

	inx
	mva CX :STACKORIGIN,x
	mva CX+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FB :STACKORIGIN,x
	inx
	mva #$F2 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WORN

; --- RepeatUntilProlog
l_20A9

; optimize OK (appdemo.pas), line = 179

	lda BW1
	sta A8LIBGADG.GCHECK.BN
	lda #$15
	sta A8LIBGADG.GCHECK.X
	lda #$0C
	sta A8LIBGADG.GCHECK.Y
	lda #$01
	sta A8LIBGADG.GCHECK.BI
	lda BCHAP
	sta A8LIBGADG.GCHECK.BD
	jsr A8LIBGADG.GCHECK
	lda A8LIBGADG.GCHECK.RESULT
	sta BCHA

; optimize OK (appdemo.pas), line = 182

	cmp #$FD
	jeq l_20D4
	cmp #$FE
	jeq l_20D4

; optimize OK (appdemo.pas), line = 184

	sta BCHAP
l_20D4

; optimize OK (appdemo.pas), line = 186

	lda BCHA
	cmp #$FD
	jeq l_20A9x
	cmp #$FE
	jne l_20A9
l_20A9x

; --- RepeatUntilProlog
l_20F7

; optimize OK (appdemo.pas), line = 191

	lda BW1
	sta A8LIBGADG.GCHECK.BN
	lda #$15
	sta A8LIBGADG.GCHECK.X
	lda #$0D
	sta A8LIBGADG.GCHECK.Y
	lda #$01
	sta A8LIBGADG.GCHECK.BI
	lda BCHBP
	sta A8LIBGADG.GCHECK.BD
	jsr A8LIBGADG.GCHECK
	lda A8LIBGADG.GCHECK.RESULT
	sta BCHB

; optimize OK (appdemo.pas), line = 194

	cmp #$FD
	jeq l_2122
	cmp #$FE
	jeq l_2122

; optimize OK (appdemo.pas), line = 196

	sta BCHBP
l_2122

; optimize OK (appdemo.pas), line = 198

	lda BCHB
	cmp #$FD
	jeq l_20F7x
	cmp #$FE
	jne l_20F7
l_20F7x

; --- RepeatUntilProlog
l_2145

; optimize OK (appdemo.pas), line = 203

	lda BW1
	sta A8LIBGADG.GCHECK.BN
	lda #$15
	sta A8LIBGADG.GCHECK.X
	lda #$0E
	sta A8LIBGADG.GCHECK.Y
	lda #$01
	sta A8LIBGADG.GCHECK.BI
	lda BCHCP
	sta A8LIBGADG.GCHECK.BD
	jsr A8LIBGADG.GCHECK
	lda A8LIBGADG.GCHECK.RESULT
	sta BCHC

; optimize OK (appdemo.pas), line = 206

	cmp #$FD
	jeq l_2170
	cmp #$FE
	jeq l_2170

; optimize OK (appdemo.pas), line = 208

	sta BCHCP
l_2170

; optimize OK (appdemo.pas), line = 210

	lda BCHC
	cmp #$FD
	jeq l_2145x
	cmp #$FE
	jne l_2145
l_2145x

; optimize FAIL ('A8LIBWIN.WORN', appdemo.pas), line = 213

	inx
	mva CF :STACKORIGIN,x
	mva CF+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FB :STACKORIGIN,x
	inx
	mva #$F2 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WORN

; optimize OK (appdemo.pas), line = 216

	lda BW1
	sta A8LIBGADG.GBUTTON.BN
	lda #$15
	sta A8LIBGADG.GBUTTON.X
	lda #$10
	sta A8LIBGADG.GBUTTON.Y
	lda #$01
	sta A8LIBGADG.GBUTTON.BD
	lda #$02
	sta A8LIBGADG.GBUTTON.BS
	lda #$F4
	sta A8LIBGADG.GBUTTON.PA
	lda #$24
	sta A8LIBGADG.GBUTTON.PA+1
	jsr A8LIBGADG.GBUTTON
	lda A8LIBGADG.GBUTTON.RESULT
	sta BM

; optimize OK (appdemo.pas), line = 217

	lda BW1
	sta A8LIBGADG.GBUTTON.BN
	lda #$15
	sta A8LIBGADG.GBUTTON.X
	lda #$10
	sta A8LIBGADG.GBUTTON.Y
	lda #$00
	sta A8LIBGADG.GBUTTON.BD
	lda #$02
	sta A8LIBGADG.GBUTTON.BS
	lda #$F4
	sta A8LIBGADG.GBUTTON.PA
	lda #$24
	sta A8LIBGADG.GBUTTON.PA+1
	jsr A8LIBGADG.GBUTTON

; optimize OK (appdemo.pas), line = 218

	lda BM
	cmp #$FE
	jeq l_1F9E

; optimize OK (appdemo.pas), line = 221

	cmp #$01
	jne l_21CE

; optimize OK (appdemo.pas), line = 223

	lda #$01
	sta RESULT

; optimize FAIL ('A8LIBGADG.GALERT', appdemo.pas), line = 224

	inx
	mva #$D4 :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	jsr A8LIBGADG.GALERT
l_21CE

; optimize OK (appdemo.pas), line = 228

	lda BW1
	jsr A8LIBWIN.WCLOSE
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$10F9
BRA	= DATAORIGIN+$10FA
BRB	= DATAORIGIN+$10FB
BCHAP	= DATAORIGIN+$10FC
BCHBP	= DATAORIGIN+$10FD
BCHCP	= DATAORIGIN+$10FE
BV	= DATAORIGIN+$10FF
BW1	= DATAORIGIN+$1100
BM	= DATAORIGIN+$1101
BA	= DATAORIGIN+$1102
BB	= DATAORIGIN+$1103
BC	= DATAORIGIN+$1104
BD	= DATAORIGIN+$1105
BVP	= DATAORIGIN+$1106
BRAP	= DATAORIGIN+$1107
BRBP	= DATAORIGIN+$1108
BCHA	= DATAORIGIN+$1109
BCHB	= DATAORIGIN+$110A
BCHC	= DATAORIGIN+$110B
adr.CA	= [DATAORIGIN+$110C] .array [42]
.var CA	= adr.CA .word
adr.CB	= [DATAORIGIN+$1136] .array [42]
.var CB	= adr.CB .word
adr.CC	= [DATAORIGIN+$1160] .array [42]
.var CC	= adr.CC .word
adr.CD	= [DATAORIGIN+$118A] .array [42]
.var CD	= adr.CD .word
adr.CF	= [DATAORIGIN+$11B4] .array [16]
.var CF	= adr.CF .word
adr.CI	= [DATAORIGIN+$11C4] .array [16]
.var CI	= adr.CI .word
adr.CR	= [DATAORIGIN+$11D4] .array [16]
.var CR	= adr.CR .word
adr.CX	= [DATAORIGIN+$11E4] .array [16]
.var CX	= adr.CX .word
adr.PAB	= CODEORIGIN+$04F4
.var PAB	= adr.PAB .word
adr.PRA	= CODEORIGIN+$04F8
.var PRA	= adr.PRA .word
adr.PRB	= CODEORIGIN+$04FE
.var PRB	= adr.PRB .word

@VarData	= BRA
@VarDataSize	= 250

	rts						; ret
.endl

.local	PROGTEST					; PROCEDURE

; optimize OK (appdemo.pas), line = 241

	lda #$09
	sta A8LIBWIN.WOPEN.X
	lda #$02
	sta A8LIBWIN.WOPEN.Y
	lda #$14
	sta A8LIBWIN.WOPEN.W
	lda #$0E
	sta A8LIBWIN.WOPEN.H
	lda #$00
	sta A8LIBWIN.WOPEN.BT
	jsr A8LIBWIN.WOPEN
	lda A8LIBWIN.WOPEN.RESULT
	sta BW1

; optimize FAIL ('A8LIBWIN.WORN', appdemo.pas), line = 242

	inx
	mva #$FA :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FB :STACKORIGIN,x
	inx
	mva #$F1 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WORN

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 243

	inx
	mva #$02 :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	sta :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 244

	inx
	mva #$11 :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (appdemo.pas), line = 247

	lda #$07
	sta A8LIBWIN.WOPEN.X
	lda #$12
	sta A8LIBWIN.WOPEN.Y
	lda #$18
	sta A8LIBWIN.WOPEN.W
	lda #$04
	sta A8LIBWIN.WOPEN.H
	lda #$00
	sta A8LIBWIN.WOPEN.BT
	jsr A8LIBWIN.WOPEN
	lda A8LIBWIN.WOPEN.RESULT
	sta BW2

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 248

	inx
	mva #$20 :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva BW2 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (appdemo.pas), line = 251

	lda BW2
	sta A8LIBGADG.GPROG.BN
	lda #$02
	sta A8LIBGADG.GPROG.X
	sta A8LIBGADG.GPROG.Y
	lda #$00
	sta A8LIBGADG.GPROG.BS
	jsr A8LIBGADG.GPROG

; optimize OK (appdemo.pas), line = 254

	lda #$00
	sta BL

l_2220
; --- ForToDoCondition
	lda BL
	cmp #$0A
	jcs l_222E

; optimize OK (appdemo.pas), line = 257

	jsr A8LIBWIN.WSTAT
	lda A8LIBWIN.WSTAT.RESULT
	sta BS

; optimize OK (appdemo.pas), line = 260

	lda #$03
	add BL
	sta A8LIBWIN.WPOS.Y
	lda BW1
	sta A8LIBWIN.WPOS.BN
	lda #$06
	sta A8LIBWIN.WPOS.X
	jsr A8LIBWIN.WPOS

; optimize OK (appdemo.pas), line = 261

	lda BL
	add #$30
	sta A8LIBWIN.WPUT.X
	lda BW1
	sta A8LIBWIN.WPUT.BN
	jsr A8LIBWIN.WPUT

; optimize OK (appdemo.pas), line = 264

	lda BS
	cmp #$01
	jne l_225E

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 266

	inx
	mva #$2B :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	lda #$03
	add BL
	sta :STACKORIGIN,x
	inx
	mva #$08 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT
	jmp l_2276
l_225E

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 269

	inx
	mva #$31 :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	lda #$03
	add BL
	sta :STACKORIGIN,x
	inx
	mva #$08 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT
l_2276

; optimize OK (appdemo.pas), line = 273

	lda BL
	add #$01
	sta :eax
	lda #$00
	adc #$00
	sta :eax+1
	lda #$0A
	sta :ecx
	jsr idivAX_CL.MOD
	lda :ztmp8
	sta IV
	lda #$00
	sta IV+1
	tay
	lda IV
	asl @
	rol IV+1
	asl @
	rol IV+1
	add IV
	sta IV
	tya
	adc IV+1
	asl IV
	rol @
	sta IV+1

; optimize OK (appdemo.pas), line = 274

	ora IV
	jne l_22AC

; optimize OK (appdemo.pas), line = 276

	lda #$64
	sta IV
	lda #$00
	sta IV+1
l_22AC

; optimize OK (appdemo.pas), line = 278

	lda BW2
	sta A8LIBGADG.GPROG.BN
	lda #$02
	sta A8LIBGADG.GPROG.X
	sta A8LIBGADG.GPROG.Y
	lda IV
	sta A8LIBGADG.GPROG.BS
	jsr A8LIBGADG.GPROG

; optimize OK (appdemo.pas), line = 281

	lda #$E8
	sta CRT.DELAY.COUNT
	lda #$03
	sta CRT.DELAY.COUNT+1
	jsr CRT.DELAY

; --- ForToDoEpilog
	inc BL
	jne l_2220
l_222E

; optimize FAIL ('A8LIBGADG.GALERT', appdemo.pas), line = 284

	inx
	mva #$37 :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	jsr A8LIBGADG.GALERT

; optimize OK (appdemo.pas), line = 287

	lda BW2
	jsr A8LIBWIN.WCLOSE

; optimize OK (appdemo.pas), line = 288

	lda BW1
	jsr A8LIBWIN.WCLOSE

; ------------------------------------------------------------

BW1	= DATAORIGIN+$11F4
BW2	= DATAORIGIN+$11F5
BL	= DATAORIGIN+$11F6
BS	= DATAORIGIN+$11F7
IV	= DATAORIGIN+$11F8

@VarData	= BW1
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ABOUT						; PROCEDURE

; optimize OK (appdemo.pas), line = 301

	lda #$01
	sta A8LIBWIN.WOPEN.X
	lda #$06
	sta A8LIBWIN.WOPEN.Y
	lda #$26
	sta A8LIBWIN.WOPEN.W
	lda #$0F
	sta A8LIBWIN.WOPEN.H
	lda #$00
	sta A8LIBWIN.WOPEN.BT
	jsr A8LIBWIN.WOPEN
	lda A8LIBWIN.WOPEN.RESULT
	sta BW1

; optimize FAIL ('A8LIBWIN.WORN', appdemo.pas), line = 302

	inx
	mva #$53 :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FB :STACKORIGIN,x
	inx
	mva #$F1 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WORN

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 303

	inx
	mva #$5A :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 304

	inx
	mva #$6C :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 305

	inx
	mva #$7E :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 306

	inx
	mva #$A0 :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$05 :STACKORIGIN,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 307

	inx
	mva #$BC :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$06 :STACKORIGIN,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 308

	inx
	mva #$D4 :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$07 :STACKORIGIN,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 309

	inx
	mva #$E7 :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$09 :STACKORIGIN,x
	inx
	mva #$04 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 310

	inx
	mva #$00 :STACKORIGIN,x
	mva #$23 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$0A :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 311

	inx
	mva #$1C :STACKORIGIN,x
	mva #$23 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$0B :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 312

	inx
	mva #$41 :STACKORIGIN,x
	mva #$23 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$0D :STACKORIGIN,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (appdemo.pas), line = 315

	lda #$00
	jsr A8LIBMISC.WAITKCX

; optimize OK (appdemo.pas), line = 318

	lda BW1
	jsr A8LIBWIN.WCLOSE

; ------------------------------------------------------------

BW1	= DATAORIGIN+$11FA

@VarData	= BW1
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SUBMENU						; PROCEDURE

; optimize OK (appdemo.pas), line = 334

	lda #$00
	sta BD

; optimize OK (appdemo.pas), line = 337

	lda #$10
	sta A8LIBWIN.WOPEN.X
	lda #$0A
	sta A8LIBWIN.WOPEN.Y
	lda #$0E
	sta A8LIBWIN.WOPEN.W
	lda #$05
	sta A8LIBWIN.WOPEN.H
	lda #$00
	sta A8LIBWIN.WOPEN.BT
	jsr A8LIBWIN.WOPEN
	lda A8LIBWIN.WOPEN.RESULT
	sta BW1

; optimize FAIL ('A8LIBWIN.WORN', appdemo.pas), line = 338

	inx
	mva #$71 :STACKORIGIN,x
	mva #$23 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FB :STACKORIGIN,x
	inx
	mva #$F1 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WORN

; --- WhileProlog
	jmp l_2350
l_2351

; optimize OK (appdemo.pas), line = 344

	lda BW1
	sta A8LIBMENU.MENUV.BN
	lda #$01
	sta A8LIBMENU.MENUV.X
	sta A8LIBMENU.MENUV.Y
	lda #$00
	sta A8LIBMENU.MENUV.BI
	lda #$01
	sta A8LIBMENU.MENUV.BS
	lda #$03
	sta A8LIBMENU.MENUV.BC
	lda #$04
	sta A8LIBMENU.MENUV.PS
	lda #$25
	sta A8LIBMENU.MENUV.PS+1
	jsr A8LIBMENU.MENUV
	lda A8LIBMENU.MENUV.RESULT
	sta BC

; optimize OK (appdemo.pas), line = 347

	sta @CASETMP_0005
	cmp #$01
	jne l_2369
@

; optimize FAIL ('A8LIBGADG.GALERT', appdemo.pas), line = 348

	inx
	mva #$7B :STACKORIGIN,x
	mva #$23 :STACKORIGIN+STACKWIDTH,x
	jsr A8LIBGADG.GALERT
	jmp a_0005
l_2369
	cmp #$02
	jne l_2374
@

; optimize FAIL ('A8LIBGADG.GALERT', appdemo.pas), line = 349

	inx
	mva #$93 :STACKORIGIN,x
	mva #$23 :STACKORIGIN+STACKWIDTH,x
	jsr A8LIBGADG.GALERT
	jmp a_0005
l_2374
	cmp #$03
	jne l_237F
@

; optimize FAIL ('A8LIBGADG.GALERT', appdemo.pas), line = 350

	inx
	mva #$AB :STACKORIGIN,x
	mva #$23 :STACKORIGIN+STACKWIDTH,x
	jsr A8LIBGADG.GALERT
	jmp a_0005
l_237F
	cmp #$FD
	jne l_238A
@

; optimize OK (appdemo.pas), line = 351

	lda #$01
	sta BD

l_238A
a_0005
l_2350

; optimize OK (appdemo.pas), line = 341

	lda BD
	jeq l_2351

; optimize OK (appdemo.pas), line = 356

	lda BW1
	jsr A8LIBWIN.WCLOSE

; ------------------------------------------------------------

BW1	= DATAORIGIN+$11FB
BC	= DATAORIGIN+$11FC
BD	= DATAORIGIN+$11FD
adr.PCM	= CODEORIGIN+$0504
.var PCM	= adr.PCM .word
@CASETMP_0005	= DATAORIGIN+$11FE

@VarData	= BW1
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_043B

; optimize OK (appdemo.pas), line = 368

	lda #$00
	sta BD

; optimize FAIL ('A8LIBWIN.WINIT', appdemo.pas), line = 371

	jsr A8LIBWIN.WINIT

; optimize OK (appdemo.pas), line = 372

	lda #$0E
	jsr A8LIBWIN.WBACK

; optimize OK (appdemo.pas), line = 375

	lda #$00
	sta A8LIBWIN.WOPEN.X
	sta A8LIBWIN.WOPEN.Y
	lda #$28
	sta A8LIBWIN.WOPEN.W
	lda #$03
	sta A8LIBWIN.WOPEN.H
	lda #$01
	sta A8LIBWIN.WOPEN.BT
	jsr A8LIBWIN.WOPEN
	lda A8LIBWIN.WOPEN.RESULT
	sta BW1

; optimize FAIL ('A8LIBWIN.WPRINT', appdemo.pas), line = 376

	inx
	mva #$13 :STACKORIGIN,x
	mva #$24 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (appdemo.pas), line = 379

	lda #$0C
	sta A8LIBWIN.WOPEN.X
	lda #$07
	sta A8LIBWIN.WOPEN.Y
	lda #$10
	sta A8LIBWIN.WOPEN.W
	lda #$09
	sta A8LIBWIN.WOPEN.H
	lda #$00
	sta A8LIBWIN.WOPEN.BT
	jsr A8LIBWIN.WOPEN
	lda A8LIBWIN.WOPEN.RESULT
	sta BW2

; optimize FAIL ('A8LIBWIN.WORN', appdemo.pas), line = 380

	inx
	mva #$2E :STACKORIGIN,x
	mva #$24 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva #$F1 :STACKORIGIN,x
	inx
	mva BW2 :STACKORIGIN,x
	jsr A8LIBWIN.WORN

; --- WhileProlog
	jmp l_23CE
l_23CF

; optimize OK (appdemo.pas), line = 386

	lda BW2
	sta A8LIBMENU.MENUV.BN
	lda #$01
	sta A8LIBMENU.MENUV.X
	lda #$02
	sta A8LIBMENU.MENUV.Y
	lda #$01
	sta A8LIBMENU.MENUV.BI
	sta A8LIBMENU.MENUV.BS
	lda #$05
	sta A8LIBMENU.MENUV.BC
	lda #$0A
	sta A8LIBMENU.MENUV.PS
	lda #$25
	sta A8LIBMENU.MENUV.PS+1
	jsr A8LIBMENU.MENUV
	lda A8LIBMENU.MENUV.RESULT
	sta BC

; optimize OK (appdemo.pas), line = 389

	sta @CASETMP_0006
	cmp #$01
	jne l_23E7
@

; optimize FAIL ('FORMINPUT', appdemo.pas), line = 390

	jsr FORMINPUT
	inx
	mva FORMINPUT.RESULT :STACKORIGIN,x
	dex
	jmp a_0006
l_23E7
	cmp #$02
	jne l_23F1
@

; optimize FAIL ('PROGTEST', appdemo.pas), line = 391

	jsr PROGTEST
	jmp a_0006
l_23F1
	cmp #$03
	jne l_23FB
@

; optimize FAIL ('SUBMENU', appdemo.pas), line = 392

	jsr SUBMENU
	jmp a_0006
l_23FB
	cmp #$04
	jne l_2405
@

; optimize FAIL ('ABOUT', appdemo.pas), line = 393

	jsr ABOUT
	jmp a_0006
l_2405
	cmp #$05
	jne l_240F
@

; optimize OK (appdemo.pas), line = 394

	lda #$01
	sta BD

l_240F
a_0006

; optimize OK (appdemo.pas), line = 398

	lda BC
	cmp #$FD
	jne l_242E

; optimize OK (appdemo.pas), line = 400

	lda #$01
	sta BD
l_242E
l_23CE

; optimize OK (appdemo.pas), line = 383

	lda BD
	jeq l_23CF

; optimize OK (appdemo.pas), line = 405

	lda BW2
	jsr A8LIBWIN.WCLOSE

; optimize OK (appdemo.pas), line = 406

	lda BW1
	jsr A8LIBWIN.WCLOSE

; ------------------------------------------------------------

BW1	= DATAORIGIN+$11FF
BW2	= DATAORIGIN+$1200
BC	= DATAORIGIN+$1201
BD	= DATAORIGIN+$1202
adr.PCM	= CODEORIGIN+$050A
.var PCM	= adr.PCM .word
@CASETMP_0006	= DATAORIGIN+$1203
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.A8DEFINES.@UnitInit
	jsr MAIN.A8DEFINES.@UnitInit
	.fi

	.ifdef MAIN.A8DEFWIN.@UnitInit
	jsr MAIN.A8DEFWIN.@UnitInit
	.fi

	.ifdef MAIN.A8LIBMISC.@UnitInit
	jsr MAIN.A8LIBMISC.@UnitInit
	.fi

	.ifdef MAIN.A8LIBSTR.@UnitInit
	jsr MAIN.A8LIBSTR.@UnitInit
	.fi

	.ifdef MAIN.DOS.@UnitInit
	jsr MAIN.DOS.@UnitInit
	.fi

	.ifdef MAIN.STRUTILS.@UnitInit
	jsr MAIN.STRUTILS.@UnitInit
	.fi

	.ifdef MAIN.SYSUTILS.@UnitInit
	jsr MAIN.SYSUTILS.@UnitInit
	.fi

	.ifdef MAIN.A8LIBWIN.@UnitInit
	jsr MAIN.A8LIBWIN.@UnitInit
	.fi

	.ifdef MAIN.A8LIBGADG.@UnitInit
	jsr MAIN.A8LIBGADG.@UnitInit
	.fi

	.ifdef MAIN.A8LIBMENU.@UnitInit
	jsr MAIN.A8LIBMENU.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.A8DEFINES) > 0
	.print 'A8DEFINES: ',MAIN.A8DEFINES,'..',MAIN.A8DEFINES+.SIZEOF(MAIN.A8DEFINES)-1
	eif

	ift .SIZEOF(MAIN.A8DEFWIN) > 0
	.print 'A8DEFWIN: ',MAIN.A8DEFWIN,'..',MAIN.A8DEFWIN+.SIZEOF(MAIN.A8DEFWIN)-1
	eif

	ift .SIZEOF(MAIN.A8LIBMISC) > 0
	.print 'A8LIBMISC: ',MAIN.A8LIBMISC,'..',MAIN.A8LIBMISC+.SIZEOF(MAIN.A8LIBMISC)-1
	eif

	ift .SIZEOF(MAIN.A8LIBSTR) > 0
	.print 'A8LIBSTR: ',MAIN.A8LIBSTR,'..',MAIN.A8LIBSTR+.SIZEOF(MAIN.A8LIBSTR)-1
	eif

	ift .SIZEOF(MAIN.DOS) > 0
	.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
	eif

	ift .SIZEOF(MAIN.STRUTILS) > 0
	.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
	eif

	ift .SIZEOF(MAIN.SYSUTILS) > 0
	.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
	eif

	ift .SIZEOF(MAIN.A8LIBWIN) > 0
	.print 'A8LIBWIN: ',MAIN.A8LIBWIN,'..',MAIN.A8LIBWIN+.SIZEOF(MAIN.A8LIBWIN)-1
	eif

	ift .SIZEOF(MAIN.A8LIBGADG) > 0
	.print 'A8LIBGADG: ',MAIN.A8LIBGADG,'..',MAIN.A8LIBGADG+.SIZEOF(MAIN.A8LIBGADG)-1
	eif

	ift .SIZEOF(MAIN.A8LIBMENU) > 0
	.print 'A8LIBMENU: ',MAIN.A8LIBMENU,'..',MAIN.A8LIBMENU+.SIZEOF(MAIN.A8LIBMENU)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 4612

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $05 $31 $2E $30 $2E $30 $00 $03  $20 $20 $20 $00 $04 $54 $52 $55  $45 $00 $05 $46 $41 $4C $53 $45
.by  $00 $06 $41 $6C $65 $72 $74 $21  $00 $04 $20 $4F $4B $20 $00 $03  $5B $20 $5D $00 $06 $5B $20 $4F
.by  $6B $20 $5D $00 $08 $5B $43 $61  $6E $63 $65 $6C $5D $00 $03 $4F  $6E $65 $00 $03 $54 $77 $6F $00
.by  $05 $54 $68 $72 $65 $65 $00 $08  $43 $68 $6F $69 $63 $65 $20 $41  $00 $08 $43 $68 $6F $69 $63 $65
.by  $20 $42 $00 $08 $43 $68 $6F $69  $63 $65 $20 $43 $00 $0E $4E $61  $76 $3A $20 $20 $20 $20 $20 $20
.by  $20 $20 $20 $20 $00 $0E $4E $61  $76 $3A $20 $20 $20 $20 $5E $63  $53 $5E $63 $45 $00 $0E $4E $61
.by  $76 $3A $58 $20 $20 $20 $20 $20  $20 $20 $20 $20 $00 $28 $2D $31  $30 $30 $2E $30 $30 $20 $20 $20
.by  $20 $20 $20 $20 $20 $20 $20 $20  $20 $20 $20 $20 $20 $20 $20 $20  $20 $20 $20 $20 $20 $20 $20 $20
.by  $20 $20 $20 $20 $20 $20 $00 $28  $54 $68 $69 $73 $20 $73 $74 $72  $69 $6E $67 $20 $68 $61 $73 $20
.by  $73 $6F $6D $65 $74 $68 $69 $6E  $67 $20 $74 $6F $20 $65 $64 $69  $74 $20 $69 $6E $20 $69 $74 $21
.by  $00 $28 $20 $20 $20 $20 $20 $20  $20 $20 $20 $20 $20 $20 $20 $20  $20 $20 $20 $20 $20 $20 $20 $20
.by  $20 $20 $20 $20 $20 $20 $20 $20  $20 $20 $20 $20 $20 $20 $20 $20  $20 $20 $00 $28 $20 $41 $6E $79
.by  $20 $63 $68 $61 $72 $61 $63 $74  $65 $72 $20 $73 $74 $72 $69 $6E  $67 $21 $20 $20 $20 $20 $20 $20
.by  $20 $20 $20 $20 $20 $20 $20 $20  $20 $20 $20 $20 $00 $0A $49 $6E  $70 $75 $74 $20 $46 $6F $72 $6D
.by  $00 $04 $45 $64 $69 $74 $00 $0B  $44 $61 $74 $61 $20 $46 $69 $65  $6C $64 $73 $00 $06 $4E $75 $6D
.by  $65 $72 $3A $00 $06 $41 $6C $70  $68 $61 $3A $00 $06 $41 $6C $4E  $75 $6D $3A $00 $06 $41 $6E $79
.by  $2E $2E $3A $00 $06 $53 $70 $69  $6E $2E $3A $00 $11 $52 $61 $64  $69 $6F $20 $42 $75 $74 $74 $6F
.by  $6E $73 $20 $28 $68 $29 $00 $11  $52 $61 $64 $69 $6F $20 $42 $75  $74 $74 $6F $6E $73 $20 $28 $76
.by  $29 $00 $0B $43 $68 $65 $63 $6B  $20 $42 $6F $78 $65 $73 $00 $04  $4D $69 $6C $6B $00 $05 $42 $72
.by  $65 $61 $64 $00 $06 $42 $75 $74  $74 $65 $72 $00 $24 $44 $6F $69  $6E $67 $20 $73 $6F $6D $65 $74
.by  $68 $69 $6E $67 $20 $77 $69 $74  $68 $20 $65 $6E $74 $65 $72 $65  $64 $20 $64 $61 $74 $61 $2E $2E
.by  $2E $00 $06 $53 $74 $61 $74 $75  $73 $00 $0D $57 $69 $6E $64 $6F  $77 $20 $53 $74 $61 $74 $75 $73
.by  $00 $0D $2D $2D $2D $2D $2D $2D  $20 $2D $2D $2D $2D $2D $2D $00  $09 $50 $72 $6F $67 $72 $65 $73
.by  $73 $3A $00 $04 $55 $73 $65 $64  $00 $04 $46 $72 $65 $65 $00 $1A  $20 $50 $72 $65 $73 $73 $20 $61
.by  $20 $6B $65 $79 $20 $74 $6F $20  $63 $6F $6E $74 $69 $6E $75 $65  $2E $20 $00 $05 $41 $62 $6F $75
.by  $74 $00 $10 $44 $65 $6D $6F $20  $41 $70 $70 $6C $69 $63 $61 $74  $69 $6F $6E $00 $10 $56 $65 $72
.by  $73 $69 $6F $6E $20 $31 $2E $30  $30 $2D $50 $41 $53 $00 $20 $28  $43 $29 $20 $32 $30 $32 $32 $20
.by  $20 $57 $61 $64 $65 $20 $52 $69  $70 $6B $6F $77 $73 $6B $69 $2C  $20 $61 $6D $61 $72 $6F $6B $00
.by  $1A $41 $70 $70 $6C $69 $63 $61  $74 $69 $6F $6E $20 $74 $6F $20  $64 $65 $6D $6F $6E $73 $74 $72
.by  $61 $74 $65 $00 $16 $74 $68 $65  $20 $4D $61 $64 $50 $61 $73 $63  $61 $6C $20 $6C $69 $62 $72 $61
.by  $72 $79 $2E $00 $11 $43 $6F $6E  $76 $65 $72 $74 $65 $64 $20 $66  $72 $6F $6D $20 $43 $2E $00 $17
.by  $56 $31 $2D $32 $30 $32 $31 $2D  $41 $74 $61 $72 $69 $38 $3A $20  $41 $63 $74 $69 $6F $6E $21 $00
.by  $1A $56 $31 $2D $43 $2D $32 $30  $32 $32 $2D $41 $74 $61 $72 $69  $38 $3A $20 $43 $20 $28 $43 $43
.by  $36 $35 $29 $00 $23 $56 $31 $2D  $50 $41 $53 $2D $32 $30 $32 $32  $2D $41 $74 $61 $72 $69 $38 $3A
.by  $20 $50 $41 $53 $20 $28 $4D $61  $64 $50 $61 $73 $63 $61 $6C $29  $00 $04 $20 $4F $6B $20 $00 $0C
.by  $20 $53 $75 $62 $2D $49 $74 $65  $6D $20 $31 $20 $00 $0C $20 $53  $75 $62 $2D $49 $74 $65 $6D $20
.by  $32 $20 $00 $0C $20 $53 $75 $62  $2D $49 $74 $65 $6D $20 $33 $20  $00 $08 $53 $75 $62 $2D $4D $65
.by  $6E $75 $00 $16 $20 $53 $75 $62  $2D $49 $74 $65 $6D $20 $31 $20  $73 $65 $6C $65 $63 $74 $65 $64
.by  $2E $20 $00 $16 $20 $53 $75 $62  $2D $49 $74 $65 $6D $20 $32 $20  $73 $65 $6C $65 $63 $74 $65 $64
.by  $2E $20 $00 $16 $20 $53 $75 $62  $2D $49 $74 $65 $6D $20 $33 $20  $73 $65 $6C $65 $63 $74 $65 $64
.by  $2E $20 $00 $0E $20 $49 $6E $70  $75 $74 $20 $46 $6F $72 $6D $20  $20 $20 $00 $0E $20 $50 $72 $6F
.by  $67 $72 $65 $73 $73 $20 $42 $61  $72 $20 $00 $0E $20 $53 $75 $62  $2D $4D $65 $6E $75 $20 $20 $20
.by  $20 $20 $00 $0E $20 $41 $62 $6F  $75 $74 $20 $20 $20 $20 $20 $20  $20 $20 $00 $0E $20 $45 $78 $69
.by  $74 $20 $20 $20 $20 $20 $20 $20  $20 $20 $00 $19 $44 $20 $45 $20  $4D $20 $4F $20 $4E $20 $53 $20
.by  $54 $20 $52 $20 $41 $20 $54 $20  $49 $20 $4F $20 $4E $00 $04 $4D  $65 $6E $75 $00 $6C $6A $3B $C7
.by  $C7 $6B $2B $2A $6F $C7 $70 $75  $9B $69 $2D $3D $76 $C7 $63 $C7  $C7 $62 $78 $7A $34 $C7 $33 $36
.by  $C7 $35 $32 $31 $2C $20 $2E $6E  $C7 $6D $2F $C7 $72 $C7 $65 $79  $C7 $74 $77 $71 $39 $C7 $30 $37
.by  $C7 $38 $3C $3E $66 $68 $64 $C7  $C7 $67 $73 $61 $4C $4A $3A $C7  $C7 $4B $5C $5E $4F $C7 $50 $55
.by  $C7 $49 $5F $7C $56 $C7 $43 $C7  $C7 $42 $58 $5A $24 $C7 $23 $26  $C7 $25 $22 $21 $5B $20 $5D $4E
.by  $C7 $4D $3F $C7 $52 $C7 $45 $59  $C7 $54 $57 $51 $28 $C7 $29 $27  $C7 $40 $C7 $C7 $46 $48 $44 $C7
.by  $C7 $47 $53 $41 $0C $0A $7B $C7  $C7 $0B $C7 $C7 $0F $C7 $10 $15  $C7 $09 $C7 $C7 $16 $C7 $03 $C7
.by  $C7 $02 $18 $1A $C7 $C7 $C7 $C7  $C7 $C7 $C7 $C7 $C7 $C7 $60 $0E  $C7 $0D $C7 $C7 $12 $C7 $05 $19
.by  $C7 $14 $17 $11 $C7 $C7 $C7 $C7  $C7 $C7 $C7 $C7 $06 $08 $04 $C7  $C7 $07 $13 $01 $2C $20 $34 $20
.by  $3E $20 $43 $20 $48 $20 $4F $20  $59 $20 $63 $20 $47 $23 $55 $23  $63 $23 $C3 $23 $D3 $23 $E3 $23
.by  $F3 $23 $03 $24
.endm

	end
