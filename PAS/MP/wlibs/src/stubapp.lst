mads 2.1.6 build 10 (13 Sep 22)
Source: stubapp.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/09/07] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: stubapp.a65]
     1 FFFF> 2000-34FD> 05 31 + .by  $05 $31 $2E $30 $2E $30 $00 $03  $20 $20 $20 $00 $04 $54 $52 $55  $45 $00 $05 $46 $41 $4C $53 $45
     2 2018 00 06 41 6C 65 72 + .by  $00 $06 $41 $6C $65 $72 $74 $21  $00 $04 $20 $4F $4B $20 $00 $03  $5B $20 $5D $00 $05 $41 $62 $6F
     3 2030 75 74 00 10 44 65 + .by  $75 $74 $00 $10 $44 $65 $6D $6F  $20 $41 $70 $70 $6C $69 $63 $61  $74 $69 $6F $6E $00 $10 $56 $65
     4 2048 72 73 69 6F 6E 20 + .by  $72 $73 $69 $6F $6E $20 $31 $2E  $30 $30 $2D $50 $41 $53 $00 $20  $28 $43 $29 $20 $32 $30 $32 $32
     5 2060 20 20 57 61 64 65 + .by  $20 $20 $57 $61 $64 $65 $20 $52  $69 $70 $6B $6F $77 $73 $6B $69  $2C $20 $61 $6D $61 $72 $6F $6B
     6 2078 00 1A 41 70 70 6C + .by  $00 $1A $41 $70 $70 $6C $69 $63  $61 $74 $69 $6F $6E $20 $74 $6F  $20 $64 $65 $6D $6F $6E $73 $74
     7 2090 72 61 74 65 00 16 + .by  $72 $61 $74 $65 $00 $16 $74 $68  $65 $20 $4D $61 $64 $50 $61 $73  $63 $61 $6C $20 $6C $69 $62 $72
     8 20A8 61 72 79 2E 00 11 + .by  $61 $72 $79 $2E $00 $11 $43 $6F  $6E $76 $65 $72 $74 $65 $64 $20  $66 $72 $6F $6D $20 $43 $2E $00
     9 20C0 17 56 31 2D 32 30 + .by  $17 $56 $31 $2D $32 $30 $32 $31  $2D $41 $74 $61 $72 $69 $38 $3A  $20 $41 $63 $74 $69 $6F $6E $21
    10 20D8 00 1A 56 31 2D 43 + .by  $00 $1A $56 $31 $2D $43 $2D $32  $30 $32 $32 $2D $41 $74 $61 $72  $69 $38 $3A $20 $43 $20 $28 $43
    11 20F0 43 36 35 29 00 23 + .by  $43 $36 $35 $29 $00 $23 $56 $31  $2D $50 $41 $53 $2D $32 $30 $32  $32 $2D $41 $74 $61 $72 $69 $38
    12 2108 3A 20 50 41 53 20 + .by  $3A $20 $50 $41 $53 $20 $28 $4D  $61 $64 $50 $61 $73 $63 $61 $6C  $29 $00 $04 $20 $4F $6B $20 $00
    13 2120 0C 20 53 75 62 2D + .by  $0C $20 $53 $75 $62 $2D $49 $74  $65 $6D $20 $31 $20 $00 $0C $20  $53 $75 $62 $2D $49 $74 $65 $6D
    14 2138 20 32 20 00 0C 20 + .by  $20 $32 $20 $00 $0C $20 $53 $75  $62 $2D $49 $74 $65 $6D $20 $33  $20 $00 $08 $53 $75 $62 $2D $4D
    15 2150 65 6E 75 00 16 20 + .by  $65 $6E $75 $00 $16 $20 $53 $75  $62 $2D $49 $74 $65 $6D $20 $31  $20 $73 $65 $6C $65 $63 $74 $65
    16 2168 64 2E 20 00 16 20 + .by  $64 $2E $20 $00 $16 $20 $53 $75  $62 $2D $49 $74 $65 $6D $20 $32  $20 $73 $65 $6C $65 $63 $74 $65
    17 2180 64 2E 20 00 16 20 + .by  $64 $2E $20 $00 $16 $20 $53 $75  $62 $2D $49 $74 $65 $6D $20 $33  $20 $73 $65 $6C $65 $63 $74 $65
    18 2198 64 2E 20 00 0C 20 + .by  $64 $2E $20 $00 $0C $20 $53 $75  $62 $2D $4D $65 $6E $75 $20 $31  $20 $00 $0C $20 $53 $75 $62 $2D
    19 21B0 4D 65 6E 75 20 32 + .by  $4D $65 $6E $75 $20 $32 $20 $00  $0C $20 $53 $75 $62 $2D $4D $65  $6E $75 $20 $33 $20 $00 $0C $20
    20 21C8 41 62 6F 75 74 20 + .by  $41 $62 $6F $75 $74 $20 $20 $20  $20 $20 $20 $00 $0C $20 $45 $78  $69 $74 $20 $20 $20 $20 $20 $20
    21 21E0 20 00 15 41 20 50 + .by  $20 $00 $15 $41 $20 $50 $20 $50  $20 $4C $20 $49 $20 $43 $20 $41  $20 $54 $20 $49 $20 $4F $20 $4E
    22 21F8 00 04 4D 65 6E 75 + .by  $00 $04 $4D $65 $6E $75 $00 $16  $20 $53 $75 $62 $2D $4D $65 $6E  $75 $20 $31 $20 $73 $65 $6C $65
    23 2210 63 74 65 64 2E 20 + .by  $63 $74 $65 $64 $2E $20 $00 $16  $20 $53 $75 $62 $2D $4D $65 $6E  $75 $20 $32 $20 $73 $65 $6C $65
    24 2228 63 74 65 64 2E 20 + .by  $63 $74 $65 $64 $2E $20 $00 $6C  $6A $3B $C7 $C7 $6B $2B $2A $6F  $C7 $70 $75 $9B $69 $2D $3D $76
    25 2240 C7 63 C7 C7 62 78 + .by  $C7 $63 $C7 $C7 $62 $78 $7A $34  $C7 $33 $36 $C7 $35 $32 $31 $2C  $20 $2E $6E $C7 $6D $2F $C7 $72
    26 2258 C7 65 79 C7 74 77 + .by  $C7 $65 $79 $C7 $74 $77 $71 $39  $C7 $30 $37 $C7 $38 $3C $3E $66  $68 $64 $C7 $C7 $67 $73 $61 $4C
    27 2270 4A 3A C7 C7 4B 5C + .by  $4A $3A $C7 $C7 $4B $5C $5E $4F  $C7 $50 $55 $C7 $49 $5F $7C $56  $C7 $43 $C7 $C7 $42 $58 $5A $24
    28 2288 C7 23 26 C7 25 22 + .by  $C7 $23 $26 $C7 $25 $22 $21 $5B  $20 $5D $4E $C7 $4D $3F $C7 $52  $C7 $45 $59 $C7 $54 $57 $51 $28
    29 22A0 C7 29 27 C7 40 C7 + .by  $C7 $29 $27 $C7 $40 $C7 $C7 $46  $48 $44 $C7 $C7 $47 $53 $41 $0C  $0A $7B $C7 $C7 $0B $C7 $C7 $0F
    30 22B8 C7 10 15 C7 09 C7 + .by  $C7 $10 $15 $C7 $09 $C7 $C7 $16  $C7 $03 $C7 $C7 $02 $18 $1A $C7  $C7 $C7 $C7 $C7 $C7 $C7 $C7 $C7
    31 22D0 C7 60 0E C7 0D C7 + .by  $C7 $60 $0E $C7 $0D $C7 $C7 $12  $C7 $05 $19 $C7 $14 $17 $11 $C7  $C7 $C7 $C7 $C7 $C7 $C7 $C7 $06
    32 22E8 08 04 C7 C7 07 13 + .by  $08 $04 $C7 $C7 $07 $13 $01 $20  $21 $2E $21 $3C $21 $9C $21 $AA  $21 $B8 $21 $C6 $21 $D4 $21
Source: stubapp.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 22FF			RTLIB
   113 22FF				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D3
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $22FF..$2463
   118
   119 				; ------------------------------------------------------------
   120
   121 2464			START
   122 2464 BA				tsx
   123 2465 8E E7 34			stx MAIN.@halt+1
   124
   125 = 0DD7			VLEN	= VARDATASIZE-VARINITSIZE
   126 = 3506			VADR	= DATAORIGIN+VARINITSIZE
   127
   128 					ift VADR > $BFFF
   129 					ert 'Invalid memory address range ',VADR
   130 					eli (VLEN>0) && (VLEN<=256)
   131 					ldx #256-VLEN
   132 					lda #$00
   133 					sta:rne VADR+VLEN-256,x+
   134 					eli VLEN>256
   135 					@fill #VADR #VLEN #$00
   135 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   135 2468 A9 06 85 88 A9 35 +  MWA #VADR @FILL.PTR1
   135 2470 A9 D7 85 8C A9 0D +  MWA #VLEN @FILL.PTR3
   135 2478 A9 00 85 84		 MVA #$00 @FILL.PTR2
   135 247C 20 A5 23		 JSR @FILL
   136 					eif
   137
   138 				.ifdef :psptr
   139 					mwa #PROGRAMSTACK :psptr
   140 				.fi
   141
   142 					.ifdef MAIN.@DEFINES.ROMOFF
   143 					icl 'atari\romoff.asm'
   144 					.fi
   145
   146 247F A2 0F			ldx #$0F					; DOS II+/D ParamStr
   147 2481 BD 40 03 9D EC 34 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   148
   149 248A E8				inx						; X = 0
   150 248B 86 80			stx bp						; BP = 0
   151
   152 248D 8E 08 D2			stx audctl					; reset POKEY
   153 2490 8E 18 D2			stx audctl+$10
   154 2493 A9 03			lda #3
   155 2495 8D 0F D2			sta skctl
   156 2498 8D 1F D2			sta skctl+$10
   157
   158 249B CA				dex						; X = 255
   159
   160 249C				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: stubapp.a65]
Source: stubapp.a65
   161
   162 249C			.local	MAIN						; PROCEDURE
   163
   164 249C 4C BF 33			jmp l_0236
   165
   166 				; ------------------------------------------------------------
   167
   168 249F			.local	SYSTEM						; UNIT
   169
   170 249F			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   171
   172 				; ------------------------------------------------------------
   173
   174 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   175 				; as Pointer
   176 249F B5 94			lda :STACKORIGIN,x
   177 24A1 85 88			sta A
   178 24A3 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   179 24A5 85 89			sta A+1
   180 24A7 CA				dex
   181 24A8			@main
   182
   183 				; -------------------  ASM Block 00000002  -------------------
   184
   185 24A8 A0 00			ldy #0
   186 24AA B1 88 85 90			mva (:edx),y Result
   187
   188 24AE			@exit
   189
   190 				; ------------------------------------------------------------
   191
   192 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   193 				; as Pointer
   194
   195 24AE E8				inx
   196 24AF A5 90 95 94			mva RESULT :STACKORIGIN,x
   197
   198 					.ifdef @new
   199 					lda <@VarData
   200 					sta :ztmp
   201 					lda >@VarData
   202 					ldy #@VarDataSize-1
   203 					jmp @FreeMem
   204 					eif
   205
   206 				; ------------------------------------------------------------
   207
   208 = 0088			A	= :EDX
   209 = 0090			RESULT	= :STACKORIGIN-4
   210 24B3 60				rts						; ret
   211 				.endl
   212
   213 24B4			.local	DPEEK						; FUNCTION | ASSEMBLER | REGISTER
   214
   215 				; ------------------------------------------------------------
   216
   217 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   218 				; as Pointer
   219 24B4 B5 94			lda :STACKORIGIN,x
   220 24B6 85 88			sta A
   221 24B8 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   222 24BA 85 89			sta A+1
   223 24BC CA				dex
   224 24BD			@main
   225
   226 				; -------------------  ASM Block 00000003  -------------------
   227
   228 24BD A0 00			ldy #0
   229 24BF B1 88 85 90			mva (:edx),y Result
   230 24C3 C8				iny
   231 24C4 B1 88 85 91			mva (:edx),y Result+1
   232
   233 24C8			@exit
   234
   235 				; ------------------------------------------------------------
   236
   237 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   238 				; as Pointer
   239
   240 24C8 E8				inx
   241 24C9 A5 90 95 94			mva RESULT :STACKORIGIN,x
   242 24CD A5 91 95 A4			mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   243
   244 					.ifdef @new
   245 					lda <@VarData
   246 					sta :ztmp
   247 					lda >@VarData
   248 					ldy #@VarDataSize-1
   249 					jmp @FreeMem
   250 					eif
   251
   252 				; ------------------------------------------------------------
   253
   254 = 0088			A	= :EDX
   255 = 0090			RESULT	= :STACKORIGIN-4
   256 24D1 60				rts						; ret
   257 				.endl
   258
   259 24D2			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   260
   261 				; ------------------------------------------------------------
   262
   263 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   264 				; as Pointer
   265 24D2 B5 94			lda :STACKORIGIN,x
   266 24D4 85 88			sta A
   267 24D6 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   268 24D8 85 89			sta A+1
   269 24DA CA				dex
   270 24DB 30 05			jmi @main
   271
   272 				; ------------------------------------------------------------
   273
   274 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   275 				; as Pointer
   276 24DD B5 94			lda :STACKORIGIN,x
   277 24DF 85 8C			sta VALUE
   278 24E1 CA				dex
   279 24E2			@main
   280
   281 				; -------------------  ASM Block 00000018  -------------------
   282
   283 24E2 A0 00			ldy #0
   284 24E4 A5 8C 91 88			mva value (:edx),y
   285
   286 				; ------------------------------------------------------------
   287
   288 = 0088			A	= :EDX
   289 = 008C			VALUE	= :ECX
   290 24E8			@exit
   291 					.ifdef @new
   292 					lda <@VarData
   293 					sta :ztmp
   294 					lda >@VarData
   295 					ldy #@VarDataSize-1
   296 					jmp @FreeMem
   297 					els
   298 24E8 60				rts						; ret
   299 					eif
   300 				.endl
   301
   302 24E9			.local	FILLCHAR_0286					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   303
   304 					.MACRO m@INLINE
   305 				
   306 				; -------------------  ASM Block 00000021  -------------------
   307 				
   308 					jsr @fill
   309 				
   310 					.ENDM
   311
   312 				; ------------------------------------------------------------
   313
   314 = 0088			A	= :EDX
   315 = 008C			COUNT	= :ECX
   316 = 0084			VALUE	= :EAX
   317 24E9			@exit
   318 				.endl
   319
   320 24E9			.local	MOVE_0287					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   321
   322 					.MACRO m@INLINE
   323 				
   324 				; -------------------  ASM Block 00000026  -------------------
   325 				
   326 					jsr @move
   327 				
   328 					.ENDM
   329
   330 				; ------------------------------------------------------------
   331
   332 = 0088			SOURCE	= :EDX
   333 = 008C			DEST	= :ECX
   334 = 0084			COUNT	= :EAX
   335 24E9			@exit
   336 				.endl
   337
   338 24E9			.local	SETLENGTH					; PROCEDURE | ASSEMBLER | REGISTER
   339
   340 				; -------------------  ASM Block 00000032  -------------------
   341
   342 24E9 A0 00			ldy #0
   343 24EB A5 8C 91 88			mva Len (:edx),y
   344
   345 				; ------------------------------------------------------------
   346
   347 = 0088			S	= :EDX
   348 = 008C			LEN	= :ECX
   349 24EF			@exit
   350 					.ifdef @new
   351 					lda <@VarData
   352 					sta :ztmp
   353 					lda >@VarData
   354 					ldy #@VarDataSize-1
   355 					jmp @FreeMem
   356 					els
   357 24EF 60				rts						; ret
   358 					eif
   359 				.endl
   360
   361 				; ------------------------------------------------------------
   362
   363 = 0101			__PORTB_BANKS	= $0101
   364 = 0648			M_PI_2	= $0648
   365 = 0192			D_PI_2	= $0192
   366 = 0004			D_PI_180	= $04
   367 = 0000			MGTIA	= $00
   368 = 0080			MVBXE	= $80
   369 = 0000			VBXE_XDLADR	= $00
   370 = 00E0			VBXE_BCBTMP	= $E0
   371 = 0100			VBXE_BCBADR	= $0100
   372 = 1000			VBXE_MAPADR	= $1000
   373 = 1000			VBXE_CHBASE	= $1000
   374 = 5000			VBXE_OVRADR	= $5000
   375 = B000			VBXE_WINDOW	= $B000
   376 = 0000			IDLI	= $00
   377 = 0001			IVBL	= $01
   378 = 0002			ITIM1	= $02
   379 = 0003			ITIM2	= $03
   380 = 0004			ITIM4	= $04
   381 = 00FE			CH_DELCHR	= $FE
   382 = 009B			CH_ENTER	= $9B
   383 = 001B			CH_ESC	= $1B
   384 = 001C			CH_CURS_UP	= $1C
   385 = 001D			CH_CURS_DOWN	= $1D
   386 = 001E			CH_CURS_LEFT	= $1E
   387 = 001F			CH_CURS_RIGHT	= $1F
   388 = 007F			CH_TAB	= $7F
   389 = 009B			CH_EOL	= $9B
   390 = 007D			CH_CLR	= $7D
   391 = 00FD			CH_BELL	= $FD
   392 = 007E			CH_DEL	= $7E
   393 = 009C			CH_DELLINE	= $9C
   394 = 009D			CH_INSLINE	= $9D
   395 = 0000			PAL_PMCOLOR0	= $00
   396 = 0001			PAL_PMCOLOR1	= $01
   397 = 0002			PAL_PMCOLOR2	= $02
   398 = 0003			PAL_PMCOLOR3	= $03
   399 = 0004			PAL_COLOR0	= $04
   400 = 0005			PAL_COLOR1	= $05
   401 = 0006			PAL_COLOR2	= $06
   402 = 0007			PAL_COLOR3	= $07
   403 = 0008			PAL_COLBAK	= $08
   404 = 0000			COLOR_BLACK	= $00
   405 = 000E			COLOR_WHITE	= $0E
   406 = 0032			COLOR_RED	= $32
   407 = 0096			COLOR_CYAN	= $96
   408 = 0068			COLOR_VIOLET	= $68
   409 = 00C4			COLOR_GREEN	= $C4
   410 = 0074			COLOR_BLUE	= $74
   411 = 00EE			COLOR_YELLOW	= $EE
   412 = 0028			COLOR_ORANGE	= $28
   413 = 00E4			COLOR_BROWN	= $E4
   414 = 003C			COLOR_LIGHTRED	= $3C
   415 = 0004			COLOR_GRAY1	= $04
   416 = 0006			COLOR_GRAY2	= $06
   417 = 000A			COLOR_GRAY3	= $0A
   418 = 00CC			COLOR_LIGHTGREEN	= $CC
   419 = 007C			COLOR_LIGHTBLUE	= $7C
   420 = 0004			FMOPENREAD	= $04
   421 = 0008			FMOPENWRITE	= $08
   422 = 0009			FMOPENAPPEND	= $09
   423 = 000C			FMOPENREADWRITE	= $0C
   424 = 3500			SCREENWIDTH	= DATAORIGIN+$0000
   425 = 3502			SCREENHEIGHT	= DATAORIGIN+$0002
   426 = 3504			DATESEPARATOR	= DATAORIGIN+$0004
   427 = D20A			RND	= $D20A
   428 = 02C0			adr.PALETTE	= $02C0
   429 24F0			.var PALETTE	= adr.PALETTE .word
   430 = D012			adr.HPALETTE	= $D012
   431 24F0			.var HPALETTE	= adr.HPALETTE .word
   432 = 3505			FILEMODE	= DATAORIGIN+$0005
   433 = 3506			GRAPHMODE	= DATAORIGIN+$0006
   434 = 3507			IORESULT	= DATAORIGIN+$0007
   435 = 3508			EOLN	= DATAORIGIN+$0008
   436 = 3509			RNDSEED	= DATAORIGIN+$0009
   437
   438 = 24F0 C0 02		PALETTE
   438 = 24F2 12 D0		HPALETTE
   438 				.endl							; UNIT SYSTEM
   439
   440 				; ------------------------------------------------------------
   441
   442 24F4			.local	A8DEFINES					; UNIT
   443
   444 				; ------------------------------------------------------------
   445
   446 = 2000			adr.LIB_VERSION	= CODEORIGIN+$0000
   447 24F4			.var LIB_VERSION	= adr.LIB_VERSION .word
   448 = 000A			WRECSZ	= $0A
   449 = 0814			WBUFSZ	= $0814
   450 = 0001			WON	= $01
   451 = 0000			WOFF	= $00
   452 = 0080			WPABS	= $80
   453 = 00F1			WPTOP	= $F1
   454 = 00F2			WPBOT	= $F2
   455 = 00FB			WPLFT	= $FB
   456 = 00FC			WPRGT	= $FC
   457 = 00FF			WPCNT	= $FF
   458 = 0064			WENONE	= $64
   459 = 0065			WENOPN	= $65
   460 = 0066			WEUSED	= $66
   461 = 0000			GDISP	= $00
   462 = 0001			GEDIT	= $01
   463 = 0001			GHORZ	= $01
   464 = 0002			GVERT	= $02
   465 = 0001			GCON	= $01
   466 = 0002			GCOFF	= $02
   467 = 0000			GANY	= $00
   468 = 0001			GALNUM	= $01
   469 = 0002			GALPHA	= $02
   470 = 0003			GNUMER	= $03
   471 = 00FD			XESC	= $FD
   472 = 00FE			XTAB	= $FE
   473 = 00FF			XNONE	= $FF
   474 = 022F			DMACTL	= $022F
   475 = 0244			COLDST	= $0244
   476 = 026F			GPRIOR	= $026F
   477 = 02B6			INVFLG	= $02B6
   478 = 02BE			SHFLOK	= $02BE
   479 = 02DC			HELPFG	= $02DC
   480 = 02FC			KEYPCH	= $02FC
   481 = D01D			GRACTL	= $D01D
   482 = D01F			CONSOL	= $D01F
   483 = D407			PMBASE	= $D407
   484 = D000			HPOSP0	= $D000
   485 = D001			HPOSP1	= $D001
   486 = D002			HPOSP2	= $D002
   487 = 0052			ALMARG	= $52
   488 = 0058			RSCRN	= $58
   489 = 02C0			PCOLR0	= $02C0
   490 = 02C1			PCOLR1	= $02C1
   491 = 02C2			PCOLR2	= $02C2
   492 = 02C3			PCOLR3	= $02C3
   493 = 02C5			AFOREG	= $02C5
   494 = 02C6			ABACKG	= $02C6
   495 = 02C8			ABORDR	= $02C8
   496 = 02F0			ACURIN	= $02F0
   497 = 0000			CBLACK	= $00
   498 = 000E			CWHITE	= $0E
   499 = 00D2			CGREEN	= $D2
   500 = 0092			CBLUE	= $92
   501 = 0032			CRED	= $32
   502 = 00DE			CYELLOW	= $DE
   503 = 00C7			KNOMAP	= $C7
   504 = 00FF			KNONE	= $FF
   505 = 000C			KENTER	= $0C
   506 = 0034			KDEL	= $34
   507 = 0074			KDEL_S	= $74
   508 = 00B4			KDEL_C	= $B4
   509 = 00B7			KINS	= $B7
   510 = 0006			KPLUS	= $06
   511 = 0007			KASTER	= $07
   512 = 000E			KMINUS	= $0E
   513 = 000F			KEQUAL	= $0F
   514 = 001C			KESC	= $1C
   515 = 0021			KSPACE	= $21
   516 = 0027			KINV	= $27
   517 = 002C			KTAB	= $2C
   518 = 006C			KTAB_S	= $6C
   519 = 003C			KCAP	= $3C
   520 = 0086			KLEFT	= $86
   521 = 0087			KRIGHT	= $87
   522 = 008E			KUP	= $8E
   523 = 008F			KDOWN	= $8F
   524 = 0015			KEYB	= $15
   525 = 0012			KEYC	= $12
   526 = 003A			KEYD	= $3A
   527 = 0039			KEYH	= $39
   528 = 0023			KEYN	= $23
   529 = 000A			KEYP	= $0A
   530 = 0028			KEYR	= $28
   531 = 003E			KEYS	= $3E
   532 = 002D			KEYT	= $2D
   533 = 0095			KB_C	= $95
   534 = 00AA			KE_C	= $AA
   535 = 0016			KX	= $16
   536 = 0056			KX_S	= $56
   537 = 00EA			KE_CS	= $EA
   538 = 00FE			KS_CS	= $FE
   539 = 0007			KCNON	= $07
   540 = 0106			KCSTA	= $0106
   541 = 0105			KCSEL	= $0105
   542 = 0103			KCOPT	= $0103
   543 = 0011			KFHLP	= $11
   544 = 0003			KF1	= $03
   545 = 0004			KF2	= $04
   546 = 0013			KF3	= $13
   547 = 0014			KF4	= $14
   548 = 0003			CHBTRGT	= $03
   549 = 0005			CHTPRGT	= $05
   550 = 0011			CHTPLFT	= $11
   551 = 001A			CHBTLFT	= $1A
   552 = 0014			CHBALL	= $14
   553 = 001B			CHESC	= $1B
   554 = 001C			CHUP	= $1C
   555 = 001D			CHDN	= $1D
   556 = 001E			CHLFT	= $1E
   557 = 001F			CHRGT	= $1F
   558 = 0020			CHSPACE	= $20
   559 = 0060			CHDMND	= $60
   560 = 007D			CHCLS	= $7D
   561 = 007E			CHBACK	= $7E
   562 = 007F			CHTAB	= $7F
   563 = 009B			CHENT	= $9B
   564 = 009C			CHDELLN	= $9C
   565 = 00A0			CHINVSP	= $A0
   566 = 00FD			CHBUZ	= $FD
   567 = 009F			CHRGT_I	= $9F
   568 = 006F			CHO_L	= $6F
   569 = 00C9			CHI_I	= $C9
   570
   571 = 24F4 00 20		LIB_VERSION
   571 				.endl							; UNIT A8DEFINES
   572
   573 				; ------------------------------------------------------------
   574
   575 24F6			.local	A8DEFWIN					; UNIT
   576
   577 				; ------------------------------------------------------------
   578
   579 				.endl							; UNIT A8DEFWIN
   580
   581 				; ------------------------------------------------------------
   582
   583 24F6			.local	A8LIBMISC					; UNIT
   584
   585 24F6			.local	WAITKCX						; FUNCTION
   586 24F6 8D 0B 35			sta BI
   587
   588 				; optimize OK (A8LIBMISC), line = 88
   589
   590 24F9 A9 00			lda #$00
   591 24FB 8D 0C 35			sta RESULT
   592 24FE 8D 0D 35			sta RESULT+1
   593
   594 				; --- WhileProlog
   595 2501			l_02C9
   596
   597 				; optimize OK (A8LIBMISC), line = 91
   598
   599 2501 AD FD 02			lda $02FC+1
   600 2504 D0 05			bne @+
   601 2506 AD FC 02			lda $02FC
   602 2509 C9 FF			cmp #$FF
   603 				@
   604 250B D0 0C			jne l_02C9w
   605 250D AD 1F D0			lda $D01F
   606 2510 C9 07			cmp #$07
   607 2512 D0 05			jne l_02C9w
   608 2514 AD DC 02			lda $02DC
   609 2517 F0 E8			jeq l_02C9
   610 2519			l_02C9w
   611
   612 				; optimize OK (A8LIBMISC), line = 94
   613
   614 2519 AD FC 02			lda $02FC
   615 251C 8D 0E 35			sta BK
   616
   617 				; optimize OK (A8LIBMISC), line = 95
   618
   619 251F AD 1F D0			lda $D01F
   620 2522 8D 0F 35			sta BC
   621
   622 				; optimize OK (A8LIBMISC), line = 96
   623
   624 2525 AD DC 02			lda $02DC
   625 2528 8D 10 35			sta BH
   626
   627 				; optimize OK (A8LIBMISC), line = 99
   628
   629 252B AD 0F 35			lda BC
   630 252E C9 07			cmp #$07
   631 2530 F0 0B			jeq l_030B
   632
   633 				; optimize OK (A8LIBMISC), line = 101
   634
   635 2532 8D 0C 35			sta RESULT
   636 2535 A9 01			lda #$01
   637 2537 8D 0D 35			sta RESULT+1
   638 253A 4C A4 25			jmp l_031F
   639 253D			l_030B
   640
   641 				; optimize OK (A8LIBMISC), line = 104
   642
   643 253D AD 10 35			lda BH
   644 2540 F0 10			jeq l_0331
   645
   646 				; optimize OK (A8LIBMISC), line = 106
   647
   648 2542 A9 11			lda #$11
   649 2544 8D 0C 35			sta RESULT
   650 2547 A9 00			lda #$00
   651 2549 8D 0D 35			sta RESULT+1
   652
   653 				; optimize OK (A8LIBMISC), line = 107
   654
   655 254C 8D DC 02			sta $02DC
   656 254F 4C A4 25			jmp l_0342
   657 2552			l_0331
   658
   659 				; optimize OK (A8LIBMISC), line = 110
   660
   661 2552 AD 0E 35			lda BK
   662 2555 C9 3C			cmp #$3C
   663 2557 D0 19			jne l_0354
   664
   665 				; optimize OK (A8LIBMISC), line = 112
   666
   667 2559 8D 0C 35			sta RESULT
   668 255C A9 00			lda #$00
   669 255E 8D 0D 35			sta RESULT+1
   670
   671 				; optimize OK (A8LIBMISC), line = 115
   672
   673 2561 AD BE 02			lda $02BE
   674 2564 8D 11 35			sta BU
   675
   676 				; optimize OK (A8LIBMISC), line = 116
   677
   678 2567 49 40			eor #$40
   679 2569 8D 11 35			sta BU
   680
   681 				; optimize OK (A8LIBMISC), line = 117
   682
   683 256C 8D BE 02			sta $02BE
   684 256F 4C A4 25			jmp l_0378
   685 2572			l_0354
   686
   687 				; optimize OK (A8LIBMISC), line = 120
   688
   689 2572 AD 0E 35			lda BK
   690 2575 C9 27			cmp #$27
   691 2577 D0 20			jne l_038A
   692
   693 				; optimize OK (A8LIBMISC), line = 122
   694
   695 2579 8D 0C 35			sta RESULT
   696 257C A9 00			lda #$00
   697 257E 8D 0D 35			sta RESULT+1
   698
   699 				; optimize OK (A8LIBMISC), line = 125
   700
   701 2581 AD 0B 35			lda BI
   702 2584 C9 01			cmp #$01
   703 2586 D0 0E			jne l_03A3
   704
   705 				; optimize OK (A8LIBMISC), line = 128
   706
   707 2588 AD B6 02			lda $02B6
   708 258B 8D 11 35			sta BU
   709
   710 				; optimize OK (A8LIBMISC), line = 129
   711
   712 258E 49 80			eor #$80
   713 2590 8D 11 35			sta BU
   714
   715 				; optimize OK (A8LIBMISC), line = 130
   716
   717 2593 8D B6 02			sta $02B6
   718 2596			l_03A3
   719 2596 4C A4 25			jmp l_03C3
   720 2599			l_038A
   721
   722 				; optimize OK (A8LIBMISC), line = 135
   723
   724 2599 AD 0E 35			lda BK
   725 259C 8D 0C 35			sta RESULT
   726 259F A9 00			lda #$00
   727 25A1 8D 0D 35			sta RESULT+1
   728 25A4			l_03C3
   729 25A4			l_0378
   730 25A4			l_0342
   731 25A4			l_031F
   732
   733 				; optimize OK (A8LIBMISC), line = 139
   734
   735 25A4 A9 FF			lda #$FF
   736 25A6 8D FC 02			sta $02FC
   737 25A9			@exit
   738
   739 				; ------------------------------------------------------------
   740
   741 = 350B			BI	= DATAORIGIN+$000B
   742 = 350C			RESULT	= DATAORIGIN+$000C
   743 = 350E			BK	= DATAORIGIN+$000E
   744 = 350F			BC	= DATAORIGIN+$000F
   745 = 3510			BH	= DATAORIGIN+$0010
   746 = 3511			BU	= DATAORIGIN+$0011
   747
   748 = 350B			@VarData	= BI
   749 = 0005			@VarDataSize	= 5
   750
   751 25A9 60				rts						; ret
   752 				.endl
   753
   754 				; ------------------------------------------------------------
   755
   756 				.endl							; UNIT A8LIBMISC
   757
   758 				; ------------------------------------------------------------
   759
   760 25AA			.local	A8LIBSTR					; UNIT
   761
   762 25AA			.local	STRINV						; PROCEDURE
   763
   764 				; optimize OK (A8LIBSTR), line = 45
   765
   766 25AA A9 00			lda #$00
   767 25AC 8D 15 35			sta BL
   768 25AF AC 14 35			ldy BS
   769 25B2 88				dey
   770 25B3 8C B7 25			sty @FORTMP_03DC_0
   771
   772 25B6			l_03DF
   773 				; --- ForToDoCondition
   774 25B6 A9 00			lda @FORTMP_03DC_0:#$00
   775 25B8 CD 15 35			cmp BL
   776 25BB 90 1F			jcc l_03ED
   777
   778 				; optimize OK (A8LIBSTR), line = 48
   779
   780 25BD AC 12 35 84 82 AC + 	mwy PS :bp2
   781 25C7 A0 00			ldy #$00
   782 25C9 B1 82			lda (:bp2),y
   783 25CB 49 80			eor #$80
   784 25CD 91 82			sta (:bp2),y
   785
   786 				; optimize FAIL (0, A8LIBSTR), line = 49
   787
   788 25CF EE 12 35			inc PS
   789 25D2 D0 03			sne
   790 25D4 EE 13 35			inc PS+1
   791
   792 				; --- ForToDoEpilog
   793 25D7 EE 15 35			inc BL
   794 25DA D0 DA			jne l_03DF
   795 25DC			l_03ED
   796
   797 				; ------------------------------------------------------------
   798
   799 = 3512			PS	= DATAORIGIN+$0012
   800 = 3514			BS	= DATAORIGIN+$0014
   801 = 3515			BL	= DATAORIGIN+$0015
   802
   803 = 3512			@VarData	= PS
   804 = 0004			@VarDataSize	= 4
   805
   806 25DC			@exit
   807 					.ifdef @new
   808 					lda <@VarData
   809 					sta :ztmp
   810 					lda >@VarData
   811 					ldy #@VarDataSize-1
   812 					jmp @FreeMem
   813 					els
   814 25DC 60				rts						; ret
   815 					eif
   816 				.endl
   817
   818 25DD			.local	STRAI						; PROCEDURE
   819
   820 				; optimize OK (A8LIBSTR), line = 67
   821
   822 25DD A9 00			lda #$00
   823 25DF 8D 1A 35			sta BL
   824 25E2 AC 19 35			ldy BS
   825 25E5 88				dey
   826 25E6 8C EA 25			sty @FORTMP_0410_0
   827
   828 25E9			l_0413
   829 				; --- ForToDoCondition
   830 25E9 A9 00			lda @FORTMP_0410_0:#$00
   831 25EB CD 1A 35			cmp BL
   832 25EE B0 03 4C C0 26		jcc l_0421
   833
   834 				; optimize OK (A8LIBSTR), line = 69
   835
   836 25F3 AC 18 35 84 81		mvy PS+1 :bp+1
   837 25F8 AC 17 35			ldy PS
   838 25FB AC 18 35 84 81		mvy PS+1 :bp+1
   839 2600 AC 17 35			ldy PS
   840 2603 B1 80			lda (:bp),y
   841 2605 C9 20			cmp #$20
   842 2607 B0 16			jcs l_043F
   843
   844 				; optimize OK (A8LIBSTR), line = 71
   845
   846 2609 AC 17 35 84 82 AC + 	mwy PS :bp2
   847 2613 A0 00			ldy #$00
   848 2615 B1 82			lda (:bp2),y
   849 2617 18 69 40			add #$40
   850 261A 91 82			sta (:bp2),y
   851 261C 4C B0 26			jmp l_0453
   852 261F			l_043F
   853
   854 				; optimize OK (A8LIBSTR), line = 73
   855
   856 261F AC 18 35 84 81		mvy PS+1 :bp+1
   857 2624 AC 17 35			ldy PS
   858 2627 B1 80			lda (:bp),y
   859 2629 C9 20			cmp #$20
   860 262B 90 24			jcc l_0471
   861 262D AC 18 35 84 81		mvy PS+1 :bp+1
   862 2632 AC 17 35			ldy PS
   863 2635 B1 80			lda (:bp),y
   864 2637 C9 60			cmp #$60
   865 2639 B0 16			jcs l_0471
   866
   867 				; optimize OK (A8LIBSTR), line = 75
   868
   869 263B AC 17 35 84 82 AC + 	mwy PS :bp2
   870 2645 A0 00			ldy #$00
   871 2647 B1 82			lda (:bp2),y
   872 2649 38 E9 20			sub #$20
   873 264C 91 82			sta (:bp2),y
   874 264E 4C B0 26			jmp l_0485
   875 2651			l_0471
   876
   877 				; optimize OK (A8LIBSTR), line = 77
   878
   879 2651 AC 18 35 84 81		mvy PS+1 :bp+1
   880 2656 AC 17 35			ldy PS
   881 2659 B1 80			lda (:bp),y
   882 265B 10 24			jpl l_04A3
   883 265D AC 18 35 84 81		mvy PS+1 :bp+1
   884 2662 AC 17 35			ldy PS
   885 2665 B1 80			lda (:bp),y
   886 2667 C9 A0			cmp #$A0
   887 2669 B0 16			jcs l_04A3
   888
   889 				; optimize OK (A8LIBSTR), line = 79
   890
   891 266B AC 17 35 84 82 AC + 	mwy PS :bp2
   892 2675 A0 00			ldy #$00
   893 2677 B1 82			lda (:bp2),y
   894 2679 18 69 40			add #$40
   895 267C 91 82			sta (:bp2),y
   896 267E 4C B0 26			jmp l_04B7
   897 2681			l_04A3
   898
   899 				; optimize OK (A8LIBSTR), line = 81
   900
   901 2681 AC 18 35 84 81		mvy PS+1 :bp+1
   902 2686 AC 17 35			ldy PS
   903 2689 B1 80			lda (:bp),y
   904 268B C9 A0			cmp #$A0
   905 268D 90 21			jcc l_04D5
   906 268F AC 18 35 84 81		mvy PS+1 :bp+1
   907 2694 AC 17 35			ldy PS
   908 2697 B1 80			lda (:bp),y
   909 2699 C9 E0			cmp #$E0
   910 269B B0 13			jcs l_04D5
   911
   912 				; optimize OK (A8LIBSTR), line = 83
   913
   914 269D AC 17 35 84 82 AC + 	mwy PS :bp2
   915 26A7 A0 00			ldy #$00
   916 26A9 B1 82			lda (:bp2),y
   917 26AB 38 E9 20			sub #$20
   918 26AE 91 82			sta (:bp2),y
   919 26B0			l_04D5
   920 26B0			l_04B7
   921 26B0			l_0485
   922 26B0			l_0453
   923
   924 				; optimize FAIL (0, A8LIBSTR), line = 87
   925
   926 26B0 EE 17 35			inc PS
   927 26B3 D0 03			sne
   928 26B5 EE 18 35			inc PS+1
   929
   930 				; --- ForToDoEpilog
   931 26B8 EE 1A 35			inc BL
   932 26BB F0 03 4C E9 25		jne l_0413
   933 26C0			l_0421
   934
   935 				; ------------------------------------------------------------
   936
   937 = 3517			PS	= DATAORIGIN+$0017
   938 = 3519			BS	= DATAORIGIN+$0019
   939 = 351A			BL	= DATAORIGIN+$001A
   940
   941 = 3517			@VarData	= PS
   942 = 0004			@VarDataSize	= 4
   943
   944 26C0			@exit
   945 					.ifdef @new
   946 					lda <@VarData
   947 					sta :ztmp
   948 					lda >@VarData
   949 					ldy #@VarDataSize-1
   950 					jmp @FreeMem
   951 					els
   952 26C0 60				rts						; ret
   953 					eif
   954 				.endl
   955
   956 				; ------------------------------------------------------------
   957
   958 				.endl							; UNIT A8LIBSTR
   959
   960 				; ------------------------------------------------------------
   961
   962 26C1			.local	ATARI						; UNIT
   963
   964 				; ------------------------------------------------------------
   965
   966 = 0010			IRQENS	= $10
   967 = 0012			RTCLOK	= $12
   968 = 0012			RTCLOK1	= $12
   969 = 0013			RTCLOK2	= $13
   970 = 0014			RTCLOK3	= $14
   971 = 004D			ATRACT	= $4D
   972 = 0052			LMARGIN	= $52
   973 = 0053			RMARGIN	= $53
   974 = 0054			ROWCRS	= $54
   975 = 0055			COLCRS	= $55
   976 = 0057			DINDEX	= $57
   977 = 0058			SAVMSC	= $58
   978 = 0062			PALNTS	= $62
   979 = 006A			RAMTOP	= $6A
   980 = 0200			VDSLST	= $0200
   981 = 0230			SDLSTL	= $0230
   982 = 0290			TXTROW	= $0290
   983 = 0291			TXTCOL	= $0291
   984 = 0293			TINDEX	= $0293
   985 = 0294			TXTMSC	= $0294
   986 = 022F			SDMCTL	= $022F
   987 = 026F			GPRIOR	= $026F
   988 = 02F0			CRSINH	= $02F0
   989 = 02F3			CHACT	= $02F3
   990 = 02F4			CHBAS	= $02F4
   991 = 02FC			CH	= $02FC
   992 = 02C0			PCOLR0	= $02C0
   993 = 02C1			PCOLR1	= $02C1
   994 = 02C2			PCOLR2	= $02C2
   995 = 02C3			PCOLR3	= $02C3
   996 = 02C4			COLOR0	= $02C4
   997 = 02C5			COLOR1	= $02C5
   998 = 02C6			COLOR2	= $02C6
   999 = 02C7			COLOR3	= $02C7
  1000 = 02C8			COLOR4	= $02C8
  1001 = 02C8			COLBAKS	= $02C8
  1002 = D000			HPOSP0	= $D000
  1003 = D001			HPOSP1	= $D001
  1004 = D002			HPOSP2	= $D002
  1005 = D003			HPOSP3	= $D003
  1006 = D004			HPOSM0	= $D004
  1007 = D005			HPOSM1	= $D005
  1008 = D006			HPOSM2	= $D006
  1009 = D007			HPOSM3	= $D007
  1010 = D008			SIZEP0	= $D008
  1011 = D009			SIZEP1	= $D009
  1012 = D00A			SIZEP2	= $D00A
  1013 = D00B			SIZEP3	= $D00B
  1014 = D00C			SIZEM	= $D00C
  1015 = D00D			GRAFP0	= $D00D
  1016 = D00E			GRAFP1	= $D00E
  1017 = D00F			GRAFP2	= $D00F
  1018 = D010			GRAFP3	= $D010
  1019 = D011			GRAFM	= $D011
  1020 = D004			P0PF	= $D004
  1021 = D014			PAL	= $D014
  1022 = D013			TRIG3	= $D013
  1023 = D012			COLPM0	= $D012
  1024 = D013			COLPM1	= $D013
  1025 = D014			COLPM2	= $D014
  1026 = D015			COLPM3	= $D015
  1027 = D016			COLPF0	= $D016
  1028 = D017			COLPF1	= $D017
  1029 = D018			COLPF2	= $D018
  1030 = D019			COLPF3	= $D019
  1031 = D01A			COLBK	= $D01A
  1032 = D01B			PRIOR	= $D01B
  1033 = D01D			GRACTL	= $D01D
  1034 = D01E			HITCLR	= $D01E
  1035 = D01F			CONSOL	= $D01F
  1036 = D200			AUDF1	= $D200
  1037 = D201			AUDC1	= $D201
  1038 = D202			AUDF2	= $D202
  1039 = D203			AUDC2	= $D203
  1040 = D204			AUDF3	= $D204
  1041 = D205			AUDC3	= $D205
  1042 = D206			AUDF4	= $D206
  1043 = D207			AUDC4	= $D207
  1044 = D208			AUDCTL	= $D208
  1045 = D209			KBCODE	= $D209
  1046 = D20E			IRQEN	= $D20E
  1047 = D20F			SKSTAT	= $D20F
  1048 = D300			PORTA	= $D300
  1049 = D301			PORTB	= $D301
  1050 = D302			PACTL	= $D302
  1051 = D400			DMACTL	= $D400
  1052 = D401			CHACTL	= $D401
  1053 = D402			DLISTL	= $D402
  1054 = D404			HSCROL	= $D404
  1055 = D405			VSCROL	= $D405
  1056 = D407			PMBASE	= $D407
  1057 = D409			CHBASE	= $D409
  1058 = D40A			WSYNC	= $D40A
  1059 = D40B			VCOUNT	= $D40B
  1060 = D40C			PENH	= $D40C
  1061 = D40D			PENV	= $D40D
  1062 = D40E			NMIEN	= $D40E
  1063 = FFFA			NMIVEC	= $FFFA
  1064 = FFFC			RESETVEC	= $FFFC
  1065 = FFFE			IRQVEC	= $FFFE
  1066
  1067 				.endl							; UNIT ATARI
  1068
  1069 				; ------------------------------------------------------------
  1070
  1071 26C1			.local	CRT						; UNIT
  1072
  1073 26C1			.local	CLRSCR						; PROCEDURE
  1074
  1075 				; optimize FAIL ('@print', crt_atari.inc), line = 34
  1076
  1077 					@print #$7D
  1077 				 LDY# $7D\ JSR @PRINT
  1077 26C1 A0 7D		 LDY# $7D
  1077 26C3 20 5B 24		 JSR @PRINT
  1078 26C6			@exit
  1079 					.ifdef @new
  1080 					lda <@VarData
  1081 					sta :ztmp
  1082 					lda >@VarData
  1083 					ldy #@VarDataSize-1
  1084 					jmp @FreeMem
  1085 					els
  1086 26C6 60				rts						; ret
  1087 					eif
  1088 				.endl
  1089
  1090 				; ------------------------------------------------------------
  1091
  1092 = 351C			TEXTATTR	= DATAORIGIN+$001C
  1093 = D01F			CONSOL	= $D01F
  1094 = 0000			CN_START_SELECT_OPTION	= $00
  1095 = 0001			CN_SELECT_OPTION	= $01
  1096 = 0002			CN_START_OPTION	= $02
  1097 = 0003			CN_OPTION	= $03
  1098 = 0004			CN_START_SELECT	= $04
  1099 = 0005			CN_SELECT	= $05
  1100 = 0006			CN_START	= $06
  1101 = 0007			CN_NONE	= $07
  1102 = 0000			BW40	= $00
  1103 = 0001			CO40	= $01
  1104 = 0002			BW80	= $02
  1105 = 0003			CO80	= $03
  1106 = 0007			MONO	= $07
  1107 = 0001			C40	= $01
  1108 = 0003			C80	= $03
  1109 = 0000			BLACK	= $00
  1110 = 000F			WHITE	= $0F
  1111 = 0026			RED	= $26
  1112 = 00AC			CYAN	= $AC
  1113 = 0048			PURPLE	= $48
  1114 = 00B6			GREEN	= $B6
  1115 = 0086			BLUE	= $86
  1116 = 00DC			YELLOW	= $DC
  1117 = 0018			ORANGE	= $18
  1118 = 00F4			BROWN	= $F4
  1119 = 002A			LIGHT_RED	= $2A
  1120 = 0004			DARK_GREY	= $04
  1121 = 0008			GREY	= $08
  1122 = 00BC			LIGHT_GREEN	= $BC
  1123 = 009A			LIGHT_BLUE	= $9A
  1124 = 000C			LIGHT_GREY	= $0C
  1125 = 0080			BLINK	= $80
  1126
  1127 				.endl							; UNIT CRT
  1128
  1129 				; ------------------------------------------------------------
  1130
  1131 26C7			.local	DOS						; UNIT
  1132
  1133 				; ------------------------------------------------------------
  1134
  1135 = D014			PALNTSC	= $D014
  1136
  1137 				.endl							; UNIT DOS
  1138
  1139 				; ------------------------------------------------------------
  1140
  1141 26C7			.local	STRUTILS					; UNIT
  1142
  1143 				; ------------------------------------------------------------
  1144
  1145 				.endl							; UNIT STRUTILS
  1146
  1147 				; ------------------------------------------------------------
  1148
  1149 26C7			.local	SYSUTILS					; UNIT
  1150
  1151 				; ------------------------------------------------------------
  1152
  1153 = 0001			FAREADONLY	= $01
  1154 = 0002			FAHIDDEN	= $02
  1155 = 0004			FASYSFILE	= $04
  1156 = 0008			FAVOLUMEID	= $08
  1157 = 0010			FADIRECTORY	= $10
  1158 = 0020			FAARCHIVE	= $20
  1159 = 003F			FAANYFILE	= $3F
  1160
  1161 				.endl							; UNIT SYSUTILS
  1162
  1163 				; ------------------------------------------------------------
  1164
  1165 26C7			.local	A8LIBWIN					; UNIT
  1166
  1167 26C7			.local	WINIT						; PROCEDURE
  1168
  1169 				; optimize OK (A8LIBWIN), line = 56
  1170
  1171 26C7 A9 01			lda #$01
  1172 26C9 8D F0 02			sta $02F0
  1173
  1174 				; optimize OK (A8LIBWIN), line = 57
  1175
  1176 26CC A9 00			lda #$00
  1177 26CE 85 52			sta $0052
  1178
  1179 				; optimize FAIL ('CRT.CLRSCR', A8LIBWIN), line = 58
  1180
  1181 26D0 20 C1 26			jsr CRT.CLRSCR
  1182
  1183 				; optimize OK (A8LIBWIN), line = 61
  1184
  1185 26D3 AD 69 2E			lda BAWM
  1186 26D6 85 88			sta SYSTEM.FILLCHAR_0286.A
  1187 26D8 AD 6A 2E			lda BAWM+1
  1188 26DB 85 89			sta SYSTEM.FILLCHAR_0286.A+1
  1189 26DD A9 14			lda #$14
  1190 26DF 85 8C			sta SYSTEM.FILLCHAR_0286.COUNT
  1191 26E1 A9 08			lda #$08
  1192 26E3 85 8D			sta SYSTEM.FILLCHAR_0286.COUNT+1
  1193 26E5 A9 00			lda #$00
  1194 26E7 85 84			sta SYSTEM.FILLCHAR_0286.VALUE
  1195 26E9				.local +MAIN.SYSTEM.FILLCHAR_0286
  1196 26E9				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0286.M@INLINE [Source: stubapp.a65]
     4 26E9 20 A5 23			jsr @fill
Source: stubapp.a65
  1197 					.endl
  1198
  1199 				; optimize OK (A8LIBWIN), line = 64
  1200
  1201 26EC AD 69 2E			lda BAWM
  1202 26EF 8D A1 3D			sta CPWM
  1203 26F2 AD 6A 2E			lda BAWM+1
  1204 26F5 8D A2 3D			sta CPWM+1
  1205
  1206 				; optimize OK (A8LIBWIN), line = 67
  1207
  1208 26F8 A9 00			lda #$00
  1209 26FA 8D A3 3D			sta BL
  1210
  1211 26FD			l_054A
  1212 				; --- ForToDoCondition
  1213 26FD AC A3 3D			ldy BL
  1214 2700 C0 0B			cpy #$0B
  1215 2702 B0 32			jcs l_0558
  1216
  1217 				; optimize OK (A8LIBWIN), line = 70
  1218
  1219 2704 A9 00			lda #$00
  1220 2706 99 1D 35			sta adr.BAW.BU,y
  1221
  1222 				; optimize OK (A8LIBWIN), line = 71
  1223
  1224 2709 99 28 35			sta adr.BAW.BX,y
  1225
  1226 				; optimize OK (A8LIBWIN), line = 72
  1227
  1228 270C 99 33 35			sta adr.BAW.BY,y
  1229
  1230 				; optimize OK (A8LIBWIN), line = 73
  1231
  1232 270F 99 3E 35			sta adr.BAW.BW,y
  1233
  1234 				; optimize OK (A8LIBWIN), line = 74
  1235
  1236 2712 99 49 35			sta adr.BAW.BH,y
  1237
  1238 				; optimize OK (A8LIBWIN), line = 75
  1239
  1240 2715 99 54 35			sta adr.BAW.BI,y
  1241
  1242 				; optimize OK (A8LIBWIN), line = 76
  1243
  1244 2718 AD A3 3D			lda BL
  1245 271B 0A				asl @
  1246 271C A8				tay
  1247 271D AD 69 2E			lda BAWM
  1248 2720 99 5F 35			sta adr.BAW.CM,y
  1249 2723 AD 6A 2E			lda BAWM+1
  1250 2726 99 60 35			sta adr.BAW.CM+1,y
  1251
  1252 				; optimize OK (A8LIBWIN), line = 77
  1253
  1254 2729 A9 00			lda #$00
  1255 272B 99 75 35			sta adr.BAW.CZ,y
  1256 272E 99 76 35			sta adr.BAW.CZ+1,y
  1257
  1258 				; --- ForToDoEpilog
  1259 2731 EE A3 3D			inc BL
  1260 2734 D0 C7			jne l_054A
  1261 2736			l_0558
  1262
  1263 				; optimize OK (A8LIBWIN), line = 81
  1264
  1265 2736 A9 00			lda #$00
  1266 2738 8D 8B 35			sta VCUR.VX
  1267
  1268 				; optimize OK (A8LIBWIN), line = 82
  1269
  1270 273B 8D 8C 35			sta VCUR.VY
  1271
  1272 				; ------------------------------------------------------------
  1273
  1274 = 3DA3			BL	= DATAORIGIN+$08A3
  1275
  1276 = 3DA3			@VarData	= BL
  1277 = 0001			@VarDataSize	= 1
  1278
  1279 273E			@exit
  1280 					.ifdef @new
  1281 					lda <@VarData
  1282 					sta :ztmp
  1283 					lda >@VarData
  1284 					ldy #@VarDataSize-1
  1285 					jmp @FreeMem
  1286 					els
  1287 273E 60				rts						; ret
  1288 					eif
  1289 				.endl
  1290
  1291 273F			.local	WBACK						; PROCEDURE
  1292 273F 8D A4 3D			sta BN
  1293
  1294 				; optimize OK (A8LIBWIN), line = 94
  1295
  1296 2742 A5 58			lda $0058
  1297 2744 85 88			sta SYSTEM.FILLCHAR_0286.A
  1298 2746 A5 59			lda $0058+1
  1299 2748 85 89			sta SYSTEM.FILLCHAR_0286.A+1
  1300 274A A9 C0			lda #$C0
  1301 274C 85 8C			sta SYSTEM.FILLCHAR_0286.COUNT
  1302 274E A9 03			lda #$03
  1303 2750 85 8D			sta SYSTEM.FILLCHAR_0286.COUNT+1
  1304 2752 AD A4 3D			lda BN
  1305 2755 85 84			sta SYSTEM.FILLCHAR_0286.VALUE
  1306 2757				.local +MAIN.SYSTEM.FILLCHAR_0286
  1307 2757				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0286.M@INLINE [Source: stubapp.a65]
     4 2757 20 A5 23			jsr @fill
Source: stubapp.a65
  1308 					.endl
  1309
  1310 				; ------------------------------------------------------------
  1311
  1312 = 3DA4			BN	= DATAORIGIN+$08A4
  1313
  1314 = 3DA4			@VarData	= BN
  1315 = 0001			@VarDataSize	= 1
  1316
  1317 275A			@exit
  1318 					.ifdef @new
  1319 					lda <@VarData
  1320 					sta :ztmp
  1321 					lda >@VarData
  1322 					ldy #@VarDataSize-1
  1323 					jmp @FreeMem
  1324 					els
  1325 275A 60				rts						; ret
  1326 					eif
  1327 				.endl
  1328
  1329 275B			.local	WOPEN						; FUNCTION
  1330
  1331 				; optimize OK (A8LIBWIN), line = 118
  1332
  1333 275B A9 64			lda #$64
  1334 275D 8D AA 3D			sta RESULT
  1335
  1336 				; optimize OK (A8LIBWIN), line = 121
  1337
  1338 2760 A9 00			lda #$00
  1339 2762 8D AB 3D			sta BL
  1340
  1341 2765			l_05B9
  1342 				; --- ForToDoCondition
  1343 2765 AC AB 3D			ldy BL
  1344 2768 C0 0B			cpy #$0B
  1345 276A 90 03 4C 2D 29		jcs l_05C7
  1346
  1347 				; optimize OK (A8LIBWIN), line = 124
  1348
  1349 276F B9 1D 35			lda adr.BAW.BU,y
  1350 2772 F0 03 4C 25 29		jne l_05DC
  1351
  1352 				; optimize OK (A8LIBWIN), line = 127
  1353
  1354 2777 A9 01			lda #$01
  1355 2779 99 1D 35			sta adr.BAW.BU,y
  1356
  1357 				; optimize OK (A8LIBWIN), line = 130
  1358
  1359 277C AD AB 3D			lda BL
  1360 277F 0A				asl @
  1361 2780 A8				tay
  1362 2781 AD A1 3D			lda CPWM
  1363 2784 99 5F 35			sta adr.BAW.CM,y
  1364 2787 AD A2 3D			lda CPWM+1
  1365 278A 99 60 35			sta adr.BAW.CM+1,y
  1366
  1367 				; optimize OK (A8LIBWIN), line = 131
  1368
  1369 278D AD AB 3D			lda BL
  1370 2790 85 9D			sta :STACKORIGIN+9
  1371 2792 A9 00			lda #$00
  1372 2794 06 9D			asl :STACKORIGIN+9
  1373 2796 2A				rol @
  1374 2797 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1375 2799 AD A8 3D			lda H
  1376 279C 85 8C			sta :ecx
  1377 279E AD A7 3D			lda W
  1378 27A1 85 84			sta :eax
  1379 					.ifdef fmulinit
  1380 					fmulu_8
  1381 					els
  1382 27A3 20 ED 23			imulCL
  1383 					eif
  1384 27A6 A5 84			lda :eax
  1385 27A8 85 9E			sta :STACKORIGIN+10
  1386 27AA A5 85			lda :eax+1
  1387 27AC 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  1388 27AE A5 9D			lda :STACKORIGIN+9
  1389 27B0 18 69 00			add #$00
  1390 27B3 A8				tay
  1391 27B4 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1392 27B6 69 00			adc #$00
  1393 27B8 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1394 27BA A5 9E			lda :STACKORIGIN+10
  1395 27BC 99 75 35			sta adr.BAW.CZ,y
  1396 27BF A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  1397 27C1 99 76 35			sta adr.BAW.CZ+1,y
  1398
  1399 				; optimize OK (A8LIBWIN), line = 134
  1400
  1401 27C4 AC AB 3D			ldy BL
  1402 27C7 AD A5 3D			lda X
  1403 27CA 99 28 35			sta adr.BAW.BX,y
  1404
  1405 				; optimize OK (A8LIBWIN), line = 135
  1406
  1407 27CD AD A6 3D			lda Y
  1408 27D0 99 33 35			sta adr.BAW.BY,y
  1409
  1410 				; optimize OK (A8LIBWIN), line = 136
  1411
  1412 27D3 AD A7 3D			lda W
  1413 27D6 99 3E 35			sta adr.BAW.BW,y
  1414
  1415 				; optimize OK (A8LIBWIN), line = 137
  1416
  1417 27D9 AD A8 3D			lda H
  1418 27DC 99 49 35			sta adr.BAW.BH,y
  1419
  1420 				; optimize OK (A8LIBWIN), line = 138
  1421
  1422 27DF AD A9 3D			lda BT
  1423 27E2 99 54 35			sta adr.BAW.BI,y
  1424
  1425 				; optimize OK (A8LIBWIN), line = 141
  1426
  1427 27E5 A5 58			lda $0058
  1428 27E7 85 9D			sta :STACKORIGIN+9
  1429 27E9 A5 59			lda $0058+1
  1430 27EB 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1431 27ED AD A6 3D			lda Y
  1432 27F0 20 36 24			jsr @mul40
  1433 27F3 18 65 9D			add :STACKORIGIN+9
  1434 27F6 A8				tay
  1435 27F7 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1436 27F9 65 85			adc :eax+1
  1437 27FB 8D D8 3D			sta PS+1
  1438 27FE 98				tya
  1439 27FF 18 6D A5 3D			add X
  1440 2803 8D D7 3D			sta PS
  1441 2806 90 03			scc
  1442 2808 EE D8 3D			inc PS+1
  1443
  1444 				; optimize OK (A8LIBWIN), line = 144
  1445
  1446 280B A9 00			lda #$00
  1447 280D 8D AC 3D			sta BD
  1448 2810 AC A8 3D			ldy H
  1449 2813 88				dey
  1450 2814 8C 18 28			sty @FORTMP_0649_0
  1451
  1452 2817			l_064C
  1453 				; --- ForToDoCondition
  1454 2817 A9 00			lda @FORTMP_0649_0:#$00
  1455 2819 CD AC 3D			cmp BD
  1456 281C B0 03 4C 1C 29		jcc l_065A
  1457
  1458 				; optimize OK (A8LIBWIN), line = 149
  1459
  1460 2821 AD AC 3D			lda BD
  1461 2824 F0 0B			jeq l_067Ex
  1462 2826 AD A8 3D			lda H
  1463 2829 38 E9 01			sub #$01
  1464 282C CD AC 3D			cmp BD
  1465 282F D0 3D			jne l_067E
  1466 2831			l_067Ex
  1467
  1468 				; optimize OK (A8LIBWIN), line = 152
  1469
  1470 2831 A9 AE			lda <adr.CL
  1471 2833 85 88			sta SYSTEM.FILLCHAR_0286.A
  1472 2835 A9 3D			lda >adr.CL
  1473 2837 85 89			sta SYSTEM.FILLCHAR_0286.A+1
  1474 2839 AD A7 3D			lda W
  1475 283C 85 8C			sta SYSTEM.FILLCHAR_0286.COUNT
  1476 283E A9 00			lda #$00
  1477 2840 85 8D			sta SYSTEM.FILLCHAR_0286.COUNT+1
  1478 2842 A9 52			lda #$52
  1479 2844 85 84			sta SYSTEM.FILLCHAR_0286.VALUE
  1480 2846				.local +MAIN.SYSTEM.FILLCHAR_0286
  1481 2846				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0286.M@INLINE [Source: stubapp.a65]
     4 2846 20 A5 23			jsr @fill
Source: stubapp.a65
  1482 					.endl
  1483
  1484 				; optimize OK (A8LIBWIN), line = 155
  1485
  1486 2849 AD AC 3D			lda BD
  1487 284C D0 10			jne l_0697
  1488
  1489 				; optimize OK (A8LIBWIN), line = 157
  1490
  1491 284E A9 51			lda #$51
  1492 2850 8D AE 3D			sta adr.CL
  1493
  1494 				; optimize OK (A8LIBWIN), line = 158
  1495
  1496 2853 AC A7 3D			ldy W
  1497 2856 A9 45			lda #$45
  1498 2858 99 AD 3D			sta adr.CL-$01,y
  1499 285B 4C 6B 28			jmp l_06B1
  1500 285E			l_0697
  1501
  1502 				; optimize OK (A8LIBWIN), line = 162
  1503
  1504 285E A9 5A			lda #$5A
  1505 2860 8D AE 3D			sta adr.CL
  1506
  1507 				; optimize OK (A8LIBWIN), line = 163
  1508
  1509 2863 AC A7 3D			ldy W
  1510 2866 A9 43			lda #$43
  1511 2868 99 AD 3D			sta adr.CL-$01,y
  1512 286B			l_06B1
  1513 286B 4C 8F 28			jmp l_06CA
  1514 286E			l_067E
  1515
  1516 				; optimize OK (A8LIBWIN), line = 169
  1517
  1518 286E A9 AE			lda <adr.CL
  1519 2870 85 88			sta SYSTEM.FILLCHAR_0286.A
  1520 2872 A9 3D			lda >adr.CL
  1521 2874 85 89			sta SYSTEM.FILLCHAR_0286.A+1
  1522 2876 AD A7 3D			lda W
  1523 2879 85 8C			sta SYSTEM.FILLCHAR_0286.COUNT
  1524 287B A9 00			lda #$00
  1525 287D 85 8D			sta SYSTEM.FILLCHAR_0286.COUNT+1
  1526 287F 85 84			sta SYSTEM.FILLCHAR_0286.VALUE
  1527 2881				.local +MAIN.SYSTEM.FILLCHAR_0286
  1528 2881				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0286.M@INLINE [Source: stubapp.a65]
     4 2881 20 A5 23			jsr @fill
Source: stubapp.a65
  1529 					.endl
  1530
  1531 				; optimize OK (A8LIBWIN), line = 170
  1532
  1533 2884 A9 7C			lda #$7C
  1534 2886 8D AE 3D			sta adr.CL
  1535
  1536 				; optimize OK (A8LIBWIN), line = 171
  1537
  1538 2889 AC A7 3D			ldy W
  1539 288C 99 AD 3D			sta adr.CL-$01,y
  1540 288F			l_06CA
  1541
  1542 				; optimize OK (A8LIBWIN), line = 175
  1543
  1544 288F AD A9 3D			lda BT
  1545 2892 C9 01			cmp #$01
  1546 2894 D0 23			jne l_06F2
  1547
  1548 				; optimize OK (A8LIBWIN), line = 177
  1549
  1550 2896 A9 00			lda #$00
  1551 2898 8D AD 3D			sta BC
  1552 289B AC A7 3D			ldy W
  1553 289E 88				dey
  1554 289F 8C A3 28			sty @FORTMP_06FF_0
  1555
  1556 28A2			l_0702
  1557 				; --- ForToDoCondition
  1558 28A2 A9 00			lda @FORTMP_06FF_0:#$00
  1559 28A4 CD AD 3D			cmp BC
  1560 28A7 90 10			jcc l_0710
  1561
  1562 				; optimize OK (A8LIBWIN), line = 179
  1563
  1564 28A9 AC AD 3D			ldy BC
  1565 28AC B9 AE 3D			lda adr.CL,y
  1566 28AF 49 80			eor #$80
  1567 28B1 99 AE 3D			sta adr.CL,y
  1568
  1569 				; --- ForToDoEpilog
  1570 28B4 EE AD 3D			inc BC
  1571 28B7 D0 E9			jne l_0702
  1572 28B9			l_0710
  1573 28B9			l_06F2
  1574
  1575 				; optimize OK (A8LIBWIN), line = 184
  1576
  1577 28B9 AD D7 3D			lda PS
  1578 28BC 85 88			sta SYSTEM.MOVE_0287.SOURCE
  1579 28BE AD D8 3D			lda PS+1
  1580 28C1 85 89			sta SYSTEM.MOVE_0287.SOURCE+1
  1581 28C3 AD A1 3D			lda CPWM
  1582 28C6 85 8C			sta SYSTEM.MOVE_0287.DEST
  1583 28C8 AD A2 3D			lda CPWM+1
  1584 28CB 85 8D			sta SYSTEM.MOVE_0287.DEST+1
  1585 28CD AD A7 3D			lda W
  1586 28D0 85 84			sta SYSTEM.MOVE_0287.COUNT
  1587 28D2 A9 00			lda #$00
  1588 28D4 85 85			sta SYSTEM.MOVE_0287.COUNT+1
  1589 28D6				.local +MAIN.SYSTEM.MOVE_0287
  1590 28D6				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0287.M@INLINE [Source: stubapp.a65]
     4 28D6 20 50 23			jsr @move
Source: stubapp.a65
  1591 					.endl
  1592
  1593 				; optimize OK (A8LIBWIN), line = 186
  1594
  1595 28D9 AD A1 3D			lda CPWM
  1596 28DC 18 6D A7 3D			add W
  1597 28E0 8D A1 3D			sta CPWM
  1598 28E3 90 03			scc
  1599 28E5 EE A2 3D			inc CPWM+1
  1600
  1601 				; optimize OK (A8LIBWIN), line = 188
  1602
  1603 28E8 A9 AE			lda <adr.CL
  1604 28EA 85 88			sta SYSTEM.MOVE_0287.SOURCE
  1605 28EC A9 3D			lda >adr.CL
  1606 28EE 85 89			sta SYSTEM.MOVE_0287.SOURCE+1
  1607 28F0 AD D7 3D			lda PS
  1608 28F3 85 8C			sta SYSTEM.MOVE_0287.DEST
  1609 28F5 AD D8 3D			lda PS+1
  1610 28F8 85 8D			sta SYSTEM.MOVE_0287.DEST+1
  1611 28FA AD A7 3D			lda W
  1612 28FD 85 84			sta SYSTEM.MOVE_0287.COUNT
  1613 28FF A9 00			lda #$00
  1614 2901 85 85			sta SYSTEM.MOVE_0287.COUNT+1
  1615 2903				.local +MAIN.SYSTEM.MOVE_0287
  1616 2903				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0287.M@INLINE [Source: stubapp.a65]
     4 2903 20 50 23			jsr @move
Source: stubapp.a65
  1617 					.endl
  1618
  1619 				; optimize OK (A8LIBWIN), line = 190
  1620
  1621 2906 AD D7 3D			lda PS
  1622 2909 18 69 28			add #$28
  1623 290C 8D D7 3D			sta PS
  1624 290F 90 03			scc
  1625 2911 EE D8 3D			inc PS+1
  1626
  1627 				; --- ForToDoEpilog
  1628 2914 EE AC 3D			inc BD
  1629 2917 F0 03 4C 17 28		jne l_064C
  1630 291C			l_065A
  1631
  1632 				; optimize OK (A8LIBWIN), line = 194
  1633
  1634 291C AD AB 3D			lda BL
  1635 291F 8D AA 3D			sta RESULT
  1636 2922 4C 2D 29			jmp b_05B9					; break
  1637 2925			l_05DC
  1638
  1639 				; --- ForToDoEpilog
  1640 2925 EE AB 3D			inc BL
  1641 2928 F0 03 4C 65 27		jne l_05B9
  1642 292D			l_05C7
  1643 292D			b_05B9
  1644 292D			@exit
  1645
  1646 				; ------------------------------------------------------------
  1647
  1648 = 3DA5			X	= DATAORIGIN+$08A5
  1649 = 3DA6			Y	= DATAORIGIN+$08A6
  1650 = 3DA7			W	= DATAORIGIN+$08A7
  1651 = 3DA8			H	= DATAORIGIN+$08A8
  1652 = 3DA9			BT	= DATAORIGIN+$08A9
  1653 = 3DAA			RESULT	= DATAORIGIN+$08AA
  1654 = 3DAB			BL	= DATAORIGIN+$08AB
  1655 = 3DAC			BD	= DATAORIGIN+$08AC
  1656 = 3DAD			BC	= DATAORIGIN+$08AD
  1657 = 3DAE			adr.CL	= [DATAORIGIN+$08AE] .array [41]
  1658 292D			.var CL	= adr.CL .word
  1659 = 3DD7			PS	= DATAORIGIN+$08D7
  1660
  1661 = 3DA5			@VarData	= X
  1662 = 0033			@VarDataSize	= 51
  1663
  1664 292D 60				rts						; ret
  1665 = 292E AE 3D		CL
  1665 				.endl
  1666
  1667 2930			.local	WCLOSE						; FUNCTION
  1668 2930 8D DB 3D			sta BN
  1669
  1670 				; optimize OK (A8LIBWIN), line = 216
  1671
  1672 2933 A9 65			lda #$65
  1673 2935 8D DC 3D			sta RESULT
  1674
  1675 				; optimize OK (A8LIBWIN), line = 219
  1676
  1677 2938 AC DB 3D			ldy BN
  1678 293B B9 1D 35			lda adr.BAW.BU,y
  1679 293E C9 01			cmp #$01
  1680 2940 F0 03 4C 4D 2A		jne l_0769
  1681
  1682 				; optimize OK (A8LIBWIN), line = 222
  1683
  1684 2945 A5 58			lda $0058
  1685 2947 85 9D			sta :STACKORIGIN+9
  1686 2949 A5 59			lda $0058+1
  1687 294B 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1688 294D B9 33 35			lda adr.BAW.BY,y
  1689 2950 20 36 24			jsr @mul40
  1690 2953 18 65 9D			add :STACKORIGIN+9
  1691 2956 85 9D			sta :STACKORIGIN+9
  1692 2958 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1693 295A 65 85			adc :eax+1
  1694 295C 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1695 295E AC DB 3D			ldy BN
  1696 2961 A5 9D			lda :STACKORIGIN+9
  1697 2963 18 79 28 35			add adr.BAW.BX,y
  1698 2967 8D DE 3D			sta PS
  1699 296A A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1700 296C 69 00			adc #$00
  1701 296E 8D DF 3D			sta PS+1
  1702
  1703 				; optimize OK (A8LIBWIN), line = 225
  1704
  1705 2971 AD DB 3D			lda BN
  1706 2974 0A				asl @
  1707 2975 A8				tay
  1708 2976 B9 5F 35			lda adr.BAW.CM,y
  1709 2979 8D E0 3D			sta PA
  1710 297C B9 60 35			lda adr.BAW.CM+1,y
  1711 297F 8D E1 3D			sta PA+1
  1712
  1713 				; optimize OK (A8LIBWIN), line = 228
  1714
  1715 2982 A9 00			lda #$00
  1716 2984 8D DD 3D			sta BL
  1717 2987 AC DB 3D			ldy BN
  1718 298A B9 49 35			lda adr.BAW.BH,y
  1719 298D 38 E9 01			sub #$01
  1720 2990 8D 94 29			sta @FORTMP_079C_0
  1721
  1722 2993			l_079F
  1723 				; --- ForToDoCondition
  1724 2993 A9 00			lda @FORTMP_079C_0:#$00
  1725 2995 CD DD 3D			cmp BL
  1726 2998 90 48			jcc l_07AD
  1727
  1728 				; optimize OK (A8LIBWIN), line = 231
  1729
  1730 299A AC DB 3D			ldy BN
  1731 299D B9 3E 35			lda adr.BAW.BW,y
  1732 29A0 85 84			sta SYSTEM.MOVE_0287.COUNT
  1733 29A2 AD E0 3D			lda PA
  1734 29A5 85 88			sta SYSTEM.MOVE_0287.SOURCE
  1735 29A7 AD E1 3D			lda PA+1
  1736 29AA 85 89			sta SYSTEM.MOVE_0287.SOURCE+1
  1737 29AC AD DE 3D			lda PS
  1738 29AF 85 8C			sta SYSTEM.MOVE_0287.DEST
  1739 29B1 AD DF 3D			lda PS+1
  1740 29B4 85 8D			sta SYSTEM.MOVE_0287.DEST+1
  1741 29B6 A9 00			lda #$00
  1742 29B8 85 85			sta SYSTEM.MOVE_0287.COUNT+1
  1743 29BA				.local +MAIN.SYSTEM.MOVE_0287
  1744 29BA				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0287.M@INLINE [Source: stubapp.a65]
     4 29BA 20 50 23			jsr @move
Source: stubapp.a65
  1745 					.endl
  1746
  1747 				; optimize OK (A8LIBWIN), line = 233
  1748
  1749 29BD AC DB 3D			ldy BN
  1750 29C0 AD E0 3D			lda PA
  1751 29C3 18 79 3E 35			add adr.BAW.BW,y
  1752 29C7 8D E0 3D			sta PA
  1753 29CA 90 03			scc
  1754 29CC EE E1 3D			inc PA+1
  1755
  1756 				; optimize OK (A8LIBWIN), line = 235
  1757
  1758 29CF AD DE 3D			lda PS
  1759 29D2 18 69 28			add #$28
  1760 29D5 8D DE 3D			sta PS
  1761 29D8 90 03			scc
  1762 29DA EE DF 3D			inc PS+1
  1763
  1764 				; --- ForToDoEpilog
  1765 29DD EE DD 3D			inc BL
  1766 29E0 D0 B1			jne l_079F
  1767 29E2			l_07AD
  1768
  1769 				; optimize OK (A8LIBWIN), line = 239
  1770
  1771 29E2 AD DB 3D			lda BN
  1772 29E5 0A				asl @
  1773 29E6 A8				tay
  1774 29E7 B9 75 35			lda adr.BAW.CZ,y
  1775 29EA 85 8C			sta SYSTEM.FILLCHAR_0286.COUNT
  1776 29EC B9 76 35			lda adr.BAW.CZ+1,y
  1777 29EF 85 8D			sta SYSTEM.FILLCHAR_0286.COUNT+1
  1778 29F1 B9 5F 35			lda adr.BAW.CM,y
  1779 29F4 85 88			sta SYSTEM.FILLCHAR_0286.A
  1780 29F6 B9 60 35			lda adr.BAW.CM+1,y
  1781 29F9 85 89			sta SYSTEM.FILLCHAR_0286.A+1
  1782 29FB A9 00			lda #$00
  1783 29FD 85 84			sta SYSTEM.FILLCHAR_0286.VALUE
  1784 29FF				.local +MAIN.SYSTEM.FILLCHAR_0286
  1785 29FF				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_0286.M@INLINE [Source: stubapp.a65]
     4 29FF 20 A5 23			jsr @fill
Source: stubapp.a65
  1786 					.endl
  1787
  1788 				; optimize OK (A8LIBWIN), line = 242
  1789
  1790 2A02 AD DB 3D			lda BN
  1791 2A05 0A				asl @
  1792 2A06 A8				tay
  1793 2A07 AD A1 3D			lda CPWM
  1794 2A0A 38 F9 75 35			sub adr.BAW.CZ,y
  1795 2A0E 8D A1 3D			sta CPWM
  1796 2A11 AD A2 3D			lda CPWM+1
  1797 2A14 F9 76 35			sbc adr.BAW.CZ+1,y
  1798 2A17 8D A2 3D			sta CPWM+1
  1799
  1800 				; optimize OK (A8LIBWIN), line = 245
  1801
  1802 2A1A AC DB 3D			ldy BN
  1803 2A1D A9 00			lda #$00
  1804 2A1F 99 1D 35			sta adr.BAW.BU,y
  1805
  1806 				; optimize OK (A8LIBWIN), line = 246
  1807
  1808 2A22 99 28 35			sta adr.BAW.BX,y
  1809
  1810 				; optimize OK (A8LIBWIN), line = 247
  1811
  1812 2A25 99 33 35			sta adr.BAW.BY,y
  1813
  1814 				; optimize OK (A8LIBWIN), line = 248
  1815
  1816 2A28 99 3E 35			sta adr.BAW.BW,y
  1817
  1818 				; optimize OK (A8LIBWIN), line = 249
  1819
  1820 2A2B 99 49 35			sta adr.BAW.BH,y
  1821
  1822 				; optimize OK (A8LIBWIN), line = 250
  1823
  1824 2A2E 99 54 35			sta adr.BAW.BI,y
  1825
  1826 				; optimize OK (A8LIBWIN), line = 251
  1827
  1828 2A31 AD DB 3D			lda BN
  1829 2A34 0A				asl @
  1830 2A35 A8				tay
  1831 2A36 AD 69 2E			lda BAWM
  1832 2A39 99 5F 35			sta adr.BAW.CM,y
  1833 2A3C AD 6A 2E			lda BAWM+1
  1834 2A3F 99 60 35			sta adr.BAW.CM+1,y
  1835
  1836 				; optimize OK (A8LIBWIN), line = 252
  1837
  1838 2A42 A9 00			lda #$00
  1839 2A44 99 75 35			sta adr.BAW.CZ,y
  1840 2A47 99 76 35			sta adr.BAW.CZ+1,y
  1841
  1842 				; optimize OK (A8LIBWIN), line = 255
  1843
  1844 2A4A 8D DC 3D			sta RESULT
  1845 2A4D			l_0769
  1846 2A4D			@exit
  1847
  1848 				; ------------------------------------------------------------
  1849
  1850 = 3DDB			BN	= DATAORIGIN+$08DB
  1851 = 3DDC			RESULT	= DATAORIGIN+$08DC
  1852 = 3DDD			BL	= DATAORIGIN+$08DD
  1853 = 3DDE			PS	= DATAORIGIN+$08DE
  1854 = 3DE0			PA	= DATAORIGIN+$08E0
  1855
  1856 = 3DDB			@VarData	= BN
  1857 = 0006			@VarDataSize	= 6
  1858
  1859 2A4D 60				rts						; ret
  1860 				.endl
  1861
  1862 2A4E			.local	WPRINT						; FUNCTION
  1863
  1864 				; ------------------------------------------------------------
  1865
  1866 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1867 				; as Pointer
  1868 2A4E B5 94			lda :STACKORIGIN,x
  1869 2A50 8D E3 3D			sta BN
  1870 2A53 CA				dex
  1871 2A54 30 35			jmi @main
  1872
  1873 				; ------------------------------------------------------------
  1874
  1875 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1876 				; as Pointer
  1877 2A56 B5 94			lda :STACKORIGIN,x
  1878 2A58 8D E4 3D			sta X
  1879 2A5B CA				dex
  1880 2A5C 30 2D			jmi @main
  1881
  1882 				; ------------------------------------------------------------
  1883
  1884 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1885 				; as Pointer
  1886 2A5E B5 94			lda :STACKORIGIN,x
  1887 2A60 8D E5 3D			sta Y
  1888 2A63 CA				dex
  1889 2A64 30 25			jmi @main
  1890
  1891 				; ------------------------------------------------------------
  1892
  1893 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1894 				; as Pointer
  1895 2A66 B5 94			lda :STACKORIGIN,x
  1896 2A68 8D E6 3D			sta BI
  1897 2A6B CA				dex
  1898 2A6C 30 1D			jmi @main
  1899
  1900 				; ------------------------------------------------------------
  1901
  1902 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1903 				; as Pointer
  1904 2A6E B5 94			lda :STACKORIGIN,x
  1905 2A70 85 82			sta :bp2
  1906 2A72 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1907 2A74 85 83			sta :bp2+1
  1908 2A76 A0 00			ldy #$00
  1909 2A78 B1 82 99 E7 3D C8 + 	mva:rne (:bp2),y adr.PS,y+
  1910 2A80 A9 E7 8D 31 2C A9 + 	mwa #adr.PS PS
  1911 2A8A CA				dex
  1912 2A8B			@main
  1913
  1914 				; optimize OK (A8LIBWIN), line = 364
  1915
  1916 2A8B A9 65			lda #$65
  1917 2A8D 8D E7 3E			sta RESULT
  1918
  1919 				; optimize OK (A8LIBWIN), line = 367
  1920
  1921 2A90 AC E3 3D			ldy BN
  1922 2A93 B9 1D 35			lda adr.BAW.BU,y
  1923 2A96 C9 01			cmp #$01
  1924 2A98 F0 03 4C 30 2C		jne l_0853
  1925
  1926 				; optimize OK (A8LIBWIN), line = 370
  1927
  1928 2A9D AD E7 3D			lda adr.PS
  1929 2AA0 8D E8 3E			sta BL
  1930
  1931 				; optimize OK (A8LIBWIN), line = 371
  1932
  1933 2AA3 AD 33 2C			lda CL
  1934 2AA6 85 88			sta SYSTEM.SETLENGTH.S
  1935 2AA8 AD 34 2C			lda CL+1
  1936 2AAB 85 89			sta SYSTEM.SETLENGTH.S+1
  1937 2AAD AD E8 3E			lda BL
  1938 2AB0 85 8C			sta SYSTEM.SETLENGTH.LEN
  1939 2AB2 20 E9 24			jsr SYSTEM.SETLENGTH
  1940
  1941 				; optimize OK (A8LIBWIN), line = 372
  1942
  1943 2AB5 A9 ED			lda <adr.CL+$01
  1944 2AB7 85 8C			sta SYSTEM.MOVE_0287.DEST
  1945 2AB9 A9 3E			lda >adr.CL+$01
  1946 2ABB 85 8D			sta SYSTEM.MOVE_0287.DEST+1
  1947 2ABD A9 E8			lda <adr.PS+$01
  1948 2ABF 85 88			sta SYSTEM.MOVE_0287.SOURCE
  1949 2AC1 A9 3D			lda >adr.PS+$01
  1950 2AC3 85 89			sta SYSTEM.MOVE_0287.SOURCE+1
  1951 2AC5 AD E8 3E			lda BL
  1952 2AC8 85 84			sta SYSTEM.MOVE_0287.COUNT
  1953 2ACA A9 00			lda #$00
  1954 2ACC 85 85			sta SYSTEM.MOVE_0287.COUNT+1
  1955 2ACE				.local +MAIN.SYSTEM.MOVE_0287
  1956 2ACE				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0287.M@INLINE [Source: stubapp.a65]
     4 2ACE 20 50 23			jsr @move
Source: stubapp.a65
  1957 					.endl
  1958
  1959 				; optimize OK (A8LIBWIN), line = 381
  1960
  1961 2AD1 AD E4 3D			lda X
  1962 2AD4 C9 FF			cmp #$FF
  1963 2AD6 F0 67			jeq l_0890
  1964 2AD8 AC E3 3D			ldy BN
  1965 2ADB B9 3E 35			lda adr.BAW.BW,y
  1966 2ADE 38 ED E4 3D			sub X
  1967 2AE2 85 9F			sta :STACKORIGIN+11
  1968 2AE4 A9 00			lda #$00
  1969 2AE6 E9 00			sbc #$00
  1970 2AE8 85 AF			sta :STACKORIGIN+STACKWIDTH+11
  1971 2AEA A9 00			lda #$00
  1972 2AEC E9 00			sbc #$00
  1973 2AEE 85 BF			sta :STACKORIGIN+STACKWIDTH*2+11
  1974 2AF0 A9 00			lda #$00
  1975 2AF2 E9 00			sbc #$00
  1976 2AF4 85 CF			sta :STACKORIGIN+STACKWIDTH*3+11
  1977 2AF6 A5 9F			lda :STACKORIGIN+11
  1978 2AF8 38 E9 01			sub #$01
  1979 2AFB 85 9F			sta :STACKORIGIN+11
  1980 2AFD A5 AF			lda :STACKORIGIN+STACKWIDTH+11
  1981 2AFF E9 00			sbc #$00
  1982 2B01 85 AF			sta :STACKORIGIN+STACKWIDTH+11
  1983 2B03 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+11
  1984 2B05 E9 00			sbc #$00
  1985 2B07 85 BF			sta :STACKORIGIN+STACKWIDTH*2+11
  1986 2B09 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+11
  1987 2B0B E9 00			sbc #$00
  1988 2B0D D0 0D			bne @+
  1989 2B0F A5 BF			lda :STACKORIGIN+STACKWIDTH*2+11
  1990 2B11 D0 09			bne @+
  1991 2B13 A5 AF			lda :STACKORIGIN+STACKWIDTH+11
  1992 2B15 D0 05			bne @+
  1993 2B17 AD E8 3E			lda BL
  1994 2B1A C5 9F			cmp :STACKORIGIN+11
  1995 				@
  1996 2B1C 90 21			jcc l_0890
  1997 2B1E F0 1F			jeq l_0890
  1998
  1999 				; optimize OK (A8LIBWIN), line = 384
  2000
  2001 2B20 B9 3E 35			lda adr.BAW.BW,y
  2002 2B23 38 ED E4 3D			sub X
  2003 2B27 38 E9 01			sub #$01
  2004 2B2A 8D E8 3E			sta BL
  2005
  2006 				; optimize OK (A8LIBWIN), line = 385
  2007
  2008 2B2D AD 33 2C			lda CL
  2009 2B30 85 88			sta SYSTEM.SETLENGTH.S
  2010 2B32 AD 34 2C			lda CL+1
  2011 2B35 85 89			sta SYSTEM.SETLENGTH.S+1
  2012 2B37 AD E8 3E			lda BL
  2013 2B3A 85 8C			sta SYSTEM.SETLENGTH.LEN
  2014 2B3C 20 E9 24			jsr SYSTEM.SETLENGTH
  2015 2B3F			l_0890
  2016
  2017 				; optimize OK (A8LIBWIN), line = 389
  2018
  2019 2B3F A9 ED			lda <adr.CL+$01
  2020 2B41 8D 17 35			sta A8LIBSTR.STRAI.PS
  2021 2B44 A9 3E			lda >adr.CL+$01
  2022 2B46 8D 18 35			sta A8LIBSTR.STRAI.PS+1
  2023 2B49 AD E8 3E			lda BL
  2024 2B4C 8D 19 35			sta A8LIBSTR.STRAI.BS
  2025 2B4F 20 DD 25			jsr A8LIBSTR.STRAI
  2026
  2027 				; optimize OK (A8LIBWIN), line = 392
  2028
  2029 2B52 AC E3 3D			ldy BN
  2030 2B55 B9 54 35			lda adr.BAW.BI,y
  2031 2B58 C9 01			cmp #$01
  2032 2B5A F0 07			jeq l_08D2x
  2033 2B5C AD E6 3D			lda BI
  2034 2B5F C9 01			cmp #$01
  2035 2B61 D0 13			jne l_08D2
  2036 2B63			l_08D2x
  2037
  2038 				; optimize OK (A8LIBWIN), line = 394
  2039
  2040 2B63 A9 ED			lda <adr.CL+$01
  2041 2B65 8D 12 35			sta A8LIBSTR.STRINV.PS
  2042 2B68 A9 3E			lda >adr.CL+$01
  2043 2B6A 8D 13 35			sta A8LIBSTR.STRINV.PS+1
  2044 2B6D AD E8 3E			lda BL
  2045 2B70 8D 14 35			sta A8LIBSTR.STRINV.BS
  2046 2B73 20 AA 25			jsr A8LIBSTR.STRINV
  2047 2B76			l_08D2
  2048
  2049 				; optimize OK (A8LIBWIN), line = 398
  2050
  2051 2B76 A5 58			lda $0058
  2052 2B78 85 9D			sta :STACKORIGIN+9
  2053 2B7A A5 59			lda $0058+1
  2054 2B7C 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2055 2B7E AC E3 3D			ldy BN
  2056 2B81 B9 33 35			lda adr.BAW.BY,y
  2057 2B84 20 36 24			jsr @mul40
  2058 2B87 18 65 9D			add :STACKORIGIN+9
  2059 2B8A 85 9D			sta :STACKORIGIN+9
  2060 2B8C A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2061 2B8E 65 85			adc :eax+1
  2062 2B90 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2063 2B92 AC E3 3D			ldy BN
  2064 2B95 A5 9D			lda :STACKORIGIN+9
  2065 2B97 18 79 28 35			add adr.BAW.BX,y
  2066 2B9B 8D EA 3E			sta CS
  2067 2B9E A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2068 2BA0 69 00			adc #$00
  2069 2BA2 8D EB 3E			sta CS+1
  2070
  2071 				; optimize OK (A8LIBWIN), line = 401
  2072
  2073 2BA5 AD E5 3D			lda Y
  2074 2BA8 20 36 24			jsr @mul40
  2075 2BAB 18 6D EA 3E			add CS
  2076 2BAF 8D EA 3E			sta CS
  2077 2BB2 AD EB 3E			lda CS+1
  2078 2BB5 65 85			adc :eax+1
  2079 2BB7 8D EB 3E			sta CS+1
  2080
  2081 				; optimize OK (A8LIBWIN), line = 404
  2082
  2083 2BBA AD E4 3D			lda X
  2084 2BBD C9 FF			cmp #$FF
  2085 2BBF F0 12			jeq l_090E
  2086
  2087 				; optimize OK (A8LIBWIN), line = 407
  2088
  2089 2BC1 AD EA 3E			lda CS
  2090 2BC4 18 6D E4 3D			add X
  2091 2BC8 8D EA 3E			sta CS
  2092 2BCB 90 03			scc
  2093 2BCD EE EB 3E			inc CS+1
  2094 2BD0 4C 0D 2C			jmp l_091B
  2095 2BD3			l_090E
  2096
  2097 				; optimize OK (A8LIBWIN), line = 411
  2098
  2099 2BD3 AC E3 3D			ldy BN
  2100 2BD6 B9 3E 35			lda adr.BAW.BW,y
  2101 2BD9 38 ED E8 3E			sub BL
  2102 2BDD 85 84			sta :eax
  2103 2BDF A9 00			lda #$00
  2104 2BE1 E9 00			sbc #$00
  2105 2BE3 85 85			sta :eax+1
  2106 2BE5 A9 00			lda #$00
  2107 2BE7 E9 00			sbc #$00
  2108 2BE9 85 86			sta :eax+2
  2109 2BEB A9 00			lda #$00
  2110 2BED E9 00			sbc #$00
  2111 2BEF 85 87			sta :eax+3
  2112 2BF1 A9 02			lda #$02
  2113 2BF3 85 8C			sta :ecx
  2114 2BF5 A9 00			lda #$00
  2115 2BF7 85 8D			sta :ecx+1
  2116 2BF9 20 05 24			jsr idivEAX_CX
  2117 2BFC AD EA 3E			lda CS
  2118 2BFF 18 65 84			add :eax
  2119 2C02 8D EA 3E			sta CS
  2120 2C05 AD EB 3E			lda CS+1
  2121 2C08 65 85			adc :eax+1
  2122 2C0A 8D EB 3E			sta CS+1
  2123 2C0D			l_091B
  2124
  2125 				; optimize OK (A8LIBWIN), line = 415
  2126
  2127 2C0D A9 ED			lda <adr.CL+$01
  2128 2C0F 85 88			sta SYSTEM.MOVE_0287.SOURCE
  2129 2C11 A9 3E			lda >adr.CL+$01
  2130 2C13 85 89			sta SYSTEM.MOVE_0287.SOURCE+1
  2131 2C15 AD EA 3E			lda CS
  2132 2C18 85 8C			sta SYSTEM.MOVE_0287.DEST
  2133 2C1A AD EB 3E			lda CS+1
  2134 2C1D 85 8D			sta SYSTEM.MOVE_0287.DEST+1
  2135 2C1F AD E8 3E			lda BL
  2136 2C22 85 84			sta SYSTEM.MOVE_0287.COUNT
  2137 2C24 A9 00			lda #$00
  2138 2C26 85 85			sta SYSTEM.MOVE_0287.COUNT+1
  2139 2C28				.local +MAIN.SYSTEM.MOVE_0287
  2140 2C28				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0287.M@INLINE [Source: stubapp.a65]
     4 2C28 20 50 23			jsr @move
Source: stubapp.a65
  2141 					.endl
  2142
  2143 				; optimize OK (A8LIBWIN), line = 418
  2144
  2145 2C2B A9 00			lda #$00
  2146 2C2D 8D E7 3E			sta RESULT
  2147 2C30			l_0853
  2148 2C30			@exit
  2149
  2150 				; ------------------------------------------------------------
  2151
  2152 = 3DE3			BN	= DATAORIGIN+$08E3
  2153 = 3DE4			X	= DATAORIGIN+$08E4
  2154 = 3DE5			Y	= DATAORIGIN+$08E5
  2155 = 3DE6			BI	= DATAORIGIN+$08E6
  2156 = 3DE7			adr.PS	= [DATAORIGIN+$08E7] .array [256]
  2157 2C30			.var PS	= adr.PS .word
  2158 = 3EE7			RESULT	= DATAORIGIN+$09E7
  2159 = 3EE8			BL	= DATAORIGIN+$09E8
  2160 = 3EE9			TMP	= DATAORIGIN+$09E9
  2161 = 3EEA			CS	= DATAORIGIN+$09EA
  2162 = 3EEC			adr.CL	= [DATAORIGIN+$09EC] .array [130]
  2163 2C30			.var CL	= adr.CL .word
  2164
  2165 = 3DE3			@VarData	= BN
  2166 = 018A			@VarDataSize	= 394
  2167
  2168 2C30 60				rts						; ret
  2169 = 2C31 E7 3D		PS
  2169 = 2C33 EC 3E		CL
  2169 				.endl
  2170
  2171 2C35			.local	WORN						; FUNCTION
  2172
  2173 				; ------------------------------------------------------------
  2174
  2175 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  2176 				; as Pointer
  2177 2C35 B5 94			lda :STACKORIGIN,x
  2178 2C37 8D 6E 3F			sta BN
  2179 2C3A CA				dex
  2180 2C3B 30 2D			jmi @main
  2181
  2182 				; ------------------------------------------------------------
  2183
  2184 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  2185 				; as Pointer
  2186 2C3D B5 94			lda :STACKORIGIN,x
  2187 2C3F 8D 6F 3F			sta BT
  2188 2C42 CA				dex
  2189 2C43 30 25			jmi @main
  2190
  2191 				; ------------------------------------------------------------
  2192
  2193 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  2194 				; as Pointer
  2195 2C45 B5 94			lda :STACKORIGIN,x
  2196 2C47 8D 70 3F			sta BL
  2197 2C4A CA				dex
  2198 2C4B 30 1D			jmi @main
  2199
  2200 				; ------------------------------------------------------------
  2201
  2202 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2203 				; as Pointer
  2204 2C4D B5 94			lda :STACKORIGIN,x
  2205 2C4F 85 82			sta :bp2
  2206 2C51 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2207 2C53 85 83			sta :bp2+1
  2208 2C55 A0 00			ldy #$00
  2209 2C57 B1 82 99 71 3F C8 + 	mva:rne (:bp2),y adr.PS,y+
  2210 2C5F A9 71 8D 51 2E A9 + 	mwa #adr.PS PS
  2211 2C69 CA				dex
  2212 2C6A			@main
  2213
  2214 				; optimize OK (A8LIBWIN), line = 440
  2215
  2216 2C6A A9 65			lda #$65
  2217 2C6C 8D 71 40			sta RESULT
  2218
  2219 				; optimize OK (A8LIBWIN), line = 443
  2220
  2221 2C6F AC 6E 3F			ldy BN
  2222 2C72 B9 1D 35			lda adr.BAW.BU,y
  2223 2C75 C9 01			cmp #$01
  2224 2C77 F0 03 4C 50 2E		jne l_0963
  2225
  2226 				; optimize OK (A8LIBWIN), line = 446
  2227
  2228 2C7C AD 71 3F			lda adr.PS
  2229 2C7F 18 69 02			add #$02
  2230 2C82 8D 72 40			sta BS
  2231
  2232 				; optimize OK (A8LIBWIN), line = 447
  2233
  2234 2C85 AD 53 2E			lda CL
  2235 2C88 85 88			sta SYSTEM.SETLENGTH.S
  2236 2C8A AD 54 2E			lda CL+1
  2237 2C8D 85 89			sta SYSTEM.SETLENGTH.S+1
  2238 2C8F AD 72 40			lda BS
  2239 2C92 85 8C			sta SYSTEM.SETLENGTH.LEN
  2240 2C94 20 E9 24			jsr SYSTEM.SETLENGTH
  2241
  2242 				; optimize OK (A8LIBWIN), line = 448
  2243
  2244 2C97 A9 04			lda #$04
  2245 2C99 8D 76 40			sta adr.CL+$01
  2246
  2247 				; optimize OK (A8LIBWIN), line = 449
  2248
  2249 2C9C AD 71 3F			lda adr.PS
  2250 2C9F 85 84			sta SYSTEM.MOVE_0287.COUNT
  2251 2CA1 A9 77			lda <adr.CL+$02
  2252 2CA3 85 8C			sta SYSTEM.MOVE_0287.DEST
  2253 2CA5 A9 40			lda >adr.CL+$02
  2254 2CA7 85 8D			sta SYSTEM.MOVE_0287.DEST+1
  2255 2CA9 A9 72			lda <adr.PS+$01
  2256 2CAB 85 88			sta SYSTEM.MOVE_0287.SOURCE
  2257 2CAD A9 3F			lda >adr.PS+$01
  2258 2CAF 85 89			sta SYSTEM.MOVE_0287.SOURCE+1
  2259 2CB1 A9 00			lda #$00
  2260 2CB3 85 85			sta SYSTEM.MOVE_0287.COUNT+1
  2261 2CB5				.local +MAIN.SYSTEM.MOVE_0287
  2262 2CB5				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0287.M@INLINE [Source: stubapp.a65]
     4 2CB5 20 50 23			jsr @move
Source: stubapp.a65
  2263 					.endl
  2264
  2265 				; optimize OK (A8LIBWIN), line = 450
  2266
  2267 2CB8 AC 72 40			ldy BS
  2268 2CBB A9 01			lda #$01
  2269 2CBD 99 75 40			sta adr.CL,y
  2270
  2271 				; optimize OK (A8LIBWIN), line = 453
  2272
  2273 2CC0 A9 76			lda <adr.CL+$01
  2274 2CC2 8D 17 35			sta A8LIBSTR.STRAI.PS
  2275 2CC5 A9 40			lda >adr.CL+$01
  2276 2CC7 8D 18 35			sta A8LIBSTR.STRAI.PS+1
  2277 2CCA AD 72 40			lda BS
  2278 2CCD 8D 19 35			sta A8LIBSTR.STRAI.BS
  2279 2CD0 20 DD 25			jsr A8LIBSTR.STRAI
  2280
  2281 				; optimize OK (A8LIBWIN), line = 456
  2282
  2283 2CD3 AC 6E 3F			ldy BN
  2284 2CD6 B9 54 35			lda adr.BAW.BI,y
  2285 2CD9 C9 01			cmp #$01
  2286 2CDB D0 16			jne l_099A
  2287
  2288 				; optimize OK (A8LIBWIN), line = 458
  2289
  2290 2CDD A9 76			lda <adr.CL+$01
  2291 2CDF 8D 12 35			sta A8LIBSTR.STRINV.PS
  2292 2CE2 A9 40			lda >adr.CL+$01
  2293 2CE4 8D 13 35			sta A8LIBSTR.STRINV.PS+1
  2294 2CE7 AD 72 40			lda BS
  2295 2CEA 8D 14 35			sta A8LIBSTR.STRINV.BS
  2296 2CED 20 AA 25			jsr A8LIBSTR.STRINV
  2297 2CF0 4C 09 2D			jmp l_09A9
  2298 2CF3			l_099A
  2299
  2300 				; optimize OK (A8LIBWIN), line = 463
  2301
  2302 2CF3 AD 72 40			lda BS
  2303 2CF6 38 E9 02			sub #$02
  2304 2CF9 8D 14 35			sta A8LIBSTR.STRINV.BS
  2305 2CFC A9 77			lda <adr.CL+$02
  2306 2CFE 8D 12 35			sta A8LIBSTR.STRINV.PS
  2307 2D01 A9 40			lda >adr.CL+$02
  2308 2D03 8D 13 35			sta A8LIBSTR.STRINV.PS+1
  2309 2D06 20 AA 25			jsr A8LIBSTR.STRINV
  2310 2D09			l_09A9
  2311
  2312 				; optimize OK (A8LIBWIN), line = 467
  2313
  2314 2D09 A5 58			lda $0058
  2315 2D0B 85 9D			sta :STACKORIGIN+9
  2316 2D0D A5 59			lda $0058+1
  2317 2D0F 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2318 2D11 AC 6E 3F			ldy BN
  2319 2D14 B9 33 35			lda adr.BAW.BY,y
  2320 2D17 20 36 24			jsr @mul40
  2321 2D1A 18 65 9D			add :STACKORIGIN+9
  2322 2D1D 8D 73 40			sta CS
  2323 2D20 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2324 2D22 65 85			adc :eax+1
  2325 2D24 8D 74 40			sta CS+1
  2326
  2327 				; optimize OK (A8LIBWIN), line = 470
  2328
  2329 2D27 AD 6F 3F			lda BT
  2330 2D2A C9 F2			cmp #$F2
  2331 2D2C D0 1B			jne l_09D6
  2332
  2333 				; optimize OK (A8LIBWIN), line = 472
  2334
  2335 2D2E AC 6E 3F			ldy BN
  2336 2D31 B9 49 35			lda adr.BAW.BH,y
  2337 2D34 38 E9 01			sub #$01
  2338 2D37 20 36 24			jsr @mul40
  2339 2D3A 18 6D 73 40			add CS
  2340 2D3E 8D 73 40			sta CS
  2341 2D41 AD 74 40			lda CS+1
  2342 2D44 65 85			adc :eax+1
  2343 2D46 8D 74 40			sta CS+1
  2344 2D49			l_09D6
  2345
  2346 				; optimize OK (A8LIBWIN), line = 476
  2347
  2348 2D49 AD 70 3F			lda BL
  2349 2D4C C9 FB			cmp #$FB
  2350 2D4E D0 25			jne l_09F9
  2351
  2352 				; optimize OK (A8LIBWIN), line = 478
  2353
  2354 2D50 AC 6E 3F			ldy BN
  2355 2D53 B9 28 35			lda adr.BAW.BX,y
  2356 2D56 18 69 01			add #$01
  2357 2D59 85 9D			sta :STACKORIGIN+9
  2358 2D5B A9 00			lda #$00
  2359 2D5D 69 00			adc #$00
  2360 2D5F 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2361 2D61 AD 73 40			lda CS
  2362 2D64 18 65 9D			add :STACKORIGIN+9
  2363 2D67 8D 73 40			sta CS
  2364 2D6A AD 74 40			lda CS+1
  2365 2D6D 65 AD			adc :STACKORIGIN+STACKWIDTH+9
  2366 2D6F 8D 74 40			sta CS+1
  2367 2D72 4C 2D 2E			jmp l_0A0D
  2368 2D75			l_09F9
  2369
  2370 				; optimize OK (A8LIBWIN), line = 481
  2371
  2372 2D75 AD 70 3F			lda BL
  2373 2D78 C9 FC			cmp #$FC
  2374 2D7A D0 65			jne l_0A1F
  2375
  2376 				; optimize OK (A8LIBWIN), line = 483
  2377
  2378 2D7C AC 6E 3F			ldy BN
  2379 2D7F B9 28 35			lda adr.BAW.BX,y
  2380 2D82 18 79 3E 35			add adr.BAW.BW,y
  2381 2D86 85 9D			sta :STACKORIGIN+9
  2382 2D88 A9 00			lda #$00
  2383 2D8A 69 00			adc #$00
  2384 2D8C 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2385 2D8E A9 00			lda #$00
  2386 2D90 69 00			adc #$00
  2387 2D92 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
  2388 2D94 A9 00			lda #$00
  2389 2D96 69 00			adc #$00
  2390 2D98 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
  2391 2D9A A5 9D			lda :STACKORIGIN+9
  2392 2D9C 38 ED 72 40			sub BS
  2393 2DA0 85 9D			sta :STACKORIGIN+9
  2394 2DA2 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2395 2DA4 E9 00			sbc #$00
  2396 2DA6 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2397 2DA8 A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
  2398 2DAA E9 00			sbc #$00
  2399 2DAC 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
  2400 2DAE A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
  2401 2DB0 E9 00			sbc #$00
  2402 2DB2 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
  2403 2DB4 A5 9D			lda :STACKORIGIN+9
  2404 2DB6 38 E9 01			sub #$01
  2405 2DB9 85 9D			sta :STACKORIGIN+9
  2406 2DBB A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2407 2DBD E9 00			sbc #$00
  2408 2DBF 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2409 2DC1 A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
  2410 2DC3 E9 00			sbc #$00
  2411 2DC5 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
  2412 2DC7 A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
  2413 2DC9 E9 00			sbc #$00
  2414 2DCB 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
  2415 2DCD AD 73 40			lda CS
  2416 2DD0 18 65 9D			add :STACKORIGIN+9
  2417 2DD3 8D 73 40			sta CS
  2418 2DD6 AD 74 40			lda CS+1
  2419 2DD9 65 AD			adc :STACKORIGIN+STACKWIDTH+9
  2420 2DDB 8D 74 40			sta CS+1
  2421 2DDE 4C 2D 2E			jmp l_0A42
  2422 2DE1			l_0A1F
  2423
  2424 				; optimize OK (A8LIBWIN), line = 487
  2425
  2426 2DE1 AC 6E 3F			ldy BN
  2427 2DE4 B9 28 35			lda adr.BAW.BX,y
  2428 2DE7 85 9D			sta :STACKORIGIN+9
  2429 2DE9 B9 3E 35			lda adr.BAW.BW,y
  2430 2DEC 38 ED 72 40			sub BS
  2431 2DF0 85 84			sta :eax
  2432 2DF2 A9 00			lda #$00
  2433 2DF4 E9 00			sbc #$00
  2434 2DF6 85 85			sta :eax+1
  2435 2DF8 A9 00			lda #$00
  2436 2DFA E9 00			sbc #$00
  2437 2DFC 85 86			sta :eax+2
  2438 2DFE A9 00			lda #$00
  2439 2E00 E9 00			sbc #$00
  2440 2E02 85 87			sta :eax+3
  2441 2E04 A9 02			lda #$02
  2442 2E06 85 8C			sta :ecx
  2443 2E08 A9 00			lda #$00
  2444 2E0A 85 8D			sta :ecx+1
  2445 2E0C 20 05 24			jsr idivEAX_CX
  2446 2E0F A5 9D			lda :STACKORIGIN+9
  2447 2E11 18 65 84			add :eax
  2448 2E14 85 9D			sta :STACKORIGIN+9
  2449 2E16 A9 00			lda #$00
  2450 2E18 65 85			adc :eax+1
  2451 2E1A 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2452 2E1C AD 73 40			lda CS
  2453 2E1F 18 65 9D			add :STACKORIGIN+9
  2454 2E22 8D 73 40			sta CS
  2455 2E25 AD 74 40			lda CS+1
  2456 2E28 65 AD			adc :STACKORIGIN+STACKWIDTH+9
  2457 2E2A 8D 74 40			sta CS+1
  2458 2E2D			l_0A42
  2459 2E2D			l_0A0D
  2460
  2461 				; optimize OK (A8LIBWIN), line = 491
  2462
  2463 2E2D A9 76			lda <adr.CL+$01
  2464 2E2F 85 88			sta SYSTEM.MOVE_0287.SOURCE
  2465 2E31 A9 40			lda >adr.CL+$01
  2466 2E33 85 89			sta SYSTEM.MOVE_0287.SOURCE+1
  2467 2E35 AD 73 40			lda CS
  2468 2E38 85 8C			sta SYSTEM.MOVE_0287.DEST
  2469 2E3A AD 74 40			lda CS+1
  2470 2E3D 85 8D			sta SYSTEM.MOVE_0287.DEST+1
  2471 2E3F AD 72 40			lda BS
  2472 2E42 85 84			sta SYSTEM.MOVE_0287.COUNT
  2473 2E44 A9 00			lda #$00
  2474 2E46 85 85			sta SYSTEM.MOVE_0287.COUNT+1
  2475 2E48				.local +MAIN.SYSTEM.MOVE_0287
  2476 2E48				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0287.M@INLINE [Source: stubapp.a65]
     4 2E48 20 50 23			jsr @move
Source: stubapp.a65
  2477 					.endl
  2478
  2479 				; optimize OK (A8LIBWIN), line = 494
  2480
  2481 2E4B A9 00			lda #$00
  2482 2E4D 8D 71 40			sta RESULT
  2483 2E50			l_0963
  2484 2E50			@exit
  2485
  2486 				; ------------------------------------------------------------
  2487
  2488 = 3F6E			BN	= DATAORIGIN+$0A6E
  2489 = 3F6F			BT	= DATAORIGIN+$0A6F
  2490 = 3F70			BL	= DATAORIGIN+$0A70
  2491 = 3F71			adr.PS	= [DATAORIGIN+$0A71] .array [256]
  2492 2E50			.var PS	= adr.PS .word
  2493 = 4071			RESULT	= DATAORIGIN+$0B71
  2494 = 4072			BS	= DATAORIGIN+$0B72
  2495 = 4073			CS	= DATAORIGIN+$0B73
  2496 = 4075			adr.CL	= [DATAORIGIN+$0B75] .array [37]
  2497 2E50			.var CL	= adr.CL .word
  2498
  2499 = 3F6E			@VarData	= BN
  2500 = 012B			@VarDataSize	= 299
  2501
  2502 2E50 60				rts						; ret
  2503 = 2E51 71 3F		PS
  2503 = 2E53 75 40		CL
  2503 				.endl
  2504
  2505 				; ------------------------------------------------------------
  2506
  2507 = 351D			adr.BAW	= DATAORIGIN+$001D	; [110] RECORD
  2508 2E55			.var BAW	= adr.BAW .word
  2509 = 351D			adr.BAW.BU	= [DATAORIGIN+$001D] .array [11]
  2510 2E55			.var BAW.BU	= adr.BAW.BU .word
  2511 = 3528			adr.BAW.BX	= [DATAORIGIN+$0028] .array [11]
  2512 2E55			.var BAW.BX	= adr.BAW.BX .word
  2513 = 3533			adr.BAW.BY	= [DATAORIGIN+$0033] .array [11]
  2514 2E55			.var BAW.BY	= adr.BAW.BY .word
  2515 = 353E			adr.BAW.BW	= [DATAORIGIN+$003E] .array [11]
  2516 2E55			.var BAW.BW	= adr.BAW.BW .word
  2517 = 3549			adr.BAW.BH	= [DATAORIGIN+$0049] .array [11]
  2518 2E55			.var BAW.BH	= adr.BAW.BH .word
  2519 = 3554			adr.BAW.BI	= [DATAORIGIN+$0054] .array [11]
  2520 2E55			.var BAW.BI	= adr.BAW.BI .word
  2521 = 355F			adr.BAW.CM	= [DATAORIGIN+$005F] .array [11] .word
  2522 2E55			.var BAW.CM	= adr.BAW.CM .word
  2523 = 3575			adr.BAW.CZ	= [DATAORIGIN+$0075] .array [11] .word
  2524 2E55			.var BAW.CZ	= adr.BAW.CZ .word
  2525 = 358B			adr.VCUR	= DATAORIGIN+$008B	; [2] RECORD
  2526 2E55			.var VCUR	= adr.VCUR .word
  2527 = 358B			VCUR.VX	= DATAORIGIN+$008B
  2528 = 358C			VCUR.VY	= DATAORIGIN+$008C
  2529 = 358D			adr.BAWM	= [DATAORIGIN+$008D] .array [2068]
  2530 2E55			.var BAWM	= adr.BAWM .word
  2531 = 3DA1			CPWM	= DATAORIGIN+$08A1
  2532
  2533 = 2E55 1D 35		BAW
  2533 = 2E57 1D 35		BAW.BU
  2533 = 2E59 28 35		BAW.BX
  2533 = 2E5B 33 35		BAW.BY
  2533 = 2E5D 3E 35		BAW.BW
  2533 = 2E5F 49 35		BAW.BH
  2533 = 2E61 54 35		BAW.BI
  2533 = 2E63 5F 35		BAW.CM
  2533 = 2E65 75 35		BAW.CZ
  2533 = 2E67 8B 35		VCUR
  2533 = 2E69 8D 35		BAWM
  2533 				.endl							; UNIT A8LIBWIN
  2534
  2535 				; ------------------------------------------------------------
  2536
  2537 2E6B			.local	A8LIBGADG					; UNIT
  2538
  2539 2E6B			.local	GALERT						; PROCEDURE
  2540
  2541 				; ------------------------------------------------------------
  2542
  2543 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  2544 				; as Pointer
  2545 2E6B B5 94			lda :STACKORIGIN,x
  2546 2E6D 85 82			sta :bp2
  2547 2E6F B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  2548 2E71 85 83			sta :bp2+1
  2549 2E73 A0 00			ldy #$00
  2550 2E75 B1 82 99 9A 40 C8 + 	mva:rne (:bp2),y adr.PS,y+
  2551 2E7D A9 9A 8D 51 2F A9 + 	mwa #adr.PS PS
  2552 2E87 CA				dex
  2553 2E88			@main
  2554
  2555 				; optimize OK (A8LIBGADG), line = 54
  2556
  2557 2E88 AD 9A 40			lda adr.PS
  2558 2E8B 8D 9B 41			sta BL
  2559
  2560 				; optimize OK (A8LIBGADG), line = 55
  2561
  2562 2E8E A9 26			lda #$26
  2563 2E90 38 ED 9B 41			sub BL
  2564 2E94 85 84			sta :eax
  2565 2E96 A9 00			lda #$00
  2566 2E98 E9 00			sbc #$00
  2567 2E9A 85 85			sta :eax+1
  2568 2E9C A9 00			lda #$00
  2569 2E9E E9 00			sbc #$00
  2570 2EA0 85 86			sta :eax+2
  2571 2EA2 A9 00			lda #$00
  2572 2EA4 E9 00			sbc #$00
  2573 2EA6 85 87			sta :eax+3
  2574 2EA8 A9 02			lda #$02
  2575 2EAA 85 8C			sta :ecx
  2576 2EAC A9 00			lda #$00
  2577 2EAE 85 8D			sta :ecx+1
  2578 2EB0 20 05 24			jsr idivEAX_CX
  2579 2EB3 A5 84			lda :eax
  2580 2EB5 8D 9C 41			sta X
  2581
  2582 				; optimize OK (A8LIBGADG), line = 58
  2583
  2584 2EB8 AD 9B 41			lda BL
  2585 2EBB 18 69 02			add #$02
  2586 2EBE 8D A7 3D			sta A8LIBWIN.WOPEN.W
  2587 2EC1 AD 9C 41			lda X
  2588 2EC4 8D A5 3D			sta A8LIBWIN.WOPEN.X
  2589 2EC7 A9 0A			lda #$0A
  2590 2EC9 8D A6 3D			sta A8LIBWIN.WOPEN.Y
  2591 2ECC A9 05			lda #$05
  2592 2ECE 8D A8 3D			sta A8LIBWIN.WOPEN.H
  2593 2ED1 A9 00			lda #$00
  2594 2ED3 8D A9 3D			sta A8LIBWIN.WOPEN.BT
  2595 2ED6 20 5B 27			jsr A8LIBWIN.WOPEN
  2596 2ED9 AD AA 3D			lda A8LIBWIN.WOPEN.RESULT
  2597 2EDC 8D 9A 41			sta BW
  2598
  2599 				; optimize FAIL ('A8LIBWIN.WORN', A8LIBGADG), line = 59
  2600
  2601 2EDF E8				inx
  2602 2EE0 A9 19 95 94			mva #$19 :STACKORIGIN,x
  2603 2EE4 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  2604 2EE8 E8				inx
  2605 2EE9 A9 FF 95 94			mva #$FF :STACKORIGIN,x
  2606 2EED E8				inx
  2607 2EEE A9 F1 95 94			mva #$F1 :STACKORIGIN,x
  2608 2EF2 E8				inx
  2609 2EF3 AD 9A 41 95 94		mva BW :STACKORIGIN,x
  2610 2EF8 20 35 2C			jsr A8LIBWIN.WORN
  2611
  2612 				; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 60
  2613
  2614 2EFB E8				inx
  2615 2EFC AD 51 2F 95 94		mva PS :STACKORIGIN,x
  2616 2F01 AD 52 2F 95 A4		mva PS+1 :STACKORIGIN+STACKWIDTH,x
  2617 2F06 E8				inx
  2618 2F07 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2619 2F0B E8				inx
  2620 2F0C A9 01 95 94			mva #$01 :STACKORIGIN,x
  2621 2F10 E8				inx
  2622 2F11 A9 FF 95 94			mva #$FF :STACKORIGIN,x
  2623 2F15 E8				inx
  2624 2F16 AD 9A 41 95 94		mva BW :STACKORIGIN,x
  2625 2F1B 20 4E 2A			jsr A8LIBWIN.WPRINT
  2626
  2627 				; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBGADG), line = 61
  2628
  2629 2F1E E8				inx
  2630 2F1F A9 21 95 94			mva #$21 :STACKORIGIN,x
  2631 2F23 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  2632 2F27 E8				inx
  2633 2F28 A9 01 95 94			mva #$01 :STACKORIGIN,x
  2634 2F2C E8				inx
  2635 2F2D A9 03 95 94			mva #$03 :STACKORIGIN,x
  2636 2F31 E8				inx
  2637 2F32 A9 FF 95 94			mva #$FF :STACKORIGIN,x
  2638 2F36 E8				inx
  2639 2F37 AD 9A 41 95 94		mva BW :STACKORIGIN,x
  2640 2F3C 20 4E 2A			jsr A8LIBWIN.WPRINT
  2641
  2642 				; optimize OK (A8LIBGADG), line = 64
  2643
  2644 2F3F A9 00			lda #$00
  2645 2F41 20 F6 24			jsr A8LIBMISC.WAITKCX
  2646 2F44 AD 0C 35			lda A8LIBMISC.WAITKCX.RESULT
  2647 2F47 8D 9C 41			sta X
  2648
  2649 				; optimize OK (A8LIBGADG), line = 67
  2650
  2651 2F4A AD 9A 41			lda BW
  2652 2F4D 20 30 29			jsr A8LIBWIN.WCLOSE
  2653
  2654 				; ------------------------------------------------------------
  2655
  2656 = 409A			adr.PS	= [DATAORIGIN+$0B9A] .array [256]
  2657 2F50			.var PS	= adr.PS .word
  2658 = 419A			BW	= DATAORIGIN+$0C9A
  2659 = 419B			BL	= DATAORIGIN+$0C9B
  2660 = 419C			X	= DATAORIGIN+$0C9C
  2661
  2662 = 2F51			@VarData	= PS
  2663 = 0103			@VarDataSize	= 259
  2664
  2665 2F50			@exit
  2666 					.ifdef @new
  2667 					lda <@VarData
  2668 					sta :ztmp
  2669 					lda >@VarData
  2670 					ldy #@VarDataSize-1
  2671 					jmp @FreeMem
  2672 					els
  2673 2F50 60				rts						; ret
  2674 					eif
  2675 = 2F51 9A 40		PS
  2675 				.endl
  2676
  2677 				; ------------------------------------------------------------
  2678
  2679 				.endl							; UNIT A8LIBGADG
  2680
  2681 				; ------------------------------------------------------------
  2682
  2683 2F53			.local	A8LIBMENU					; UNIT
  2684
  2685 2F53			.local	MENUV						; FUNCTION
  2686
  2687 				; optimize OK (A8LIBMENU), line = 56
  2688
  2689 2F53 A9 00			lda #$00
  2690 2F55 8D A6 41			sta BF
  2691
  2692 				; optimize OK (A8LIBMENU), line = 59
  2693
  2694 2F58 AD A1 41			lda BS
  2695 2F5B 8D A5 41			sta RESULT
  2696
  2697 				; --- WhileProlog
  2698 2F5E 4C AF 30			jmp l_0B1F
  2699 2F61			l_0B20
  2700
  2701 				; optimize OK (A8LIBMENU), line = 65
  2702
  2703 2F61 A9 00			lda #$00
  2704 2F63 8D A7 41			sta BL
  2705 2F66 AC A2 41			ldy BC
  2706 2F69 88				dey
  2707 2F6A 8C 6E 2F			sty @FORTMP_0B2C_0
  2708
  2709 2F6D			l_0B2F
  2710 				; --- ForToDoCondition
  2711 2F6D A9 00			lda @FORTMP_0B2C_0:#$00
  2712 2F6F CD A7 41			cmp BL
  2713 2F72 B0 03 4C 24 30		jcc l_0B3D
  2714
  2715 				; optimize OK (A8LIBMENU), line = 67
  2716
  2717 2F77 A9 00			lda #$00
  2718 2F79 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2719 2F7B AD A7 41			lda BL
  2720 2F7E 0A				asl @
  2721 2F7F 26 AD			rol :STACKORIGIN+STACKWIDTH+9
  2722 2F81 18 6D 5C 31			add PS
  2723 2F85 85 82			sta :bp2
  2724 2F87 AD 5D 31			lda PS+1
  2725 2F8A 65 AD			adc :STACKORIGIN+STACKWIDTH+9
  2726 2F8C 85 83			sta :bp2+1
  2727 2F8E A0 00			ldy #$00
  2728 2F90 B1 82			lda (:bp2),y
  2729 2F92 85 88			sta @move.src
  2730 2F94 C8				iny
  2731 2F95 B1 82			lda (:bp2),y
  2732 2F97 85 89			sta @move.src+1
  2733 2F99 AC 60 31 84 82 AC + 	mwy TMPSTR :bp2
  2734 2FA3 A0 00			ldy #$00
  2735 2FA5 B1 88 91 82 C8 D0 + 	mva:rne (@move.src),y (:bp2),y+
  2736
  2737 				; optimize OK (A8LIBMENU), line = 68
  2738
  2739 2FAC AD D2 41			lda adr.TMPSTR
  2740 2FAF 85 8C			sta SYSTEM.SETLENGTH.LEN
  2741 2FB1 AD 5E 31			lda CL
  2742 2FB4 85 88			sta SYSTEM.SETLENGTH.S
  2743 2FB6 AD 5F 31			lda CL+1
  2744 2FB9 85 89			sta SYSTEM.SETLENGTH.S+1
  2745 2FBB 20 E9 24			jsr SYSTEM.SETLENGTH
  2746
  2747 				; optimize OK (A8LIBMENU), line = 69
  2748
  2749 2FBE AD AA 41			lda adr.CL
  2750 2FC1 85 84			sta SYSTEM.MOVE_0287.COUNT
  2751 2FC3 A9 AB			lda <adr.CL+$01
  2752 2FC5 85 8C			sta SYSTEM.MOVE_0287.DEST
  2753 2FC7 A9 41			lda >adr.CL+$01
  2754 2FC9 85 8D			sta SYSTEM.MOVE_0287.DEST+1
  2755 2FCB A9 D3			lda <adr.TMPSTR+$01
  2756 2FCD 85 88			sta SYSTEM.MOVE_0287.SOURCE
  2757 2FCF A9 41			lda >adr.TMPSTR+$01
  2758 2FD1 85 89			sta SYSTEM.MOVE_0287.SOURCE+1
  2759 2FD3 A9 00			lda #$00
  2760 2FD5 85 85			sta SYSTEM.MOVE_0287.COUNT+1
  2761 2FD7				.local +MAIN.SYSTEM.MOVE_0287
  2762 2FD7				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0287.M@INLINE [Source: stubapp.a65]
     4 2FD7 20 50 23			jsr @move
Source: stubapp.a65
  2763 					.endl
  2764
  2765 				; optimize OK (A8LIBMENU), line = 72
  2766
  2767 2FDA AD A7 41			lda BL
  2768 2FDD 18 69 01			add #$01
  2769 2FE0 CD A5 41			cmp RESULT
  2770 2FE3 D0 08			jne l_0B60
  2771
  2772 				; optimize OK (A8LIBMENU), line = 74
  2773
  2774 2FE5 A9 01			lda #$01
  2775 2FE7 8D A9 41			sta TMP
  2776 2FEA 4C F2 2F			jmp l_0B6E
  2777 2FED			l_0B60
  2778
  2779 				; optimize OK (A8LIBMENU), line = 77
  2780
  2781 2FED A9 00			lda #$00
  2782 2FEF 8D A9 41			sta TMP
  2783 2FF2			l_0B6E
  2784
  2785 				; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBMENU), line = 79
  2786
  2787 2FF2 E8				inx
  2788 2FF3 AD 5E 31 95 94		mva CL :STACKORIGIN,x
  2789 2FF8 AD 5F 31 95 A4		mva CL+1 :STACKORIGIN+STACKWIDTH,x
  2790 2FFD E8				inx
  2791 2FFE AD A9 41 95 94		mva TMP :STACKORIGIN,x
  2792 3003 E8				inx
  2793 3004 AD 9F 41			lda Y
  2794 3007 18 6D A7 41			add BL
  2795 300B 95 94			sta :STACKORIGIN,x
  2796 300D E8				inx
  2797 300E AD 9E 41 95 94		mva X :STACKORIGIN,x
  2798 3013 E8				inx
  2799 3014 AD 9D 41 95 94		mva BN :STACKORIGIN,x
  2800 3019 20 4E 2A			jsr A8LIBWIN.WPRINT
  2801
  2802 				; --- ForToDoEpilog
  2803 301C EE A7 41			inc BL
  2804 301F F0 03 4C 6D 2F		jne l_0B2F
  2805 3024			l_0B3D
  2806
  2807 				; optimize OK (A8LIBMENU), line = 83
  2808
  2809 3024 A9 00			lda #$00
  2810 3026 20 F6 24			jsr A8LIBMISC.WAITKCX
  2811 3029 AD 0C 35			lda A8LIBMISC.WAITKCX.RESULT
  2812 302C 8D A8 41			sta BK
  2813
  2814 				; optimize OK (A8LIBMENU), line = 86
  2815
  2816 302F C9 8F			cmp #$8F
  2817 3031 F0 0C			jeq l_0BC7x
  2818 3033 C9 0F			cmp #$0F
  2819 3035 F0 08			jeq l_0BC7x
  2820 3037 C9 87			cmp #$87
  2821 3039 F0 04			jeq l_0BC7x
  2822 303B C9 07			cmp #$07
  2823 303D D0 13			jne l_0BC7
  2824 303F			l_0BC7x
  2825
  2826 				; optimize FAIL (0, A8LIBMENU), line = 89
  2827
  2828 303F EE A5 41			inc RESULT
  2829
  2830 				; optimize OK (A8LIBMENU), line = 92
  2831
  2832 3042 AD A2 41			lda BC
  2833 3045 CD A5 41			cmp RESULT
  2834 3048 B0 05			jcs l_0BE0
  2835
  2836 				; optimize OK (A8LIBMENU), line = 94
  2837
  2838 304A A9 01			lda #$01
  2839 304C 8D A5 41			sta RESULT
  2840 304F			l_0BE0
  2841 304F 4C 75 30			jmp l_0BF0
  2842 3052			l_0BC7
  2843
  2844 				; optimize OK (A8LIBMENU), line = 97
  2845
  2846 3052 AD A8 41			lda BK
  2847 3055 C9 8E			cmp #$8E
  2848 3057 F0 0C			jeq l_0C26x
  2849 3059 C9 0E			cmp #$0E
  2850 305B F0 08			jeq l_0C26x
  2851 305D C9 86			cmp #$86
  2852 305F F0 04			jeq l_0C26x
  2853 3061 C9 06			cmp #$06
  2854 3063 D0 10			jne l_0C26
  2855 3065			l_0C26x
  2856
  2857 				; optimize FAIL (0, A8LIBMENU), line = 100
  2858
  2859 3065 CE A5 41			dec RESULT
  2860
  2861 				; optimize OK (A8LIBMENU), line = 103
  2862
  2863 3068 AD A5 41			lda RESULT
  2864 306B C9 01			cmp #$01
  2865 306D B0 06			jcs l_0C3D
  2866
  2867 				; optimize OK (A8LIBMENU), line = 105
  2868
  2869 306F AD A2 41			lda BC
  2870 3072 8D A5 41			sta RESULT
  2871 3075			l_0C3D
  2872 3075			l_0C26
  2873 3075			l_0BF0
  2874
  2875 				; optimize OK (A8LIBMENU), line = 110
  2876
  2877 3075 AD A5 41			lda RESULT
  2878 3078 8D A7 41			sta BL
  2879
  2880 				; optimize OK (A8LIBMENU), line = 113
  2881
  2882 307B AD A8 41			lda BK
  2883 307E C9 1C			cmp #$1C
  2884 3080 D0 0D			jne l_0C60
  2885
  2886 				; optimize OK (A8LIBMENU), line = 115
  2887
  2888 3082 A9 FD			lda #$FD
  2889 3084 8D A5 41			sta RESULT
  2890
  2891 				; optimize OK (A8LIBMENU), line = 116
  2892
  2893 3087 A9 01			lda #$01
  2894 3089 8D A6 41			sta BF
  2895 308C 4C AF 30			jmp l_0C72
  2896 308F			l_0C60
  2897
  2898 				; optimize OK (A8LIBMENU), line = 119
  2899
  2900 308F AD A8 41			lda BK
  2901 3092 C9 2C			cmp #$2C
  2902 3094 D0 0D			jne l_0C84
  2903
  2904 				; optimize OK (A8LIBMENU), line = 121
  2905
  2906 3096 A9 FE			lda #$FE
  2907 3098 8D A5 41			sta RESULT
  2908
  2909 				; optimize OK (A8LIBMENU), line = 122
  2910
  2911 309B A9 01			lda #$01
  2912 309D 8D A6 41			sta BF
  2913 30A0 4C AF 30			jmp l_0C96
  2914 30A3			l_0C84
  2915
  2916 				; optimize OK (A8LIBMENU), line = 125
  2917
  2918 30A3 AD A8 41			lda BK
  2919 30A6 C9 0C			cmp #$0C
  2920 30A8 D0 05			jne l_0CA8
  2921
  2922 				; optimize OK (A8LIBMENU), line = 127
  2923
  2924 30AA A9 01			lda #$01
  2925 30AC 8D A6 41			sta BF
  2926 30AF			l_0CA8
  2927 30AF			l_0C96
  2928 30AF			l_0C72
  2929 30AF			l_0B1F
  2930
  2931 				; optimize OK (A8LIBMENU), line = 62
  2932
  2933 30AF AD A6 41			lda BF
  2934 30B2 D0 03 4C 61 2F		jeq l_0B20
  2935
  2936 				; optimize OK (A8LIBMENU), line = 132
  2937
  2938 30B7 AD A0 41			lda BI
  2939 30BA F0 03 4C 5B 31		jne l_0CCA
  2940
  2941 				; optimize OK (A8LIBMENU), line = 134
  2942
  2943 30BF AD A7 41			lda BL
  2944 30C2 38 E9 01			sub #$01
  2945 30C5 85 9D			sta :STACKORIGIN+9
  2946 30C7 A9 00			lda #$00
  2947 30C9 E9 00			sbc #$00
  2948 30CB 06 9D			asl :STACKORIGIN+9
  2949 30CD 2A				rol @
  2950 30CE 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2951 30D0 AD 5C 31			lda PS
  2952 30D3 18 65 9D			add :STACKORIGIN+9
  2953 30D6 85 82			sta :bp2
  2954 30D8 AD 5D 31			lda PS+1
  2955 30DB 65 AD			adc :STACKORIGIN+STACKWIDTH+9
  2956 30DD 85 83			sta :bp2+1
  2957 30DF A0 00			ldy #$00
  2958 30E1 B1 82			lda (:bp2),y
  2959 30E3 85 88			sta @move.src
  2960 30E5 C8				iny
  2961 30E6 B1 82			lda (:bp2),y
  2962 30E8 85 89			sta @move.src+1
  2963 30EA AC 60 31 84 82 AC + 	mwy TMPSTR :bp2
  2964 30F4 A0 00			ldy #$00
  2965 30F6 B1 88 91 82 C8 D0 + 	mva:rne (@move.src),y (:bp2),y+
  2966
  2967 				; optimize OK (A8LIBMENU), line = 135
  2968
  2969 30FD AD D2 41			lda adr.TMPSTR
  2970 3100 85 8C			sta SYSTEM.SETLENGTH.LEN
  2971 3102 AD 5E 31			lda CL
  2972 3105 85 88			sta SYSTEM.SETLENGTH.S
  2973 3107 AD 5F 31			lda CL+1
  2974 310A 85 89			sta SYSTEM.SETLENGTH.S+1
  2975 310C 20 E9 24			jsr SYSTEM.SETLENGTH
  2976
  2977 				; optimize OK (A8LIBMENU), line = 136
  2978
  2979 310F AD AA 41			lda adr.CL
  2980 3112 85 84			sta SYSTEM.MOVE_0287.COUNT
  2981 3114 A9 AB			lda <adr.CL+$01
  2982 3116 85 8C			sta SYSTEM.MOVE_0287.DEST
  2983 3118 A9 41			lda >adr.CL+$01
  2984 311A 85 8D			sta SYSTEM.MOVE_0287.DEST+1
  2985 311C A9 D3			lda <adr.TMPSTR+$01
  2986 311E 85 88			sta SYSTEM.MOVE_0287.SOURCE
  2987 3120 A9 41			lda >adr.TMPSTR+$01
  2988 3122 85 89			sta SYSTEM.MOVE_0287.SOURCE+1
  2989 3124 A9 00			lda #$00
  2990 3126 85 85			sta SYSTEM.MOVE_0287.COUNT+1
  2991 3128				.local +MAIN.SYSTEM.MOVE_0287
  2992 3128				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0287.M@INLINE [Source: stubapp.a65]
     4 3128 20 50 23			jsr @move
Source: stubapp.a65
  2993 					.endl
  2994
  2995 				; optimize FAIL ('A8LIBWIN.WPRINT', A8LIBMENU), line = 137
  2996
  2997 312B E8				inx
  2998 312C AD 5E 31 95 94		mva CL :STACKORIGIN,x
  2999 3131 AD 5F 31 95 A4		mva CL+1 :STACKORIGIN+STACKWIDTH,x
  3000 3136 E8				inx
  3001 3137 A9 00 95 94			mva #$00 :STACKORIGIN,x
  3002 313B E8				inx
  3003 313C AD 9F 41			lda Y
  3004 313F 18 6D A7 41			add BL
  3005 3143 95 94			sta :STACKORIGIN,x
  3006 3145 E8				inx
  3007 3146 A9 01 95 94			mva #$01 :STACKORIGIN,x
  3008 314A 20 12 23			jsr subAL_CL
  3009 314D AD 9E 41 95 94		mva X :STACKORIGIN,x
  3010 3152 E8				inx
  3011 3153 AD 9D 41 95 94		mva BN :STACKORIGIN,x
  3012 3158 20 4E 2A			jsr A8LIBWIN.WPRINT
  3013 315B			l_0CCA
  3014 315B			@exit
  3015
  3016 				; ------------------------------------------------------------
  3017
  3018 = 419D			BN	= DATAORIGIN+$0C9D
  3019 = 419E			X	= DATAORIGIN+$0C9E
  3020 = 419F			Y	= DATAORIGIN+$0C9F
  3021 = 41A0			BI	= DATAORIGIN+$0CA0
  3022 = 41A1			BS	= DATAORIGIN+$0CA1
  3023 = 41A2			BC	= DATAORIGIN+$0CA2
  3024 = 41A3			adr.PS	= [DATAORIGIN+$0CA3] .array [1] .word
  3025 315B			.var PS	= adr.PS .word
  3026 = 41A5			RESULT	= DATAORIGIN+$0CA5
  3027 = 41A6			BF	= DATAORIGIN+$0CA6
  3028 = 41A7			BL	= DATAORIGIN+$0CA7
  3029 = 41A8			BK	= DATAORIGIN+$0CA8
  3030 = 41A9			TMP	= DATAORIGIN+$0CA9
  3031 = 41AA			adr.CL	= [DATAORIGIN+$0CAA] .array [40]
  3032 315B			.var CL	= adr.CL .word
  3033 = 41D2			adr.TMPSTR	= [DATAORIGIN+$0CD2] .array [256]
  3034 315B			.var TMPSTR	= adr.TMPSTR .word
  3035
  3036 = 419D			@VarData	= BN
  3037 = 0134			@VarDataSize	= 308
  3038
  3039 315B 60				rts						; ret
  3040 = 315C A3 41		PS
  3040 = 315E AA 41		CL
  3040 = 3160 D2 41		TMPSTR
  3040 				.endl
  3041
  3042 				; ------------------------------------------------------------
  3043
  3044 				.endl							; UNIT A8LIBMENU
  3045
  3046 3162			.local	ABOUT						; PROCEDURE
  3047
  3048 				; optimize OK (stubapp.pas), line = 25
  3049
  3050 3162 A9 01			lda #$01
  3051 3164 8D A5 3D			sta A8LIBWIN.WOPEN.X
  3052 3167 A9 06			lda #$06
  3053 3169 8D A6 3D			sta A8LIBWIN.WOPEN.Y
  3054 316C A9 26			lda #$26
  3055 316E 8D A7 3D			sta A8LIBWIN.WOPEN.W
  3056 3171 A9 0F			lda #$0F
  3057 3173 8D A8 3D			sta A8LIBWIN.WOPEN.H
  3058 3176 A9 00			lda #$00
  3059 3178 8D A9 3D			sta A8LIBWIN.WOPEN.BT
  3060 317B 20 5B 27			jsr A8LIBWIN.WOPEN
  3061 317E AD AA 3D			lda A8LIBWIN.WOPEN.RESULT
  3062 3181 8D D3 42			sta BW1
  3063
  3064 				; optimize FAIL ('A8LIBWIN.WORN', stubapp.pas), line = 26
  3065
  3066 3184 E8				inx
  3067 3185 A9 2C 95 94			mva #$2C :STACKORIGIN,x
  3068 3189 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  3069 318D E8				inx
  3070 318E A9 FB 95 94			mva #$FB :STACKORIGIN,x
  3071 3192 E8				inx
  3072 3193 A9 F1 95 94			mva #$F1 :STACKORIGIN,x
  3073 3197 E8				inx
  3074 3198 AD D3 42 95 94		mva BW1 :STACKORIGIN,x
  3075 319D 20 35 2C			jsr A8LIBWIN.WORN
  3076
  3077 				; optimize FAIL ('A8LIBWIN.WPRINT', stubapp.pas), line = 27
  3078
  3079 31A0 E8				inx
  3080 31A1 A9 33 95 94			mva #$33 :STACKORIGIN,x
  3081 31A5 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  3082 31A9 E8				inx
  3083 31AA A9 00 95 94			mva #$00 :STACKORIGIN,x
  3084 31AE E8				inx
  3085 31AF A9 01 95 94			mva #$01 :STACKORIGIN,x
  3086 31B3 E8				inx
  3087 31B4 A9 FF 95 94			mva #$FF :STACKORIGIN,x
  3088 31B8 E8				inx
  3089 31B9 AD D3 42 95 94		mva BW1 :STACKORIGIN,x
  3090 31BE 20 4E 2A			jsr A8LIBWIN.WPRINT
  3091
  3092 				; optimize FAIL ('A8LIBWIN.WPRINT', stubapp.pas), line = 28
  3093
  3094 31C1 E8				inx
  3095 31C2 A9 45 95 94			mva #$45 :STACKORIGIN,x
  3096 31C6 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  3097 31CA E8				inx
  3098 31CB A9 00 95 94			mva #$00 :STACKORIGIN,x
  3099 31CF E8				inx
  3100 31D0 A9 02 95 94			mva #$02 :STACKORIGIN,x
  3101 31D4 E8				inx
  3102 31D5 A9 FF 95 94			mva #$FF :STACKORIGIN,x
  3103 31D9 E8				inx
  3104 31DA AD D3 42 95 94		mva BW1 :STACKORIGIN,x
  3105 31DF 20 4E 2A			jsr A8LIBWIN.WPRINT
  3106
  3107 				; optimize FAIL ('A8LIBWIN.WPRINT', stubapp.pas), line = 29
  3108
  3109 31E2 E8				inx
  3110 31E3 A9 57 95 94			mva #$57 :STACKORIGIN,x
  3111 31E7 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  3112 31EB E8				inx
  3113 31EC A9 00 95 94			mva #$00 :STACKORIGIN,x
  3114 31F0 E8				inx
  3115 31F1 A9 03 95 94			mva #$03 :STACKORIGIN,x
  3116 31F5 E8				inx
  3117 31F6 A9 FF 95 94			mva #$FF :STACKORIGIN,x
  3118 31FA E8				inx
  3119 31FB AD D3 42 95 94		mva BW1 :STACKORIGIN,x
  3120 3200 20 4E 2A			jsr A8LIBWIN.WPRINT
  3121
  3122 				; optimize FAIL ('A8LIBWIN.WPRINT', stubapp.pas), line = 30
  3123
  3124 3203 E8				inx
  3125 3204 A9 79 95 94			mva #$79 :STACKORIGIN,x
  3126 3208 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  3127 320C E8				inx
  3128 320D A9 00 95 94			mva #$00 :STACKORIGIN,x
  3129 3211 E8				inx
  3130 3212 A9 05 95 94			mva #$05 :STACKORIGIN,x
  3131 3216 E8				inx
  3132 3217 A9 FF 95 94			mva #$FF :STACKORIGIN,x
  3133 321B E8				inx
  3134 321C AD D3 42 95 94		mva BW1 :STACKORIGIN,x
  3135 3221 20 4E 2A			jsr A8LIBWIN.WPRINT
  3136
  3137 				; optimize FAIL ('A8LIBWIN.WPRINT', stubapp.pas), line = 31
  3138
  3139 3224 E8				inx
  3140 3225 A9 95 95 94			mva #$95 :STACKORIGIN,x
  3141 3229 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  3142 322D E8				inx
  3143 322E A9 00 95 94			mva #$00 :STACKORIGIN,x
  3144 3232 E8				inx
  3145 3233 A9 06 95 94			mva #$06 :STACKORIGIN,x
  3146 3237 E8				inx
  3147 3238 A9 FF 95 94			mva #$FF :STACKORIGIN,x
  3148 323C E8				inx
  3149 323D AD D3 42 95 94		mva BW1 :STACKORIGIN,x
  3150 3242 20 4E 2A			jsr A8LIBWIN.WPRINT
  3151
  3152 				; optimize FAIL ('A8LIBWIN.WPRINT', stubapp.pas), line = 32
  3153
  3154 3245 E8				inx
  3155 3246 A9 AD 95 94			mva #$AD :STACKORIGIN,x
  3156 324A A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  3157 324E E8				inx
  3158 324F A9 00 95 94			mva #$00 :STACKORIGIN,x
  3159 3253 E8				inx
  3160 3254 A9 07 95 94			mva #$07 :STACKORIGIN,x
  3161 3258 E8				inx
  3162 3259 A9 FF 95 94			mva #$FF :STACKORIGIN,x
  3163 325D E8				inx
  3164 325E AD D3 42 95 94		mva BW1 :STACKORIGIN,x
  3165 3263 20 4E 2A			jsr A8LIBWIN.WPRINT
  3166
  3167 				; optimize FAIL ('A8LIBWIN.WPRINT', stubapp.pas), line = 33
  3168
  3169 3266 E8				inx
  3170 3267 A9 C0 95 94			mva #$C0 :STACKORIGIN,x
  3171 326B A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  3172 326F E8				inx
  3173 3270 A9 00 95 94			mva #$00 :STACKORIGIN,x
  3174 3274 E8				inx
  3175 3275 A9 09 95 94			mva #$09 :STACKORIGIN,x
  3176 3279 E8				inx
  3177 327A A9 04 95 94			mva #$04 :STACKORIGIN,x
  3178 327E E8				inx
  3179 327F AD D3 42 95 94		mva BW1 :STACKORIGIN,x
  3180 3284 20 4E 2A			jsr A8LIBWIN.WPRINT
  3181
  3182 				; optimize FAIL ('A8LIBWIN.WPRINT', stubapp.pas), line = 34
  3183
  3184 3287 E8				inx
  3185 3288 A9 D9 95 94			mva #$D9 :STACKORIGIN,x
  3186 328C A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  3187 3290 E8				inx
  3188 3291 A9 00 95 94			mva #$00 :STACKORIGIN,x
  3189 3295 E8				inx
  3190 3296 A9 0A 95 94			mva #$0A :STACKORIGIN,x
  3191 329A E8				inx
  3192 329B A9 02 95 94			mva #$02 :STACKORIGIN,x
  3193 329F E8				inx
  3194 32A0 AD D3 42 95 94		mva BW1 :STACKORIGIN,x
  3195 32A5 20 4E 2A			jsr A8LIBWIN.WPRINT
  3196
  3197 				; optimize FAIL ('A8LIBWIN.WPRINT', stubapp.pas), line = 35
  3198
  3199 32A8 E8				inx
  3200 32A9 A9 F5 95 94			mva #$F5 :STACKORIGIN,x
  3201 32AD A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  3202 32B1 E8				inx
  3203 32B2 A9 00 95 94			mva #$00 :STACKORIGIN,x
  3204 32B6 E8				inx
  3205 32B7 A9 0B 95 94			mva #$0B :STACKORIGIN,x
  3206 32BB E8				inx
  3207 32BC A9 02 95 94			mva #$02 :STACKORIGIN,x
  3208 32C0 E8				inx
  3209 32C1 AD D3 42 95 94		mva BW1 :STACKORIGIN,x
  3210 32C6 20 4E 2A			jsr A8LIBWIN.WPRINT
  3211
  3212 				; optimize FAIL ('A8LIBWIN.WPRINT', stubapp.pas), line = 36
  3213
  3214 32C9 E8				inx
  3215 32CA A9 1A 95 94			mva #$1A :STACKORIGIN,x
  3216 32CE A9 21 95 A4			mva #$21 :STACKORIGIN+STACKWIDTH,x
  3217 32D2 E8				inx
  3218 32D3 A9 01 95 94			mva #$01 :STACKORIGIN,x
  3219 32D7 E8				inx
  3220 32D8 A9 0D 95 94			mva #$0D :STACKORIGIN,x
  3221 32DC E8				inx
  3222 32DD A9 FF 95 94			mva #$FF :STACKORIGIN,x
  3223 32E1 E8				inx
  3224 32E2 AD D3 42 95 94		mva BW1 :STACKORIGIN,x
  3225 32E7 20 4E 2A			jsr A8LIBWIN.WPRINT
  3226
  3227 				; optimize OK (stubapp.pas), line = 39
  3228
  3229 32EA A9 00			lda #$00
  3230 32EC 20 F6 24			jsr A8LIBMISC.WAITKCX
  3231
  3232 				; optimize OK (stubapp.pas), line = 42
  3233
  3234 32EF AD D3 42			lda BW1
  3235 32F2 20 30 29			jsr A8LIBWIN.WCLOSE
  3236
  3237 				; ------------------------------------------------------------
  3238
  3239 = 42D3			BW1	= DATAORIGIN+$0DD3
  3240
  3241 = 42D3			@VarData	= BW1
  3242 = 0001			@VarDataSize	= 1
  3243
  3244 32F5			@exit
  3245 					.ifdef @new
  3246 					lda <@VarData
  3247 					sta :ztmp
  3248 					lda >@VarData
  3249 					ldy #@VarDataSize-1
  3250 					jmp @FreeMem
  3251 					els
  3252 32F5 60				rts						; ret
  3253 					eif
  3254 				.endl
  3255
  3256 32F6			.local	SUBMENU3					; PROCEDURE
  3257
  3258 				; optimize OK (stubapp.pas), line = 57
  3259
  3260 32F6 A9 00			lda #$00
  3261 32F8 8D D6 42			sta BD
  3262
  3263 				; optimize OK (stubapp.pas), line = 60
  3264
  3265 32FB A9 10			lda #$10
  3266 32FD 8D A5 3D			sta A8LIBWIN.WOPEN.X
  3267 3300 A9 0A			lda #$0A
  3268 3302 8D A6 3D			sta A8LIBWIN.WOPEN.Y
  3269 3305 A9 0E			lda #$0E
  3270 3307 8D A7 3D			sta A8LIBWIN.WOPEN.W
  3271 330A A9 05			lda #$05
  3272 330C 8D A8 3D			sta A8LIBWIN.WOPEN.H
  3273 330F A9 00			lda #$00
  3274 3311 8D A9 3D			sta A8LIBWIN.WOPEN.BT
  3275 3314 20 5B 27			jsr A8LIBWIN.WOPEN
  3276 3317 AD AA 3D			lda A8LIBWIN.WOPEN.RESULT
  3277 331A 8D D4 42			sta BW1
  3278
  3279 				; optimize FAIL ('A8LIBWIN.WORN', stubapp.pas), line = 61
  3280
  3281 331D E8				inx
  3282 331E A9 4A 95 94			mva #$4A :STACKORIGIN,x
  3283 3322 A9 21 95 A4			mva #$21 :STACKORIGIN+STACKWIDTH,x
  3284 3326 E8				inx
  3285 3327 A9 FB 95 94			mva #$FB :STACKORIGIN,x
  3286 332B E8				inx
  3287 332C A9 F1 95 94			mva #$F1 :STACKORIGIN,x
  3288 3330 E8				inx
  3289 3331 AD D4 42 95 94		mva BW1 :STACKORIGIN,x
  3290 3336 20 35 2C			jsr A8LIBWIN.WORN
  3291
  3292 				; --- WhileProlog
  3293 3339 4C B1 33			jmp l_0D77
  3294 333C			l_0D78
  3295
  3296 				; optimize OK (stubapp.pas), line = 67
  3297
  3298 333C AD D4 42			lda BW1
  3299 333F 8D 9D 41			sta A8LIBMENU.MENUV.BN
  3300 3342 A9 01			lda #$01
  3301 3344 8D 9E 41			sta A8LIBMENU.MENUV.X
  3302 3347 8D 9F 41			sta A8LIBMENU.MENUV.Y
  3303 334A A9 00			lda #$00
  3304 334C 8D A0 41			sta A8LIBMENU.MENUV.BI
  3305 334F A9 01			lda #$01
  3306 3351 8D A1 41			sta A8LIBMENU.MENUV.BS
  3307 3354 A9 03			lda #$03
  3308 3356 8D A2 41			sta A8LIBMENU.MENUV.BC
  3309 3359 A9 EF			lda #$EF
  3310 335B 8D 5C 31			sta A8LIBMENU.MENUV.PS
  3311 335E A9 22			lda #$22
  3312 3360 8D 5D 31			sta A8LIBMENU.MENUV.PS+1
  3313 3363 20 53 2F			jsr A8LIBMENU.MENUV
  3314 3366 AD A5 41			lda A8LIBMENU.MENUV.RESULT
  3315 3369 8D D5 42			sta BC
  3316
  3317 				; optimize OK (stubapp.pas), line = 70
  3318
  3319 336C 8D D7 42			sta @CASETMP_0005
  3320 336F C9 01			cmp #$01
  3321 3371 D0 0F			jne l_0D90
  3322 				@
  3323
  3324 				; optimize FAIL ('A8LIBGADG.GALERT', stubapp.pas), line = 71
  3325
  3326 3373 E8				inx
  3327 3374 A9 54 95 94			mva #$54 :STACKORIGIN,x
  3328 3378 A9 21 95 A4			mva #$21 :STACKORIGIN+STACKWIDTH,x
  3329 337C 20 6B 2E			jsr A8LIBGADG.GALERT
  3330 337F 4C B1 33			jmp a_0005
  3331 3382			l_0D90
  3332 3382 C9 02			cmp #$02
  3333 3384 D0 0F			jne l_0D9B
  3334 				@
  3335
  3336 				; optimize FAIL ('A8LIBGADG.GALERT', stubapp.pas), line = 72
  3337
  3338 3386 E8				inx
  3339 3387 A9 6C 95 94			mva #$6C :STACKORIGIN,x
  3340 338B A9 21 95 A4			mva #$21 :STACKORIGIN+STACKWIDTH,x
  3341 338F 20 6B 2E			jsr A8LIBGADG.GALERT
  3342 3392 4C B1 33			jmp a_0005
  3343 3395			l_0D9B
  3344 3395 C9 03			cmp #$03
  3345 3397 D0 0F			jne l_0DA6
  3346 				@
  3347
  3348 				; optimize FAIL ('A8LIBGADG.GALERT', stubapp.pas), line = 73
  3349
  3350 3399 E8				inx
  3351 339A A9 84 95 94			mva #$84 :STACKORIGIN,x
  3352 339E A9 21 95 A4			mva #$21 :STACKORIGIN+STACKWIDTH,x
  3353 33A2 20 6B 2E			jsr A8LIBGADG.GALERT
  3354 33A5 4C B1 33			jmp a_0005
  3355 33A8			l_0DA6
  3356 33A8 C9 FD			cmp #$FD
  3357 33AA D0 05			jne l_0DB1
  3358 				@
  3359
  3360 				; optimize OK (stubapp.pas), line = 74
  3361
  3362 33AC A9 01			lda #$01
  3363 33AE 8D D6 42			sta BD
  3364
  3365 33B1			l_0DB1
  3366 33B1			a_0005
  3367 33B1			l_0D77
  3368
  3369 				; optimize OK (stubapp.pas), line = 64
  3370
  3371 33B1 AD D6 42			lda BD
  3372 33B4 F0 86			jeq l_0D78
  3373
  3374 				; optimize OK (stubapp.pas), line = 79
  3375
  3376 33B6 AD D4 42			lda BW1
  3377 33B9 20 30 29			jsr A8LIBWIN.WCLOSE
  3378
  3379 				; ------------------------------------------------------------
  3380
  3381 = 42D4			BW1	= DATAORIGIN+$0DD4
  3382 = 42D5			BC	= DATAORIGIN+$0DD5
  3383 = 42D6			BD	= DATAORIGIN+$0DD6
  3384 = 22EF			adr.PCM	= CODEORIGIN+$02EF
  3385 33BC			.var PCM	= adr.PCM .word
  3386 = 42D7			@CASETMP_0005	= DATAORIGIN+$0DD7
  3387
  3388 = 42D4			@VarData	= BW1
  3389 = 0004			@VarDataSize	= 4
  3390
  3391 33BC			@exit
  3392 					.ifdef @new
  3393 					lda <@VarData
  3394 					sta :ztmp
  3395 					lda >@VarData
  3396 					ldy #@VarDataSize-1
  3397 					jmp @FreeMem
  3398 					els
  3399 33BC 60				rts						; ret
  3400 					eif
  3401 = 33BD EF 22		PCM
  3401 				.endl
  3402 33BF			l_0236
  3403
  3404 				; optimize OK (stubapp.pas), line = 91
  3405
  3406 33BF A9 00			lda #$00
  3407 33C1 8D DB 42			sta BD
  3408
  3409 				; optimize FAIL ('A8LIBWIN.WINIT', stubapp.pas), line = 94
  3410
  3411 33C4 20 C7 26			jsr A8LIBWIN.WINIT
  3412
  3413 				; optimize OK (stubapp.pas), line = 97
  3414
  3415 33C7 A9 0E			lda #$0E
  3416 33C9 20 3F 27			jsr A8LIBWIN.WBACK
  3417
  3418 				; optimize OK (stubapp.pas), line = 100
  3419
  3420 33CC A9 00			lda #$00
  3421 33CE 8D A5 3D			sta A8LIBWIN.WOPEN.X
  3422 33D1 8D A6 3D			sta A8LIBWIN.WOPEN.Y
  3423 33D4 A9 28			lda #$28
  3424 33D6 8D A7 3D			sta A8LIBWIN.WOPEN.W
  3425 33D9 A9 03			lda #$03
  3426 33DB 8D A8 3D			sta A8LIBWIN.WOPEN.H
  3427 33DE A9 01			lda #$01
  3428 33E0 8D A9 3D			sta A8LIBWIN.WOPEN.BT
  3429 33E3 20 5B 27			jsr A8LIBWIN.WOPEN
  3430 33E6 AD AA 3D			lda A8LIBWIN.WOPEN.RESULT
  3431 33E9 8D D8 42			sta BW1
  3432
  3433 				; optimize FAIL ('A8LIBWIN.WPRINT', stubapp.pas), line = 101
  3434
  3435 33EC E8				inx
  3436 33ED A9 E2 95 94			mva #$E2 :STACKORIGIN,x
  3437 33F1 A9 21 95 A4			mva #$21 :STACKORIGIN+STACKWIDTH,x
  3438 33F5 E8				inx
  3439 33F6 A9 00 95 94			mva #$00 :STACKORIGIN,x
  3440 33FA E8				inx
  3441 33FB A9 01 95 94			mva #$01 :STACKORIGIN,x
  3442 33FF E8				inx
  3443 3400 A9 FF 95 94			mva #$FF :STACKORIGIN,x
  3444 3404 E8				inx
  3445 3405 AD D8 42 95 94		mva BW1 :STACKORIGIN,x
  3446 340A 20 4E 2A			jsr A8LIBWIN.WPRINT
  3447
  3448 				; optimize OK (stubapp.pas), line = 104
  3449
  3450 340D A9 0D			lda #$0D
  3451 340F 8D A5 3D			sta A8LIBWIN.WOPEN.X
  3452 3412 A9 07			lda #$07
  3453 3414 8D A6 3D			sta A8LIBWIN.WOPEN.Y
  3454 3417 A9 0C			lda #$0C
  3455 3419 8D A7 3D			sta A8LIBWIN.WOPEN.W
  3456 341C A9 09			lda #$09
  3457 341E 8D A8 3D			sta A8LIBWIN.WOPEN.H
  3458 3421 A9 00			lda #$00
  3459 3423 8D A9 3D			sta A8LIBWIN.WOPEN.BT
  3460 3426 20 5B 27			jsr A8LIBWIN.WOPEN
  3461 3429 AD AA 3D			lda A8LIBWIN.WOPEN.RESULT
  3462 342C 8D D9 42			sta BW2
  3463
  3464 				; optimize FAIL ('A8LIBWIN.WORN', stubapp.pas), line = 105
  3465
  3466 342F E8				inx
  3467 3430 A9 F9 95 94			mva #$F9 :STACKORIGIN,x
  3468 3434 A9 21 95 A4			mva #$21 :STACKORIGIN+STACKWIDTH,x
  3469 3438 E8				inx
  3470 3439 A9 FF 95 94			mva #$FF :STACKORIGIN,x
  3471 343D E8				inx
  3472 343E A9 F1 95 94			mva #$F1 :STACKORIGIN,x
  3473 3442 E8				inx
  3474 3443 AD D9 42 95 94		mva BW2 :STACKORIGIN,x
  3475 3448 20 35 2C			jsr A8LIBWIN.WORN
  3476
  3477 				; --- WhileProlog
  3478 344B 4C D2 34			jmp l_0DF5
  3479 344E			l_0DF6
  3480
  3481 				; optimize OK (stubapp.pas), line = 111
  3482
  3483 344E AD D9 42			lda BW2
  3484 3451 8D 9D 41			sta A8LIBMENU.MENUV.BN
  3485 3454 A9 01			lda #$01
  3486 3456 8D 9E 41			sta A8LIBMENU.MENUV.X
  3487 3459 A9 02			lda #$02
  3488 345B 8D 9F 41			sta A8LIBMENU.MENUV.Y
  3489 345E A9 00			lda #$00
  3490 3460 8D A0 41			sta A8LIBMENU.MENUV.BI
  3491 3463 A9 01			lda #$01
  3492 3465 8D A1 41			sta A8LIBMENU.MENUV.BS
  3493 3468 A9 05			lda #$05
  3494 346A 8D A2 41			sta A8LIBMENU.MENUV.BC
  3495 346D A9 F5			lda #$F5
  3496 346F 8D 5C 31			sta A8LIBMENU.MENUV.PS
  3497 3472 A9 22			lda #$22
  3498 3474 8D 5D 31			sta A8LIBMENU.MENUV.PS+1
  3499 3477 20 53 2F			jsr A8LIBMENU.MENUV
  3500 347A AD A5 41			lda A8LIBMENU.MENUV.RESULT
  3501 347D 8D DA 42			sta BC
  3502
  3503 				; optimize OK (stubapp.pas), line = 114
  3504
  3505 3480 8D DC 42			sta @CASETMP_0006
  3506 3483 C9 01			cmp #$01
  3507 3485 D0 0F			jne l_0E0E
  3508 				@
  3509
  3510 				; optimize FAIL ('A8LIBGADG.GALERT', stubapp.pas), line = 115
  3511
  3512 3487 E8				inx
  3513 3488 A9 FF 95 94			mva #$FF :STACKORIGIN,x
  3514 348C A9 21 95 A4			mva #$21 :STACKORIGIN+STACKWIDTH,x
  3515 3490 20 6B 2E			jsr A8LIBGADG.GALERT
  3516 3493 4C C6 34			jmp a_0006
  3517 3496			l_0E0E
  3518 3496 C9 02			cmp #$02
  3519 3498 D0 0F			jne l_0E19
  3520 				@
  3521
  3522 				; optimize FAIL ('A8LIBGADG.GALERT', stubapp.pas), line = 116
  3523
  3524 349A E8				inx
  3525 349B A9 17 95 94			mva #$17 :STACKORIGIN,x
  3526 349F A9 22 95 A4			mva #$22 :STACKORIGIN+STACKWIDTH,x
  3527 34A3 20 6B 2E			jsr A8LIBGADG.GALERT
  3528 34A6 4C C6 34			jmp a_0006
  3529 34A9			l_0E19
  3530 34A9 C9 03			cmp #$03
  3531 34AB D0 06			jne l_0E24
  3532 				@
  3533
  3534 				; optimize FAIL ('SUBMENU3', stubapp.pas), line = 117
  3535
  3536 34AD 20 F6 32			jsr SUBMENU3
  3537 34B0 4C C6 34			jmp a_0006
  3538 34B3			l_0E24
  3539 34B3 C9 04			cmp #$04
  3540 34B5 D0 06			jne l_0E2E
  3541 				@
  3542
  3543 				; optimize FAIL ('ABOUT', stubapp.pas), line = 118
  3544
  3545 34B7 20 62 31			jsr ABOUT
  3546 34BA 4C C6 34			jmp a_0006
  3547 34BD			l_0E2E
  3548 34BD C9 05			cmp #$05
  3549 34BF D0 05			jne l_0E38
  3550 				@
  3551
  3552 				; optimize OK (stubapp.pas), line = 119
  3553
  3554 34C1 A9 01			lda #$01
  3555 34C3 8D DB 42			sta BD
  3556
  3557 34C6			l_0E38
  3558 34C6			a_0006
  3559
  3560 				; optimize OK (stubapp.pas), line = 123
  3561
  3562 34C6 AD DA 42			lda BC
  3563 34C9 C9 FD			cmp #$FD
  3564 34CB D0 05			jne l_0E57
  3565
  3566 				; optimize OK (stubapp.pas), line = 125
  3567
  3568 34CD A9 01			lda #$01
  3569 34CF 8D DB 42			sta BD
  3570 34D2			l_0E57
  3571 34D2			l_0DF5
  3572
  3573 				; optimize OK (stubapp.pas), line = 108
  3574
  3575 34D2 AD DB 42			lda BD
  3576 34D5 D0 03 4C 4E 34		jeq l_0DF6
  3577
  3578 				; optimize OK (stubapp.pas), line = 130
  3579
  3580 34DA AD D9 42			lda BW2
  3581 34DD 20 30 29			jsr A8LIBWIN.WCLOSE
  3582
  3583 				; optimize OK (stubapp.pas), line = 131
  3584
  3585 34E0 AD D8 42			lda BW1
  3586 34E3 20 30 29			jsr A8LIBWIN.WCLOSE
  3587
  3588 				; ------------------------------------------------------------
  3589
  3590 = 42D8			BW1	= DATAORIGIN+$0DD8
  3591 = 42D9			BW2	= DATAORIGIN+$0DD9
  3592 = 42DA			BC	= DATAORIGIN+$0DDA
  3593 = 42DB			BD	= DATAORIGIN+$0DDB
  3594 = 22F5			adr.PCM	= CODEORIGIN+$02F5
  3595 34E6			.var PCM	= adr.PCM .word
  3596 = 42DC			@CASETMP_0006	= DATAORIGIN+$0DDC
  3597 34E6			@exit
  3598
  3599 34E6 A2 00		@halt	ldx #$00
  3600 34E8 9A				txs
  3601 					.ifdef MAIN.@DEFINES.ROMOFF
  3602 					inc portb
  3603 					.fi
  3604
  3605 34E9 A0 01			ldy #$01
  3606
  3607 34EB 60				rts
  3608
  3609 				; ------------------------------------------------------------
  3610
  3611 34EC 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  3612
  3613 				; ------------------------------------------------------------
  3614
  3615 34FC			.local	@DEFINES
  3616 34FC			ATARI
  3617 				.endl
  3618
  3619 34FC			.local	@RESOURCE
  3620 				.endl
  3621
  3622 = 34FC F5 22		PCM
  3622 				.endl							; MAIN
  3623
  3624 				; ------------------------------------------------------------
  3625 				; ------------------------------------------------------------
  3626
  3627 				.macro	UNITINITIALIZATION
  3628 				
  3629 					.ifdef MAIN.SYSTEM.@UnitInit
  3630 					jsr MAIN.SYSTEM.@UnitInit
  3631 					.fi
  3632 				
  3633 					.ifdef MAIN.A8DEFINES.@UnitInit
  3634 					jsr MAIN.A8DEFINES.@UnitInit
  3635 					.fi
  3636 				
  3637 					.ifdef MAIN.A8DEFWIN.@UnitInit
  3638 					jsr MAIN.A8DEFWIN.@UnitInit
  3639 					.fi
  3640 				
  3641 					.ifdef MAIN.A8LIBMISC.@UnitInit
  3642 					jsr MAIN.A8LIBMISC.@UnitInit
  3643 					.fi
  3644 				
  3645 					.ifdef MAIN.A8LIBSTR.@UnitInit
  3646 					jsr MAIN.A8LIBSTR.@UnitInit
  3647 					.fi
  3648 				
  3649 					.ifdef MAIN.ATARI.@UnitInit
  3650 					jsr MAIN.ATARI.@UnitInit
  3651 					.fi
  3652 				
  3653 					.ifdef MAIN.CRT.@UnitInit
  3654 					jsr MAIN.CRT.@UnitInit
  3655 					.fi
  3656 				
  3657 					.ifdef MAIN.DOS.@UnitInit
  3658 					jsr MAIN.DOS.@UnitInit
  3659 					.fi
  3660 				
  3661 					.ifdef MAIN.STRUTILS.@UnitInit
  3662 					jsr MAIN.STRUTILS.@UnitInit
  3663 					.fi
  3664 				
  3665 					.ifdef MAIN.SYSUTILS.@UnitInit
  3666 					jsr MAIN.SYSUTILS.@UnitInit
  3667 					.fi
  3668 				
  3669 					.ifdef MAIN.A8LIBWIN.@UnitInit
  3670 					jsr MAIN.A8LIBWIN.@UnitInit
  3671 					.fi
  3672 				
  3673 					.ifdef MAIN.A8LIBGADG.@UnitInit
  3674 					jsr MAIN.A8LIBGADG.@UnitInit
  3675 					.fi
  3676 				
  3677 					.ifdef MAIN.A8LIBMENU.@UnitInit
  3678 					jsr MAIN.A8LIBMENU.@UnitInit
  3679 					.fi
  3680 				.endm
  3681
  3682 				; ------------------------------------------------------------
  3683
  3684 					ift .SIZEOF(MAIN.SYSTEM) > 0
  3685 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  3685 				SYSTEM: $249F..$24F3
  3686 					eif
  3687
  3688 					ift .SIZEOF(MAIN.A8DEFINES) > 0
  3689 					.print 'A8DEFINES: ',MAIN.A8DEFINES,'..',MAIN.A8DEFINES+.SIZEOF(MAIN.A8DEFINES)-1
  3689 				A8DEFINES: $24F4..$24F5
  3690 					eif
  3691
  3692 					ift .SIZEOF(MAIN.A8DEFWIN) > 0
  3693 					.print 'A8DEFWIN: ',MAIN.A8DEFWIN,'..',MAIN.A8DEFWIN+.SIZEOF(MAIN.A8DEFWIN)-1
  3694 					eif
  3695
  3696 					ift .SIZEOF(MAIN.A8LIBMISC) > 0
  3697 					.print 'A8LIBMISC: ',MAIN.A8LIBMISC,'..',MAIN.A8LIBMISC+.SIZEOF(MAIN.A8LIBMISC)-1
  3697 				A8LIBMISC: $24F6..$25A9
  3698 					eif
  3699
  3700 					ift .SIZEOF(MAIN.A8LIBSTR) > 0
  3701 					.print 'A8LIBSTR: ',MAIN.A8LIBSTR,'..',MAIN.A8LIBSTR+.SIZEOF(MAIN.A8LIBSTR)-1
  3701 				A8LIBSTR: $25AA..$26C0
  3702 					eif
  3703
  3704 					ift .SIZEOF(MAIN.ATARI) > 0
  3705 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  3706 					eif
  3707
  3708 					ift .SIZEOF(MAIN.CRT) > 0
  3709 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  3709 				CRT: $26C1..$26C6
  3710 					eif
  3711
  3712 					ift .SIZEOF(MAIN.DOS) > 0
  3713 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  3714 					eif
  3715
  3716 					ift .SIZEOF(MAIN.STRUTILS) > 0
  3717 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  3718 					eif
  3719
  3720 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  3721 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  3722 					eif
  3723
  3724 					ift .SIZEOF(MAIN.A8LIBWIN) > 0
  3725 					.print 'A8LIBWIN: ',MAIN.A8LIBWIN,'..',MAIN.A8LIBWIN+.SIZEOF(MAIN.A8LIBWIN)-1
  3725 				A8LIBWIN: $26C7..$2E6A
  3726 					eif
  3727
  3728 					ift .SIZEOF(MAIN.A8LIBGADG) > 0
  3729 					.print 'A8LIBGADG: ',MAIN.A8LIBGADG,'..',MAIN.A8LIBGADG+.SIZEOF(MAIN.A8LIBGADG)-1
  3729 				A8LIBGADG: $2E6B..$2F52
  3730 					eif
  3731
  3732 					ift .SIZEOF(MAIN.A8LIBMENU) > 0
  3733 					.print 'A8LIBMENU: ',MAIN.A8LIBMENU,'..',MAIN.A8LIBMENU+.SIZEOF(MAIN.A8LIBMENU)-1
  3733 				A8LIBMENU: $2F53..$3161
  3734 					eif
  3735
  3736 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  3736 				CODE: $2000..$34FB
  3737
  3738 				; ------------------------------------------------------------
  3739
  3740 34FE				.align $0004
  3741
  3742 3500			DATAORIGIN
  3743 3500-3505> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  3744
  3745 = 0006			VARINITSIZE	= *-DATAORIGIN
  3746 = 0DDD			VARDATASIZE	= 3549
  3747
  3748 = 42DD			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  3749
  3750 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  3750 				DATA: $3500..$42DD
  3751
  3752 02E0-02E1> 64 24			run START
  3753
  3754 				; ------------------------------------------------------------
  3755
  3756 				.macro	STATICDATA
  3757 				.by  $05 $31 $2E $30 $2E $30 $00 $03  $20 $20 $20 $00 $04 $54 $52 $55  $45 $00 $05 $46 $41 $4C $53 $45
  3758 				.by  $00 $06 $41 $6C $65 $72 $74 $21  $00 $04 $20 $4F $4B $20 $00 $03  $5B $20 $5D $00 $05 $41 $62 $6F
  3759 				.by  $75 $74 $00 $10 $44 $65 $6D $6F  $20 $41 $70 $70 $6C $69 $63 $61  $74 $69 $6F $6E $00 $10 $56 $65
  3760 				.by  $72 $73 $69 $6F $6E $20 $31 $2E  $30 $30 $2D $50 $41 $53 $00 $20  $28 $43 $29 $20 $32 $30 $32 $32
  3761 				.by  $20 $20 $57 $61 $64 $65 $20 $52  $69 $70 $6B $6F $77 $73 $6B $69  $2C $20 $61 $6D $61 $72 $6F $6B
  3762 				.by  $00 $1A $41 $70 $70 $6C $69 $63  $61 $74 $69 $6F $6E $20 $74 $6F  $20 $64 $65 $6D $6F $6E $73 $74
  3763 				.by  $72 $61 $74 $65 $00 $16 $74 $68  $65 $20 $4D $61 $64 $50 $61 $73  $63 $61 $6C $20 $6C $69 $62 $72
  3764 				.by  $61 $72 $79 $2E $00 $11 $43 $6F  $6E $76 $65 $72 $74 $65 $64 $20  $66 $72 $6F $6D $20 $43 $2E $00
  3765 				.by  $17 $56 $31 $2D $32 $30 $32 $31  $2D $41 $74 $61 $72 $69 $38 $3A  $20 $41 $63 $74 $69 $6F $6E $21
  3766 				.by  $00 $1A $56 $31 $2D $43 $2D $32  $30 $32 $32 $2D $41 $74 $61 $72  $69 $38 $3A $20 $43 $20 $28 $43
  3767 				.by  $43 $36 $35 $29 $00 $23 $56 $31  $2D $50 $41 $53 $2D $32 $30 $32  $32 $2D $41 $74 $61 $72 $69 $38
  3768 				.by  $3A $20 $50 $41 $53 $20 $28 $4D  $61 $64 $50 $61 $73 $63 $61 $6C  $29 $00 $04 $20 $4F $6B $20 $00
  3769 				.by  $0C $20 $53 $75 $62 $2D $49 $74  $65 $6D $20 $31 $20 $00 $0C $20  $53 $75 $62 $2D $49 $74 $65 $6D
  3770 				.by  $20 $32 $20 $00 $0C $20 $53 $75  $62 $2D $49 $74 $65 $6D $20 $33  $20 $00 $08 $53 $75 $62 $2D $4D
  3771 				.by  $65 $6E $75 $00 $16 $20 $53 $75  $62 $2D $49 $74 $65 $6D $20 $31  $20 $73 $65 $6C $65 $63 $74 $65
  3772 				.by  $64 $2E $20 $00 $16 $20 $53 $75  $62 $2D $49 $74 $65 $6D $20 $32  $20 $73 $65 $6C $65 $63 $74 $65
  3773 				.by  $64 $2E $20 $00 $16 $20 $53 $75  $62 $2D $49 $74 $65 $6D $20 $33  $20 $73 $65 $6C $65 $63 $74 $65
  3774 				.by  $64 $2E $20 $00 $0C $20 $53 $75  $62 $2D $4D $65 $6E $75 $20 $31  $20 $00 $0C $20 $53 $75 $62 $2D
  3775 				.by  $4D $65 $6E $75 $20 $32 $20 $00  $0C $20 $53 $75 $62 $2D $4D $65  $6E $75 $20 $33 $20 $00 $0C $20
  3776 				.by  $41 $62 $6F $75 $74 $20 $20 $20  $20 $20 $20 $00 $0C $20 $45 $78  $69 $74 $20 $20 $20 $20 $20 $20
  3777 				.by  $20 $00 $15 $41 $20 $50 $20 $50  $20 $4C $20 $49 $20 $43 $20 $41  $20 $54 $20 $49 $20 $4F $20 $4E
  3778 				.by  $00 $04 $4D $65 $6E $75 $00 $16  $20 $53 $75 $62 $2D $4D $65 $6E  $75 $20 $31 $20 $73 $65 $6C $65
  3779 				.by  $63 $74 $65 $64 $2E $20 $00 $16  $20 $53 $75 $62 $2D $4D $65 $6E  $75 $20 $32 $20 $73 $65 $6C $65
  3780 				.by  $63 $74 $65 $64 $2E $20 $00 $6C  $6A $3B $C7 $C7 $6B $2B $2A $6F  $C7 $70 $75 $9B $69 $2D $3D $76
  3781 				.by  $C7 $63 $C7 $C7 $62 $78 $7A $34  $C7 $33 $36 $C7 $35 $32 $31 $2C  $20 $2E $6E $C7 $6D $2F $C7 $72
  3782 				.by  $C7 $65 $79 $C7 $74 $77 $71 $39  $C7 $30 $37 $C7 $38 $3C $3E $66  $68 $64 $C7 $C7 $67 $73 $61 $4C
  3783 				.by  $4A $3A $C7 $C7 $4B $5C $5E $4F  $C7 $50 $55 $C7 $49 $5F $7C $56  $C7 $43 $C7 $C7 $42 $58 $5A $24
  3784 				.by  $C7 $23 $26 $C7 $25 $22 $21 $5B  $20 $5D $4E $C7 $4D $3F $C7 $52  $C7 $45 $59 $C7 $54 $57 $51 $28
  3785 				.by  $C7 $29 $27 $C7 $40 $C7 $C7 $46  $48 $44 $C7 $C7 $47 $53 $41 $0C  $0A $7B $C7 $C7 $0B $C7 $C7 $0F
  3786 				.by  $C7 $10 $15 $C7 $09 $C7 $C7 $16  $C7 $03 $C7 $C7 $02 $18 $1A $C7  $C7 $C7 $C7 $C7 $C7 $C7 $C7 $C7
  3787 				.by  $C7 $60 $0E $C7 $0D $C7 $C7 $12  $C7 $05 $19 $C7 $14 $17 $11 $C7  $C7 $C7 $C7 $C7 $C7 $C7 $C7 $06
  3788 				.by  $08 $04 $C7 $C7 $07 $13 $01 $20  $21 $2E $21 $3C $21 $9C $21 $AA  $21 $B8 $21 $C6 $21 $D4 $21
  3789 				.endm
  3790
  3791 					end
