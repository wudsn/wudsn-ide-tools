; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/09/07] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0052

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000002  -------------------

	ldy #0
	mva (:edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	DPEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000003  -------------------

	ldy #0
	mva (:edx),y Result
	iny
	mva (:edx),y Result+1

@exit

; ------------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000018  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLCHAR_00A2					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000021  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	MOVE_00A3					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000026  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	SETLENGTH					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000032  -------------------

	ldy #0
	mva Len (:edx),y

; ------------------------------------------------------------

S	= :EDX
LEN	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	A8DEFINES					; UNIT

; ------------------------------------------------------------

adr.LIB_VERSION	= CODEORIGIN+$0000
.var LIB_VERSION	= adr.LIB_VERSION .word
WRECSZ	= $0A
WBUFSZ	= $0814
WON	= $01
WOFF	= $00
WPABS	= $80
WPTOP	= $F1
WPBOT	= $F2
WPLFT	= $FB
WPRGT	= $FC
WPCNT	= $FF
WENONE	= $64
WENOPN	= $65
WEUSED	= $66
GDISP	= $00
GEDIT	= $01
GHORZ	= $01
GVERT	= $02
GCON	= $01
GCOFF	= $02
GANY	= $00
GALNUM	= $01
GALPHA	= $02
GNUMER	= $03
XESC	= $FD
XTAB	= $FE
XNONE	= $FF
DMACTL	= $022F
COLDST	= $0244
GPRIOR	= $026F
INVFLG	= $02B6
SHFLOK	= $02BE
HELPFG	= $02DC
KEYPCH	= $02FC
GRACTL	= $D01D
CONSOL	= $D01F
PMBASE	= $D407
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
ALMARG	= $52
RSCRN	= $58
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
AFOREG	= $02C5
ABACKG	= $02C6
ABORDR	= $02C8
ACURIN	= $02F0
CBLACK	= $00
CWHITE	= $0E
CGREEN	= $D2
CBLUE	= $92
CRED	= $32
CYELLOW	= $DE
KNOMAP	= $C7
KNONE	= $FF
KENTER	= $0C
KDEL	= $34
KDEL_S	= $74
KDEL_C	= $B4
KINS	= $B7
KPLUS	= $06
KASTER	= $07
KMINUS	= $0E
KEQUAL	= $0F
KESC	= $1C
KSPACE	= $21
KINV	= $27
KTAB	= $2C
KTAB_S	= $6C
KCAP	= $3C
KLEFT	= $86
KRIGHT	= $87
KUP	= $8E
KDOWN	= $8F
KEYB	= $15
KEYC	= $12
KEYD	= $3A
KEYH	= $39
KEYN	= $23
KEYP	= $0A
KEYR	= $28
KEYS	= $3E
KEYT	= $2D
KB_C	= $95
KE_C	= $AA
KX	= $16
KX_S	= $56
KE_CS	= $EA
KS_CS	= $FE
KCNON	= $07
KCSTA	= $0106
KCSEL	= $0105
KCOPT	= $0103
KFHLP	= $11
KF1	= $03
KF2	= $04
KF3	= $13
KF4	= $14
CHBTRGT	= $03
CHTPRGT	= $05
CHTPLFT	= $11
CHBTLFT	= $1A
CHBALL	= $14
CHESC	= $1B
CHUP	= $1C
CHDN	= $1D
CHLFT	= $1E
CHRGT	= $1F
CHSPACE	= $20
CHDMND	= $60
CHCLS	= $7D
CHBACK	= $7E
CHTAB	= $7F
CHENT	= $9B
CHDELLN	= $9C
CHINVSP	= $A0
CHBUZ	= $FD
CHRGT_I	= $9F
CHO_L	= $6F
CHI_I	= $C9

.endl							; UNIT A8DEFINES

; ------------------------------------------------------------

.local	A8DEFWIN					; UNIT

; ------------------------------------------------------------

.endl							; UNIT A8DEFWIN

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	CLRSCR						; PROCEDURE

; optimize FAIL ('@print', crt_atari.inc), line = 34

	@print #$7D
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	DOS						; UNIT

; ------------------------------------------------------------

PALNTSC	= $D014

.endl							; UNIT DOS

; ------------------------------------------------------------

.local	STRUTILS					; UNIT

; ------------------------------------------------------------

.endl							; UNIT STRUTILS

; ------------------------------------------------------------

.local	SYSUTILS					; UNIT

; ------------------------------------------------------------

FAREADONLY	= $01
FAHIDDEN	= $02
FASYSFILE	= $04
FAVOLUMEID	= $08
FADIRECTORY	= $10
FAARCHIVE	= $20
FAANYFILE	= $3F

.endl							; UNIT SYSUTILS

; ------------------------------------------------------------

.local	A8LIBSTR					; UNIT

.local	STRINV						; PROCEDURE

; optimize OK (A8LIBSTR), line = 45

	lda #$00
	sta BL
	ldy BS
	dey
	sty @FORTMP_0125_0

l_0128
; --- ForToDoCondition
	lda @FORTMP_0125_0:#$00
	cmp BL
	jcc l_0136

; optimize OK (A8LIBSTR), line = 48

	mwy PS :bp2
	ldy #$00
	lda (:bp2),y
	eor #$80
	sta (:bp2),y

; optimize FAIL (0, A8LIBSTR), line = 49

	inc PS
	sne
	inc PS+1

; --- ForToDoEpilog
	inc BL
	jne l_0128
l_0136

; ------------------------------------------------------------

PS	= DATAORIGIN+$000C
BS	= DATAORIGIN+$000E
BL	= DATAORIGIN+$000F

@VarData	= PS
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STRAI						; PROCEDURE

; optimize OK (A8LIBSTR), line = 67

	lda #$00
	sta BL
	ldy BS
	dey
	sty @FORTMP_0159_0

l_015C
; --- ForToDoCondition
	lda @FORTMP_0159_0:#$00
	cmp BL
	jcc l_016A

; optimize OK (A8LIBSTR), line = 69

	mvy PS+1 :bp+1
	ldy PS
	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	cmp #$20
	jcs l_0188

; optimize OK (A8LIBSTR), line = 71

	mwy PS :bp2
	ldy #$00
	lda (:bp2),y
	add #$40
	sta (:bp2),y
	jmp l_019C
l_0188

; optimize OK (A8LIBSTR), line = 73

	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	cmp #$20
	jcc l_01BA
	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	cmp #$60
	jcs l_01BA

; optimize OK (A8LIBSTR), line = 75

	mwy PS :bp2
	ldy #$00
	lda (:bp2),y
	sub #$20
	sta (:bp2),y
	jmp l_01CE
l_01BA

; optimize OK (A8LIBSTR), line = 77

	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	jpl l_01EC
	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	cmp #$A0
	jcs l_01EC

; optimize OK (A8LIBSTR), line = 79

	mwy PS :bp2
	ldy #$00
	lda (:bp2),y
	add #$40
	sta (:bp2),y
	jmp l_0200
l_01EC

; optimize OK (A8LIBSTR), line = 81

	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	cmp #$A0
	jcc l_021E
	mvy PS+1 :bp+1
	ldy PS
	lda (:bp),y
	cmp #$E0
	jcs l_021E

; optimize OK (A8LIBSTR), line = 83

	mwy PS :bp2
	ldy #$00
	lda (:bp2),y
	sub #$20
	sta (:bp2),y
l_021E
l_0200
l_01CE
l_019C

; optimize FAIL (0, A8LIBSTR), line = 87

	inc PS
	sne
	inc PS+1

; --- ForToDoEpilog
	inc BL
	jne l_015C
l_016A

; ------------------------------------------------------------

PS	= DATAORIGIN+$0011
BS	= DATAORIGIN+$0013
BL	= DATAORIGIN+$0014

@VarData	= PS
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

.endl							; UNIT A8LIBSTR

; ------------------------------------------------------------

.local	A8LIBWIN					; UNIT

.local	WINIT						; PROCEDURE

; optimize OK (A8LIBWIN), line = 56

	lda #$01
	sta $02F0

; optimize OK (A8LIBWIN), line = 57

	lda #$00
	sta $0052

; optimize FAIL ('CRT.CLRSCR', A8LIBWIN), line = 58

	jsr CRT.CLRSCR

; optimize OK (A8LIBWIN), line = 61

	lda BAWM
	sta SYSTEM.FILLCHAR_00A2.A
	lda BAWM+1
	sta SYSTEM.FILLCHAR_00A2.A+1
	lda #$14
	sta SYSTEM.FILLCHAR_00A2.COUNT
	lda #$08
	sta SYSTEM.FILLCHAR_00A2.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_00A2.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_00A2
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 64

	lda BAWM
	sta CPWM
	lda BAWM+1
	sta CPWM+1

; optimize OK (A8LIBWIN), line = 67

	lda #$00
	sta BL

l_0257
; --- ForToDoCondition
	ldy BL
	cpy #$0B
	jcs l_0265

; optimize OK (A8LIBWIN), line = 70

	lda #$00
	sta adr.BAW.BU,y

; optimize OK (A8LIBWIN), line = 71

	sta adr.BAW.BX,y

; optimize OK (A8LIBWIN), line = 72

	sta adr.BAW.BY,y

; optimize OK (A8LIBWIN), line = 73

	sta adr.BAW.BW,y

; optimize OK (A8LIBWIN), line = 74

	sta adr.BAW.BH,y

; optimize OK (A8LIBWIN), line = 75

	sta adr.BAW.BI,y

; optimize OK (A8LIBWIN), line = 76

	lda BL
	asl @
	tay
	lda BAWM
	sta adr.BAW.CM,y
	lda BAWM+1
	sta adr.BAW.CM+1,y

; optimize OK (A8LIBWIN), line = 77

	lda #$00
	sta adr.BAW.CZ,y
	sta adr.BAW.CZ+1,y

; --- ForToDoEpilog
	inc BL
	jne l_0257
l_0265

; optimize OK (A8LIBWIN), line = 81

	lda #$00
	sta VCUR.VX

; optimize OK (A8LIBWIN), line = 82

	sta VCUR.VY

; ------------------------------------------------------------

BL	= DATAORIGIN+$089C

@VarData	= BL
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WOPEN						; FUNCTION

; optimize OK (A8LIBWIN), line = 118

	lda #$64
	sta RESULT

; optimize OK (A8LIBWIN), line = 121

	lda #$00
	sta BL

l_02BB
; --- ForToDoCondition
	ldy BL
	cpy #$0B
	jcs l_02C9

; optimize OK (A8LIBWIN), line = 124

	lda adr.BAW.BU,y
	jne l_02DE

; optimize OK (A8LIBWIN), line = 127

	lda #$01
	sta adr.BAW.BU,y

; optimize OK (A8LIBWIN), line = 130

	lda BL
	asl @
	tay
	lda CPWM
	sta adr.BAW.CM,y
	lda CPWM+1
	sta adr.BAW.CM+1,y

; optimize OK (A8LIBWIN), line = 131

	lda BL
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda H
	sta :ecx
	lda W
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta :STACKORIGIN+10
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+10
	sta adr.BAW.CZ,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.BAW.CZ+1,y

; optimize OK (A8LIBWIN), line = 134

	ldy BL
	lda X
	sta adr.BAW.BX,y

; optimize OK (A8LIBWIN), line = 135

	lda Y
	sta adr.BAW.BY,y

; optimize OK (A8LIBWIN), line = 136

	lda W
	sta adr.BAW.BW,y

; optimize OK (A8LIBWIN), line = 137

	lda H
	sta adr.BAW.BH,y

; optimize OK (A8LIBWIN), line = 138

	lda BT
	sta adr.BAW.BI,y

; optimize OK (A8LIBWIN), line = 141

	lda $0058
	sta :STACKORIGIN+9
	lda $0058+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda Y
	jsr @mul40
	add :STACKORIGIN+9
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta PS+1
	tya
	add X
	sta PS
	scc
	inc PS+1

; optimize OK (A8LIBWIN), line = 144

	lda #$00
	sta BD
	ldy H
	dey
	sty @FORTMP_034B_0

l_034E
; --- ForToDoCondition
	lda @FORTMP_034B_0:#$00
	cmp BD
	jcc l_035C

; optimize OK (A8LIBWIN), line = 149

	lda BD
	jeq l_0380x
	lda H
	sub #$01
	cmp BD
	jne l_0380
l_0380x

; optimize OK (A8LIBWIN), line = 152

	lda <adr.CL
	sta SYSTEM.FILLCHAR_00A2.A
	lda >adr.CL
	sta SYSTEM.FILLCHAR_00A2.A+1
	lda W
	sta SYSTEM.FILLCHAR_00A2.COUNT
	lda #$00
	sta SYSTEM.FILLCHAR_00A2.COUNT+1
	lda #$52
	sta SYSTEM.FILLCHAR_00A2.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_00A2
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 155

	lda BD
	jne l_0399

; optimize OK (A8LIBWIN), line = 157

	lda #$51
	sta adr.CL

; optimize OK (A8LIBWIN), line = 158

	ldy W
	lda #$45
	sta adr.CL-$01,y
	jmp l_03B3
l_0399

; optimize OK (A8LIBWIN), line = 162

	lda #$5A
	sta adr.CL

; optimize OK (A8LIBWIN), line = 163

	ldy W
	lda #$43
	sta adr.CL-$01,y
l_03B3
	jmp l_03CC
l_0380

; optimize OK (A8LIBWIN), line = 169

	lda <adr.CL
	sta SYSTEM.FILLCHAR_00A2.A
	lda >adr.CL
	sta SYSTEM.FILLCHAR_00A2.A+1
	lda W
	sta SYSTEM.FILLCHAR_00A2.COUNT
	lda #$00
	sta SYSTEM.FILLCHAR_00A2.COUNT+1
	sta SYSTEM.FILLCHAR_00A2.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_00A2
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 170

	lda #$7C
	sta adr.CL

; optimize OK (A8LIBWIN), line = 171

	ldy W
	sta adr.CL-$01,y
l_03CC

; optimize OK (A8LIBWIN), line = 175

	lda BT
	cmp #$01
	jne l_03F4

; optimize OK (A8LIBWIN), line = 177

	lda #$00
	sta BC
	ldy W
	dey
	sty @FORTMP_0401_0

l_0404
; --- ForToDoCondition
	lda @FORTMP_0401_0:#$00
	cmp BC
	jcc l_0412

; optimize OK (A8LIBWIN), line = 179

	ldy BC
	lda adr.CL,y
	eor #$80
	sta adr.CL,y

; --- ForToDoEpilog
	inc BC
	jne l_0404
l_0412
l_03F4

; optimize OK (A8LIBWIN), line = 184

	lda PS
	sta SYSTEM.MOVE_00A3.SOURCE
	lda PS+1
	sta SYSTEM.MOVE_00A3.SOURCE+1
	lda CPWM
	sta SYSTEM.MOVE_00A3.DEST
	lda CPWM+1
	sta SYSTEM.MOVE_00A3.DEST+1
	lda W
	sta SYSTEM.MOVE_00A3.COUNT
	lda #$00
	sta SYSTEM.MOVE_00A3.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00A3
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 186

	lda CPWM
	add W
	sta CPWM
	scc
	inc CPWM+1

; optimize OK (A8LIBWIN), line = 188

	lda <adr.CL
	sta SYSTEM.MOVE_00A3.SOURCE
	lda >adr.CL
	sta SYSTEM.MOVE_00A3.SOURCE+1
	lda PS
	sta SYSTEM.MOVE_00A3.DEST
	lda PS+1
	sta SYSTEM.MOVE_00A3.DEST+1
	lda W
	sta SYSTEM.MOVE_00A3.COUNT
	lda #$00
	sta SYSTEM.MOVE_00A3.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00A3
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 190

	lda PS
	add #$28
	sta PS
	scc
	inc PS+1

; --- ForToDoEpilog
	inc BD
	jne l_034E
l_035C

; optimize OK (A8LIBWIN), line = 194

	lda BL
	sta RESULT
	jmp b_02BB					; break
l_02DE

; --- ForToDoEpilog
	inc BL
	jne l_02BB
l_02C9
b_02BB
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$089D
Y	= DATAORIGIN+$089E
W	= DATAORIGIN+$089F
H	= DATAORIGIN+$08A0
BT	= DATAORIGIN+$08A1
RESULT	= DATAORIGIN+$08A2
BL	= DATAORIGIN+$08A3
BD	= DATAORIGIN+$08A4
BC	= DATAORIGIN+$08A5
adr.CL	= [DATAORIGIN+$08A6] .array [41]
.var CL	= adr.CL .word
PS	= DATAORIGIN+$08CF

@VarData	= X
@VarDataSize	= 51

	rts						; ret
.endl

.local	WCLOSE						; FUNCTION
	sta BN

; optimize OK (A8LIBWIN), line = 216

	lda #$65
	sta RESULT

; optimize OK (A8LIBWIN), line = 219

	ldy BN
	lda adr.BAW.BU,y
	cmp #$01
	jne l_046B

; optimize OK (A8LIBWIN), line = 222

	lda $0058
	sta :STACKORIGIN+9
	lda $0058+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.BAW.BY,y
	jsr @mul40
	add :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	ldy BN
	lda :STACKORIGIN+9
	add adr.BAW.BX,y
	sta PS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta PS+1

; optimize OK (A8LIBWIN), line = 225

	lda BN
	asl @
	tay
	lda adr.BAW.CM,y
	sta PA
	lda adr.BAW.CM+1,y
	sta PA+1

; optimize OK (A8LIBWIN), line = 228

	lda #$00
	sta BL
	ldy BN
	lda adr.BAW.BH,y
	sub #$01
	sta @FORTMP_049E_0

l_04A1
; --- ForToDoCondition
	lda @FORTMP_049E_0:#$00
	cmp BL
	jcc l_04AF

; optimize OK (A8LIBWIN), line = 231

	ldy BN
	lda adr.BAW.BW,y
	sta SYSTEM.MOVE_00A3.COUNT
	lda PA
	sta SYSTEM.MOVE_00A3.SOURCE
	lda PA+1
	sta SYSTEM.MOVE_00A3.SOURCE+1
	lda PS
	sta SYSTEM.MOVE_00A3.DEST
	lda PS+1
	sta SYSTEM.MOVE_00A3.DEST+1
	lda #$00
	sta SYSTEM.MOVE_00A3.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00A3
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 233

	ldy BN
	lda PA
	add adr.BAW.BW,y
	sta PA
	scc
	inc PA+1

; optimize OK (A8LIBWIN), line = 235

	lda PS
	add #$28
	sta PS
	scc
	inc PS+1

; --- ForToDoEpilog
	inc BL
	jne l_04A1
l_04AF

; optimize OK (A8LIBWIN), line = 239

	lda BN
	asl @
	tay
	lda adr.BAW.CZ,y
	sta SYSTEM.FILLCHAR_00A2.COUNT
	lda adr.BAW.CZ+1,y
	sta SYSTEM.FILLCHAR_00A2.COUNT+1
	lda adr.BAW.CM,y
	sta SYSTEM.FILLCHAR_00A2.A
	lda adr.BAW.CM+1,y
	sta SYSTEM.FILLCHAR_00A2.A+1
	lda #$00
	sta SYSTEM.FILLCHAR_00A2.VALUE
	.local +MAIN.SYSTEM.FILLCHAR_00A2
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 242

	lda BN
	asl @
	tay
	lda CPWM
	sub adr.BAW.CZ,y
	sta CPWM
	lda CPWM+1
	sbc adr.BAW.CZ+1,y
	sta CPWM+1

; optimize OK (A8LIBWIN), line = 245

	ldy BN
	lda #$00
	sta adr.BAW.BU,y

; optimize OK (A8LIBWIN), line = 246

	sta adr.BAW.BX,y

; optimize OK (A8LIBWIN), line = 247

	sta adr.BAW.BY,y

; optimize OK (A8LIBWIN), line = 248

	sta adr.BAW.BW,y

; optimize OK (A8LIBWIN), line = 249

	sta adr.BAW.BH,y

; optimize OK (A8LIBWIN), line = 250

	sta adr.BAW.BI,y

; optimize OK (A8LIBWIN), line = 251

	lda BN
	asl @
	tay
	lda BAWM
	sta adr.BAW.CM,y
	lda BAWM+1
	sta adr.BAW.CM+1,y

; optimize OK (A8LIBWIN), line = 252

	lda #$00
	sta adr.BAW.CZ,y
	sta adr.BAW.CZ+1,y

; optimize OK (A8LIBWIN), line = 255

	sta RESULT
l_046B
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$08D3
RESULT	= DATAORIGIN+$08D4
BL	= DATAORIGIN+$08D5
PS	= DATAORIGIN+$08D6
PA	= DATAORIGIN+$08D8

@VarData	= BN
@VarDataSize	= 6

	rts						; ret
.endl

.local	WPRINT						; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta BN
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta X
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta Y
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta BI
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.PS,y+
	mwa #adr.PS PS
	dex
@main

; optimize OK (A8LIBWIN), line = 364

	lda #$65
	sta RESULT

; optimize OK (A8LIBWIN), line = 367

	ldy BN
	lda adr.BAW.BU,y
	cmp #$01
	jne l_0555

; optimize OK (A8LIBWIN), line = 370

	lda adr.PS
	sta BL

; optimize OK (A8LIBWIN), line = 371

	lda CL
	sta SYSTEM.SETLENGTH.S
	lda CL+1
	sta SYSTEM.SETLENGTH.S+1
	lda BL
	sta SYSTEM.SETLENGTH.LEN
	jsr SYSTEM.SETLENGTH

; optimize OK (A8LIBWIN), line = 372

	lda <adr.CL+$01
	sta SYSTEM.MOVE_00A3.DEST
	lda >adr.CL+$01
	sta SYSTEM.MOVE_00A3.DEST+1
	lda <adr.PS+$01
	sta SYSTEM.MOVE_00A3.SOURCE
	lda >adr.PS+$01
	sta SYSTEM.MOVE_00A3.SOURCE+1
	lda BL
	sta SYSTEM.MOVE_00A3.COUNT
	lda #$00
	sta SYSTEM.MOVE_00A3.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00A3
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 381

	lda X
	cmp #$FF
	jeq l_0592
	ldy BN
	lda adr.BAW.BW,y
	sub X
	sta :STACKORIGIN+11
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	sub #$01
	sta :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+11
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+STACKWIDTH*2+11
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda :STACKORIGIN+STACKWIDTH*3+11
	sbc #$00
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda BL
	cmp :STACKORIGIN+11
@
	jcc l_0592
	jeq l_0592

; optimize OK (A8LIBWIN), line = 384

	lda adr.BAW.BW,y
	sub X
	sub #$01
	sta BL

; optimize OK (A8LIBWIN), line = 385

	lda CL
	sta SYSTEM.SETLENGTH.S
	lda CL+1
	sta SYSTEM.SETLENGTH.S+1
	lda BL
	sta SYSTEM.SETLENGTH.LEN
	jsr SYSTEM.SETLENGTH
l_0592

; optimize OK (A8LIBWIN), line = 389

	lda <adr.CL+$01
	sta A8LIBSTR.STRAI.PS
	lda >adr.CL+$01
	sta A8LIBSTR.STRAI.PS+1
	lda BL
	sta A8LIBSTR.STRAI.BS
	jsr A8LIBSTR.STRAI

; optimize OK (A8LIBWIN), line = 392

	ldy BN
	lda adr.BAW.BI,y
	cmp #$01
	jeq l_05D4x
	lda BI
	cmp #$01
	jne l_05D4
l_05D4x

; optimize OK (A8LIBWIN), line = 394

	lda <adr.CL+$01
	sta A8LIBSTR.STRINV.PS
	lda >adr.CL+$01
	sta A8LIBSTR.STRINV.PS+1
	lda BL
	sta A8LIBSTR.STRINV.BS
	jsr A8LIBSTR.STRINV
l_05D4

; optimize OK (A8LIBWIN), line = 398

	lda $0058
	sta :STACKORIGIN+9
	lda $0058+1
	sta :STACKORIGIN+STACKWIDTH+9
	ldy BN
	lda adr.BAW.BY,y
	jsr @mul40
	add :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	ldy BN
	lda :STACKORIGIN+9
	add adr.BAW.BX,y
	sta CS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta CS+1

; optimize OK (A8LIBWIN), line = 401

	lda Y
	jsr @mul40
	add CS
	sta CS
	lda CS+1
	adc :eax+1
	sta CS+1

; optimize OK (A8LIBWIN), line = 404

	lda X
	cmp #$FF
	jeq l_0610

; optimize OK (A8LIBWIN), line = 407

	lda CS
	add X
	sta CS
	scc
	inc CS+1
	jmp l_061D
l_0610

; optimize OK (A8LIBWIN), line = 411

	ldy BN
	lda adr.BAW.BW,y
	sub BL
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sbc #$00
	sta :eax+2
	lda #$00
	sbc #$00
	sta :eax+3
	lda #$02
	sta :ecx
	lda #$00
	sta :ecx+1
	jsr idivEAX_CX
	lda CS
	add :eax
	sta CS
	lda CS+1
	adc :eax+1
	sta CS+1
l_061D

; optimize OK (A8LIBWIN), line = 415

	lda <adr.CL+$01
	sta SYSTEM.MOVE_00A3.SOURCE
	lda >adr.CL+$01
	sta SYSTEM.MOVE_00A3.SOURCE+1
	lda CS
	sta SYSTEM.MOVE_00A3.DEST
	lda CS+1
	sta SYSTEM.MOVE_00A3.DEST+1
	lda BL
	sta SYSTEM.MOVE_00A3.COUNT
	lda #$00
	sta SYSTEM.MOVE_00A3.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00A3
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 418

	lda #$00
	sta RESULT
l_0555
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$08DB
X	= DATAORIGIN+$08DC
Y	= DATAORIGIN+$08DD
BI	= DATAORIGIN+$08DE
adr.PS	= [DATAORIGIN+$08DF] .array [256]
.var PS	= adr.PS .word
RESULT	= DATAORIGIN+$09DF
BL	= DATAORIGIN+$09E0
TMP	= DATAORIGIN+$09E1
CS	= DATAORIGIN+$09E2
adr.CL	= [DATAORIGIN+$09E4] .array [130]
.var CL	= adr.CL .word

@VarData	= BN
@VarDataSize	= 394

	rts						; ret
.endl

.local	WORN						; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta BN
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta BT
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta BL
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.PS,y+
	mwa #adr.PS PS
	dex
@main

; optimize OK (A8LIBWIN), line = 440

	lda #$65
	sta RESULT

; optimize OK (A8LIBWIN), line = 443

	ldy BN
	lda adr.BAW.BU,y
	cmp #$01
	jne l_0665

; optimize OK (A8LIBWIN), line = 446

	lda adr.PS
	add #$02
	sta BS

; optimize OK (A8LIBWIN), line = 447

	lda CL
	sta SYSTEM.SETLENGTH.S
	lda CL+1
	sta SYSTEM.SETLENGTH.S+1
	lda BS
	sta SYSTEM.SETLENGTH.LEN
	jsr SYSTEM.SETLENGTH

; optimize OK (A8LIBWIN), line = 448

	lda #$04
	sta adr.CL+$01

; optimize OK (A8LIBWIN), line = 449

	lda adr.PS
	sta SYSTEM.MOVE_00A3.COUNT
	lda <adr.CL+$02
	sta SYSTEM.MOVE_00A3.DEST
	lda >adr.CL+$02
	sta SYSTEM.MOVE_00A3.DEST+1
	lda <adr.PS+$01
	sta SYSTEM.MOVE_00A3.SOURCE
	lda >adr.PS+$01
	sta SYSTEM.MOVE_00A3.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_00A3.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00A3
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 450

	ldy BS
	lda #$01
	sta adr.CL,y

; optimize OK (A8LIBWIN), line = 453

	lda <adr.CL+$01
	sta A8LIBSTR.STRAI.PS
	lda >adr.CL+$01
	sta A8LIBSTR.STRAI.PS+1
	lda BS
	sta A8LIBSTR.STRAI.BS
	jsr A8LIBSTR.STRAI

; optimize OK (A8LIBWIN), line = 456

	ldy BN
	lda adr.BAW.BI,y
	cmp #$01
	jne l_069C

; optimize OK (A8LIBWIN), line = 458

	lda <adr.CL+$01
	sta A8LIBSTR.STRINV.PS
	lda >adr.CL+$01
	sta A8LIBSTR.STRINV.PS+1
	lda BS
	sta A8LIBSTR.STRINV.BS
	jsr A8LIBSTR.STRINV
	jmp l_06AB
l_069C

; optimize OK (A8LIBWIN), line = 463

	lda BS
	sub #$02
	sta A8LIBSTR.STRINV.BS
	lda <adr.CL+$02
	sta A8LIBSTR.STRINV.PS
	lda >adr.CL+$02
	sta A8LIBSTR.STRINV.PS+1
	jsr A8LIBSTR.STRINV
l_06AB

; optimize OK (A8LIBWIN), line = 467

	lda $0058
	sta :STACKORIGIN+9
	lda $0058+1
	sta :STACKORIGIN+STACKWIDTH+9
	ldy BN
	lda adr.BAW.BY,y
	jsr @mul40
	add :STACKORIGIN+9
	sta CS
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta CS+1

; optimize OK (A8LIBWIN), line = 470

	lda BT
	cmp #$F2
	jne l_06D8

; optimize OK (A8LIBWIN), line = 472

	ldy BN
	lda adr.BAW.BH,y
	sub #$01
	jsr @mul40
	add CS
	sta CS
	lda CS+1
	adc :eax+1
	sta CS+1
l_06D8

; optimize OK (A8LIBWIN), line = 476

	lda BL
	cmp #$FB
	jne l_06FB

; optimize OK (A8LIBWIN), line = 478

	ldy BN
	lda adr.BAW.BX,y
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda CS
	add :STACKORIGIN+9
	sta CS
	lda CS+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta CS+1
	jmp l_070F
l_06FB

; optimize OK (A8LIBWIN), line = 481

	lda BL
	cmp #$FC
	jne l_0721

; optimize OK (A8LIBWIN), line = 483

	ldy BN
	lda adr.BAW.BX,y
	add adr.BAW.BW,y
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub BS
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda CS
	add :STACKORIGIN+9
	sta CS
	lda CS+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta CS+1
	jmp l_0744
l_0721

; optimize OK (A8LIBWIN), line = 487

	ldy BN
	lda adr.BAW.BX,y
	sta :STACKORIGIN+9
	lda adr.BAW.BW,y
	sub BS
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sbc #$00
	sta :eax+2
	lda #$00
	sbc #$00
	sta :eax+3
	lda #$02
	sta :ecx
	lda #$00
	sta :ecx+1
	jsr idivEAX_CX
	lda :STACKORIGIN+9
	add :eax
	sta :STACKORIGIN+9
	lda #$00
	adc :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda CS
	add :STACKORIGIN+9
	sta CS
	lda CS+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta CS+1
l_0744
l_070F

; optimize OK (A8LIBWIN), line = 491

	lda <adr.CL+$01
	sta SYSTEM.MOVE_00A3.SOURCE
	lda >adr.CL+$01
	sta SYSTEM.MOVE_00A3.SOURCE+1
	lda CS
	sta SYSTEM.MOVE_00A3.DEST
	lda CS+1
	sta SYSTEM.MOVE_00A3.DEST+1
	lda BS
	sta SYSTEM.MOVE_00A3.COUNT
	lda #$00
	sta SYSTEM.MOVE_00A3.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00A3
	m@INLINE
	.endl

; optimize OK (A8LIBWIN), line = 494

	lda #$00
	sta RESULT
l_0665
@exit

; ------------------------------------------------------------

BN	= DATAORIGIN+$0A66
BT	= DATAORIGIN+$0A67
BL	= DATAORIGIN+$0A68
adr.PS	= [DATAORIGIN+$0A69] .array [256]
.var PS	= adr.PS .word
RESULT	= DATAORIGIN+$0B69
BS	= DATAORIGIN+$0B6A
CS	= DATAORIGIN+$0B6B
adr.CL	= [DATAORIGIN+$0B6D] .array [37]
.var CL	= adr.CL .word

@VarData	= BN
@VarDataSize	= 299

	rts						; ret
.endl

; ------------------------------------------------------------

adr.BAW	= DATAORIGIN+$0016	; [110] RECORD
.var BAW	= adr.BAW .word
adr.BAW.BU	= [DATAORIGIN+$0016] .array [11]
.var BAW.BU	= adr.BAW.BU .word
adr.BAW.BX	= [DATAORIGIN+$0021] .array [11]
.var BAW.BX	= adr.BAW.BX .word
adr.BAW.BY	= [DATAORIGIN+$002C] .array [11]
.var BAW.BY	= adr.BAW.BY .word
adr.BAW.BW	= [DATAORIGIN+$0037] .array [11]
.var BAW.BW	= adr.BAW.BW .word
adr.BAW.BH	= [DATAORIGIN+$0042] .array [11]
.var BAW.BH	= adr.BAW.BH .word
adr.BAW.BI	= [DATAORIGIN+$004D] .array [11]
.var BAW.BI	= adr.BAW.BI .word
adr.BAW.CM	= [DATAORIGIN+$0058] .array [11] .word
.var BAW.CM	= adr.BAW.CM .word
adr.BAW.CZ	= [DATAORIGIN+$006E] .array [11] .word
.var BAW.CZ	= adr.BAW.CZ .word
adr.VCUR	= DATAORIGIN+$0084	; [2] RECORD
.var VCUR	= adr.VCUR .word
VCUR.VX	= DATAORIGIN+$0084
VCUR.VY	= DATAORIGIN+$0085
adr.BAWM	= [DATAORIGIN+$0086] .array [2068]
.var BAWM	= adr.BAWM .word
CPWM	= DATAORIGIN+$089A

.endl							; UNIT A8LIBWIN

; ------------------------------------------------------------

.local	A8LIBMISC					; UNIT

.local	WAITKCX						; FUNCTION
	sta BI

; optimize OK (A8LIBMISC), line = 88

	lda #$00
	sta RESULT
	sta RESULT+1

; --- WhileProlog
l_0778

; optimize OK (A8LIBMISC), line = 91

	lda $02FC+1
	bne @+
	lda $02FC
	cmp #$FF
@
	jne l_0778w
	lda $D01F
	cmp #$07
	jne l_0778w
	lda $02DC
	jeq l_0778
l_0778w

; optimize OK (A8LIBMISC), line = 94

	lda $02FC
	sta BK

; optimize OK (A8LIBMISC), line = 95

	lda $D01F
	sta BC

; optimize OK (A8LIBMISC), line = 96

	lda $02DC
	sta BH

; optimize OK (A8LIBMISC), line = 99

	lda BC
	cmp #$07
	jeq l_07BA

; optimize OK (A8LIBMISC), line = 101

	sta RESULT
	lda #$01
	sta RESULT+1
	jmp l_07CE
l_07BA

; optimize OK (A8LIBMISC), line = 104

	lda BH
	jeq l_07E0

; optimize OK (A8LIBMISC), line = 106

	lda #$11
	sta RESULT
	lda #$00
	sta RESULT+1

; optimize OK (A8LIBMISC), line = 107

	sta $02DC
	jmp l_07F1
l_07E0

; optimize OK (A8LIBMISC), line = 110

	lda BK
	cmp #$3C
	jne l_0803

; optimize OK (A8LIBMISC), line = 112

	sta RESULT
	lda #$00
	sta RESULT+1

; optimize OK (A8LIBMISC), line = 115

	lda $02BE
	sta BU

; optimize OK (A8LIBMISC), line = 116

	eor #$40
	sta BU

; optimize OK (A8LIBMISC), line = 117

	sta $02BE
	jmp l_0827
l_0803

; optimize OK (A8LIBMISC), line = 120

	lda BK
	cmp #$27
	jne l_0839

; optimize OK (A8LIBMISC), line = 122

	sta RESULT
	lda #$00
	sta RESULT+1

; optimize OK (A8LIBMISC), line = 125

	lda BI
	cmp #$01
	jne l_0852

; optimize OK (A8LIBMISC), line = 128

	lda $02B6
	sta BU

; optimize OK (A8LIBMISC), line = 129

	eor #$80
	sta BU

; optimize OK (A8LIBMISC), line = 130

	sta $02B6
l_0852
	jmp l_0872
l_0839

; optimize OK (A8LIBMISC), line = 135

	lda BK
	sta RESULT
	lda #$00
	sta RESULT+1
l_0872
l_0827
l_07F1
l_07CE

; optimize OK (A8LIBMISC), line = 139

	lda #$FF
	sta $02FC
@exit

; ------------------------------------------------------------

BI	= DATAORIGIN+$0B92
RESULT	= DATAORIGIN+$0B93
BK	= DATAORIGIN+$0B95
BC	= DATAORIGIN+$0B96
BH	= DATAORIGIN+$0B97
BU	= DATAORIGIN+$0B98

@VarData	= BI
@VarDataSize	= 5

	rts						; ret
.endl

; ------------------------------------------------------------

.endl							; UNIT A8LIBMISC
l_0052

; optimize FAIL ('A8LIBWIN.WINIT', stubwin.pas), line = 22

	jsr A8LIBWIN.WINIT

; optimize OK (stubwin.pas), line = 25

	lda #$08
	sta A8LIBWIN.WOPEN.X
	lda #$05
	sta A8LIBWIN.WOPEN.Y
	lda #$18
	sta A8LIBWIN.WOPEN.W
	lda #$09
	sta A8LIBWIN.WOPEN.H
	lda #$00
	sta A8LIBWIN.WOPEN.BT
	jsr A8LIBWIN.WOPEN
	lda A8LIBWIN.WOPEN.RESULT
	sta BW1

; optimize FAIL ('A8LIBWIN.WORN', stubwin.pas), line = 26

	inx
	mva #$19 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FB :STACKORIGIN,x
	inx
	mva #$F1 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WORN

; optimize FAIL ('A8LIBWIN.WPRINT', stubwin.pas), line = 27

	inx
	mva #$1F :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva #$05 :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', stubwin.pas), line = 28

	inx
	mva #$28 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva #$0C :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', stubwin.pas), line = 29

	inx
	mva #$31 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	inx
	mva #$04 :STACKORIGIN,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize FAIL ('A8LIBWIN.WPRINT', stubwin.pas), line = 30

	inx
	mva #$45 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	inx
	mva #$06 :STACKORIGIN,x
	inx
	mva #$FF :STACKORIGIN,x
	inx
	mva BW1 :STACKORIGIN,x
	jsr A8LIBWIN.WPRINT

; optimize OK (stubwin.pas), line = 33

	lda #$00
	jsr A8LIBMISC.WAITKCX

; optimize OK (stubwin.pas), line = 36

	lda BW1
	jsr A8LIBWIN.WCLOSE

; ------------------------------------------------------------

BW1	= DATAORIGIN+$0B99
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.A8DEFINES.@UnitInit
	jsr MAIN.A8DEFINES.@UnitInit
	.fi

	.ifdef MAIN.A8DEFWIN.@UnitInit
	jsr MAIN.A8DEFWIN.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.DOS.@UnitInit
	jsr MAIN.DOS.@UnitInit
	.fi

	.ifdef MAIN.STRUTILS.@UnitInit
	jsr MAIN.STRUTILS.@UnitInit
	.fi

	.ifdef MAIN.SYSUTILS.@UnitInit
	jsr MAIN.SYSUTILS.@UnitInit
	.fi

	.ifdef MAIN.A8LIBSTR.@UnitInit
	jsr MAIN.A8LIBSTR.@UnitInit
	.fi

	.ifdef MAIN.A8LIBWIN.@UnitInit
	jsr MAIN.A8LIBWIN.@UnitInit
	.fi

	.ifdef MAIN.A8LIBMISC.@UnitInit
	jsr MAIN.A8LIBMISC.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.A8DEFINES) > 0
	.print 'A8DEFINES: ',MAIN.A8DEFINES,'..',MAIN.A8DEFINES+.SIZEOF(MAIN.A8DEFINES)-1
	eif

	ift .SIZEOF(MAIN.A8DEFWIN) > 0
	.print 'A8DEFWIN: ',MAIN.A8DEFWIN,'..',MAIN.A8DEFWIN+.SIZEOF(MAIN.A8DEFWIN)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.DOS) > 0
	.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
	eif

	ift .SIZEOF(MAIN.STRUTILS) > 0
	.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
	eif

	ift .SIZEOF(MAIN.SYSUTILS) > 0
	.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
	eif

	ift .SIZEOF(MAIN.A8LIBSTR) > 0
	.print 'A8LIBSTR: ',MAIN.A8LIBSTR,'..',MAIN.A8LIBSTR+.SIZEOF(MAIN.A8LIBSTR)-1
	eif

	ift .SIZEOF(MAIN.A8LIBWIN) > 0
	.print 'A8LIBWIN: ',MAIN.A8LIBWIN,'..',MAIN.A8LIBWIN+.SIZEOF(MAIN.A8LIBWIN)-1
	eif

	ift .SIZEOF(MAIN.A8LIBMISC) > 0
	.print 'A8LIBMISC: ',MAIN.A8LIBMISC,'..',MAIN.A8LIBMISC+.SIZEOF(MAIN.A8LIBMISC)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 2970

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $05 $31 $2E $30 $2E $30 $00 $04  $54 $52 $55 $45 $00 $05 $46 $41  $4C $53 $45 $00 $03 $20 $20 $20
.by  $00 $04 $53 $74 $75 $62 $00 $07  $49 $6E $76 $65 $72 $73 $65 $00  $07 $41 $54 $41 $53 $43 $49 $49
.by  $00 $12 $55 $6E $66 $69 $6E $69  $73 $68 $65 $64 $20 $42 $69 $74  $6E $65 $73 $73 $00 $04 $20 $4F
.by  $6B $20 $00 $6C $6A $3B $C7 $C7  $6B $2B $2A $6F $C7 $70 $75 $9B  $69 $2D $3D $76 $C7 $63 $C7 $C7
.by  $62 $78 $7A $34 $C7 $33 $36 $C7  $35 $32 $31 $2C $20 $2E $6E $C7  $6D $2F $C7 $72 $C7 $65 $79 $C7
.by  $74 $77 $71 $39 $C7 $30 $37 $C7  $38 $3C $3E $66 $68 $64 $C7 $C7  $67 $73 $61 $4C $4A $3A $C7 $C7
.by  $4B $5C $5E $4F $C7 $50 $55 $C7  $49 $5F $7C $56 $C7 $43 $C7 $C7  $42 $58 $5A $24 $C7 $23 $26 $C7
.by  $25 $22 $21 $5B $20 $5D $4E $C7  $4D $3F $C7 $52 $C7 $45 $59 $C7  $54 $57 $51 $28 $C7 $29 $27 $C7
.by  $40 $C7 $C7 $46 $48 $44 $C7 $C7  $47 $53 $41 $0C $0A $7B $C7 $C7  $0B $C7 $C7 $0F $C7 $10 $15 $C7
.by  $09 $C7 $C7 $16 $C7 $03 $C7 $C7  $02 $18 $1A $C7 $C7 $C7 $C7 $C7  $C7 $C7 $C7 $C7 $C7 $60 $0E $C7
.by  $0D $C7 $C7 $12 $C7 $05 $19 $C7  $14 $17 $11 $C7 $C7 $C7 $C7 $C7  $C7 $C7 $C7 $06 $08 $04 $C7 $C7
.by  $07 $13 $01
.endm

	end
