mads 2.1.6 build 10 (13 Sep 22)
Source: stubwin.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/09/07] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: stubwin.a65]
     1 FFFF> 2000-2D2D> 05 31 + .by  $05 $31 $2E $30 $2E $30 $00 $04  $54 $52 $55 $45 $00 $05 $46 $41  $4C $53 $45 $00 $03 $20 $20 $20
     2 2018 00 04 53 74 75 62 + .by  $00 $04 $53 $74 $75 $62 $00 $07  $49 $6E $76 $65 $72 $73 $65 $00  $07 $41 $54 $41 $53 $43 $49 $49
     3 2030 00 12 55 6E 66 69 + .by  $00 $12 $55 $6E $66 $69 $6E $69  $73 $68 $65 $64 $20 $42 $69 $74  $6E $65 $73 $73 $00 $04 $20 $4F
     4 2048 6B 20 00 6C 6A 3B + .by  $6B $20 $00 $6C $6A $3B $C7 $C7  $6B $2B $2A $6F $C7 $70 $75 $9B  $69 $2D $3D $76 $C7 $63 $C7 $C7
     5 2060 62 78 7A 34 C7 33 + .by  $62 $78 $7A $34 $C7 $33 $36 $C7  $35 $32 $31 $2C $20 $2E $6E $C7  $6D $2F $C7 $72 $C7 $65 $79 $C7
     6 2078 74 77 71 39 C7 30 + .by  $74 $77 $71 $39 $C7 $30 $37 $C7  $38 $3C $3E $66 $68 $64 $C7 $C7  $67 $73 $61 $4C $4A $3A $C7 $C7
     7 2090 4B 5C 5E 4F C7 50 + .by  $4B $5C $5E $4F $C7 $50 $55 $C7  $49 $5F $7C $56 $C7 $43 $C7 $C7  $42 $58 $5A $24 $C7 $23 $26 $C7
     8 20A8 25 22 21 5B 20 5D + .by  $25 $22 $21 $5B $20 $5D $4E $C7  $4D $3F $C7 $52 $C7 $45 $59 $C7  $54 $57 $51 $28 $C7 $29 $27 $C7
     9 20C0 40 C7 C7 46 48 44 + .by  $40 $C7 $C7 $46 $48 $44 $C7 $C7  $47 $53 $41 $0C $0A $7B $C7 $C7  $0B $C7 $C7 $0F $C7 $10 $15 $C7
    10 20D8 09 C7 C7 16 C7 03 + .by  $09 $C7 $C7 $16 $C7 $03 $C7 $C7  $02 $18 $1A $C7 $C7 $C7 $C7 $C7  $C7 $C7 $C7 $C7 $C7 $60 $0E $C7
    11 20F0 0D C7 C7 12 C7 05 + .by  $0D $C7 $C7 $12 $C7 $05 $19 $C7  $14 $17 $11 $C7 $C7 $C7 $C7 $C7  $C7 $C7 $C7 $06 $08 $04 $C7 $C7
    12 2108 07 13 01		.by  $07 $13 $01
Source: stubwin.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 210B			RTLIB
   113 210B				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D3
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $210B..$225C
   118
   119 				; ------------------------------------------------------------
   120
   121 225D			START
   122 225D BA				tsx
   123 225E 8E 19 2D			stx MAIN.@halt+1
   124
   125 = 0B94			VLEN	= VARDATASIZE-VARINITSIZE
   126 = 2D36			VADR	= DATAORIGIN+VARINITSIZE
   127
   128 					ift VADR > $BFFF
   129 					ert 'Invalid memory address range ',VADR
   130 					eli (VLEN>0) && (VLEN<=256)
   131 					ldx #256-VLEN
   132 					lda #$00
   133 					sta:rne VADR+VLEN-256,x+
   134 					eli VLEN>256
   135 					@fill #VADR #VLEN #$00
   135 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   135 2261 A9 36 85 88 A9 2D +  MWA #VADR @FILL.PTR1
   135 2269 A9 94 85 8C A9 0B +  MWA #VLEN @FILL.PTR3
   135 2271 A9 00 85 84		 MVA #$00 @FILL.PTR2
   135 2275 20 9E 21		 JSR @FILL
   136 					eif
   137
   138 				.ifdef :psptr
   139 					mwa #PROGRAMSTACK :psptr
   140 				.fi
   141
   142 					.ifdef MAIN.@DEFINES.ROMOFF
   143 					icl 'atari\romoff.asm'
   144 					.fi
   145
   146 2278 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   147 227A BD 40 03 9D 1E 2D + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   148
   149 2283 E8				inx						; X = 0
   150 2284 86 80			stx bp						; BP = 0
   151
   152 2286 8E 08 D2			stx audctl					; reset POKEY
   153 2289 8E 18 D2			stx audctl+$10
   154 228C A9 03			lda #3
   155 228E 8D 0F D2			sta skctl
   156 2291 8D 1F D2			sta skctl+$10
   157
   158 2294 CA				dex						; X = 255
   159
   160 2295				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: stubwin.a65]
Source: stubwin.a65
   161
   162 2295			.local	MAIN						; PROCEDURE
   163
   164 2295 4C 48 2C			jmp l_0052
   165
   166 				; ------------------------------------------------------------
   167
   168 2298			.local	SYSTEM						; UNIT
   169
   170 2298			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   171
   172 				; ------------------------------------------------------------
   173
   174 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   175 				; as Pointer
   176 2298 B5 94			lda :STACKORIGIN,x
   177 229A 85 88			sta A
   178 229C B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   179 229E 85 89			sta A+1
   180 22A0 CA				dex
   181 22A1			@main
   182
   183 				; -------------------  ASM Block 00000002  -------------------
   184
   185 22A1 A0 00			ldy #0
   186 22A3 B1 88 85 90			mva (:edx),y Result
   187
   188 22A7			@exit
   189
   190 				; ------------------------------------------------------------
   191
   192 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   193 				; as Pointer
   194
   195 22A7 E8				inx
   196 22A8 A5 90 95 94			mva RESULT :STACKORIGIN,x
   197
   198 					.ifdef @new
   199 					lda <@VarData
   200 					sta :ztmp
   201 					lda >@VarData
   202 					ldy #@VarDataSize-1
   203 					jmp @FreeMem
   204 					eif
   205
   206 				; ------------------------------------------------------------
   207
   208 = 0088			A	= :EDX
   209 = 0090			RESULT	= :STACKORIGIN-4
   210 22AC 60				rts						; ret
   211 				.endl
   212
   213 22AD			.local	DPEEK						; FUNCTION | ASSEMBLER | REGISTER
   214
   215 				; ------------------------------------------------------------
   216
   217 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   218 				; as Pointer
   219 22AD B5 94			lda :STACKORIGIN,x
   220 22AF 85 88			sta A
   221 22B1 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   222 22B3 85 89			sta A+1
   223 22B5 CA				dex
   224 22B6			@main
   225
   226 				; -------------------  ASM Block 00000003  -------------------
   227
   228 22B6 A0 00			ldy #0
   229 22B8 B1 88 85 90			mva (:edx),y Result
   230 22BC C8				iny
   231 22BD B1 88 85 91			mva (:edx),y Result+1
   232
   233 22C1			@exit
   234
   235 				; ------------------------------------------------------------
   236
   237 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   238 				; as Pointer
   239
   240 22C1 E8				inx
   241 22C2 A5 90 95 94			mva RESULT :STACKORIGIN,x
   242 22C6 A5 91 95 A4			mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   243
   244 					.ifdef @new
   245 					lda <@VarData
   246 					sta :ztmp
   247 					lda >@VarData
   248 					ldy #@VarDataSize-1
   249 					jmp @FreeMem
   250 					eif
   251
   252 				; ------------------------------------------------------------
   253
   254 = 0088			A	= :EDX
   255 = 0090			RESULT	= :STACKORIGIN-4
   256 22CA 60				rts						; ret
   257 				.endl
   258
   259 22CB			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   260
   261 				; ------------------------------------------------------------
   262
   263 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   264 				; as Pointer
   265 22CB B5 94			lda :STACKORIGIN,x
   266 22CD 85 88			sta A
   267 22CF B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   268 22D1 85 89			sta A+1
   269 22D3 CA				dex
   270 22D4 30 05			jmi @main
   271
   272 				; ------------------------------------------------------------
   273
   274 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   275 				; as Pointer
   276 22D6 B5 94			lda :STACKORIGIN,x
   277 22D8 85 8C			sta VALUE
   278 22DA CA				dex
   279 22DB			@main
   280
   281 				; -------------------  ASM Block 00000018  -------------------
   282
   283 22DB A0 00			ldy #0
   284 22DD A5 8C 91 88			mva value (:edx),y
   285
   286 				; ------------------------------------------------------------
   287
   288 = 0088			A	= :EDX
   289 = 008C			VALUE	= :ECX
   290 22E1			@exit
   291 					.ifdef @new
   292 					lda <@VarData
   293 					sta :ztmp
   294 					lda >@VarData
   295 					ldy #@VarDataSize-1
   296 					jmp @FreeMem
   297 					els
   298 22E1 60				rts						; ret
   299 					eif
   300 				.endl
   301
   302 22E2			.local	FILLCHAR_00A2					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   303
   304 					.MACRO m@INLINE
   305 				
   306 				; -------------------  ASM Block 00000021  -------------------
   307 				
   308 					jsr @fill
   309 				
   310 					.ENDM
   311
   312 				; ------------------------------------------------------------
   313
   314 = 0088			A	= :EDX
   315 = 008C			COUNT	= :ECX
   316 = 0084			VALUE	= :EAX
   317 22E2			@exit
   318 				.endl
   319
   320 22E2			.local	MOVE_00A3					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   321
   322 					.MACRO m@INLINE
   323 				
   324 				; -------------------  ASM Block 00000026  -------------------
   325 				
   326 					jsr @move
   327 				
   328 					.ENDM
   329
   330 				; ------------------------------------------------------------
   331
   332 = 0088			SOURCE	= :EDX
   333 = 008C			DEST	= :ECX
   334 = 0084			COUNT	= :EAX
   335 22E2			@exit
   336 				.endl
   337
   338 22E2			.local	SETLENGTH					; PROCEDURE | ASSEMBLER | REGISTER
   339
   340 				; -------------------  ASM Block 00000032  -------------------
   341
   342 22E2 A0 00			ldy #0
   343 22E4 A5 8C 91 88			mva Len (:edx),y
   344
   345 				; ------------------------------------------------------------
   346
   347 = 0088			S	= :EDX
   348 = 008C			LEN	= :ECX
   349 22E8			@exit
   350 					.ifdef @new
   351 					lda <@VarData
   352 					sta :ztmp
   353 					lda >@VarData
   354 					ldy #@VarDataSize-1
   355 					jmp @FreeMem
   356 					els
   357 22E8 60				rts						; ret
   358 					eif
   359 				.endl
   360
   361 				; ------------------------------------------------------------
   362
   363 = 0101			__PORTB_BANKS	= $0101
   364 = 0648			M_PI_2	= $0648
   365 = 0192			D_PI_2	= $0192
   366 = 0004			D_PI_180	= $04
   367 = 0000			MGTIA	= $00
   368 = 0080			MVBXE	= $80
   369 = 0000			VBXE_XDLADR	= $00
   370 = 00E0			VBXE_BCBTMP	= $E0
   371 = 0100			VBXE_BCBADR	= $0100
   372 = 1000			VBXE_MAPADR	= $1000
   373 = 1000			VBXE_CHBASE	= $1000
   374 = 5000			VBXE_OVRADR	= $5000
   375 = B000			VBXE_WINDOW	= $B000
   376 = 0000			IDLI	= $00
   377 = 0001			IVBL	= $01
   378 = 0002			ITIM1	= $02
   379 = 0003			ITIM2	= $03
   380 = 0004			ITIM4	= $04
   381 = 00FE			CH_DELCHR	= $FE
   382 = 009B			CH_ENTER	= $9B
   383 = 001B			CH_ESC	= $1B
   384 = 001C			CH_CURS_UP	= $1C
   385 = 001D			CH_CURS_DOWN	= $1D
   386 = 001E			CH_CURS_LEFT	= $1E
   387 = 001F			CH_CURS_RIGHT	= $1F
   388 = 007F			CH_TAB	= $7F
   389 = 009B			CH_EOL	= $9B
   390 = 007D			CH_CLR	= $7D
   391 = 00FD			CH_BELL	= $FD
   392 = 007E			CH_DEL	= $7E
   393 = 009C			CH_DELLINE	= $9C
   394 = 009D			CH_INSLINE	= $9D
   395 = 0000			PAL_PMCOLOR0	= $00
   396 = 0001			PAL_PMCOLOR1	= $01
   397 = 0002			PAL_PMCOLOR2	= $02
   398 = 0003			PAL_PMCOLOR3	= $03
   399 = 0004			PAL_COLOR0	= $04
   400 = 0005			PAL_COLOR1	= $05
   401 = 0006			PAL_COLOR2	= $06
   402 = 0007			PAL_COLOR3	= $07
   403 = 0008			PAL_COLBAK	= $08
   404 = 0000			COLOR_BLACK	= $00
   405 = 000E			COLOR_WHITE	= $0E
   406 = 0032			COLOR_RED	= $32
   407 = 0096			COLOR_CYAN	= $96
   408 = 0068			COLOR_VIOLET	= $68
   409 = 00C4			COLOR_GREEN	= $C4
   410 = 0074			COLOR_BLUE	= $74
   411 = 00EE			COLOR_YELLOW	= $EE
   412 = 0028			COLOR_ORANGE	= $28
   413 = 00E4			COLOR_BROWN	= $E4
   414 = 003C			COLOR_LIGHTRED	= $3C
   415 = 0004			COLOR_GRAY1	= $04
   416 = 0006			COLOR_GRAY2	= $06
   417 = 000A			COLOR_GRAY3	= $0A
   418 = 00CC			COLOR_LIGHTGREEN	= $CC
   419 = 007C			COLOR_LIGHTBLUE	= $7C
   420 = 0004			FMOPENREAD	= $04
   421 = 0008			FMOPENWRITE	= $08
   422 = 0009			FMOPENAPPEND	= $09
   423 = 000C			FMOPENREADWRITE	= $0C
   424 = 2D30			SCREENWIDTH	= DATAORIGIN+$0000
   425 = 2D32			SCREENHEIGHT	= DATAORIGIN+$0002
   426 = 2D34			DATESEPARATOR	= DATAORIGIN+$0004
   427 = D20A			RND	= $D20A
   428 = 02C0			adr.PALETTE	= $02C0
   429 22E9			.var PALETTE	= adr.PALETTE .word
   430 = D012			adr.HPALETTE	= $D012
   431 22E9			.var HPALETTE	= adr.HPALETTE .word
   432 = 2D35			FILEMODE	= DATAORIGIN+$0005
   433 = 2D36			GRAPHMODE	= DATAORIGIN+$0006
   434 = 2D37			IORESULT	= DATAORIGIN+$0007
   435 = 2D38			EOLN	= DATAORIGIN+$0008
   436 = 2D39			RNDSEED	= DATAORIGIN+$0009
   437
   438 = 22E9 C0 02		PALETTE
   438 = 22EB 12 D0		HPALETTE
   438 				.endl							; UNIT SYSTEM
   439
   440 				; ------------------------------------------------------------
   441
   442 22ED			.local	A8DEFINES					; UNIT
   443
   444 				; ------------------------------------------------------------
   445
   446 = 2000			adr.LIB_VERSION	= CODEORIGIN+$0000
   447 22ED			.var LIB_VERSION	= adr.LIB_VERSION .word
   448 = 000A			WRECSZ	= $0A
   449 = 0814			WBUFSZ	= $0814
   450 = 0001			WON	= $01
   451 = 0000			WOFF	= $00
   452 = 0080			WPABS	= $80
   453 = 00F1			WPTOP	= $F1
   454 = 00F2			WPBOT	= $F2
   455 = 00FB			WPLFT	= $FB
   456 = 00FC			WPRGT	= $FC
   457 = 00FF			WPCNT	= $FF
   458 = 0064			WENONE	= $64
   459 = 0065			WENOPN	= $65
   460 = 0066			WEUSED	= $66
   461 = 0000			GDISP	= $00
   462 = 0001			GEDIT	= $01
   463 = 0001			GHORZ	= $01
   464 = 0002			GVERT	= $02
   465 = 0001			GCON	= $01
   466 = 0002			GCOFF	= $02
   467 = 0000			GANY	= $00
   468 = 0001			GALNUM	= $01
   469 = 0002			GALPHA	= $02
   470 = 0003			GNUMER	= $03
   471 = 00FD			XESC	= $FD
   472 = 00FE			XTAB	= $FE
   473 = 00FF			XNONE	= $FF
   474 = 022F			DMACTL	= $022F
   475 = 0244			COLDST	= $0244
   476 = 026F			GPRIOR	= $026F
   477 = 02B6			INVFLG	= $02B6
   478 = 02BE			SHFLOK	= $02BE
   479 = 02DC			HELPFG	= $02DC
   480 = 02FC			KEYPCH	= $02FC
   481 = D01D			GRACTL	= $D01D
   482 = D01F			CONSOL	= $D01F
   483 = D407			PMBASE	= $D407
   484 = D000			HPOSP0	= $D000
   485 = D001			HPOSP1	= $D001
   486 = D002			HPOSP2	= $D002
   487 = 0052			ALMARG	= $52
   488 = 0058			RSCRN	= $58
   489 = 02C0			PCOLR0	= $02C0
   490 = 02C1			PCOLR1	= $02C1
   491 = 02C2			PCOLR2	= $02C2
   492 = 02C3			PCOLR3	= $02C3
   493 = 02C5			AFOREG	= $02C5
   494 = 02C6			ABACKG	= $02C6
   495 = 02C8			ABORDR	= $02C8
   496 = 02F0			ACURIN	= $02F0
   497 = 0000			CBLACK	= $00
   498 = 000E			CWHITE	= $0E
   499 = 00D2			CGREEN	= $D2
   500 = 0092			CBLUE	= $92
   501 = 0032			CRED	= $32
   502 = 00DE			CYELLOW	= $DE
   503 = 00C7			KNOMAP	= $C7
   504 = 00FF			KNONE	= $FF
   505 = 000C			KENTER	= $0C
   506 = 0034			KDEL	= $34
   507 = 0074			KDEL_S	= $74
   508 = 00B4			KDEL_C	= $B4
   509 = 00B7			KINS	= $B7
   510 = 0006			KPLUS	= $06
   511 = 0007			KASTER	= $07
   512 = 000E			KMINUS	= $0E
   513 = 000F			KEQUAL	= $0F
   514 = 001C			KESC	= $1C
   515 = 0021			KSPACE	= $21
   516 = 0027			KINV	= $27
   517 = 002C			KTAB	= $2C
   518 = 006C			KTAB_S	= $6C
   519 = 003C			KCAP	= $3C
   520 = 0086			KLEFT	= $86
   521 = 0087			KRIGHT	= $87
   522 = 008E			KUP	= $8E
   523 = 008F			KDOWN	= $8F
   524 = 0015			KEYB	= $15
   525 = 0012			KEYC	= $12
   526 = 003A			KEYD	= $3A
   527 = 0039			KEYH	= $39
   528 = 0023			KEYN	= $23
   529 = 000A			KEYP	= $0A
   530 = 0028			KEYR	= $28
   531 = 003E			KEYS	= $3E
   532 = 002D			KEYT	= $2D
   533 = 0095			KB_C	= $95
   534 = 00AA			KE_C	= $AA
   535 = 0016			KX	= $16
   536 = 0056			KX_S	= $56
   537 = 00EA			KE_CS	= $EA
   538 = 00FE			KS_CS	= $FE
   539 = 0007			KCNON	= $07
   540 = 0106			KCSTA	= $0106
   541 = 0105			KCSEL	= $0105
   542 = 0103			KCOPT	= $0103
   543 = 0011			KFHLP	= $11
   544 = 0003			KF1	= $03
   545 = 0004			KF2	= $04
   546 = 0013			KF3	= $13
   547 = 0014			KF4	= $14
   548 = 0003			CHBTRGT	= $03
   549 = 0005			CHTPRGT	= $05
   550 = 0011			CHTPLFT	= $11
   551 = 001A			CHBTLFT	= $1A
   552 = 0014			CHBALL	= $14
   553 = 001B			CHESC	= $1B
   554 = 001C			CHUP	= $1C
   555 = 001D			CHDN	= $1D
   556 = 001E			CHLFT	= $1E
   557 = 001F			CHRGT	= $1F
   558 = 0020			CHSPACE	= $20
   559 = 0060			CHDMND	= $60
   560 = 007D			CHCLS	= $7D
   561 = 007E			CHBACK	= $7E
   562 = 007F			CHTAB	= $7F
   563 = 009B			CHENT	= $9B
   564 = 009C			CHDELLN	= $9C
   565 = 00A0			CHINVSP	= $A0
   566 = 00FD			CHBUZ	= $FD
   567 = 009F			CHRGT_I	= $9F
   568 = 006F			CHO_L	= $6F
   569 = 00C9			CHI_I	= $C9
   570
   571 = 22ED 00 20		LIB_VERSION
   571 				.endl							; UNIT A8DEFINES
   572
   573 				; ------------------------------------------------------------
   574
   575 22EF			.local	A8DEFWIN					; UNIT
   576
   577 				; ------------------------------------------------------------
   578
   579 				.endl							; UNIT A8DEFWIN
   580
   581 				; ------------------------------------------------------------
   582
   583 22EF			.local	ATARI						; UNIT
   584
   585 				; ------------------------------------------------------------
   586
   587 = 0010			IRQENS	= $10
   588 = 0012			RTCLOK	= $12
   589 = 0012			RTCLOK1	= $12
   590 = 0013			RTCLOK2	= $13
   591 = 0014			RTCLOK3	= $14
   592 = 004D			ATRACT	= $4D
   593 = 0052			LMARGIN	= $52
   594 = 0053			RMARGIN	= $53
   595 = 0054			ROWCRS	= $54
   596 = 0055			COLCRS	= $55
   597 = 0057			DINDEX	= $57
   598 = 0058			SAVMSC	= $58
   599 = 0062			PALNTS	= $62
   600 = 006A			RAMTOP	= $6A
   601 = 0200			VDSLST	= $0200
   602 = 0230			SDLSTL	= $0230
   603 = 0290			TXTROW	= $0290
   604 = 0291			TXTCOL	= $0291
   605 = 0293			TINDEX	= $0293
   606 = 0294			TXTMSC	= $0294
   607 = 022F			SDMCTL	= $022F
   608 = 026F			GPRIOR	= $026F
   609 = 02F0			CRSINH	= $02F0
   610 = 02F3			CHACT	= $02F3
   611 = 02F4			CHBAS	= $02F4
   612 = 02FC			CH	= $02FC
   613 = 02C0			PCOLR0	= $02C0
   614 = 02C1			PCOLR1	= $02C1
   615 = 02C2			PCOLR2	= $02C2
   616 = 02C3			PCOLR3	= $02C3
   617 = 02C4			COLOR0	= $02C4
   618 = 02C5			COLOR1	= $02C5
   619 = 02C6			COLOR2	= $02C6
   620 = 02C7			COLOR3	= $02C7
   621 = 02C8			COLOR4	= $02C8
   622 = 02C8			COLBAKS	= $02C8
   623 = D000			HPOSP0	= $D000
   624 = D001			HPOSP1	= $D001
   625 = D002			HPOSP2	= $D002
   626 = D003			HPOSP3	= $D003
   627 = D004			HPOSM0	= $D004
   628 = D005			HPOSM1	= $D005
   629 = D006			HPOSM2	= $D006
   630 = D007			HPOSM3	= $D007
   631 = D008			SIZEP0	= $D008
   632 = D009			SIZEP1	= $D009
   633 = D00A			SIZEP2	= $D00A
   634 = D00B			SIZEP3	= $D00B
   635 = D00C			SIZEM	= $D00C
   636 = D00D			GRAFP0	= $D00D
   637 = D00E			GRAFP1	= $D00E
   638 = D00F			GRAFP2	= $D00F
   639 = D010			GRAFP3	= $D010
   640 = D011			GRAFM	= $D011
   641 = D004			P0PF	= $D004
   642 = D014			PAL	= $D014
   643 = D013			TRIG3	= $D013
   644 = D012			COLPM0	= $D012
   645 = D013			COLPM1	= $D013
   646 = D014			COLPM2	= $D014
   647 = D015			COLPM3	= $D015
   648 = D016			COLPF0	= $D016
   649 = D017			COLPF1	= $D017
   650 = D018			COLPF2	= $D018
   651 = D019			COLPF3	= $D019
   652 = D01A			COLBK	= $D01A
   653 = D01B			PRIOR	= $D01B
   654 = D01D			GRACTL	= $D01D
   655 = D01E			HITCLR	= $D01E
   656 = D01F			CONSOL	= $D01F
   657 = D200			AUDF1	= $D200
   658 = D201			AUDC1	= $D201
   659 = D202			AUDF2	= $D202
   660 = D203			AUDC2	= $D203
   661 = D204			AUDF3	= $D204
   662 = D205			AUDC3	= $D205
   663 = D206			AUDF4	= $D206
   664 = D207			AUDC4	= $D207
   665 = D208			AUDCTL	= $D208
   666 = D209			KBCODE	= $D209
   667 = D20E			IRQEN	= $D20E
   668 = D20F			SKSTAT	= $D20F
   669 = D300			PORTA	= $D300
   670 = D301			PORTB	= $D301
   671 = D302			PACTL	= $D302
   672 = D400			DMACTL	= $D400
   673 = D401			CHACTL	= $D401
   674 = D402			DLISTL	= $D402
   675 = D404			HSCROL	= $D404
   676 = D405			VSCROL	= $D405
   677 = D407			PMBASE	= $D407
   678 = D409			CHBASE	= $D409
   679 = D40A			WSYNC	= $D40A
   680 = D40B			VCOUNT	= $D40B
   681 = D40C			PENH	= $D40C
   682 = D40D			PENV	= $D40D
   683 = D40E			NMIEN	= $D40E
   684 = FFFA			NMIVEC	= $FFFA
   685 = FFFC			RESETVEC	= $FFFC
   686 = FFFE			IRQVEC	= $FFFE
   687
   688 				.endl							; UNIT ATARI
   689
   690 				; ------------------------------------------------------------
   691
   692 22EF			.local	CRT						; UNIT
   693
   694 22EF			.local	CLRSCR						; PROCEDURE
   695
   696 				; optimize FAIL ('@print', crt_atari.inc), line = 34
   697
   698 					@print #$7D
   698 				 LDY# $7D\ JSR @PRINT
   698 22EF A0 7D		 LDY# $7D
   698 22F1 20 54 22		 JSR @PRINT
   699 22F4			@exit
   700 					.ifdef @new
   701 					lda <@VarData
   702 					sta :ztmp
   703 					lda >@VarData
   704 					ldy #@VarDataSize-1
   705 					jmp @FreeMem
   706 					els
   707 22F4 60				rts						; ret
   708 					eif
   709 				.endl
   710
   711 				; ------------------------------------------------------------
   712
   713 = 2D3B			TEXTATTR	= DATAORIGIN+$000B
   714 = D01F			CONSOL	= $D01F
   715 = 0000			CN_START_SELECT_OPTION	= $00
   716 = 0001			CN_SELECT_OPTION	= $01
   717 = 0002			CN_START_OPTION	= $02
   718 = 0003			CN_OPTION	= $03
   719 = 0004			CN_START_SELECT	= $04
   720 = 0005			CN_SELECT	= $05
   721 = 0006			CN_START	= $06
   722 = 0007			CN_NONE	= $07
   723 = 0000			BW40	= $00
   724 = 0001			CO40	= $01
   725 = 0002			BW80	= $02
   726 = 0003			CO80	= $03
   727 = 0007			MONO	= $07
   728 = 0001			C40	= $01
   729 = 0003			C80	= $03
   730 = 0000			BLACK	= $00
   731 = 000F			WHITE	= $0F
   732 = 0026			RED	= $26
   733 = 00AC			CYAN	= $AC
   734 = 0048			PURPLE	= $48
   735 = 00B6			GREEN	= $B6
   736 = 0086			BLUE	= $86
   737 = 00DC			YELLOW	= $DC
   738 = 0018			ORANGE	= $18
   739 = 00F4			BROWN	= $F4
   740 = 002A			LIGHT_RED	= $2A
   741 = 0004			DARK_GREY	= $04
   742 = 0008			GREY	= $08
   743 = 00BC			LIGHT_GREEN	= $BC
   744 = 009A			LIGHT_BLUE	= $9A
   745 = 000C			LIGHT_GREY	= $0C
   746 = 0080			BLINK	= $80
   747
   748 				.endl							; UNIT CRT
   749
   750 				; ------------------------------------------------------------
   751
   752 22F5			.local	DOS						; UNIT
   753
   754 				; ------------------------------------------------------------
   755
   756 = D014			PALNTSC	= $D014
   757
   758 				.endl							; UNIT DOS
   759
   760 				; ------------------------------------------------------------
   761
   762 22F5			.local	STRUTILS					; UNIT
   763
   764 				; ------------------------------------------------------------
   765
   766 				.endl							; UNIT STRUTILS
   767
   768 				; ------------------------------------------------------------
   769
   770 22F5			.local	SYSUTILS					; UNIT
   771
   772 				; ------------------------------------------------------------
   773
   774 = 0001			FAREADONLY	= $01
   775 = 0002			FAHIDDEN	= $02
   776 = 0004			FASYSFILE	= $04
   777 = 0008			FAVOLUMEID	= $08
   778 = 0010			FADIRECTORY	= $10
   779 = 0020			FAARCHIVE	= $20
   780 = 003F			FAANYFILE	= $3F
   781
   782 				.endl							; UNIT SYSUTILS
   783
   784 				; ------------------------------------------------------------
   785
   786 22F5			.local	A8LIBSTR					; UNIT
   787
   788 22F5			.local	STRINV						; PROCEDURE
   789
   790 				; optimize OK (A8LIBSTR), line = 45
   791
   792 22F5 A9 00			lda #$00
   793 22F7 8D 3F 2D			sta BL
   794 22FA AC 3E 2D			ldy BS
   795 22FD 88				dey
   796 22FE 8C 02 23			sty @FORTMP_0125_0
   797
   798 2301			l_0128
   799 				; --- ForToDoCondition
   800 2301 A9 00			lda @FORTMP_0125_0:#$00
   801 2303 CD 3F 2D			cmp BL
   802 2306 90 1F			jcc l_0136
   803
   804 				; optimize OK (A8LIBSTR), line = 48
   805
   806 2308 AC 3C 2D 84 82 AC + 	mwy PS :bp2
   807 2312 A0 00			ldy #$00
   808 2314 B1 82			lda (:bp2),y
   809 2316 49 80			eor #$80
   810 2318 91 82			sta (:bp2),y
   811
   812 				; optimize FAIL (0, A8LIBSTR), line = 49
   813
   814 231A EE 3C 2D			inc PS
   815 231D D0 03			sne
   816 231F EE 3D 2D			inc PS+1
   817
   818 				; --- ForToDoEpilog
   819 2322 EE 3F 2D			inc BL
   820 2325 D0 DA			jne l_0128
   821 2327			l_0136
   822
   823 				; ------------------------------------------------------------
   824
   825 = 2D3C			PS	= DATAORIGIN+$000C
   826 = 2D3E			BS	= DATAORIGIN+$000E
   827 = 2D3F			BL	= DATAORIGIN+$000F
   828
   829 = 2D3C			@VarData	= PS
   830 = 0004			@VarDataSize	= 4
   831
   832 2327			@exit
   833 					.ifdef @new
   834 					lda <@VarData
   835 					sta :ztmp
   836 					lda >@VarData
   837 					ldy #@VarDataSize-1
   838 					jmp @FreeMem
   839 					els
   840 2327 60				rts						; ret
   841 					eif
   842 				.endl
   843
   844 2328			.local	STRAI						; PROCEDURE
   845
   846 				; optimize OK (A8LIBSTR), line = 67
   847
   848 2328 A9 00			lda #$00
   849 232A 8D 44 2D			sta BL
   850 232D AC 43 2D			ldy BS
   851 2330 88				dey
   852 2331 8C 35 23			sty @FORTMP_0159_0
   853
   854 2334			l_015C
   855 				; --- ForToDoCondition
   856 2334 A9 00			lda @FORTMP_0159_0:#$00
   857 2336 CD 44 2D			cmp BL
   858 2339 B0 03 4C 0B 24		jcc l_016A
   859
   860 				; optimize OK (A8LIBSTR), line = 69
   861
   862 233E AC 42 2D 84 81		mvy PS+1 :bp+1
   863 2343 AC 41 2D			ldy PS
   864 2346 AC 42 2D 84 81		mvy PS+1 :bp+1
   865 234B AC 41 2D			ldy PS
   866 234E B1 80			lda (:bp),y
   867 2350 C9 20			cmp #$20
   868 2352 B0 16			jcs l_0188
   869
   870 				; optimize OK (A8LIBSTR), line = 71
   871
   872 2354 AC 41 2D 84 82 AC + 	mwy PS :bp2
   873 235E A0 00			ldy #$00
   874 2360 B1 82			lda (:bp2),y
   875 2362 18 69 40			add #$40
   876 2365 91 82			sta (:bp2),y
   877 2367 4C FB 23			jmp l_019C
   878 236A			l_0188
   879
   880 				; optimize OK (A8LIBSTR), line = 73
   881
   882 236A AC 42 2D 84 81		mvy PS+1 :bp+1
   883 236F AC 41 2D			ldy PS
   884 2372 B1 80			lda (:bp),y
   885 2374 C9 20			cmp #$20
   886 2376 90 24			jcc l_01BA
   887 2378 AC 42 2D 84 81		mvy PS+1 :bp+1
   888 237D AC 41 2D			ldy PS
   889 2380 B1 80			lda (:bp),y
   890 2382 C9 60			cmp #$60
   891 2384 B0 16			jcs l_01BA
   892
   893 				; optimize OK (A8LIBSTR), line = 75
   894
   895 2386 AC 41 2D 84 82 AC + 	mwy PS :bp2
   896 2390 A0 00			ldy #$00
   897 2392 B1 82			lda (:bp2),y
   898 2394 38 E9 20			sub #$20
   899 2397 91 82			sta (:bp2),y
   900 2399 4C FB 23			jmp l_01CE
   901 239C			l_01BA
   902
   903 				; optimize OK (A8LIBSTR), line = 77
   904
   905 239C AC 42 2D 84 81		mvy PS+1 :bp+1
   906 23A1 AC 41 2D			ldy PS
   907 23A4 B1 80			lda (:bp),y
   908 23A6 10 24			jpl l_01EC
   909 23A8 AC 42 2D 84 81		mvy PS+1 :bp+1
   910 23AD AC 41 2D			ldy PS
   911 23B0 B1 80			lda (:bp),y
   912 23B2 C9 A0			cmp #$A0
   913 23B4 B0 16			jcs l_01EC
   914
   915 				; optimize OK (A8LIBSTR), line = 79
   916
   917 23B6 AC 41 2D 84 82 AC + 	mwy PS :bp2
   918 23C0 A0 00			ldy #$00
   919 23C2 B1 82			lda (:bp2),y
   920 23C4 18 69 40			add #$40
   921 23C7 91 82			sta (:bp2),y
   922 23C9 4C FB 23			jmp l_0200
   923 23CC			l_01EC
   924
   925 				; optimize OK (A8LIBSTR), line = 81
   926
   927 23CC AC 42 2D 84 81		mvy PS+1 :bp+1
   928 23D1 AC 41 2D			ldy PS
   929 23D4 B1 80			lda (:bp),y
   930 23D6 C9 A0			cmp #$A0
   931 23D8 90 21			jcc l_021E
   932 23DA AC 42 2D 84 81		mvy PS+1 :bp+1
   933 23DF AC 41 2D			ldy PS
   934 23E2 B1 80			lda (:bp),y
   935 23E4 C9 E0			cmp #$E0
   936 23E6 B0 13			jcs l_021E
   937
   938 				; optimize OK (A8LIBSTR), line = 83
   939
   940 23E8 AC 41 2D 84 82 AC + 	mwy PS :bp2
   941 23F2 A0 00			ldy #$00
   942 23F4 B1 82			lda (:bp2),y
   943 23F6 38 E9 20			sub #$20
   944 23F9 91 82			sta (:bp2),y
   945 23FB			l_021E
   946 23FB			l_0200
   947 23FB			l_01CE
   948 23FB			l_019C
   949
   950 				; optimize FAIL (0, A8LIBSTR), line = 87
   951
   952 23FB EE 41 2D			inc PS
   953 23FE D0 03			sne
   954 2400 EE 42 2D			inc PS+1
   955
   956 				; --- ForToDoEpilog
   957 2403 EE 44 2D			inc BL
   958 2406 F0 03 4C 34 23		jne l_015C
   959 240B			l_016A
   960
   961 				; ------------------------------------------------------------
   962
   963 = 2D41			PS	= DATAORIGIN+$0011
   964 = 2D43			BS	= DATAORIGIN+$0013
   965 = 2D44			BL	= DATAORIGIN+$0014
   966
   967 = 2D41			@VarData	= PS
   968 = 0004			@VarDataSize	= 4
   969
   970 240B			@exit
   971 					.ifdef @new
   972 					lda <@VarData
   973 					sta :ztmp
   974 					lda >@VarData
   975 					ldy #@VarDataSize-1
   976 					jmp @FreeMem
   977 					els
   978 240B 60				rts						; ret
   979 					eif
   980 				.endl
   981
   982 				; ------------------------------------------------------------
   983
   984 				.endl							; UNIT A8LIBSTR
   985
   986 				; ------------------------------------------------------------
   987
   988 240C			.local	A8LIBWIN					; UNIT
   989
   990 240C			.local	WINIT						; PROCEDURE
   991
   992 				; optimize OK (A8LIBWIN), line = 56
   993
   994 240C A9 01			lda #$01
   995 240E 8D F0 02			sta $02F0
   996
   997 				; optimize OK (A8LIBWIN), line = 57
   998
   999 2411 A9 00			lda #$00
  1000 2413 85 52			sta $0052
  1001
  1002 				; optimize FAIL ('CRT.CLRSCR', A8LIBWIN), line = 58
  1003
  1004 2415 20 EF 22			jsr CRT.CLRSCR
  1005
  1006 				; optimize OK (A8LIBWIN), line = 61
  1007
  1008 2418 AD 92 2B			lda BAWM
  1009 241B 85 88			sta SYSTEM.FILLCHAR_00A2.A
  1010 241D AD 93 2B			lda BAWM+1
  1011 2420 85 89			sta SYSTEM.FILLCHAR_00A2.A+1
  1012 2422 A9 14			lda #$14
  1013 2424 85 8C			sta SYSTEM.FILLCHAR_00A2.COUNT
  1014 2426 A9 08			lda #$08
  1015 2428 85 8D			sta SYSTEM.FILLCHAR_00A2.COUNT+1
  1016 242A A9 00			lda #$00
  1017 242C 85 84			sta SYSTEM.FILLCHAR_00A2.VALUE
  1018 242E				.local +MAIN.SYSTEM.FILLCHAR_00A2
  1019 242E				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_00A2.M@INLINE [Source: stubwin.a65]
     4 242E 20 9E 21			jsr @fill
Source: stubwin.a65
  1020 					.endl
  1021
  1022 				; optimize OK (A8LIBWIN), line = 64
  1023
  1024 2431 AD 92 2B			lda BAWM
  1025 2434 8D CA 35			sta CPWM
  1026 2437 AD 93 2B			lda BAWM+1
  1027 243A 8D CB 35			sta CPWM+1
  1028
  1029 				; optimize OK (A8LIBWIN), line = 67
  1030
  1031 243D A9 00			lda #$00
  1032 243F 8D CC 35			sta BL
  1033
  1034 2442			l_0257
  1035 				; --- ForToDoCondition
  1036 2442 AC CC 35			ldy BL
  1037 2445 C0 0B			cpy #$0B
  1038 2447 B0 32			jcs l_0265
  1039
  1040 				; optimize OK (A8LIBWIN), line = 70
  1041
  1042 2449 A9 00			lda #$00
  1043 244B 99 46 2D			sta adr.BAW.BU,y
  1044
  1045 				; optimize OK (A8LIBWIN), line = 71
  1046
  1047 244E 99 51 2D			sta adr.BAW.BX,y
  1048
  1049 				; optimize OK (A8LIBWIN), line = 72
  1050
  1051 2451 99 5C 2D			sta adr.BAW.BY,y
  1052
  1053 				; optimize OK (A8LIBWIN), line = 73
  1054
  1055 2454 99 67 2D			sta adr.BAW.BW,y
  1056
  1057 				; optimize OK (A8LIBWIN), line = 74
  1058
  1059 2457 99 72 2D			sta adr.BAW.BH,y
  1060
  1061 				; optimize OK (A8LIBWIN), line = 75
  1062
  1063 245A 99 7D 2D			sta adr.BAW.BI,y
  1064
  1065 				; optimize OK (A8LIBWIN), line = 76
  1066
  1067 245D AD CC 35			lda BL
  1068 2460 0A				asl @
  1069 2461 A8				tay
  1070 2462 AD 92 2B			lda BAWM
  1071 2465 99 88 2D			sta adr.BAW.CM,y
  1072 2468 AD 93 2B			lda BAWM+1
  1073 246B 99 89 2D			sta adr.BAW.CM+1,y
  1074
  1075 				; optimize OK (A8LIBWIN), line = 77
  1076
  1077 246E A9 00			lda #$00
  1078 2470 99 9E 2D			sta adr.BAW.CZ,y
  1079 2473 99 9F 2D			sta adr.BAW.CZ+1,y
  1080
  1081 				; --- ForToDoEpilog
  1082 2476 EE CC 35			inc BL
  1083 2479 D0 C7			jne l_0257
  1084 247B			l_0265
  1085
  1086 				; optimize OK (A8LIBWIN), line = 81
  1087
  1088 247B A9 00			lda #$00
  1089 247D 8D B4 2D			sta VCUR.VX
  1090
  1091 				; optimize OK (A8LIBWIN), line = 82
  1092
  1093 2480 8D B5 2D			sta VCUR.VY
  1094
  1095 				; ------------------------------------------------------------
  1096
  1097 = 35CC			BL	= DATAORIGIN+$089C
  1098
  1099 = 35CC			@VarData	= BL
  1100 = 0001			@VarDataSize	= 1
  1101
  1102 2483			@exit
  1103 					.ifdef @new
  1104 					lda <@VarData
  1105 					sta :ztmp
  1106 					lda >@VarData
  1107 					ldy #@VarDataSize-1
  1108 					jmp @FreeMem
  1109 					els
  1110 2483 60				rts						; ret
  1111 					eif
  1112 				.endl
  1113
  1114 2484			.local	WOPEN						; FUNCTION
  1115
  1116 				; optimize OK (A8LIBWIN), line = 118
  1117
  1118 2484 A9 64			lda #$64
  1119 2486 8D D2 35			sta RESULT
  1120
  1121 				; optimize OK (A8LIBWIN), line = 121
  1122
  1123 2489 A9 00			lda #$00
  1124 248B 8D D3 35			sta BL
  1125
  1126 248E			l_02BB
  1127 				; --- ForToDoCondition
  1128 248E AC D3 35			ldy BL
  1129 2491 C0 0B			cpy #$0B
  1130 2493 90 03 4C 56 26		jcs l_02C9
  1131
  1132 				; optimize OK (A8LIBWIN), line = 124
  1133
  1134 2498 B9 46 2D			lda adr.BAW.BU,y
  1135 249B F0 03 4C 4E 26		jne l_02DE
  1136
  1137 				; optimize OK (A8LIBWIN), line = 127
  1138
  1139 24A0 A9 01			lda #$01
  1140 24A2 99 46 2D			sta adr.BAW.BU,y
  1141
  1142 				; optimize OK (A8LIBWIN), line = 130
  1143
  1144 24A5 AD D3 35			lda BL
  1145 24A8 0A				asl @
  1146 24A9 A8				tay
  1147 24AA AD CA 35			lda CPWM
  1148 24AD 99 88 2D			sta adr.BAW.CM,y
  1149 24B0 AD CB 35			lda CPWM+1
  1150 24B3 99 89 2D			sta adr.BAW.CM+1,y
  1151
  1152 				; optimize OK (A8LIBWIN), line = 131
  1153
  1154 24B6 AD D3 35			lda BL
  1155 24B9 85 9D			sta :STACKORIGIN+9
  1156 24BB A9 00			lda #$00
  1157 24BD 06 9D			asl :STACKORIGIN+9
  1158 24BF 2A				rol @
  1159 24C0 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1160 24C2 AD D0 35			lda H
  1161 24C5 85 8C			sta :ecx
  1162 24C7 AD CF 35			lda W
  1163 24CA 85 84			sta :eax
  1164 					.ifdef fmulinit
  1165 					fmulu_8
  1166 					els
  1167 24CC 20 E6 21			imulCL
  1168 					eif
  1169 24CF A5 84			lda :eax
  1170 24D1 85 9E			sta :STACKORIGIN+10
  1171 24D3 A5 85			lda :eax+1
  1172 24D5 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  1173 24D7 A5 9D			lda :STACKORIGIN+9
  1174 24D9 18 69 00			add #$00
  1175 24DC A8				tay
  1176 24DD A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1177 24DF 69 00			adc #$00
  1178 24E1 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1179 24E3 A5 9E			lda :STACKORIGIN+10
  1180 24E5 99 9E 2D			sta adr.BAW.CZ,y
  1181 24E8 A5 AE			lda :STACKORIGIN+STACKWIDTH+10
  1182 24EA 99 9F 2D			sta adr.BAW.CZ+1,y
  1183
  1184 				; optimize OK (A8LIBWIN), line = 134
  1185
  1186 24ED AC D3 35			ldy BL
  1187 24F0 AD CD 35			lda X
  1188 24F3 99 51 2D			sta adr.BAW.BX,y
  1189
  1190 				; optimize OK (A8LIBWIN), line = 135
  1191
  1192 24F6 AD CE 35			lda Y
  1193 24F9 99 5C 2D			sta adr.BAW.BY,y
  1194
  1195 				; optimize OK (A8LIBWIN), line = 136
  1196
  1197 24FC AD CF 35			lda W
  1198 24FF 99 67 2D			sta adr.BAW.BW,y
  1199
  1200 				; optimize OK (A8LIBWIN), line = 137
  1201
  1202 2502 AD D0 35			lda H
  1203 2505 99 72 2D			sta adr.BAW.BH,y
  1204
  1205 				; optimize OK (A8LIBWIN), line = 138
  1206
  1207 2508 AD D1 35			lda BT
  1208 250B 99 7D 2D			sta adr.BAW.BI,y
  1209
  1210 				; optimize OK (A8LIBWIN), line = 141
  1211
  1212 250E A5 58			lda $0058
  1213 2510 85 9D			sta :STACKORIGIN+9
  1214 2512 A5 59			lda $0058+1
  1215 2514 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1216 2516 AD CE 35			lda Y
  1217 2519 20 2F 22			jsr @mul40
  1218 251C 18 65 9D			add :STACKORIGIN+9
  1219 251F A8				tay
  1220 2520 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1221 2522 65 85			adc :eax+1
  1222 2524 8D 00 36			sta PS+1
  1223 2527 98				tya
  1224 2528 18 6D CD 35			add X
  1225 252C 8D FF 35			sta PS
  1226 252F 90 03			scc
  1227 2531 EE 00 36			inc PS+1
  1228
  1229 				; optimize OK (A8LIBWIN), line = 144
  1230
  1231 2534 A9 00			lda #$00
  1232 2536 8D D4 35			sta BD
  1233 2539 AC D0 35			ldy H
  1234 253C 88				dey
  1235 253D 8C 41 25			sty @FORTMP_034B_0
  1236
  1237 2540			l_034E
  1238 				; --- ForToDoCondition
  1239 2540 A9 00			lda @FORTMP_034B_0:#$00
  1240 2542 CD D4 35			cmp BD
  1241 2545 B0 03 4C 45 26		jcc l_035C
  1242
  1243 				; optimize OK (A8LIBWIN), line = 149
  1244
  1245 254A AD D4 35			lda BD
  1246 254D F0 0B			jeq l_0380x
  1247 254F AD D0 35			lda H
  1248 2552 38 E9 01			sub #$01
  1249 2555 CD D4 35			cmp BD
  1250 2558 D0 3D			jne l_0380
  1251 255A			l_0380x
  1252
  1253 				; optimize OK (A8LIBWIN), line = 152
  1254
  1255 255A A9 D6			lda <adr.CL
  1256 255C 85 88			sta SYSTEM.FILLCHAR_00A2.A
  1257 255E A9 35			lda >adr.CL
  1258 2560 85 89			sta SYSTEM.FILLCHAR_00A2.A+1
  1259 2562 AD CF 35			lda W
  1260 2565 85 8C			sta SYSTEM.FILLCHAR_00A2.COUNT
  1261 2567 A9 00			lda #$00
  1262 2569 85 8D			sta SYSTEM.FILLCHAR_00A2.COUNT+1
  1263 256B A9 52			lda #$52
  1264 256D 85 84			sta SYSTEM.FILLCHAR_00A2.VALUE
  1265 256F				.local +MAIN.SYSTEM.FILLCHAR_00A2
  1266 256F				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_00A2.M@INLINE [Source: stubwin.a65]
     4 256F 20 9E 21			jsr @fill
Source: stubwin.a65
  1267 					.endl
  1268
  1269 				; optimize OK (A8LIBWIN), line = 155
  1270
  1271 2572 AD D4 35			lda BD
  1272 2575 D0 10			jne l_0399
  1273
  1274 				; optimize OK (A8LIBWIN), line = 157
  1275
  1276 2577 A9 51			lda #$51
  1277 2579 8D D6 35			sta adr.CL
  1278
  1279 				; optimize OK (A8LIBWIN), line = 158
  1280
  1281 257C AC CF 35			ldy W
  1282 257F A9 45			lda #$45
  1283 2581 99 D5 35			sta adr.CL-$01,y
  1284 2584 4C 94 25			jmp l_03B3
  1285 2587			l_0399
  1286
  1287 				; optimize OK (A8LIBWIN), line = 162
  1288
  1289 2587 A9 5A			lda #$5A
  1290 2589 8D D6 35			sta adr.CL
  1291
  1292 				; optimize OK (A8LIBWIN), line = 163
  1293
  1294 258C AC CF 35			ldy W
  1295 258F A9 43			lda #$43
  1296 2591 99 D5 35			sta adr.CL-$01,y
  1297 2594			l_03B3
  1298 2594 4C B8 25			jmp l_03CC
  1299 2597			l_0380
  1300
  1301 				; optimize OK (A8LIBWIN), line = 169
  1302
  1303 2597 A9 D6			lda <adr.CL
  1304 2599 85 88			sta SYSTEM.FILLCHAR_00A2.A
  1305 259B A9 35			lda >adr.CL
  1306 259D 85 89			sta SYSTEM.FILLCHAR_00A2.A+1
  1307 259F AD CF 35			lda W
  1308 25A2 85 8C			sta SYSTEM.FILLCHAR_00A2.COUNT
  1309 25A4 A9 00			lda #$00
  1310 25A6 85 8D			sta SYSTEM.FILLCHAR_00A2.COUNT+1
  1311 25A8 85 84			sta SYSTEM.FILLCHAR_00A2.VALUE
  1312 25AA				.local +MAIN.SYSTEM.FILLCHAR_00A2
  1313 25AA				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_00A2.M@INLINE [Source: stubwin.a65]
     4 25AA 20 9E 21			jsr @fill
Source: stubwin.a65
  1314 					.endl
  1315
  1316 				; optimize OK (A8LIBWIN), line = 170
  1317
  1318 25AD A9 7C			lda #$7C
  1319 25AF 8D D6 35			sta adr.CL
  1320
  1321 				; optimize OK (A8LIBWIN), line = 171
  1322
  1323 25B2 AC CF 35			ldy W
  1324 25B5 99 D5 35			sta adr.CL-$01,y
  1325 25B8			l_03CC
  1326
  1327 				; optimize OK (A8LIBWIN), line = 175
  1328
  1329 25B8 AD D1 35			lda BT
  1330 25BB C9 01			cmp #$01
  1331 25BD D0 23			jne l_03F4
  1332
  1333 				; optimize OK (A8LIBWIN), line = 177
  1334
  1335 25BF A9 00			lda #$00
  1336 25C1 8D D5 35			sta BC
  1337 25C4 AC CF 35			ldy W
  1338 25C7 88				dey
  1339 25C8 8C CC 25			sty @FORTMP_0401_0
  1340
  1341 25CB			l_0404
  1342 				; --- ForToDoCondition
  1343 25CB A9 00			lda @FORTMP_0401_0:#$00
  1344 25CD CD D5 35			cmp BC
  1345 25D0 90 10			jcc l_0412
  1346
  1347 				; optimize OK (A8LIBWIN), line = 179
  1348
  1349 25D2 AC D5 35			ldy BC
  1350 25D5 B9 D6 35			lda adr.CL,y
  1351 25D8 49 80			eor #$80
  1352 25DA 99 D6 35			sta adr.CL,y
  1353
  1354 				; --- ForToDoEpilog
  1355 25DD EE D5 35			inc BC
  1356 25E0 D0 E9			jne l_0404
  1357 25E2			l_0412
  1358 25E2			l_03F4
  1359
  1360 				; optimize OK (A8LIBWIN), line = 184
  1361
  1362 25E2 AD FF 35			lda PS
  1363 25E5 85 88			sta SYSTEM.MOVE_00A3.SOURCE
  1364 25E7 AD 00 36			lda PS+1
  1365 25EA 85 89			sta SYSTEM.MOVE_00A3.SOURCE+1
  1366 25EC AD CA 35			lda CPWM
  1367 25EF 85 8C			sta SYSTEM.MOVE_00A3.DEST
  1368 25F1 AD CB 35			lda CPWM+1
  1369 25F4 85 8D			sta SYSTEM.MOVE_00A3.DEST+1
  1370 25F6 AD CF 35			lda W
  1371 25F9 85 84			sta SYSTEM.MOVE_00A3.COUNT
  1372 25FB A9 00			lda #$00
  1373 25FD 85 85			sta SYSTEM.MOVE_00A3.COUNT+1
  1374 25FF				.local +MAIN.SYSTEM.MOVE_00A3
  1375 25FF				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00A3.M@INLINE [Source: stubwin.a65]
     4 25FF 20 49 21			jsr @move
Source: stubwin.a65
  1376 					.endl
  1377
  1378 				; optimize OK (A8LIBWIN), line = 186
  1379
  1380 2602 AD CA 35			lda CPWM
  1381 2605 18 6D CF 35			add W
  1382 2609 8D CA 35			sta CPWM
  1383 260C 90 03			scc
  1384 260E EE CB 35			inc CPWM+1
  1385
  1386 				; optimize OK (A8LIBWIN), line = 188
  1387
  1388 2611 A9 D6			lda <adr.CL
  1389 2613 85 88			sta SYSTEM.MOVE_00A3.SOURCE
  1390 2615 A9 35			lda >adr.CL
  1391 2617 85 89			sta SYSTEM.MOVE_00A3.SOURCE+1
  1392 2619 AD FF 35			lda PS
  1393 261C 85 8C			sta SYSTEM.MOVE_00A3.DEST
  1394 261E AD 00 36			lda PS+1
  1395 2621 85 8D			sta SYSTEM.MOVE_00A3.DEST+1
  1396 2623 AD CF 35			lda W
  1397 2626 85 84			sta SYSTEM.MOVE_00A3.COUNT
  1398 2628 A9 00			lda #$00
  1399 262A 85 85			sta SYSTEM.MOVE_00A3.COUNT+1
  1400 262C				.local +MAIN.SYSTEM.MOVE_00A3
  1401 262C				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00A3.M@INLINE [Source: stubwin.a65]
     4 262C 20 49 21			jsr @move
Source: stubwin.a65
  1402 					.endl
  1403
  1404 				; optimize OK (A8LIBWIN), line = 190
  1405
  1406 262F AD FF 35			lda PS
  1407 2632 18 69 28			add #$28
  1408 2635 8D FF 35			sta PS
  1409 2638 90 03			scc
  1410 263A EE 00 36			inc PS+1
  1411
  1412 				; --- ForToDoEpilog
  1413 263D EE D4 35			inc BD
  1414 2640 F0 03 4C 40 25		jne l_034E
  1415 2645			l_035C
  1416
  1417 				; optimize OK (A8LIBWIN), line = 194
  1418
  1419 2645 AD D3 35			lda BL
  1420 2648 8D D2 35			sta RESULT
  1421 264B 4C 56 26			jmp b_02BB					; break
  1422 264E			l_02DE
  1423
  1424 				; --- ForToDoEpilog
  1425 264E EE D3 35			inc BL
  1426 2651 F0 03 4C 8E 24		jne l_02BB
  1427 2656			l_02C9
  1428 2656			b_02BB
  1429 2656			@exit
  1430
  1431 				; ------------------------------------------------------------
  1432
  1433 = 35CD			X	= DATAORIGIN+$089D
  1434 = 35CE			Y	= DATAORIGIN+$089E
  1435 = 35CF			W	= DATAORIGIN+$089F
  1436 = 35D0			H	= DATAORIGIN+$08A0
  1437 = 35D1			BT	= DATAORIGIN+$08A1
  1438 = 35D2			RESULT	= DATAORIGIN+$08A2
  1439 = 35D3			BL	= DATAORIGIN+$08A3
  1440 = 35D4			BD	= DATAORIGIN+$08A4
  1441 = 35D5			BC	= DATAORIGIN+$08A5
  1442 = 35D6			adr.CL	= [DATAORIGIN+$08A6] .array [41]
  1443 2656			.var CL	= adr.CL .word
  1444 = 35FF			PS	= DATAORIGIN+$08CF
  1445
  1446 = 35CD			@VarData	= X
  1447 = 0033			@VarDataSize	= 51
  1448
  1449 2656 60				rts						; ret
  1450 = 2657 D6 35		CL
  1450 				.endl
  1451
  1452 2659			.local	WCLOSE						; FUNCTION
  1453 2659 8D 03 36			sta BN
  1454
  1455 				; optimize OK (A8LIBWIN), line = 216
  1456
  1457 265C A9 65			lda #$65
  1458 265E 8D 04 36			sta RESULT
  1459
  1460 				; optimize OK (A8LIBWIN), line = 219
  1461
  1462 2661 AC 03 36			ldy BN
  1463 2664 B9 46 2D			lda adr.BAW.BU,y
  1464 2667 C9 01			cmp #$01
  1465 2669 F0 03 4C 76 27		jne l_046B
  1466
  1467 				; optimize OK (A8LIBWIN), line = 222
  1468
  1469 266E A5 58			lda $0058
  1470 2670 85 9D			sta :STACKORIGIN+9
  1471 2672 A5 59			lda $0058+1
  1472 2674 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1473 2676 B9 5C 2D			lda adr.BAW.BY,y
  1474 2679 20 2F 22			jsr @mul40
  1475 267C 18 65 9D			add :STACKORIGIN+9
  1476 267F 85 9D			sta :STACKORIGIN+9
  1477 2681 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1478 2683 65 85			adc :eax+1
  1479 2685 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1480 2687 AC 03 36			ldy BN
  1481 268A A5 9D			lda :STACKORIGIN+9
  1482 268C 18 79 51 2D			add adr.BAW.BX,y
  1483 2690 8D 06 36			sta PS
  1484 2693 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1485 2695 69 00			adc #$00
  1486 2697 8D 07 36			sta PS+1
  1487
  1488 				; optimize OK (A8LIBWIN), line = 225
  1489
  1490 269A AD 03 36			lda BN
  1491 269D 0A				asl @
  1492 269E A8				tay
  1493 269F B9 88 2D			lda adr.BAW.CM,y
  1494 26A2 8D 08 36			sta PA
  1495 26A5 B9 89 2D			lda adr.BAW.CM+1,y
  1496 26A8 8D 09 36			sta PA+1
  1497
  1498 				; optimize OK (A8LIBWIN), line = 228
  1499
  1500 26AB A9 00			lda #$00
  1501 26AD 8D 05 36			sta BL
  1502 26B0 AC 03 36			ldy BN
  1503 26B3 B9 72 2D			lda adr.BAW.BH,y
  1504 26B6 38 E9 01			sub #$01
  1505 26B9 8D BD 26			sta @FORTMP_049E_0
  1506
  1507 26BC			l_04A1
  1508 				; --- ForToDoCondition
  1509 26BC A9 00			lda @FORTMP_049E_0:#$00
  1510 26BE CD 05 36			cmp BL
  1511 26C1 90 48			jcc l_04AF
  1512
  1513 				; optimize OK (A8LIBWIN), line = 231
  1514
  1515 26C3 AC 03 36			ldy BN
  1516 26C6 B9 67 2D			lda adr.BAW.BW,y
  1517 26C9 85 84			sta SYSTEM.MOVE_00A3.COUNT
  1518 26CB AD 08 36			lda PA
  1519 26CE 85 88			sta SYSTEM.MOVE_00A3.SOURCE
  1520 26D0 AD 09 36			lda PA+1
  1521 26D3 85 89			sta SYSTEM.MOVE_00A3.SOURCE+1
  1522 26D5 AD 06 36			lda PS
  1523 26D8 85 8C			sta SYSTEM.MOVE_00A3.DEST
  1524 26DA AD 07 36			lda PS+1
  1525 26DD 85 8D			sta SYSTEM.MOVE_00A3.DEST+1
  1526 26DF A9 00			lda #$00
  1527 26E1 85 85			sta SYSTEM.MOVE_00A3.COUNT+1
  1528 26E3				.local +MAIN.SYSTEM.MOVE_00A3
  1529 26E3				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00A3.M@INLINE [Source: stubwin.a65]
     4 26E3 20 49 21			jsr @move
Source: stubwin.a65
  1530 					.endl
  1531
  1532 				; optimize OK (A8LIBWIN), line = 233
  1533
  1534 26E6 AC 03 36			ldy BN
  1535 26E9 AD 08 36			lda PA
  1536 26EC 18 79 67 2D			add adr.BAW.BW,y
  1537 26F0 8D 08 36			sta PA
  1538 26F3 90 03			scc
  1539 26F5 EE 09 36			inc PA+1
  1540
  1541 				; optimize OK (A8LIBWIN), line = 235
  1542
  1543 26F8 AD 06 36			lda PS
  1544 26FB 18 69 28			add #$28
  1545 26FE 8D 06 36			sta PS
  1546 2701 90 03			scc
  1547 2703 EE 07 36			inc PS+1
  1548
  1549 				; --- ForToDoEpilog
  1550 2706 EE 05 36			inc BL
  1551 2709 D0 B1			jne l_04A1
  1552 270B			l_04AF
  1553
  1554 				; optimize OK (A8LIBWIN), line = 239
  1555
  1556 270B AD 03 36			lda BN
  1557 270E 0A				asl @
  1558 270F A8				tay
  1559 2710 B9 9E 2D			lda adr.BAW.CZ,y
  1560 2713 85 8C			sta SYSTEM.FILLCHAR_00A2.COUNT
  1561 2715 B9 9F 2D			lda adr.BAW.CZ+1,y
  1562 2718 85 8D			sta SYSTEM.FILLCHAR_00A2.COUNT+1
  1563 271A B9 88 2D			lda adr.BAW.CM,y
  1564 271D 85 88			sta SYSTEM.FILLCHAR_00A2.A
  1565 271F B9 89 2D			lda adr.BAW.CM+1,y
  1566 2722 85 89			sta SYSTEM.FILLCHAR_00A2.A+1
  1567 2724 A9 00			lda #$00
  1568 2726 85 84			sta SYSTEM.FILLCHAR_00A2.VALUE
  1569 2728				.local +MAIN.SYSTEM.FILLCHAR_00A2
  1570 2728				m@INLINE
Macro: MAIN.SYSTEM.FILLCHAR_00A2.M@INLINE [Source: stubwin.a65]
     4 2728 20 9E 21			jsr @fill
Source: stubwin.a65
  1571 					.endl
  1572
  1573 				; optimize OK (A8LIBWIN), line = 242
  1574
  1575 272B AD 03 36			lda BN
  1576 272E 0A				asl @
  1577 272F A8				tay
  1578 2730 AD CA 35			lda CPWM
  1579 2733 38 F9 9E 2D			sub adr.BAW.CZ,y
  1580 2737 8D CA 35			sta CPWM
  1581 273A AD CB 35			lda CPWM+1
  1582 273D F9 9F 2D			sbc adr.BAW.CZ+1,y
  1583 2740 8D CB 35			sta CPWM+1
  1584
  1585 				; optimize OK (A8LIBWIN), line = 245
  1586
  1587 2743 AC 03 36			ldy BN
  1588 2746 A9 00			lda #$00
  1589 2748 99 46 2D			sta adr.BAW.BU,y
  1590
  1591 				; optimize OK (A8LIBWIN), line = 246
  1592
  1593 274B 99 51 2D			sta adr.BAW.BX,y
  1594
  1595 				; optimize OK (A8LIBWIN), line = 247
  1596
  1597 274E 99 5C 2D			sta adr.BAW.BY,y
  1598
  1599 				; optimize OK (A8LIBWIN), line = 248
  1600
  1601 2751 99 67 2D			sta adr.BAW.BW,y
  1602
  1603 				; optimize OK (A8LIBWIN), line = 249
  1604
  1605 2754 99 72 2D			sta adr.BAW.BH,y
  1606
  1607 				; optimize OK (A8LIBWIN), line = 250
  1608
  1609 2757 99 7D 2D			sta adr.BAW.BI,y
  1610
  1611 				; optimize OK (A8LIBWIN), line = 251
  1612
  1613 275A AD 03 36			lda BN
  1614 275D 0A				asl @
  1615 275E A8				tay
  1616 275F AD 92 2B			lda BAWM
  1617 2762 99 88 2D			sta adr.BAW.CM,y
  1618 2765 AD 93 2B			lda BAWM+1
  1619 2768 99 89 2D			sta adr.BAW.CM+1,y
  1620
  1621 				; optimize OK (A8LIBWIN), line = 252
  1622
  1623 276B A9 00			lda #$00
  1624 276D 99 9E 2D			sta adr.BAW.CZ,y
  1625 2770 99 9F 2D			sta adr.BAW.CZ+1,y
  1626
  1627 				; optimize OK (A8LIBWIN), line = 255
  1628
  1629 2773 8D 04 36			sta RESULT
  1630 2776			l_046B
  1631 2776			@exit
  1632
  1633 				; ------------------------------------------------------------
  1634
  1635 = 3603			BN	= DATAORIGIN+$08D3
  1636 = 3604			RESULT	= DATAORIGIN+$08D4
  1637 = 3605			BL	= DATAORIGIN+$08D5
  1638 = 3606			PS	= DATAORIGIN+$08D6
  1639 = 3608			PA	= DATAORIGIN+$08D8
  1640
  1641 = 3603			@VarData	= BN
  1642 = 0006			@VarDataSize	= 6
  1643
  1644 2776 60				rts						; ret
  1645 				.endl
  1646
  1647 2777			.local	WPRINT						; FUNCTION
  1648
  1649 				; ------------------------------------------------------------
  1650
  1651 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1652 				; as Pointer
  1653 2777 B5 94			lda :STACKORIGIN,x
  1654 2779 8D 0B 36			sta BN
  1655 277C CA				dex
  1656 277D 30 35			jmi @main
  1657
  1658 				; ------------------------------------------------------------
  1659
  1660 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1661 				; as Pointer
  1662 277F B5 94			lda :STACKORIGIN,x
  1663 2781 8D 0C 36			sta X
  1664 2784 CA				dex
  1665 2785 30 2D			jmi @main
  1666
  1667 				; ------------------------------------------------------------
  1668
  1669 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1670 				; as Pointer
  1671 2787 B5 94			lda :STACKORIGIN,x
  1672 2789 8D 0D 36			sta Y
  1673 278C CA				dex
  1674 278D 30 25			jmi @main
  1675
  1676 				; ------------------------------------------------------------
  1677
  1678 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1679 				; as Pointer
  1680 278F B5 94			lda :STACKORIGIN,x
  1681 2791 8D 0E 36			sta BI
  1682 2794 CA				dex
  1683 2795 30 1D			jmi @main
  1684
  1685 				; ------------------------------------------------------------
  1686
  1687 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1688 				; as Pointer
  1689 2797 B5 94			lda :STACKORIGIN,x
  1690 2799 85 82			sta :bp2
  1691 279B B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1692 279D 85 83			sta :bp2+1
  1693 279F A0 00			ldy #$00
  1694 27A1 B1 82 99 0F 36 C8 + 	mva:rne (:bp2),y adr.PS,y+
  1695 27A9 A9 0F 8D 5A 29 A9 + 	mwa #adr.PS PS
  1696 27B3 CA				dex
  1697 27B4			@main
  1698
  1699 				; optimize OK (A8LIBWIN), line = 364
  1700
  1701 27B4 A9 65			lda #$65
  1702 27B6 8D 0F 37			sta RESULT
  1703
  1704 				; optimize OK (A8LIBWIN), line = 367
  1705
  1706 27B9 AC 0B 36			ldy BN
  1707 27BC B9 46 2D			lda adr.BAW.BU,y
  1708 27BF C9 01			cmp #$01
  1709 27C1 F0 03 4C 59 29		jne l_0555
  1710
  1711 				; optimize OK (A8LIBWIN), line = 370
  1712
  1713 27C6 AD 0F 36			lda adr.PS
  1714 27C9 8D 10 37			sta BL
  1715
  1716 				; optimize OK (A8LIBWIN), line = 371
  1717
  1718 27CC AD 5C 29			lda CL
  1719 27CF 85 88			sta SYSTEM.SETLENGTH.S
  1720 27D1 AD 5D 29			lda CL+1
  1721 27D4 85 89			sta SYSTEM.SETLENGTH.S+1
  1722 27D6 AD 10 37			lda BL
  1723 27D9 85 8C			sta SYSTEM.SETLENGTH.LEN
  1724 27DB 20 E2 22			jsr SYSTEM.SETLENGTH
  1725
  1726 				; optimize OK (A8LIBWIN), line = 372
  1727
  1728 27DE A9 15			lda <adr.CL+$01
  1729 27E0 85 8C			sta SYSTEM.MOVE_00A3.DEST
  1730 27E2 A9 37			lda >adr.CL+$01
  1731 27E4 85 8D			sta SYSTEM.MOVE_00A3.DEST+1
  1732 27E6 A9 10			lda <adr.PS+$01
  1733 27E8 85 88			sta SYSTEM.MOVE_00A3.SOURCE
  1734 27EA A9 36			lda >adr.PS+$01
  1735 27EC 85 89			sta SYSTEM.MOVE_00A3.SOURCE+1
  1736 27EE AD 10 37			lda BL
  1737 27F1 85 84			sta SYSTEM.MOVE_00A3.COUNT
  1738 27F3 A9 00			lda #$00
  1739 27F5 85 85			sta SYSTEM.MOVE_00A3.COUNT+1
  1740 27F7				.local +MAIN.SYSTEM.MOVE_00A3
  1741 27F7				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00A3.M@INLINE [Source: stubwin.a65]
     4 27F7 20 49 21			jsr @move
Source: stubwin.a65
  1742 					.endl
  1743
  1744 				; optimize OK (A8LIBWIN), line = 381
  1745
  1746 27FA AD 0C 36			lda X
  1747 27FD C9 FF			cmp #$FF
  1748 27FF F0 67			jeq l_0592
  1749 2801 AC 0B 36			ldy BN
  1750 2804 B9 67 2D			lda adr.BAW.BW,y
  1751 2807 38 ED 0C 36			sub X
  1752 280B 85 9F			sta :STACKORIGIN+11
  1753 280D A9 00			lda #$00
  1754 280F E9 00			sbc #$00
  1755 2811 85 AF			sta :STACKORIGIN+STACKWIDTH+11
  1756 2813 A9 00			lda #$00
  1757 2815 E9 00			sbc #$00
  1758 2817 85 BF			sta :STACKORIGIN+STACKWIDTH*2+11
  1759 2819 A9 00			lda #$00
  1760 281B E9 00			sbc #$00
  1761 281D 85 CF			sta :STACKORIGIN+STACKWIDTH*3+11
  1762 281F A5 9F			lda :STACKORIGIN+11
  1763 2821 38 E9 01			sub #$01
  1764 2824 85 9F			sta :STACKORIGIN+11
  1765 2826 A5 AF			lda :STACKORIGIN+STACKWIDTH+11
  1766 2828 E9 00			sbc #$00
  1767 282A 85 AF			sta :STACKORIGIN+STACKWIDTH+11
  1768 282C A5 BF			lda :STACKORIGIN+STACKWIDTH*2+11
  1769 282E E9 00			sbc #$00
  1770 2830 85 BF			sta :STACKORIGIN+STACKWIDTH*2+11
  1771 2832 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+11
  1772 2834 E9 00			sbc #$00
  1773 2836 D0 0D			bne @+
  1774 2838 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+11
  1775 283A D0 09			bne @+
  1776 283C A5 AF			lda :STACKORIGIN+STACKWIDTH+11
  1777 283E D0 05			bne @+
  1778 2840 AD 10 37			lda BL
  1779 2843 C5 9F			cmp :STACKORIGIN+11
  1780 				@
  1781 2845 90 21			jcc l_0592
  1782 2847 F0 1F			jeq l_0592
  1783
  1784 				; optimize OK (A8LIBWIN), line = 384
  1785
  1786 2849 B9 67 2D			lda adr.BAW.BW,y
  1787 284C 38 ED 0C 36			sub X
  1788 2850 38 E9 01			sub #$01
  1789 2853 8D 10 37			sta BL
  1790
  1791 				; optimize OK (A8LIBWIN), line = 385
  1792
  1793 2856 AD 5C 29			lda CL
  1794 2859 85 88			sta SYSTEM.SETLENGTH.S
  1795 285B AD 5D 29			lda CL+1
  1796 285E 85 89			sta SYSTEM.SETLENGTH.S+1
  1797 2860 AD 10 37			lda BL
  1798 2863 85 8C			sta SYSTEM.SETLENGTH.LEN
  1799 2865 20 E2 22			jsr SYSTEM.SETLENGTH
  1800 2868			l_0592
  1801
  1802 				; optimize OK (A8LIBWIN), line = 389
  1803
  1804 2868 A9 15			lda <adr.CL+$01
  1805 286A 8D 41 2D			sta A8LIBSTR.STRAI.PS
  1806 286D A9 37			lda >adr.CL+$01
  1807 286F 8D 42 2D			sta A8LIBSTR.STRAI.PS+1
  1808 2872 AD 10 37			lda BL
  1809 2875 8D 43 2D			sta A8LIBSTR.STRAI.BS
  1810 2878 20 28 23			jsr A8LIBSTR.STRAI
  1811
  1812 				; optimize OK (A8LIBWIN), line = 392
  1813
  1814 287B AC 0B 36			ldy BN
  1815 287E B9 7D 2D			lda adr.BAW.BI,y
  1816 2881 C9 01			cmp #$01
  1817 2883 F0 07			jeq l_05D4x
  1818 2885 AD 0E 36			lda BI
  1819 2888 C9 01			cmp #$01
  1820 288A D0 13			jne l_05D4
  1821 288C			l_05D4x
  1822
  1823 				; optimize OK (A8LIBWIN), line = 394
  1824
  1825 288C A9 15			lda <adr.CL+$01
  1826 288E 8D 3C 2D			sta A8LIBSTR.STRINV.PS
  1827 2891 A9 37			lda >adr.CL+$01
  1828 2893 8D 3D 2D			sta A8LIBSTR.STRINV.PS+1
  1829 2896 AD 10 37			lda BL
  1830 2899 8D 3E 2D			sta A8LIBSTR.STRINV.BS
  1831 289C 20 F5 22			jsr A8LIBSTR.STRINV
  1832 289F			l_05D4
  1833
  1834 				; optimize OK (A8LIBWIN), line = 398
  1835
  1836 289F A5 58			lda $0058
  1837 28A1 85 9D			sta :STACKORIGIN+9
  1838 28A3 A5 59			lda $0058+1
  1839 28A5 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1840 28A7 AC 0B 36			ldy BN
  1841 28AA B9 5C 2D			lda adr.BAW.BY,y
  1842 28AD 20 2F 22			jsr @mul40
  1843 28B0 18 65 9D			add :STACKORIGIN+9
  1844 28B3 85 9D			sta :STACKORIGIN+9
  1845 28B5 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1846 28B7 65 85			adc :eax+1
  1847 28B9 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1848 28BB AC 0B 36			ldy BN
  1849 28BE A5 9D			lda :STACKORIGIN+9
  1850 28C0 18 79 51 2D			add adr.BAW.BX,y
  1851 28C4 8D 12 37			sta CS
  1852 28C7 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1853 28C9 69 00			adc #$00
  1854 28CB 8D 13 37			sta CS+1
  1855
  1856 				; optimize OK (A8LIBWIN), line = 401
  1857
  1858 28CE AD 0D 36			lda Y
  1859 28D1 20 2F 22			jsr @mul40
  1860 28D4 18 6D 12 37			add CS
  1861 28D8 8D 12 37			sta CS
  1862 28DB AD 13 37			lda CS+1
  1863 28DE 65 85			adc :eax+1
  1864 28E0 8D 13 37			sta CS+1
  1865
  1866 				; optimize OK (A8LIBWIN), line = 404
  1867
  1868 28E3 AD 0C 36			lda X
  1869 28E6 C9 FF			cmp #$FF
  1870 28E8 F0 12			jeq l_0610
  1871
  1872 				; optimize OK (A8LIBWIN), line = 407
  1873
  1874 28EA AD 12 37			lda CS
  1875 28ED 18 6D 0C 36			add X
  1876 28F1 8D 12 37			sta CS
  1877 28F4 90 03			scc
  1878 28F6 EE 13 37			inc CS+1
  1879 28F9 4C 36 29			jmp l_061D
  1880 28FC			l_0610
  1881
  1882 				; optimize OK (A8LIBWIN), line = 411
  1883
  1884 28FC AC 0B 36			ldy BN
  1885 28FF B9 67 2D			lda adr.BAW.BW,y
  1886 2902 38 ED 10 37			sub BL
  1887 2906 85 84			sta :eax
  1888 2908 A9 00			lda #$00
  1889 290A E9 00			sbc #$00
  1890 290C 85 85			sta :eax+1
  1891 290E A9 00			lda #$00
  1892 2910 E9 00			sbc #$00
  1893 2912 85 86			sta :eax+2
  1894 2914 A9 00			lda #$00
  1895 2916 E9 00			sbc #$00
  1896 2918 85 87			sta :eax+3
  1897 291A A9 02			lda #$02
  1898 291C 85 8C			sta :ecx
  1899 291E A9 00			lda #$00
  1900 2920 85 8D			sta :ecx+1
  1901 2922 20 FE 21			jsr idivEAX_CX
  1902 2925 AD 12 37			lda CS
  1903 2928 18 65 84			add :eax
  1904 292B 8D 12 37			sta CS
  1905 292E AD 13 37			lda CS+1
  1906 2931 65 85			adc :eax+1
  1907 2933 8D 13 37			sta CS+1
  1908 2936			l_061D
  1909
  1910 				; optimize OK (A8LIBWIN), line = 415
  1911
  1912 2936 A9 15			lda <adr.CL+$01
  1913 2938 85 88			sta SYSTEM.MOVE_00A3.SOURCE
  1914 293A A9 37			lda >adr.CL+$01
  1915 293C 85 89			sta SYSTEM.MOVE_00A3.SOURCE+1
  1916 293E AD 12 37			lda CS
  1917 2941 85 8C			sta SYSTEM.MOVE_00A3.DEST
  1918 2943 AD 13 37			lda CS+1
  1919 2946 85 8D			sta SYSTEM.MOVE_00A3.DEST+1
  1920 2948 AD 10 37			lda BL
  1921 294B 85 84			sta SYSTEM.MOVE_00A3.COUNT
  1922 294D A9 00			lda #$00
  1923 294F 85 85			sta SYSTEM.MOVE_00A3.COUNT+1
  1924 2951				.local +MAIN.SYSTEM.MOVE_00A3
  1925 2951				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00A3.M@INLINE [Source: stubwin.a65]
     4 2951 20 49 21			jsr @move
Source: stubwin.a65
  1926 					.endl
  1927
  1928 				; optimize OK (A8LIBWIN), line = 418
  1929
  1930 2954 A9 00			lda #$00
  1931 2956 8D 0F 37			sta RESULT
  1932 2959			l_0555
  1933 2959			@exit
  1934
  1935 				; ------------------------------------------------------------
  1936
  1937 = 360B			BN	= DATAORIGIN+$08DB
  1938 = 360C			X	= DATAORIGIN+$08DC
  1939 = 360D			Y	= DATAORIGIN+$08DD
  1940 = 360E			BI	= DATAORIGIN+$08DE
  1941 = 360F			adr.PS	= [DATAORIGIN+$08DF] .array [256]
  1942 2959			.var PS	= adr.PS .word
  1943 = 370F			RESULT	= DATAORIGIN+$09DF
  1944 = 3710			BL	= DATAORIGIN+$09E0
  1945 = 3711			TMP	= DATAORIGIN+$09E1
  1946 = 3712			CS	= DATAORIGIN+$09E2
  1947 = 3714			adr.CL	= [DATAORIGIN+$09E4] .array [130]
  1948 2959			.var CL	= adr.CL .word
  1949
  1950 = 360B			@VarData	= BN
  1951 = 018A			@VarDataSize	= 394
  1952
  1953 2959 60				rts						; ret
  1954 = 295A 0F 36		PS
  1954 = 295C 14 37		CL
  1954 				.endl
  1955
  1956 295E			.local	WORN						; FUNCTION
  1957
  1958 				; ------------------------------------------------------------
  1959
  1960 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1961 				; as Pointer
  1962 295E B5 94			lda :STACKORIGIN,x
  1963 2960 8D 96 37			sta BN
  1964 2963 CA				dex
  1965 2964 30 2D			jmi @main
  1966
  1967 				; ------------------------------------------------------------
  1968
  1969 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1970 				; as Pointer
  1971 2966 B5 94			lda :STACKORIGIN,x
  1972 2968 8D 97 37			sta BT
  1973 296B CA				dex
  1974 296C 30 25			jmi @main
  1975
  1976 				; ------------------------------------------------------------
  1977
  1978 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1979 				; as Pointer
  1980 296E B5 94			lda :STACKORIGIN,x
  1981 2970 8D 98 37			sta BL
  1982 2973 CA				dex
  1983 2974 30 1D			jmi @main
  1984
  1985 				; ------------------------------------------------------------
  1986
  1987 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1988 				; as Pointer
  1989 2976 B5 94			lda :STACKORIGIN,x
  1990 2978 85 82			sta :bp2
  1991 297A B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1992 297C 85 83			sta :bp2+1
  1993 297E A0 00			ldy #$00
  1994 2980 B1 82 99 99 37 C8 + 	mva:rne (:bp2),y adr.PS,y+
  1995 2988 A9 99 8D 7A 2B A9 + 	mwa #adr.PS PS
  1996 2992 CA				dex
  1997 2993			@main
  1998
  1999 				; optimize OK (A8LIBWIN), line = 440
  2000
  2001 2993 A9 65			lda #$65
  2002 2995 8D 99 38			sta RESULT
  2003
  2004 				; optimize OK (A8LIBWIN), line = 443
  2005
  2006 2998 AC 96 37			ldy BN
  2007 299B B9 46 2D			lda adr.BAW.BU,y
  2008 299E C9 01			cmp #$01
  2009 29A0 F0 03 4C 79 2B		jne l_0665
  2010
  2011 				; optimize OK (A8LIBWIN), line = 446
  2012
  2013 29A5 AD 99 37			lda adr.PS
  2014 29A8 18 69 02			add #$02
  2015 29AB 8D 9A 38			sta BS
  2016
  2017 				; optimize OK (A8LIBWIN), line = 447
  2018
  2019 29AE AD 7C 2B			lda CL
  2020 29B1 85 88			sta SYSTEM.SETLENGTH.S
  2021 29B3 AD 7D 2B			lda CL+1
  2022 29B6 85 89			sta SYSTEM.SETLENGTH.S+1
  2023 29B8 AD 9A 38			lda BS
  2024 29BB 85 8C			sta SYSTEM.SETLENGTH.LEN
  2025 29BD 20 E2 22			jsr SYSTEM.SETLENGTH
  2026
  2027 				; optimize OK (A8LIBWIN), line = 448
  2028
  2029 29C0 A9 04			lda #$04
  2030 29C2 8D 9E 38			sta adr.CL+$01
  2031
  2032 				; optimize OK (A8LIBWIN), line = 449
  2033
  2034 29C5 AD 99 37			lda adr.PS
  2035 29C8 85 84			sta SYSTEM.MOVE_00A3.COUNT
  2036 29CA A9 9F			lda <adr.CL+$02
  2037 29CC 85 8C			sta SYSTEM.MOVE_00A3.DEST
  2038 29CE A9 38			lda >adr.CL+$02
  2039 29D0 85 8D			sta SYSTEM.MOVE_00A3.DEST+1
  2040 29D2 A9 9A			lda <adr.PS+$01
  2041 29D4 85 88			sta SYSTEM.MOVE_00A3.SOURCE
  2042 29D6 A9 37			lda >adr.PS+$01
  2043 29D8 85 89			sta SYSTEM.MOVE_00A3.SOURCE+1
  2044 29DA A9 00			lda #$00
  2045 29DC 85 85			sta SYSTEM.MOVE_00A3.COUNT+1
  2046 29DE				.local +MAIN.SYSTEM.MOVE_00A3
  2047 29DE				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00A3.M@INLINE [Source: stubwin.a65]
     4 29DE 20 49 21			jsr @move
Source: stubwin.a65
  2048 					.endl
  2049
  2050 				; optimize OK (A8LIBWIN), line = 450
  2051
  2052 29E1 AC 9A 38			ldy BS
  2053 29E4 A9 01			lda #$01
  2054 29E6 99 9D 38			sta adr.CL,y
  2055
  2056 				; optimize OK (A8LIBWIN), line = 453
  2057
  2058 29E9 A9 9E			lda <adr.CL+$01
  2059 29EB 8D 41 2D			sta A8LIBSTR.STRAI.PS
  2060 29EE A9 38			lda >adr.CL+$01
  2061 29F0 8D 42 2D			sta A8LIBSTR.STRAI.PS+1
  2062 29F3 AD 9A 38			lda BS
  2063 29F6 8D 43 2D			sta A8LIBSTR.STRAI.BS
  2064 29F9 20 28 23			jsr A8LIBSTR.STRAI
  2065
  2066 				; optimize OK (A8LIBWIN), line = 456
  2067
  2068 29FC AC 96 37			ldy BN
  2069 29FF B9 7D 2D			lda adr.BAW.BI,y
  2070 2A02 C9 01			cmp #$01
  2071 2A04 D0 16			jne l_069C
  2072
  2073 				; optimize OK (A8LIBWIN), line = 458
  2074
  2075 2A06 A9 9E			lda <adr.CL+$01
  2076 2A08 8D 3C 2D			sta A8LIBSTR.STRINV.PS
  2077 2A0B A9 38			lda >adr.CL+$01
  2078 2A0D 8D 3D 2D			sta A8LIBSTR.STRINV.PS+1
  2079 2A10 AD 9A 38			lda BS
  2080 2A13 8D 3E 2D			sta A8LIBSTR.STRINV.BS
  2081 2A16 20 F5 22			jsr A8LIBSTR.STRINV
  2082 2A19 4C 32 2A			jmp l_06AB
  2083 2A1C			l_069C
  2084
  2085 				; optimize OK (A8LIBWIN), line = 463
  2086
  2087 2A1C AD 9A 38			lda BS
  2088 2A1F 38 E9 02			sub #$02
  2089 2A22 8D 3E 2D			sta A8LIBSTR.STRINV.BS
  2090 2A25 A9 9F			lda <adr.CL+$02
  2091 2A27 8D 3C 2D			sta A8LIBSTR.STRINV.PS
  2092 2A2A A9 38			lda >adr.CL+$02
  2093 2A2C 8D 3D 2D			sta A8LIBSTR.STRINV.PS+1
  2094 2A2F 20 F5 22			jsr A8LIBSTR.STRINV
  2095 2A32			l_06AB
  2096
  2097 				; optimize OK (A8LIBWIN), line = 467
  2098
  2099 2A32 A5 58			lda $0058
  2100 2A34 85 9D			sta :STACKORIGIN+9
  2101 2A36 A5 59			lda $0058+1
  2102 2A38 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2103 2A3A AC 96 37			ldy BN
  2104 2A3D B9 5C 2D			lda adr.BAW.BY,y
  2105 2A40 20 2F 22			jsr @mul40
  2106 2A43 18 65 9D			add :STACKORIGIN+9
  2107 2A46 8D 9B 38			sta CS
  2108 2A49 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2109 2A4B 65 85			adc :eax+1
  2110 2A4D 8D 9C 38			sta CS+1
  2111
  2112 				; optimize OK (A8LIBWIN), line = 470
  2113
  2114 2A50 AD 97 37			lda BT
  2115 2A53 C9 F2			cmp #$F2
  2116 2A55 D0 1B			jne l_06D8
  2117
  2118 				; optimize OK (A8LIBWIN), line = 472
  2119
  2120 2A57 AC 96 37			ldy BN
  2121 2A5A B9 72 2D			lda adr.BAW.BH,y
  2122 2A5D 38 E9 01			sub #$01
  2123 2A60 20 2F 22			jsr @mul40
  2124 2A63 18 6D 9B 38			add CS
  2125 2A67 8D 9B 38			sta CS
  2126 2A6A AD 9C 38			lda CS+1
  2127 2A6D 65 85			adc :eax+1
  2128 2A6F 8D 9C 38			sta CS+1
  2129 2A72			l_06D8
  2130
  2131 				; optimize OK (A8LIBWIN), line = 476
  2132
  2133 2A72 AD 98 37			lda BL
  2134 2A75 C9 FB			cmp #$FB
  2135 2A77 D0 25			jne l_06FB
  2136
  2137 				; optimize OK (A8LIBWIN), line = 478
  2138
  2139 2A79 AC 96 37			ldy BN
  2140 2A7C B9 51 2D			lda adr.BAW.BX,y
  2141 2A7F 18 69 01			add #$01
  2142 2A82 85 9D			sta :STACKORIGIN+9
  2143 2A84 A9 00			lda #$00
  2144 2A86 69 00			adc #$00
  2145 2A88 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2146 2A8A AD 9B 38			lda CS
  2147 2A8D 18 65 9D			add :STACKORIGIN+9
  2148 2A90 8D 9B 38			sta CS
  2149 2A93 AD 9C 38			lda CS+1
  2150 2A96 65 AD			adc :STACKORIGIN+STACKWIDTH+9
  2151 2A98 8D 9C 38			sta CS+1
  2152 2A9B 4C 56 2B			jmp l_070F
  2153 2A9E			l_06FB
  2154
  2155 				; optimize OK (A8LIBWIN), line = 481
  2156
  2157 2A9E AD 98 37			lda BL
  2158 2AA1 C9 FC			cmp #$FC
  2159 2AA3 D0 65			jne l_0721
  2160
  2161 				; optimize OK (A8LIBWIN), line = 483
  2162
  2163 2AA5 AC 96 37			ldy BN
  2164 2AA8 B9 51 2D			lda adr.BAW.BX,y
  2165 2AAB 18 79 67 2D			add adr.BAW.BW,y
  2166 2AAF 85 9D			sta :STACKORIGIN+9
  2167 2AB1 A9 00			lda #$00
  2168 2AB3 69 00			adc #$00
  2169 2AB5 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2170 2AB7 A9 00			lda #$00
  2171 2AB9 69 00			adc #$00
  2172 2ABB 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
  2173 2ABD A9 00			lda #$00
  2174 2ABF 69 00			adc #$00
  2175 2AC1 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
  2176 2AC3 A5 9D			lda :STACKORIGIN+9
  2177 2AC5 38 ED 9A 38			sub BS
  2178 2AC9 85 9D			sta :STACKORIGIN+9
  2179 2ACB A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2180 2ACD E9 00			sbc #$00
  2181 2ACF 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2182 2AD1 A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
  2183 2AD3 E9 00			sbc #$00
  2184 2AD5 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
  2185 2AD7 A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
  2186 2AD9 E9 00			sbc #$00
  2187 2ADB 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
  2188 2ADD A5 9D			lda :STACKORIGIN+9
  2189 2ADF 38 E9 01			sub #$01
  2190 2AE2 85 9D			sta :STACKORIGIN+9
  2191 2AE4 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  2192 2AE6 E9 00			sbc #$00
  2193 2AE8 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2194 2AEA A5 BD			lda :STACKORIGIN+STACKWIDTH*2+9
  2195 2AEC E9 00			sbc #$00
  2196 2AEE 85 BD			sta :STACKORIGIN+STACKWIDTH*2+9
  2197 2AF0 A5 CD			lda :STACKORIGIN+STACKWIDTH*3+9
  2198 2AF2 E9 00			sbc #$00
  2199 2AF4 85 CD			sta :STACKORIGIN+STACKWIDTH*3+9
  2200 2AF6 AD 9B 38			lda CS
  2201 2AF9 18 65 9D			add :STACKORIGIN+9
  2202 2AFC 8D 9B 38			sta CS
  2203 2AFF AD 9C 38			lda CS+1
  2204 2B02 65 AD			adc :STACKORIGIN+STACKWIDTH+9
  2205 2B04 8D 9C 38			sta CS+1
  2206 2B07 4C 56 2B			jmp l_0744
  2207 2B0A			l_0721
  2208
  2209 				; optimize OK (A8LIBWIN), line = 487
  2210
  2211 2B0A AC 96 37			ldy BN
  2212 2B0D B9 51 2D			lda adr.BAW.BX,y
  2213 2B10 85 9D			sta :STACKORIGIN+9
  2214 2B12 B9 67 2D			lda adr.BAW.BW,y
  2215 2B15 38 ED 9A 38			sub BS
  2216 2B19 85 84			sta :eax
  2217 2B1B A9 00			lda #$00
  2218 2B1D E9 00			sbc #$00
  2219 2B1F 85 85			sta :eax+1
  2220 2B21 A9 00			lda #$00
  2221 2B23 E9 00			sbc #$00
  2222 2B25 85 86			sta :eax+2
  2223 2B27 A9 00			lda #$00
  2224 2B29 E9 00			sbc #$00
  2225 2B2B 85 87			sta :eax+3
  2226 2B2D A9 02			lda #$02
  2227 2B2F 85 8C			sta :ecx
  2228 2B31 A9 00			lda #$00
  2229 2B33 85 8D			sta :ecx+1
  2230 2B35 20 FE 21			jsr idivEAX_CX
  2231 2B38 A5 9D			lda :STACKORIGIN+9
  2232 2B3A 18 65 84			add :eax
  2233 2B3D 85 9D			sta :STACKORIGIN+9
  2234 2B3F A9 00			lda #$00
  2235 2B41 65 85			adc :eax+1
  2236 2B43 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  2237 2B45 AD 9B 38			lda CS
  2238 2B48 18 65 9D			add :STACKORIGIN+9
  2239 2B4B 8D 9B 38			sta CS
  2240 2B4E AD 9C 38			lda CS+1
  2241 2B51 65 AD			adc :STACKORIGIN+STACKWIDTH+9
  2242 2B53 8D 9C 38			sta CS+1
  2243 2B56			l_0744
  2244 2B56			l_070F
  2245
  2246 				; optimize OK (A8LIBWIN), line = 491
  2247
  2248 2B56 A9 9E			lda <adr.CL+$01
  2249 2B58 85 88			sta SYSTEM.MOVE_00A3.SOURCE
  2250 2B5A A9 38			lda >adr.CL+$01
  2251 2B5C 85 89			sta SYSTEM.MOVE_00A3.SOURCE+1
  2252 2B5E AD 9B 38			lda CS
  2253 2B61 85 8C			sta SYSTEM.MOVE_00A3.DEST
  2254 2B63 AD 9C 38			lda CS+1
  2255 2B66 85 8D			sta SYSTEM.MOVE_00A3.DEST+1
  2256 2B68 AD 9A 38			lda BS
  2257 2B6B 85 84			sta SYSTEM.MOVE_00A3.COUNT
  2258 2B6D A9 00			lda #$00
  2259 2B6F 85 85			sta SYSTEM.MOVE_00A3.COUNT+1
  2260 2B71				.local +MAIN.SYSTEM.MOVE_00A3
  2261 2B71				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00A3.M@INLINE [Source: stubwin.a65]
     4 2B71 20 49 21			jsr @move
Source: stubwin.a65
  2262 					.endl
  2263
  2264 				; optimize OK (A8LIBWIN), line = 494
  2265
  2266 2B74 A9 00			lda #$00
  2267 2B76 8D 99 38			sta RESULT
  2268 2B79			l_0665
  2269 2B79			@exit
  2270
  2271 				; ------------------------------------------------------------
  2272
  2273 = 3796			BN	= DATAORIGIN+$0A66
  2274 = 3797			BT	= DATAORIGIN+$0A67
  2275 = 3798			BL	= DATAORIGIN+$0A68
  2276 = 3799			adr.PS	= [DATAORIGIN+$0A69] .array [256]
  2277 2B79			.var PS	= adr.PS .word
  2278 = 3899			RESULT	= DATAORIGIN+$0B69
  2279 = 389A			BS	= DATAORIGIN+$0B6A
  2280 = 389B			CS	= DATAORIGIN+$0B6B
  2281 = 389D			adr.CL	= [DATAORIGIN+$0B6D] .array [37]
  2282 2B79			.var CL	= adr.CL .word
  2283
  2284 = 3796			@VarData	= BN
  2285 = 012B			@VarDataSize	= 299
  2286
  2287 2B79 60				rts						; ret
  2288 = 2B7A 99 37		PS
  2288 = 2B7C 9D 38		CL
  2288 				.endl
  2289
  2290 				; ------------------------------------------------------------
  2291
  2292 = 2D46			adr.BAW	= DATAORIGIN+$0016	; [110] RECORD
  2293 2B7E			.var BAW	= adr.BAW .word
  2294 = 2D46			adr.BAW.BU	= [DATAORIGIN+$0016] .array [11]
  2295 2B7E			.var BAW.BU	= adr.BAW.BU .word
  2296 = 2D51			adr.BAW.BX	= [DATAORIGIN+$0021] .array [11]
  2297 2B7E			.var BAW.BX	= adr.BAW.BX .word
  2298 = 2D5C			adr.BAW.BY	= [DATAORIGIN+$002C] .array [11]
  2299 2B7E			.var BAW.BY	= adr.BAW.BY .word
  2300 = 2D67			adr.BAW.BW	= [DATAORIGIN+$0037] .array [11]
  2301 2B7E			.var BAW.BW	= adr.BAW.BW .word
  2302 = 2D72			adr.BAW.BH	= [DATAORIGIN+$0042] .array [11]
  2303 2B7E			.var BAW.BH	= adr.BAW.BH .word
  2304 = 2D7D			adr.BAW.BI	= [DATAORIGIN+$004D] .array [11]
  2305 2B7E			.var BAW.BI	= adr.BAW.BI .word
  2306 = 2D88			adr.BAW.CM	= [DATAORIGIN+$0058] .array [11] .word
  2307 2B7E			.var BAW.CM	= adr.BAW.CM .word
  2308 = 2D9E			adr.BAW.CZ	= [DATAORIGIN+$006E] .array [11] .word
  2309 2B7E			.var BAW.CZ	= adr.BAW.CZ .word
  2310 = 2DB4			adr.VCUR	= DATAORIGIN+$0084	; [2] RECORD
  2311 2B7E			.var VCUR	= adr.VCUR .word
  2312 = 2DB4			VCUR.VX	= DATAORIGIN+$0084
  2313 = 2DB5			VCUR.VY	= DATAORIGIN+$0085
  2314 = 2DB6			adr.BAWM	= [DATAORIGIN+$0086] .array [2068]
  2315 2B7E			.var BAWM	= adr.BAWM .word
  2316 = 35CA			CPWM	= DATAORIGIN+$089A
  2317
  2318 = 2B7E 46 2D		BAW
  2318 = 2B80 46 2D		BAW.BU
  2318 = 2B82 51 2D		BAW.BX
  2318 = 2B84 5C 2D		BAW.BY
  2318 = 2B86 67 2D		BAW.BW
  2318 = 2B88 72 2D		BAW.BH
  2318 = 2B8A 7D 2D		BAW.BI
  2318 = 2B8C 88 2D		BAW.CM
  2318 = 2B8E 9E 2D		BAW.CZ
  2318 = 2B90 B4 2D		VCUR
  2318 = 2B92 B6 2D		BAWM
  2318 				.endl							; UNIT A8LIBWIN
  2319
  2320 				; ------------------------------------------------------------
  2321
  2322 2B94			.local	A8LIBMISC					; UNIT
  2323
  2324 2B94			.local	WAITKCX						; FUNCTION
  2325 2B94 8D C2 38			sta BI
  2326
  2327 				; optimize OK (A8LIBMISC), line = 88
  2328
  2329 2B97 A9 00			lda #$00
  2330 2B99 8D C3 38			sta RESULT
  2331 2B9C 8D C4 38			sta RESULT+1
  2332
  2333 				; --- WhileProlog
  2334 2B9F			l_0778
  2335
  2336 				; optimize OK (A8LIBMISC), line = 91
  2337
  2338 2B9F AD FD 02			lda $02FC+1
  2339 2BA2 D0 05			bne @+
  2340 2BA4 AD FC 02			lda $02FC
  2341 2BA7 C9 FF			cmp #$FF
  2342 				@
  2343 2BA9 D0 0C			jne l_0778w
  2344 2BAB AD 1F D0			lda $D01F
  2345 2BAE C9 07			cmp #$07
  2346 2BB0 D0 05			jne l_0778w
  2347 2BB2 AD DC 02			lda $02DC
  2348 2BB5 F0 E8			jeq l_0778
  2349 2BB7			l_0778w
  2350
  2351 				; optimize OK (A8LIBMISC), line = 94
  2352
  2353 2BB7 AD FC 02			lda $02FC
  2354 2BBA 8D C5 38			sta BK
  2355
  2356 				; optimize OK (A8LIBMISC), line = 95
  2357
  2358 2BBD AD 1F D0			lda $D01F
  2359 2BC0 8D C6 38			sta BC
  2360
  2361 				; optimize OK (A8LIBMISC), line = 96
  2362
  2363 2BC3 AD DC 02			lda $02DC
  2364 2BC6 8D C7 38			sta BH
  2365
  2366 				; optimize OK (A8LIBMISC), line = 99
  2367
  2368 2BC9 AD C6 38			lda BC
  2369 2BCC C9 07			cmp #$07
  2370 2BCE F0 0B			jeq l_07BA
  2371
  2372 				; optimize OK (A8LIBMISC), line = 101
  2373
  2374 2BD0 8D C3 38			sta RESULT
  2375 2BD3 A9 01			lda #$01
  2376 2BD5 8D C4 38			sta RESULT+1
  2377 2BD8 4C 42 2C			jmp l_07CE
  2378 2BDB			l_07BA
  2379
  2380 				; optimize OK (A8LIBMISC), line = 104
  2381
  2382 2BDB AD C7 38			lda BH
  2383 2BDE F0 10			jeq l_07E0
  2384
  2385 				; optimize OK (A8LIBMISC), line = 106
  2386
  2387 2BE0 A9 11			lda #$11
  2388 2BE2 8D C3 38			sta RESULT
  2389 2BE5 A9 00			lda #$00
  2390 2BE7 8D C4 38			sta RESULT+1
  2391
  2392 				; optimize OK (A8LIBMISC), line = 107
  2393
  2394 2BEA 8D DC 02			sta $02DC
  2395 2BED 4C 42 2C			jmp l_07F1
  2396 2BF0			l_07E0
  2397
  2398 				; optimize OK (A8LIBMISC), line = 110
  2399
  2400 2BF0 AD C5 38			lda BK
  2401 2BF3 C9 3C			cmp #$3C
  2402 2BF5 D0 19			jne l_0803
  2403
  2404 				; optimize OK (A8LIBMISC), line = 112
  2405
  2406 2BF7 8D C3 38			sta RESULT
  2407 2BFA A9 00			lda #$00
  2408 2BFC 8D C4 38			sta RESULT+1
  2409
  2410 				; optimize OK (A8LIBMISC), line = 115
  2411
  2412 2BFF AD BE 02			lda $02BE
  2413 2C02 8D C8 38			sta BU
  2414
  2415 				; optimize OK (A8LIBMISC), line = 116
  2416
  2417 2C05 49 40			eor #$40
  2418 2C07 8D C8 38			sta BU
  2419
  2420 				; optimize OK (A8LIBMISC), line = 117
  2421
  2422 2C0A 8D BE 02			sta $02BE
  2423 2C0D 4C 42 2C			jmp l_0827
  2424 2C10			l_0803
  2425
  2426 				; optimize OK (A8LIBMISC), line = 120
  2427
  2428 2C10 AD C5 38			lda BK
  2429 2C13 C9 27			cmp #$27
  2430 2C15 D0 20			jne l_0839
  2431
  2432 				; optimize OK (A8LIBMISC), line = 122
  2433
  2434 2C17 8D C3 38			sta RESULT
  2435 2C1A A9 00			lda #$00
  2436 2C1C 8D C4 38			sta RESULT+1
  2437
  2438 				; optimize OK (A8LIBMISC), line = 125
  2439
  2440 2C1F AD C2 38			lda BI
  2441 2C22 C9 01			cmp #$01
  2442 2C24 D0 0E			jne l_0852
  2443
  2444 				; optimize OK (A8LIBMISC), line = 128
  2445
  2446 2C26 AD B6 02			lda $02B6
  2447 2C29 8D C8 38			sta BU
  2448
  2449 				; optimize OK (A8LIBMISC), line = 129
  2450
  2451 2C2C 49 80			eor #$80
  2452 2C2E 8D C8 38			sta BU
  2453
  2454 				; optimize OK (A8LIBMISC), line = 130
  2455
  2456 2C31 8D B6 02			sta $02B6
  2457 2C34			l_0852
  2458 2C34 4C 42 2C			jmp l_0872
  2459 2C37			l_0839
  2460
  2461 				; optimize OK (A8LIBMISC), line = 135
  2462
  2463 2C37 AD C5 38			lda BK
  2464 2C3A 8D C3 38			sta RESULT
  2465 2C3D A9 00			lda #$00
  2466 2C3F 8D C4 38			sta RESULT+1
  2467 2C42			l_0872
  2468 2C42			l_0827
  2469 2C42			l_07F1
  2470 2C42			l_07CE
  2471
  2472 				; optimize OK (A8LIBMISC), line = 139
  2473
  2474 2C42 A9 FF			lda #$FF
  2475 2C44 8D FC 02			sta $02FC
  2476 2C47			@exit
  2477
  2478 				; ------------------------------------------------------------
  2479
  2480 = 38C2			BI	= DATAORIGIN+$0B92
  2481 = 38C3			RESULT	= DATAORIGIN+$0B93
  2482 = 38C5			BK	= DATAORIGIN+$0B95
  2483 = 38C6			BC	= DATAORIGIN+$0B96
  2484 = 38C7			BH	= DATAORIGIN+$0B97
  2485 = 38C8			BU	= DATAORIGIN+$0B98
  2486
  2487 = 38C2			@VarData	= BI
  2488 = 0005			@VarDataSize	= 5
  2489
  2490 2C47 60				rts						; ret
  2491 				.endl
  2492
  2493 				; ------------------------------------------------------------
  2494
  2495 				.endl							; UNIT A8LIBMISC
  2496 2C48			l_0052
  2497
  2498 				; optimize FAIL ('A8LIBWIN.WINIT', stubwin.pas), line = 22
  2499
  2500 2C48 20 0C 24			jsr A8LIBWIN.WINIT
  2501
  2502 				; optimize OK (stubwin.pas), line = 25
  2503
  2504 2C4B A9 08			lda #$08
  2505 2C4D 8D CD 35			sta A8LIBWIN.WOPEN.X
  2506 2C50 A9 05			lda #$05
  2507 2C52 8D CE 35			sta A8LIBWIN.WOPEN.Y
  2508 2C55 A9 18			lda #$18
  2509 2C57 8D CF 35			sta A8LIBWIN.WOPEN.W
  2510 2C5A A9 09			lda #$09
  2511 2C5C 8D D0 35			sta A8LIBWIN.WOPEN.H
  2512 2C5F A9 00			lda #$00
  2513 2C61 8D D1 35			sta A8LIBWIN.WOPEN.BT
  2514 2C64 20 84 24			jsr A8LIBWIN.WOPEN
  2515 2C67 AD D2 35			lda A8LIBWIN.WOPEN.RESULT
  2516 2C6A 8D C9 38			sta BW1
  2517
  2518 				; optimize FAIL ('A8LIBWIN.WORN', stubwin.pas), line = 26
  2519
  2520 2C6D E8				inx
  2521 2C6E A9 19 95 94			mva #$19 :STACKORIGIN,x
  2522 2C72 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  2523 2C76 E8				inx
  2524 2C77 A9 FB 95 94			mva #$FB :STACKORIGIN,x
  2525 2C7B E8				inx
  2526 2C7C A9 F1 95 94			mva #$F1 :STACKORIGIN,x
  2527 2C80 E8				inx
  2528 2C81 AD C9 38 95 94		mva BW1 :STACKORIGIN,x
  2529 2C86 20 5E 29			jsr A8LIBWIN.WORN
  2530
  2531 				; optimize FAIL ('A8LIBWIN.WPRINT', stubwin.pas), line = 27
  2532
  2533 2C89 E8				inx
  2534 2C8A A9 1F 95 94			mva #$1F :STACKORIGIN,x
  2535 2C8E A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  2536 2C92 E8				inx
  2537 2C93 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2538 2C97 E8				inx
  2539 2C98 A9 02 95 94			mva #$02 :STACKORIGIN,x
  2540 2C9C E8				inx
  2541 2C9D A9 05 95 94			mva #$05 :STACKORIGIN,x
  2542 2CA1 E8				inx
  2543 2CA2 AD C9 38 95 94		mva BW1 :STACKORIGIN,x
  2544 2CA7 20 77 27			jsr A8LIBWIN.WPRINT
  2545
  2546 				; optimize FAIL ('A8LIBWIN.WPRINT', stubwin.pas), line = 28
  2547
  2548 2CAA E8				inx
  2549 2CAB A9 28 95 94			mva #$28 :STACKORIGIN,x
  2550 2CAF A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  2551 2CB3 E8				inx
  2552 2CB4 A9 01 95 94			mva #$01 :STACKORIGIN,x
  2553 2CB8 E8				inx
  2554 2CB9 A9 02 95 94			mva #$02 :STACKORIGIN,x
  2555 2CBD E8				inx
  2556 2CBE A9 0C 95 94			mva #$0C :STACKORIGIN,x
  2557 2CC2 E8				inx
  2558 2CC3 AD C9 38 95 94		mva BW1 :STACKORIGIN,x
  2559 2CC8 20 77 27			jsr A8LIBWIN.WPRINT
  2560
  2561 				; optimize FAIL ('A8LIBWIN.WPRINT', stubwin.pas), line = 29
  2562
  2563 2CCB E8				inx
  2564 2CCC A9 31 95 94			mva #$31 :STACKORIGIN,x
  2565 2CD0 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  2566 2CD4 E8				inx
  2567 2CD5 A9 00 95 94			mva #$00 :STACKORIGIN,x
  2568 2CD9 E8				inx
  2569 2CDA A9 04 95 94			mva #$04 :STACKORIGIN,x
  2570 2CDE E8				inx
  2571 2CDF A9 FF 95 94			mva #$FF :STACKORIGIN,x
  2572 2CE3 E8				inx
  2573 2CE4 AD C9 38 95 94		mva BW1 :STACKORIGIN,x
  2574 2CE9 20 77 27			jsr A8LIBWIN.WPRINT
  2575
  2576 				; optimize FAIL ('A8LIBWIN.WPRINT', stubwin.pas), line = 30
  2577
  2578 2CEC E8				inx
  2579 2CED A9 45 95 94			mva #$45 :STACKORIGIN,x
  2580 2CF1 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  2581 2CF5 E8				inx
  2582 2CF6 A9 01 95 94			mva #$01 :STACKORIGIN,x
  2583 2CFA E8				inx
  2584 2CFB A9 06 95 94			mva #$06 :STACKORIGIN,x
  2585 2CFF E8				inx
  2586 2D00 A9 FF 95 94			mva #$FF :STACKORIGIN,x
  2587 2D04 E8				inx
  2588 2D05 AD C9 38 95 94		mva BW1 :STACKORIGIN,x
  2589 2D0A 20 77 27			jsr A8LIBWIN.WPRINT
  2590
  2591 				; optimize OK (stubwin.pas), line = 33
  2592
  2593 2D0D A9 00			lda #$00
  2594 2D0F 20 94 2B			jsr A8LIBMISC.WAITKCX
  2595
  2596 				; optimize OK (stubwin.pas), line = 36
  2597
  2598 2D12 AD C9 38			lda BW1
  2599 2D15 20 59 26			jsr A8LIBWIN.WCLOSE
  2600
  2601 				; ------------------------------------------------------------
  2602
  2603 = 38C9			BW1	= DATAORIGIN+$0B99
  2604 2D18			@exit
  2605
  2606 2D18 A2 00		@halt	ldx #$00
  2607 2D1A 9A				txs
  2608 					.ifdef MAIN.@DEFINES.ROMOFF
  2609 					inc portb
  2610 					.fi
  2611
  2612 2D1B A0 01			ldy #$01
  2613
  2614 2D1D 60				rts
  2615
  2616 				; ------------------------------------------------------------
  2617
  2618 2D1E 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  2619
  2620 				; ------------------------------------------------------------
  2621
  2622 2D2E			.local	@DEFINES
  2623 2D2E			ATARI
  2624 				.endl
  2625
  2626 2D2E			.local	@RESOURCE
  2627 				.endl
  2628
  2629 				.endl							; MAIN
  2630
  2631 				; ------------------------------------------------------------
  2632 				; ------------------------------------------------------------
  2633
  2634 				.macro	UNITINITIALIZATION
  2635 				
  2636 					.ifdef MAIN.SYSTEM.@UnitInit
  2637 					jsr MAIN.SYSTEM.@UnitInit
  2638 					.fi
  2639 				
  2640 					.ifdef MAIN.A8DEFINES.@UnitInit
  2641 					jsr MAIN.A8DEFINES.@UnitInit
  2642 					.fi
  2643 				
  2644 					.ifdef MAIN.A8DEFWIN.@UnitInit
  2645 					jsr MAIN.A8DEFWIN.@UnitInit
  2646 					.fi
  2647 				
  2648 					.ifdef MAIN.ATARI.@UnitInit
  2649 					jsr MAIN.ATARI.@UnitInit
  2650 					.fi
  2651 				
  2652 					.ifdef MAIN.CRT.@UnitInit
  2653 					jsr MAIN.CRT.@UnitInit
  2654 					.fi
  2655 				
  2656 					.ifdef MAIN.DOS.@UnitInit
  2657 					jsr MAIN.DOS.@UnitInit
  2658 					.fi
  2659 				
  2660 					.ifdef MAIN.STRUTILS.@UnitInit
  2661 					jsr MAIN.STRUTILS.@UnitInit
  2662 					.fi
  2663 				
  2664 					.ifdef MAIN.SYSUTILS.@UnitInit
  2665 					jsr MAIN.SYSUTILS.@UnitInit
  2666 					.fi
  2667 				
  2668 					.ifdef MAIN.A8LIBSTR.@UnitInit
  2669 					jsr MAIN.A8LIBSTR.@UnitInit
  2670 					.fi
  2671 				
  2672 					.ifdef MAIN.A8LIBWIN.@UnitInit
  2673 					jsr MAIN.A8LIBWIN.@UnitInit
  2674 					.fi
  2675 				
  2676 					.ifdef MAIN.A8LIBMISC.@UnitInit
  2677 					jsr MAIN.A8LIBMISC.@UnitInit
  2678 					.fi
  2679 				.endm
  2680
  2681 				; ------------------------------------------------------------
  2682
  2683 					ift .SIZEOF(MAIN.SYSTEM) > 0
  2684 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  2684 				SYSTEM: $2298..$22EC
  2685 					eif
  2686
  2687 					ift .SIZEOF(MAIN.A8DEFINES) > 0
  2688 					.print 'A8DEFINES: ',MAIN.A8DEFINES,'..',MAIN.A8DEFINES+.SIZEOF(MAIN.A8DEFINES)-1
  2688 				A8DEFINES: $22ED..$22EE
  2689 					eif
  2690
  2691 					ift .SIZEOF(MAIN.A8DEFWIN) > 0
  2692 					.print 'A8DEFWIN: ',MAIN.A8DEFWIN,'..',MAIN.A8DEFWIN+.SIZEOF(MAIN.A8DEFWIN)-1
  2693 					eif
  2694
  2695 					ift .SIZEOF(MAIN.ATARI) > 0
  2696 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  2697 					eif
  2698
  2699 					ift .SIZEOF(MAIN.CRT) > 0
  2700 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  2700 				CRT: $22EF..$22F4
  2701 					eif
  2702
  2703 					ift .SIZEOF(MAIN.DOS) > 0
  2704 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  2705 					eif
  2706
  2707 					ift .SIZEOF(MAIN.STRUTILS) > 0
  2708 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  2709 					eif
  2710
  2711 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  2712 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  2713 					eif
  2714
  2715 					ift .SIZEOF(MAIN.A8LIBSTR) > 0
  2716 					.print 'A8LIBSTR: ',MAIN.A8LIBSTR,'..',MAIN.A8LIBSTR+.SIZEOF(MAIN.A8LIBSTR)-1
  2716 				A8LIBSTR: $22F5..$240B
  2717 					eif
  2718
  2719 					ift .SIZEOF(MAIN.A8LIBWIN) > 0
  2720 					.print 'A8LIBWIN: ',MAIN.A8LIBWIN,'..',MAIN.A8LIBWIN+.SIZEOF(MAIN.A8LIBWIN)-1
  2720 				A8LIBWIN: $240C..$2B93
  2721 					eif
  2722
  2723 					ift .SIZEOF(MAIN.A8LIBMISC) > 0
  2724 					.print 'A8LIBMISC: ',MAIN.A8LIBMISC,'..',MAIN.A8LIBMISC+.SIZEOF(MAIN.A8LIBMISC)-1
  2724 				A8LIBMISC: $2B94..$2C47
  2725 					eif
  2726
  2727 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  2727 				CODE: $2000..$2D2D
  2728
  2729 				; ------------------------------------------------------------
  2730
  2731 2D2E				.align $0004
  2732
  2733 2D30			DATAORIGIN
  2734 2D30-2D35> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  2735
  2736 = 0006			VARINITSIZE	= *-DATAORIGIN
  2737 = 0B9A			VARDATASIZE	= 2970
  2738
  2739 = 38CA			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  2740
  2741 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  2741 				DATA: $2D30..$38CA
  2742
  2743 02E0-02E1> 5D 22			run START
  2744
  2745 				; ------------------------------------------------------------
  2746
  2747 				.macro	STATICDATA
  2748 				.by  $05 $31 $2E $30 $2E $30 $00 $04  $54 $52 $55 $45 $00 $05 $46 $41  $4C $53 $45 $00 $03 $20 $20 $20
  2749 				.by  $00 $04 $53 $74 $75 $62 $00 $07  $49 $6E $76 $65 $72 $73 $65 $00  $07 $41 $54 $41 $53 $43 $49 $49
  2750 				.by  $00 $12 $55 $6E $66 $69 $6E $69  $73 $68 $65 $64 $20 $42 $69 $74  $6E $65 $73 $73 $00 $04 $20 $4F
  2751 				.by  $6B $20 $00 $6C $6A $3B $C7 $C7  $6B $2B $2A $6F $C7 $70 $75 $9B  $69 $2D $3D $76 $C7 $63 $C7 $C7
  2752 				.by  $62 $78 $7A $34 $C7 $33 $36 $C7  $35 $32 $31 $2C $20 $2E $6E $C7  $6D $2F $C7 $72 $C7 $65 $79 $C7
  2753 				.by  $74 $77 $71 $39 $C7 $30 $37 $C7  $38 $3C $3E $66 $68 $64 $C7 $C7  $67 $73 $61 $4C $4A $3A $C7 $C7
  2754 				.by  $4B $5C $5E $4F $C7 $50 $55 $C7  $49 $5F $7C $56 $C7 $43 $C7 $C7  $42 $58 $5A $24 $C7 $23 $26 $C7
  2755 				.by  $25 $22 $21 $5B $20 $5D $4E $C7  $4D $3F $C7 $52 $C7 $45 $59 $C7  $54 $57 $51 $28 $C7 $29 $27 $C7
  2756 				.by  $40 $C7 $C7 $46 $48 $44 $C7 $C7  $47 $53 $41 $0C $0A $7B $C7 $C7  $0B $C7 $C7 $0F $C7 $10 $15 $C7
  2757 				.by  $09 $C7 $C7 $16 $C7 $03 $C7 $C7  $02 $18 $1A $C7 $C7 $C7 $C7 $C7  $C7 $C7 $C7 $C7 $C7 $60 $0E $C7
  2758 				.by  $0D $C7 $C7 $12 $C7 $05 $19 $C7  $14 $17 $11 $C7 $C7 $C7 $C7 $C7  $C7 $C7 $C7 $06 $08 $04 $C7 $C7
  2759 				.by  $07 $13 $01
  2760 				.endm
  2761
  2762 					end
